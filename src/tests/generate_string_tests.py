import os
import itertools

def generate_string_tests(nbArgs):
    letters = ["A", "B", "C", "D", "E", "F"]
    letters = letters[:nbArgs]

    result = ""
    i = 0
    print(f"Generating string tests for {nbArgs} arguments")

    for p in itertools.product(letters, repeat=nbArgs):
        skip = False
        for letterIndex, letter in enumerate(p):
            #Skip duplicates by not allowing permutations with skipped letters ("A B C" is the same as "A C D")
            if any(l not in p for l in letters if l < letter):
                skip = True
                #print(f"Skipping permutation {p} due to skipped letters")
                break
            #Also skip duplicates where letters are not in alphabetical order ("A B" is the same as "B A")
            if not all(l in p[:letterIndex] for l in letters if l < letter):
                skip = True
                #print(f"Skipping permutation {p} due to non-alphabetical order")
                break
        if skip:
            continue
        print("Generating permutation:", p)
        result += f" A = f'{nbArgs}-{i} ({','.join(p)}): {" ".join(["{"+l+"}" for l in p])}'\n"
        i += 1

    return f"rule '{nbArgs} arg{'' if nbArgs == 1 else 's'}':\n" + result + "\n"

result = "# This is autogenerated, use the generate_string_tests.py script to regenerate.\n\n"

for i in range(1, 8):
    result += generate_string_tests(i)

with open(os.path.join(os.path.dirname(__file__), "strings_args.opy"), "w+", newline="\n", encoding="utf-8") as f:
    f.write(result)

print("Done")
