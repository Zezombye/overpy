settings
{
	main
	{
		Description: "Change nights through workshop settings (orange card)\nDMG46 / Release 1.0.4 (March 2024) / Alomare#11266"
		Mode Name: "Five Nights at Ecopoint"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: Paused
		Match Voice Chat: Enabled
		Max Spectators: 12
		Max Team 1 Players: 1
		Max Team 2 Players: 0
		Return To Lobby: After A Game
	}

	modes
	{
		disabled Elimination
		{
			Capture Objective Tiebreaker: Disabled
		}

		Team Deathmatch
		{
			Self Initiated Respawn: Off

			enabled maps
			{
				Ecopoint: Antarctica Winter 972777519512063901
			}
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Kill Feed: Disabled
			Respawn As Random Hero: Enabled
			Respawn Time Scalar: 0%
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		Team 1
		{
			Mei
			{
				Cryo-Freeze: Disabled
				Ice Wall: Disabled
				No Ammunition Requirement: On
				Primary Fire: Disabled
				Secondary Fire: Disabled
				Ultimate Ability Blizzard: Disabled
			}

			Reinhardt
			{
				Charge Cooldown Time: 0%
			}
		}

		Team 2
		{
			Spawn With Ultimate Ready: Enabled
		}

		General
		{
			enabled heroes
			{
				Mei
			}
		}
	}

	extensions
	{
		Beam Effects
		Beam Sounds
		Buff Status Effects
		Debuff Status Effects
		Buff and Debuff Sounds
		Energy Explosion Effects
		Explosion Sounds
		Play More Effects
	}
}

variables
{
	global:
		0: NightNumber
		1: AutoRestart
		2: NoJumpscares
		3: Cheats
		4: Echo
		5: Orisa
		6: Genji
		7: Bastion
		8: Zen
		9: CamShake
		10: CurrentCam
		11: Player
		12: LastCam
		13: InteractCams
		14: CamsJammed
		15: TextChatOn
		16: CurrentTime
		17: Power
		18: NightPhase
		19: ClosedFrontDoor
		20: InteractFrontDoor
		21: ClosedLeftDoor
		22: InteractLeftDoor
		23: ClosedRightDoor
		24: InteractRightDoor
		25: PowerUsage
		26: BastionPhase
		27: EchoPhase
		28: ZenDoorNumber
		29: Blinded
		30: PhoneRings
		31: CamPositions
		32: HeightFrontDoor
		33: HeightRightDoor
		34: HeightLeftDoor
		35: DoorsWalkable
		36: CamLookAts
		37: ZenAI
		38: BastionAI
		39: OrisaAI
		40: EchoAI
		41: GenjiAI
		42: OrisaMeter
		43: OrisaAIPrevious
		44: HeaterPower
		45: WarningIconVisible
		46: ZenPositions
		47: ZenPositions2
		48: ZenPickedCamAndPos
		49: BarValue
		50: BarTextAndColor

	player:
		0: HasMoved
}

subroutines
{
	0: OutlineFix
	1: CameraShake
	2: CamsJammed
	3: PhoneRing
	4: BastionJumpscare
	5: EchoJumpscare
	6: OrisaJumpscare
	7: GenjiJumpscare
	8: ZenSequence
	9: ZenJumpscare
	10: Night6Call
	11: ZenDoor
	12: ZenMove
}

rule("[WS] Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.NightNumber = Workshop Setting Combo(Custom String("GENERAL"), Custom String("NIGHT NUMBER"), 0, Array(Custom String(
			"NIGHT 1"), Custom String("NIGHT 2"), Custom String("NIGHT 3"), Custom String("NIGHT 4"), Custom String("NIGHT 5"),
			Custom String("NIGHT 6"), Custom String("CUSTOM NIGHT")), 0);
		Global.AutoRestart = Workshop Setting Toggle(Custom String("GENERAL"), Custom String("AUTO-RESTART ON DEATH"), False, 1);
		Global.NoJumpscares = Workshop Setting Toggle(Custom String("GENERAL"), Custom String("NO JUMPSCARES MODE"), False, 2);
		"CHEATS"
		Global.Cheats[0] = Workshop Setting Toggle(Custom String("CHEATS"), Custom String("SHOW ENEMY INFO"), False, 0);
		Global.Cheats[1] = Workshop Setting Toggle(Custom String("CHEATS"), Custom String("UNLIMITED POWER"), False, 0);
	}
}

rule("OutlineFix")
{
	event
	{
		Subroutine;
		OutlineFix;
	}

	actions
	{
		Teleport(All Players(Team 2), Vector(0, -1000, 0));
		Kill(All Players(Team 2), Null);
		Wait(0.016, Ignore Condition);
		Start Forcing Player Outlines(All Players(All Teams), All Players(All Teams), False, Null, Default);
		Wait(0.016, Ignore Condition);
		Resurrect(All Players(Team 2));
		Set Status(Global.Echo, Null, Knocked Down, 99999);
		Set Status(Global.Orisa, Null, Knocked Down, 99999);
		Set Status(Global.Genji, Null, Knocked Down, 99999);
		Teleport(Global.Bastion, Vector(-12.740, 7, -49.920));
		Teleport(Global.Echo, Vector(28.620, 3, 2.900));
		Teleport(Global.Orisa, Vector(-10.700, 8.520, -0.370));
		Teleport(Global.Genji, Vector(-2.600, 7, 54.500));
		Teleport(Global.Zen, Vector(2, 7.400, 22.400));
	}
}

rule("[SR] Camera Shake")
{
	event
	{
		Subroutine;
		CameraShake;
	}

	actions
	{
		Global.CamShake = Vector(Random Real(-0.100, 0.100), Random Real(-0.100, 0.100), Random Real(-0.100, 0.100));
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("[SR] Cams Jammed")
{
	event
	{
		Subroutine;
		CamsJammed;
	}

	actions
	{
		If(Global.CurrentCam);
			Clear Status(Global.Player, Rooted);
			Set Gravity(Global.Player, 100);
			Global.LastCam = Global.CurrentCam;
			Stop Camera(Global.Player);
			Set Facing(Global.Player, Direction Towards(Eye Position(Global.Player), Global.InteractCams), To World);
			Global.CurrentCam = 0;
		End;
		Chase Global Variable At Rate(CamsJammed, 0, 1, None);
		Global.CamsJammed += 9;
		Wait(0.050, Ignore Condition);
		Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Sound, Color(Team 1), Global.InteractCams, 55);
		Wait Until(!Global.CamsJammed, 99999);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Global.InteractCams, 0.250);
	}
}

rule("[EP] Toggle Text Chat")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		If(Global.TextChatOn);
			Disable Text Chat(Event Player);
			Small Message(All Players(All Teams), Custom String("TEXT CHAT DISABLED"));
			Global.TextChatOn = 0;
		Else;
			Enable Text Chat(Event Player);
			Small Message(All Players(All Teams), Custom String("TEXT CHAT ENABLED"));
			Global.TextChatOn = 1;
		End;
		Wait(0.500, Ignore Condition);
	}
}

rule("[G] Defeat")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.Player;
	}

	actions
	{
		Enable Built-In Game Mode Music;
		Declare Team Victory(Team 2);
		Abort If(!Global.AutoRestart);
		Wait(2, Ignore Condition);
		Restart Match;
	}
}

rule("[G] Victory")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.CurrentTime >= 6;
		Global.NightNumber != 5;
	}

	actions
	{
		Enable Built-In Game Mode Music;
		Declare Team Victory(Team 1);
	}
}

rule("[G] Power 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.Power <= 0;
		Is Alive(Global.Player) == True;
		Global.NightPhase >= 3;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Play Effect(All Players(All Teams), LÃºcio Sound Barrier Cast Sound, Color(Team 1), Global.InteractCams, 100);
		If(Global.ClosedFrontDoor);
			Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Color(Team 2), Global.InteractFrontDoor, 35);
			Chase Global Variable Over Time(HeightFrontDoor, 0.010, 0.400, None);
			Global.ClosedFrontDoor = 0;
		End;
		If(Global.ClosedLeftDoor);
			Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Color(Team 2), Global.InteractLeftDoor, 35);
			Chase Global Variable Over Time(HeightLeftDoor, 0.010, 0.400, None);
			Global.ClosedLeftDoor = 0;
		End;
		If(Global.ClosedRightDoor);
			Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Color(Team 2), Global.InteractRightDoor, 35);
			Chase Global Variable Over Time(HeightRightDoor, 0.010, 0.400, None);
			Global.ClosedRightDoor = 0;
		End;
		Global.PowerUsage = 0;
	}
}

rule("[G] Rein Charge")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Players In Slot(1, Team 1)) == True;
		(Is True For Any(Array(Global.BastionPhase, Global.EchoPhase), Current Array Element >= 3 || Current Array Element <= -3)
			|| Global.ZenDoorNumber) == True;
		Is Using Ability 1(Players In Slot(1, Team 1)) == False;
	}

	actions
	{
		Cancel Primary Action(Players In Slot(1, Team 1));
		Set Ability Cooldown(Players In Slot(1, Team 1), Button(Ability 1), 0);
		Press Button(Players In Slot(1, Team 1), Button(Ability 1));
		Wait Until(!Is Using Ability 1(Players In Slot(1, Team 1)), 99999);
		Loop If Condition Is True;
	}
}

rule("[G] Main Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"REIN"
		Create Dummy Bot(Hero(Reinhardt), Team 1, 1, Vector(0, 200, 0), Vector(-1, 0, 0));
		Start Forcing Player Position(Players In Slot(1, Team 1), Vector(0, 200, 0), False);
		Set Invisible(Players In Slot(1, Team 1), All);
		"STUFF"
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Music;
		Disable Built-In Game Mode Scoring;
		Disable Inspector Recording;
		Global.NightPhase = 999;
		Wait Until(Is Game In Progress && Has Spawned(Players In Slot(0, Team 1)), 99999);
		Start Rule(OutlineFix, Restart Rule);
		Pause Match Time;
		Global.Player = Players In Slot(0, Team 1);
		Global.Power = 100;
		Global.PowerUsage = 1;
		Chase Global Variable Over Time(CurrentTime, 6, 512, None);
		Create Effect(Global.Blinded ? Global.Player : Null, Sphere, Color(Black), Global.Player, 100, Visible To Position and Radius);
		Teleport(Global.Player, Vector(-1.060, 7.400, -27.550));
		Set Facing(Global.Player, Vector(0.700, 0, 0.700), To World);
		Disable Scoreboard(All Players(All Teams));
		Disable Game Mode HUD(All Players(All Teams));
		Disable Hero HUD(All Players(All Teams));
		Start Forcing Player Outlines(All Players(All Teams), All Players(All Teams), False, Color(White), Default);
		Disable Nameplates(All Players(All Teams), All Players(All Teams));
		Disable Text Chat(All Players(All Teams));
		Set Knockback Received(All Players(All Teams), 0);
		Set Damage Dealt(Global.Player, 0);
		"HUD"
		Skip If(Global.NightNumber == 5, 1);
		Create HUD Text(All Players(All Teams), Custom String("{0} AM", Global.CurrentTime < 1 ? 12 : Round To Integer(Global.CurrentTime,
			Down)), Custom String("NIGHT {0}", Global.NightNumber + 1), Is True For Any(Global.Cheats, Current Array Element)
			? Custom String("CHEATS ENABLED") : String(""), Right, 0, Color(White), Color(White), Color(Turquoise), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("POWER: {0}%", Round To Integer(Global.Power, Down)), Null, Null, Left, 0,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(" \r\nUSAGE"), String Slice(Custom String("{0}{0}{0}{0}{0}",
			Custom String("â ")), 0, Global.PowerUsage), Left, 1, Color(White), Color(White), Global.PowerUsage <= 2 ? Color(Green) : (
			Global.PowerUsage > 2 && Global.PowerUsage <= 3 ? Color(Yellow) : Color(Red)), Visible To String and Color,
			Default Visibility);
		Create In-World Text(Global.PhoneRings ? Local Player : Null, Custom String("HOLD [{0}] TO ANSWER PHONE OR WAIT TO IGNORE",
			Input Binding String(Button(Ability 1))), Update Every Frame((
			Global.CurrentCam ? Global.CamPositions[Global.CurrentCam] : Eye Position(Global.Player)) + Direction From Angles(
			Horizontal Facing Angle Of(Global.Player), Vertical Facing Angle Of(Global.Player) + 18) * 1000), 1.500, Do Not Clip,
			Visible To Position and String, Custom Color(255, 255, 255, 200), Default Visibility);
		Create In-World Text(!Global.CurrentCam ? Global.Player : Null, Custom String("â"), Update Every Frame(Eye Position(Global.Player)
			+ Direction From Angles(Horizontal Facing Angle Of(Global.Player), Vertical Facing Angle Of(Global.Player) + 3.870) * 1000),
			2.300, Do Not Clip, Visible To Position and String, Custom Color(255, 255, 255, 170), Default Visibility);
	}
}

disabled rule("DOORS")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[G] Doors FX")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		"Heights"
		Global.HeightFrontDoor = 0.010;
		Global.HeightRightDoor = 0.010;
		Global.HeightLeftDoor = 0.010;
		"Interact"
		Global.InteractFrontDoor = Vector(6.990, 8.920, -22.780);
		Global.InteractRightDoor = Vector(-1.800, 8.800, -23.510);
		Global.InteractLeftDoor = Vector(0.700, 8.800, -30.660);
		Create Effect(All Players(All Teams), Sphere, Global.ClosedFrontDoor ? Color(Red) : Color(Gray), Global.InteractFrontDoor, 0.150,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Sphere, Global.ClosedRightDoor ? Color(Red) : Color(Gray), Global.InteractRightDoor, 0.150,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Sphere, Global.ClosedLeftDoor ? Color(Red) : Color(Gray), Global.InteractLeftDoor, 0.150,
			Visible To Position Radius and Color);
		Wait(0.050, Ignore Condition);
		Skip If(Global.NightNumber >= 1, 4);
		Create In-World Text(Global.CurrentTime < 1 && !Global.CurrentCam ? All Players(All Teams) : Null, Custom String("FRONT GATE"),
			Global.InteractFrontDoor, 0.900, Do Not Clip, Visible To Position and String, Custom Color(255, 255, 255, 175),
			Default Visibility);
		Create In-World Text(Global.CurrentTime < 1 && !Global.CurrentCam ? All Players(All Teams) : Null, Custom String("LEFT GATE"),
			Global.InteractLeftDoor, 0.900, Do Not Clip, Visible To Position and String, Custom Color(255, 255, 255, 175),
			Default Visibility);
		Create In-World Text(Global.CurrentTime < 1 && !Global.CurrentCam ? All Players(All Teams) : Null, Custom String("RIGHT GATE"),
			Global.InteractRightDoor, 0.900, Do Not Clip, Visible To Position and String, Custom Color(255, 255, 255, 175),
			Default Visibility);
		Wait(0.050, Ignore Condition);
		Create Effect(Distance Between(Eye Position(Global.Player), Global.InteractFrontDoor) < 2 && Angle Between Vectors(
			Facing Direction Of(Global.Player), Direction Towards(Eye Position(Global.Player), Global.InteractFrontDoor))
			< 30 ? All Players(All Teams) : Null, Sphere, Color(White), Global.InteractFrontDoor, 0.065,
			Visible To Position Radius and Color);
		Create Effect(Distance Between(Eye Position(Global.Player), Global.InteractRightDoor) < 2 && Angle Between Vectors(
			Facing Direction Of(Global.Player), Direction Towards(Eye Position(Global.Player), Global.InteractRightDoor))
			< 30 ? All Players(All Teams) : Null, Sphere, Color(White), Global.InteractRightDoor, 0.065,
			Visible To Position Radius and Color);
		Create Effect(Distance Between(Eye Position(Global.Player), Global.InteractLeftDoor) < 2 && Angle Between Vectors(
			Facing Direction Of(Global.Player), Direction Towards(Eye Position(Global.Player), Global.InteractLeftDoor))
			< 30 ? All Players(All Teams) : Null, Sphere, Color(White), Global.InteractLeftDoor, 0.065,
			Visible To Position Radius and Color);
		Wait(0.050, Ignore Condition);
		"FRONT BEAMS"
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(5.960, 10.880, -20.880), Vector(5.960,
			10.880 + Global.HeightFrontDoor, -20.880), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(5.640, 10.880, -20.570), Vector(5.640,
			10.880 + Global.HeightFrontDoor, -20.570), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(5.330, 10.880, -20.260), Vector(5.330,
			10.880 + Global.HeightFrontDoor, -20.260), Color(White), Visible To Position and Radius);
		Wait(0.050, Ignore Condition);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(6.270, 10.880, -21.190), Vector(6.270,
			10.880 + Global.HeightFrontDoor, -21.190), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(6.570, 10.880, -21.500), Vector(6.570,
			10.880 + Global.HeightFrontDoor, -21.500), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(6.810, 10.880 + Global.HeightFrontDoor, -21.740), Vector(5.090,
			10.880 + Global.HeightFrontDoor, -20.020), Color(White), Visible To Position and Radius);
		Wait(0.050, Ignore Condition);
		"LEFT BEAMS"
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(2.480, 10.880, -30.140), Vector(2.480,
			10.880 + Global.HeightLeftDoor, -30.140), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(2.790, 10.880, -29.830), Vector(2.790,
			10.880 + Global.HeightLeftDoor, -29.830), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(3.100, 10.880, -29.520), Vector(3.100,
			10.880 + Global.HeightLeftDoor, -29.520), Color(White), Visible To Position and Radius);
		Wait(0.050, Ignore Condition);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(2.170, 10.880, -30.450), Vector(2.170,
			10.880 + Global.HeightLeftDoor, -30.450), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(1.860, 10.880, -30.760), Vector(1.860,
			10.880 + Global.HeightLeftDoor, -30.760), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(1.640, 10.880 + Global.HeightLeftDoor, -31), Vector(3.330,
			10.880 + Global.HeightLeftDoor, -29.290), Color(White), Visible To Position and Radius);
		Wait(0.050, Ignore Condition);
		"RIGHT BEAMS"
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(-3.300, 10.880, -24.360), Vector(-3.300,
			10.880 + Global.HeightRightDoor, -24.360), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(-3.610, 10.880, -24.670), Vector(-3.610,
			10.880 + Global.HeightRightDoor, -24.670), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(-3.920, 10.880, -24.980), Vector(-3.920,
			10.880 + Global.HeightRightDoor, -24.980), Color(White), Visible To Position and Radius);
		Wait(0.050, Ignore Condition);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(-2.990, 10.880, -24.050), Vector(-2.990,
			10.880 + Global.HeightRightDoor, -24.050), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Vector(-2.680, 10.880, -23.740), Vector(-2.680,
			10.880 + Global.HeightRightDoor, -23.740), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(-2.450, 10.880 + Global.HeightRightDoor, -23.510), Vector(-4.150,
			10.880 + Global.HeightRightDoor, -25.210), Color(White), Visible To Position and Radius);
	}
}

rule("[G] Front Door Interact")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Eye Position(Global.Player), Global.InteractFrontDoor) < 2;
		Angle Between Vectors(Facing Direction Of(Global.Player), Direction Towards(Eye Position(Global.Player), Global.InteractFrontDoor))
			< 30;
		Is Button Held(Global.Player, Button(Interact)) == True;
		Is In Line of Sight(Eye Position(Global.Player), Global.InteractFrontDoor, Barriers Do Not Block LOS) == True;
	}

	actions
	{
		If(Global.Power);
			If(Global.ClosedFrontDoor);
				Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Color(Team 2), Global.InteractFrontDoor, 35);
				Chase Global Variable Over Time(HeightFrontDoor, 0.010, 0.400, None);
				Global.ClosedFrontDoor = 0;
				Global.PowerUsage -= 1;
				Wait(0.400, Ignore Condition);
			Else;
				Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Color(Team 2), Global.InteractFrontDoor, 50);
				Chase Global Variable Over Time(HeightFrontDoor, -3.500, 0.400, None);
				Global.ClosedFrontDoor = 1;
				Global.PowerUsage += 1;
				Wait(0.400, Ignore Condition);
				Abort If(!Global.Power);
				Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Sound, Color(Team 2), Global.InteractFrontDoor, 8);
			End;
		Else;
			Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Global.InteractFrontDoor, 125);
		End;
	}
}

rule("[G] Left Door Interact")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Eye Position(Global.Player), Global.InteractLeftDoor) < 2;
		Angle Between Vectors(Facing Direction Of(Global.Player), Direction Towards(Eye Position(Global.Player), Global.InteractLeftDoor))
			< 30;
		Is Button Held(Global.Player, Button(Interact)) == True;
		Is In Line of Sight(Eye Position(Global.Player), Global.InteractLeftDoor, Barriers Do Not Block LOS) == True;
	}

	actions
	{
		If(Global.Power);
			If(Global.ClosedLeftDoor);
				Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Color(Team 2), Global.InteractLeftDoor, 35);
				Chase Global Variable Over Time(HeightLeftDoor, 0.010, 0.400, None);
				Global.ClosedLeftDoor = 0;
				Global.PowerUsage -= 1;
				Wait(0.400, Ignore Condition);
			Else;
				Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Color(Team 2), Global.InteractLeftDoor, 50);
				Chase Global Variable Over Time(HeightLeftDoor, -3.500, 0.400, None);
				Global.ClosedLeftDoor = 1;
				Global.PowerUsage += 1;
				Wait(0.400, Ignore Condition);
				Abort If(!Global.Power);
				Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Sound, Color(Team 2), Global.InteractLeftDoor, 8);
			End;
		Else;
			Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Global.InteractLeftDoor, 125);
		End;
	}
}

rule("[G] Right Door Interact")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Eye Position(Global.Player), Global.InteractRightDoor) < 2;
		Angle Between Vectors(Facing Direction Of(Global.Player), Direction Towards(Eye Position(Global.Player), Global.InteractRightDoor))
			< 30;
		Is Button Held(Global.Player, Button(Interact)) == True;
		Is In Line of Sight(Eye Position(Global.Player), Global.InteractRightDoor, Barriers Do Not Block LOS) == True;
	}

	actions
	{
		If(Global.Power);
			If(Global.ClosedRightDoor);
				Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Color(Team 2), Global.InteractRightDoor, 35);
				Chase Global Variable Over Time(HeightRightDoor, 0.010, 0.400, None);
				Global.ClosedRightDoor = 0;
				Global.PowerUsage -= 1;
				Wait(0.400, Ignore Condition);
			Else;
				Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Color(Team 2), Global.InteractRightDoor, 50);
				Chase Global Variable Over Time(HeightRightDoor, -3.500, 0.400, None);
				Global.ClosedRightDoor = 1;
				Global.PowerUsage += 1;
				Wait(0.400, Ignore Condition);
				Abort If(!Global.Power);
				Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Sound, Color(Team 2), Global.InteractRightDoor, 8);
			End;
		Else;
			Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Global.InteractRightDoor, 125);
		End;
	}
}

rule("[G] Front Door Barrier")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Position Of(Global.Player), Vector(8.210, 7.380, -18.620)) < 4;
		(!Global.DoorsWalkable || Global.ClosedFrontDoor) == True;
	}

	actions
	{
		Apply Impulse(Global.Player, Direction Towards(Vector(8.430, 7.380, -18.400), Position Of(Global.Player)), 4, To World,
			Cancel Contrary Motion);
		Wait(0.020, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[G] Left Door Barrier")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Position Of(Global.Player), Vector(4.810, 7.380, -32.440)) < 4;
		(!Global.DoorsWalkable || Global.ClosedLeftDoor) == True;
	}

	actions
	{
		Apply Impulse(Global.Player, Direction Towards(Vector(5.020, 7.380, -32.660), Position Of(Global.Player)), 4, To World,
			Cancel Contrary Motion);
		Wait(0.020, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("[G] Right Door Barrier")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Position Of(Global.Player), Vector(-5.650, 7.380, -22.060)) < 4;
		(!Global.DoorsWalkable || Global.ClosedRightDoor) == True;
	}

	actions
	{
		Apply Impulse(Global.Player, Direction Towards(Vector(-5.870, 7.380, -21.840), Position Of(Global.Player)), 4, To World,
			Cancel Contrary Motion);
		Wait(0.020, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("CAMERAS")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[G] Cams Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.CamPositions = Array(Null, Vector(1.367, 9.276, -54.926), Vector(-5.500, 10, -27), Vector(-10.080, 9.750, -8.960), Vector(
			20.450, 3.380, 1.080), Vector(18, 7.100, -6.600), Vector(21.700, 11.510, -8.910), Vector(-3.800, 10.400, 52.800));
		Global.CamLookAts = Array(Null, Vector(-0.970, -0.100, 0.200), Vector(-0.700, -0.250, -0.700), Vector(-0.400, -0.300, 0.870),
			Vector(1, 0, 0), Vector(0, -0.300, -1), Vector(0.600, -0.150, 0.790), Vector(-0.180, -0.780, 0.600));
		Global.InteractCams = Vector(0.550, 8.400, -22.200);
		Global.CurrentCam = 0;
		Global.LastCam = 1;
		Skip If(Global.NightNumber >= 1, 1);
		Create In-World Text(Global.CurrentTime < 1 && !Global.CurrentCam ? Local Player : Null, Custom String(
			"[{0}] TO ENTER/LEAVE CAMERAS", Input Binding String(Button(Interact))), Global.InteractCams, 1, Do Not Clip,
			Visible To Position and String, Custom Color(255, 255, 255, 200), Default Visibility);
		Create HUD Text(Global.CurrentCam ? All Players(All Teams) : Null, Custom String("CAM {0}", Global.CurrentCam), Null, Null, Top, 0,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Global.CurrentCam ? Local Player : Null, Null, Custom String("<  {0}  |  {1}  >", Input Binding String(Button(
			Secondary Fire)), Input Binding String(Button(Primary Fire))), Null, Top, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create Effect(Distance Between(Eye Position(Global.Player), Global.InteractCams) < 2 && Angle Between Vectors(Facing Direction Of(
			Global.Player), Direction Towards(Eye Position(Global.Player), Global.InteractCams)) < 30 ? All Players(All Teams) : Null,
			Sphere, Color(White), Global.InteractCams, 0.065, Visible To Position Radius and Color);
		Create Effect(Global.CamsJammed ? All Players(All Teams) : Null, Winston Primal Rage Effect, Color(Team 1), Global.InteractCams, 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Global.CamsJammed ? Color(Orange) : Color(Gray), Global.InteractCams, 0.100,
			Visible To Position Radius and Color);
		Wait(0.100, Ignore Condition);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Global.CamPositions[1], 0.250, Visible To);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Global.CamPositions[2], 0.250, Visible To);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Global.CamPositions[3], 0.250, Visible To);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Global.CamPositions[4], 0.250, Visible To);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Global.CamPositions[5], 0.250, Visible To);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Global.CamPositions[6], 0.250, Visible To);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Global.CamPositions[7], 0.250, Visible To);
	}
}

rule("[EP] Cams Interact")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Eye Position(Event Player), Global.InteractCams) < 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Moving(Event Player) == False;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(!Global.CamsJammed && Global.Power);
			If(Global.CurrentCam == 0);
				Abort If(Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(Event Player),
					Global.InteractCams)) >= 30);
				Global.CurrentCam = Global.LastCam;
				Global.PowerUsage += 1;
				Set Status(Event Player, Null, Rooted, 9999);
				Set Gravity(Event Player, 0);
				Set Melee Enabled(Event Player, False);
				Start Camera(Event Player, Global.CamPositions[Global.CurrentCam], Update Every Frame(
					Global.CamPositions[Global.CurrentCam] + Facing Direction Of(Event Player)), 0);
				Set Facing(Event Player, Global.CamLookAts[Global.CurrentCam], To World);
				Wait(0.050, Ignore Condition);
				Play Effect(All Players(All Teams), Sombra Translocating Sound, Color(Team 2), Global.CamPositions[Global.CurrentCam], 45);
			Else;
				Global.CurrentCam = 0;
				Global.PowerUsage -= 1;
				Clear Status(Event Player, Rooted);
				Set Gravity(Event Player, 100);
				Set Melee Enabled(Event Player, True);
				Stop Camera(Event Player);
				Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Global.InteractCams), To World);
			End;
			Wait(0.050, Ignore Condition);
			Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 2), Position Of(Event Player), 200);
		Else;
			Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Global.InteractCams, 125);
		End;
	}
}

rule("[EP] Cycle Cams")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
		Is Button Held(Event Player, Button(Reload)) == False;
		Global.CurrentCam != 0;
		disabled Global.Power > 0;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Global.CurrentCam >= Count Of(Global.CamPositions) - 1);
				Global.CurrentCam = 1;
			Else;
				Global.CurrentCam += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Global.CurrentCam <= 1);
				Global.CurrentCam = Count Of(Global.CamPositions) - 1;
			Else;
				Global.CurrentCam -= 1;
			End;
		End;
		Set Facing(Event Player, Global.CamLookAts[Global.CurrentCam], To World);
		Wait(0.050, Ignore Condition);
		Play Effect(All Players(All Teams), Sombra Translocating Sound, Color(Team 1), Global.CamPositions[Global.CurrentCam], 45);
	}
}

rule("[G] Update Last Cam / Zen Chance")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.CurrentCam != 0;
		Global.LastCam != Global.CurrentCam;
	}

	actions
	{
		Global.LastCam = Global.CurrentCam;
		Abort If(Random Integer(1, 100) > Global.ZenAI || Global.NightNumber == 5);
		Start Rule(ZenSequence, Do Nothing);
	}
}

disabled rule("NIGHTS")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[SR] Phone Ring")
{
	event
	{
		Subroutine;
		PhoneRing;
	}

	actions
	{
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
		Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 0.080);
		Play Effect(All Players(All Teams), Buff Impact Sound, Null, Global.InteractCams, 8);
	}
}

rule("[G] Night 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 0;
		Is Game In Progress == True;
	}

	actions
	{
		Skip If(Global.Cheats[1], 1);
		Chase Global Variable At Rate(Power, 0, 0.083 * Global.PowerUsage, Destination and Rate);
		Big Message(All Players(All Teams), Custom String("SURVIVE UNTIL 6 AM"));
		Wait Until(Global.CurrentTime >= 2, 99999);
		Global.BastionAI += 3;
		Wait Until(Global.CurrentTime >= 3, 99999);
		Skip If(Random Integer(1, 100) > 10, 1);
		Small Message(All Players(All Teams), Custom String("[?] IT SHOULD HAVE BEEN YOU."));
		Global.BastionAI += 1;
		Global.OrisaAI += 3;
	}
}

rule("[G] Night 1 Call")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 0;
		Is Game In Progress == True;
		Is Alive(Global.Player) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Global.PhoneRings = 4;
		While(Global.PhoneRings && !Is Button Held(Global.Player, Button(Ability 1)));
			Call Subroutine(PhoneRing);
			Global.PhoneRings -= 1;
			Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 2);
		End;
		Abort If(!Is Button Held(Global.Player, Button(Ability 1)));
		Global.PhoneRings = 0;
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 200);
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] UHM... HELLO? MEI?"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AH, THANK GOD COMMS ARE BACK."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] YOU SHOULD RECEIVE THIS BY TOMORROW NIGHT..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] WHAT A TRAGEDY. I'M REALLY SORRY ABOUT YOUR FRIENDS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THESE NINE YEARS HAVE BEEN ROUGH, BUT IT'S GOOD TO HAVE YOU BACK."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] ANYWAY, THERE'S NO TIME TO WASTE."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THE NEW CREW IS GETTING READY..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] BUT THE STORM HAS SEVERELY DAMAGED"));
		Wait(1.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("MOST OF THE EQUIPMENT IN THERE..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] INCLUDING SECURITY SYSTEMS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] SO WE'VE ASSIGNED YOU TO GET FAMILIAR"));
		Wait(1.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("WITH OUR - VERY EXPENSIVE - ROBOTS..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AND MAKE SURE THEY'RE IN GOOD CONDITIONS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] SO... YEAH. JUST KEEP THEM SAFE AND WORKING."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AND REPORT ME ANYTHING STRANGE YOU FIND."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] WE'LL TALK MORE TOMORROW. GOOD LUCK!"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX HANGS UP]"));
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 130);
	}
}

rule("[G] Night 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 1;
		Is Game In Progress == True;
	}

	actions
	{
		Skip If(Global.Cheats[1], 1);
		Chase Global Variable At Rate(Power, 0, 0.100 * Global.PowerUsage, Destination and Rate);
		Big Message(All Players(All Teams), Custom String("SURVIVE UNTIL 6 AM"));
		Global.ZenAI += 1;
		Global.BastionAI += 2;
		Wait Until(Global.CurrentTime >= 1, 99999);
		Global.BastionAI += 2;
		Global.OrisaAI += 3;
		Wait Until(Global.CurrentTime >= 2, 99999);
		Skip If(Random Integer(1, 100) > 10, 1);
		Small Message(All Players(All Teams), Custom String("[?] IT'S ALL YOUR FAULT."));
		Global.EchoAI += 2;
		Wait Until(Global.CurrentTime >= 3, 99999);
		Global.BastionAI += 2;
		Wait Until(Global.CurrentTime >= 4, 99999);
		Global.EchoAI += 1;
	}
}

rule("[G] Night 2 Call")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 1;
		Is Game In Progress == True;
		Is Alive(Global.Player) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Global.PhoneRings = 4;
		While(Global.PhoneRings && !Is Button Held(Global.Player, Button(Ability 1)));
			Call Subroutine(PhoneRing);
			Global.PhoneRings -= 1;
			Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 2);
		End;
		Abort If(!Is Button Held(Global.Player, Button(Ability 1)));
		Global.PhoneRings = 0;
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 200);
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] MEI! WHAT'S UP?"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] HOPE YOU'RE DOING FINE OUT THERE."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] I HAVE SOME NEW INFO BASED ON YOUR REPORTS..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AND I GOTTA FILL YOU UP RIGHT NOW."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] SO... THERE'S SOMETHING ABOUT ECHO."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] YOU MUST HAVE SEEN HER SOMEWHERE ALREADY."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] SHE IS... SMARTER THAN THE OTHER ONES..."));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("IN A CERTAIN WAY."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] SHE HAS REMOTE ACCESS TO THE POWER NETWORK..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AND SHE IS MALFUNCTIONING RIGHT NOW."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] BUT NO WORRIES!"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] IF SHE TRIES TO PLAY ANY TRICKS ON YOU..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] JUST CLOSE THE GATE AND HIDE FROM HER VIEW FOR A BIT."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THAT UH... SHOULD MAKE HER GO AWAY FOR A WHILE."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] I THINK THAT'S IT. GOOD LUCK AGAIN!"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AND KEEP SENDING THESE REPORTS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THEY'RE VERY HELPFUL."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] PEACE!"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX HANGS UP]"));
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 130);
	}
}

rule("[G] Night 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 2;
		Is Game In Progress == True;
	}

	actions
	{
		Global.NightPhase = 999;
		Skip If(Global.Cheats[1], 1);
		Chase Global Variable At Rate(Power, 0, 0.116 * Global.PowerUsage, Destination and Rate);
		Big Message(All Players(All Teams), Custom String("SURVIVE UNTIL 6 AM"));
		Global.ZenAI += 1;
		Global.GenjiAI += 2;
		Global.BastionAI += 3;
		Global.OrisaAI += 3;
		Wait Until(Global.CurrentTime >= 1, 99999);
		Global.EchoAI += 4;
		Wait Until(Global.CurrentTime >= 2, 99999);
		Global.BastionAI += 2;
		Global.OrisaAI += 1;
		Wait Until(Global.CurrentTime >= 3, 99999);
		Global.EchoAI += 3;
		Wait Until(Global.CurrentTime >= 4, 99999);
		Skip If(Random Integer(1, 100) > 10, 1);
		Small Message(All Players(All Teams), Custom String("[?] IT'S YOUR TURN TO FREEZE."));
		Global.OrisaAI += 2;
	}
}

rule("[G] Night 3 Call")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 2;
		Is Game In Progress == True;
		Is Alive(Global.Player) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Global.PhoneRings = 4;
		While(Global.PhoneRings && !Is Button Held(Global.Player, Button(Ability 1)));
			Call Subroutine(PhoneRing);
			Global.PhoneRings -= 1;
			Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 2);
		End;
		Abort If(!Is Button Held(Global.Player, Button(Ability 1)));
		Global.PhoneRings = 0;
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 200);
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] HELLO HELLO! READY FOR YOUR THIRD NIGHT?"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] WE HAVE BEEN REEEALLY BUSY WITH"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("ALL THE READINGS YOU PROVIDED ME."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THERE'S ANOTHER DETAIL YOU MUST KNOW."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THE OLD HUNTER BOT PROTOTYPE..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THAT WAS BEING KEPT IN ECOPOINT FOR REASONS"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("EVEN I DON'T KNOW..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] HAS BOOTED UP SOMEHOW."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] HE USES THERMAL SENSORS TO FIND AND NEUTRALIZE..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] ANYTHING THAT'S DOING SOMETHING IT IS"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("PROGRAMMED TO PREVENT."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AND SINCE THE FACILITY IS IN LOCKDOWN..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AND THE ONLY HEAT SIGNATURE AROUND IS YOU..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] WELL, I THINK YOU KNOW WHAT I MEAN."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] BUT DON'T PANIC. WE'VE PLAYED AROUND"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("WITH THE HEAT SYSTEM FOR A BIT..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] TO MESS WITH HIS SENSORS..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AND LOCK HIM IN THE CORRIDOR NEXT TO"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("THE CREW QUARTERS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] SO YOU SHOULD BE SAFE..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] AS LONG AS YOU KEEP THAT HEATER POWERED."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] I'M REALLY SORRY ABOUT THIS MEI."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] WE'RE WORKING HARD TO FIX EVERYTHING."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THIS DAMN STORM..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] BUT YOU'LL BE FINE. I PROMISE."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THANK YOU FOR DOING THIS FOR US."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX HANGS UP]"));
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 130);
	}
}

rule("[G] Night 4")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 3;
		Is Game In Progress == True;
	}

	actions
	{
		Skip If(Global.Cheats[1], 1);
		Chase Global Variable At Rate(Power, 0, 0.120 * Global.PowerUsage, Destination and Rate);
		Big Message(All Players(All Teams), Custom String("SURVIVE UNTIL 6 AM"));
		Global.ZenAI += 1;
		Global.GenjiAI += 3;
		Global.OrisaAI += 3;
		Global.BastionAI += 4;
		Global.EchoAI += 4;
		Wait Until(Global.CurrentTime >= 2, 99999);
		Global.BastionAI += 4;
		Global.EchoAI += 4;
		Wait Until(Global.CurrentTime >= 4, 99999);
		Global.OrisaAI += 3;
		Wait Until(Global.CurrentTime >= 5, 99999);
		Global.GenjiAI += 9;
	}
}

rule("[G] Night 4 Call")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 3;
		Is Game In Progress == True;
		Is Alive(Global.Player) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Global.PhoneRings = 4;
		While(Global.PhoneRings && !Is Button Held(Global.Player, Button(Ability 1)));
			Call Subroutine(PhoneRing);
			Global.PhoneRings -= 1;
			Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 2);
		End;
		Abort If(!Is Button Held(Global.Player, Button(Ability 1)));
		Global.PhoneRings = 0;
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 200);
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[STATIC]"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[?] YOU SHOULD HAVE DIED WITH US."));
		Wait(2.500, Ignore Condition);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 130);
	}
}

rule("[G] Night 5")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 4;
		Is Game In Progress == True;
	}

	actions
	{
		Skip If(Global.Cheats[1], 1);
		Chase Global Variable At Rate(Power, 0, 0.125 * Global.PowerUsage, Destination and Rate);
		Big Message(All Players(All Teams), Custom String("SURVIVE UNTIL 6 AM"));
		Global.ZenAI += 15;
		Global.GenjiAI += 7;
		Global.OrisaAI += 6;
		Global.BastionAI += 6;
		Global.EchoAI += 5;
		Wait Until(Global.CurrentTime >= 2, 99999);
		Global.OrisaAI += 3;
		Global.BastionAI += 2;
		Global.EchoAI += 3;
		Wait Until(Global.CurrentTime >= 4, 99999);
		Skip If(Random Integer(1, 100) > 10, 1);
		Small Message(All Players(All Teams), Custom String("[?] YOU LEFT US BEHIND."));
		Global.GenjiAI += 3;
		Global.OrisaAI += 3;
		Global.BastionAI += 3;
		Global.EchoAI += 3;
	}
}

rule("[G] Night 5 Call")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 4;
		Is Game In Progress == True;
		Is Alive(Global.Player) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Global.PhoneRings = 4;
		While(Global.PhoneRings && !Is Button Held(Global.Player, Button(Ability 1)));
			Call Subroutine(PhoneRing);
			Global.PhoneRings -= 1;
			Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 2);
		End;
		Abort If(!Is Button Held(Global.Player, Button(Ability 1)));
		Global.PhoneRings = 0;
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 200);
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] MEI? I HOPE THIS MESSAGE REACHES YOU."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] YOUR SIGNAL WENT DOWN YESTERDAY."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] IF YOU'RE LISTENING TO ME, PLEASE PAY ATTENTION."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] WE'VE UNCOVERED PROJECTS FOR A FIFTH SECURITY BOT."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] WE DO NOT KNOW WHERE IT IS AND HOW IT WORKS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] THE NEW CREW WON'T MOVE TO ECOPOINT UNTIL"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("THIS IS ALL SORTED OUT AND CLARIFIED."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] GOD KNOWS WHY THE HELL YOU AND YOUR"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("COLLEAGUES WERE LIVING NEXT TO THESE THINGS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX] PLEASE BE CAREFUL. HELP IS ON THE WAY."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MAX HANGS UP]"));
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 130);
	}
}

rule("[G] Night 7 (Custom)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber == 6;
		Is Game In Progress == True;
	}

	actions
	{
		Skip If(Global.Cheats[1], 1);
		Chase Global Variable At Rate(Power, 0, 0.131 * Global.PowerUsage, Destination and Rate);
		Big Message(All Players(Team 1), Custom String("SURVIVE UNTIL 6 AM"));
		Global.GenjiAI = Workshop Setting Integer(Custom String("CUSTOM NIGHT SETTINGS"), Custom String("GENJI A.I LEVEL"), 0, 0, 20, 0);
		Global.EchoAI = Workshop Setting Integer(Custom String("CUSTOM NIGHT SETTINGS"), Custom String("ECHO A.I LEVEL"), 0, 0, 20, 0);
		Global.OrisaAI = Workshop Setting Integer(Custom String("CUSTOM NIGHT SETTINGS"), Custom String("ORISA A.I LEVEL"), 0, 0, 20, 0);
		Global.BastionAI = Workshop Setting Integer(Custom String("CUSTOM NIGHT SETTINGS"), Custom String("BASTION A.I LEVEL"), 0, 0, 20,
			0);
		Global.ZenAI = Workshop Setting Integer(Custom String("CUSTOM NIGHT SETTINGS"), Custom String("ZENYATTA A.I LEVEL"), 0, 0, 20, 0);
	}
}

disabled rule("BASTION")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[G] Bastion Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber != 5;
	}

	actions
	{
		Create Dummy Bot(Hero(Bastion), Team 2, 0, Vector(-12.740, 7, -49.920), Vector(1, 0, 0));
		Global.Bastion = Players In Slot(0, Team 2);
		Start Scaling Player(Global.Bastion, 1.300, False);
		Start Modifying Hero Voice Lines(Global.Bastion, 1.500, True);
		Wait Until(Is Game In Progress, 99999);
		Skip If(!Global.Cheats[0], 1);
		Create In-World Text(All Players(All Teams), Custom String("{0} {1} / {2} A.I", Hero Icon String(Hero(Bastion)),
			Global.BastionPhase, Global.BastionAI), Global.Bastion, 1.200, Do Not Clip, Visible To Position and String, Custom Color(255,
			255, 255, 175), Default Visibility);
	}
}

rule("[SR] Bastion Jumpscare")
{
	event
	{
		Subroutine;
		BastionJumpscare;
	}

	actions
	{
		Destroy All In-World Text;
		If(!Global.NoJumpscares);
			Set Invisible(Global.Player, All);
			Global.CurrentCam = 0;
			Start Forcing Player Position(Players In Slot(1, Team 1), Global.Bastion, False);
			Wait(0.040, Ignore Condition);
			Set Status(Global.Bastion, Null, Phased Out, 3);
			Set Status(Players In Slot(1, Team 1), Null, Phased Out, 3);
			Wait(0.120, Ignore Condition);
			Start Forcing Player Position(Players In Slot(1, Team 1), Vector(0, 200, 0), False);
			Play Effect(All Players(All Teams), Ana Biotic Grenade No Healing Sound, Color(Team 1), Global.Player, 200);
			Play Effect(All Players(All Teams), Sombra Logo Sound, Color(Team 1), Global.Player, 200);
			Start Modifying Hero Voice Lines(Global.Player, 0.500, False);
			Add Health Pool To Player(Global.Player, Shields, 100, True, True);
			Damage(Global.Player, Null, 300);
			Teleport(Global.Bastion, Position Of(Global.Player));
			Wait(0.025, Ignore Condition);
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Bastion) + Facing Direction Of(Global.Bastion) * 0.700),
				Update Every Frame(Eye Position(Global.Bastion)) + Global.CamShake, 0);
			Start Rule(CameraShake, Restart Rule);
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Bastion);
		Else;
			Global.CurrentCam = 0;
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Bastion) + Facing Direction Of(Global.Bastion) * 1.500),
				Update Every Frame(Eye Position(Global.Bastion)), 0);
			Small Message(All Players(All Teams), Custom String("DEAD!"));
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Bastion);
		End;
	}
}

rule("[G] Bastion Progression")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.Bastion.HasMoved == True;
		Global.BastionAI != 0;
		Global.BastionPhase != -3;
		Global.BastionPhase != 3;
	}

	actions
	{
		Wait(5.500 + Global.BastionAI / 6, Abort When False);
		If(Random Integer(1, 20) <= Global.BastionAI);
			Global.Bastion.HasMoved = False;
			If(Global.BastionPhase == 0);
				Global.BastionPhase = Random Value In Array(Array(1, -1));
			Else;
				Global.BastionPhase += Global.BastionPhase > 0 ? 1 : -1;
			End;
		End;
		Loop;
	}
}

rule("[G] Bastion Phase 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.BastionAI != 0;
		Global.BastionPhase == 0;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 1, 99999);
		Abort If(Global.BastionPhase != 0);
		Teleport(Global.Bastion, Vector(-12.740, 7, -49.920));
		Set Facing(Global.Bastion, Vector(1, 0, 0), To World);
		Global.Bastion.HasMoved = True;
	}
}

rule("[G] Bastion Phase 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.BastionAI != 0;
		Global.BastionPhase == 1;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 1, 99999);
		Abort If(Global.BastionPhase != 1);
		Teleport(Global.Bastion, Vector(6.460, 8.100, -50.770));
		Set Facing(Global.Bastion, Vector(0.070, 0, 1), To World);
		Global.Bastion.HasMoved = True;
	}
}

rule("[G] Bastion Phase 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.BastionAI != 0;
		Global.BastionPhase == 2;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 1 && (!Is In Line of Sight(Eye Position(Global.Player), Vector(6.080, 8.100, -40.480),
			Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Vector(6.080, 8.100, -40.480), 75)), 99999);
		Abort If(Global.BastionPhase != 2);
		Teleport(Global.Bastion, Vector(6.590, 8.010, -45.940));
		Set Facing(Global.Bastion, Vector(-0.600, 0, 0.800), To World);
		Global.Bastion.HasMoved = True;
	}
}

rule("[G] Bastion Phase 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.BastionAI != 0;
		Global.BastionPhase == 3;
	}

	actions
	{
		Wait Until(!Is In Line of Sight(Eye Position(Global.Player), Vector(1.930, 8.430, -30.570), Barriers Do Not Block LOS)
			|| !Is In View Angle(Global.Player, Vector(1.930, 8.430, -30.570), 75), 99999);
		Abort If(Global.BastionPhase != 3);
		Teleport(Global.Bastion, Vector(3.390, 7.060, -31.060));
		Set Facing(Global.Bastion, Vector(-0.710, 0, 0.710), To World);
		Wait(6 - Global.BastionAI / 10, Ignore Condition);
		Wait Until(!Global.CurrentCam, 8);
		If(Global.ClosedLeftDoor);
			Wait Until(Global.CurrentCam != 1 && (!Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Bastion),
				Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Eye Position(Global.Bastion), 75)), 99999);
			If(Global.ClosedLeftDoor);
				Global.BastionPhase = Random Integer(1, 100) <= Global.BastionAI ? Random Value In Array(Array(-1, 1)) : 0;
			Else;
				Call Subroutine(BastionJumpscare);
			End;
		Else;
			Call Subroutine(BastionJumpscare);
		End;
		Global.Bastion.HasMoved = True;
	}
}

rule("[G] Bastion Phase -1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.BastionAI != 0;
		Global.BastionPhase == -1;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 1, 99999);
		Abort If(Global.BastionPhase != -1);
		Teleport(Global.Bastion, Vector(-10.880, 7, -47));
		Set Facing(Global.Bastion, Vector(0.020, 0, 1), To World);
		Global.Bastion.HasMoved = True;
	}
}

rule("[G] Bastion Phase -2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.BastionAI != 0;
		Global.BastionPhase == -2;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 1 && Global.CurrentCam != 2, 99999);
		Abort If(Global.BastionPhase != -2);
		Teleport(Global.Bastion, Vector(-8.800, 7.340, -33.580));
		Set Facing(Global.Bastion, Vector(0.020, 0, 1), To World);
		Global.Bastion.HasMoved = True;
	}
}

rule("[G] Bastion Phase -3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.BastionAI != 0;
		Global.BastionPhase == -3;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 2 && Global.OrisaMeter && (!Is In Line of Sight(Eye Position(Global.Player), Vector(-4.380, 9,
			-23.220), Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Vector(-4.380, 9, -23.220), 75)), 99999);
		Abort If(Global.BastionPhase != -3);
		Teleport(Global.Bastion, Vector(-4.380, 7.040, -23.220));
		Set Facing(Global.Bastion, Vector(0.710, 0, -0.710), To World);
		Wait(6 - Global.BastionAI / 10, Ignore Condition);
		Wait Until(!Global.CurrentCam, 8);
		If(Global.ClosedRightDoor);
			Wait Until(Global.CurrentCam != 1 && (!Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Bastion),
				Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Eye Position(Global.Bastion), 75)), 99999);
			If(Global.ClosedRightDoor);
				Global.BastionPhase = Random Integer(1, 100) <= Global.BastionAI ? Random Value In Array(Array(-1, 1)) : 0;
			Else;
				Call Subroutine(BastionJumpscare);
			End;
		Else;
			Call Subroutine(BastionJumpscare);
		End;
		Global.Bastion.HasMoved = True;
	}
}

disabled rule("ECHO")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[G] Echo Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber != 5;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Hero(Echo), Team 2, 2, Vector(28.620, 3, 2.900), Vector(0, 0, 1));
		Global.Echo = Players In Slot(2, Team 2);
		Start Scaling Player(Global.Echo, 1.200, False);
		Wait Until(Is Game In Progress, 99999);
		Set Status(Players On Hero(Hero(Echo), All Teams), Null, Knocked Down, 9999);
		Skip If(!Global.Cheats[0], 1);
		Create In-World Text(All Players(All Teams), Custom String("{0} {1} / {2} A.I", Hero Icon String(Hero(Echo)), Global.EchoPhase,
			Global.EchoAI), Global.Echo, 1.200, Do Not Clip, Visible To Position and String, Custom Color(255, 255, 255, 175),
			Default Visibility);
	}
}

rule("[SR] Echo Jumpscare")
{
	event
	{
		Subroutine;
		EchoJumpscare;
	}

	actions
	{
		Destroy All In-World Text;
		If(!Global.NoJumpscares);
			Set Invisible(Global.Player, All);
			Global.CurrentCam = 0;
			Start Forcing Player Position(Players In Slot(1, Team 1), Global.Echo, False);
			Wait(0.040, Ignore Condition);
			Set Status(Global.Echo, Null, Phased Out, 3);
			Set Status(Players In Slot(1, Team 1), Null, Phased Out, 3);
			Wait(0.120, Ignore Condition);
			Start Forcing Player Position(Players In Slot(1, Team 1), Vector(0, 200, 0), False);
			Play Effect(All Players(All Teams), Ana Biotic Grenade No Healing Sound, Color(Team 1), Global.Player, 200);
			Play Effect(All Players(All Teams), Sombra Logo Sound, Color(Team 1), Global.Player, 200);
			Start Modifying Hero Voice Lines(Global.Player, 0.500, False);
			Add Health Pool To Player(Global.Player, Shields, 100, True, True);
			Damage(Global.Player, Null, 300);
			Teleport(Global.Echo, Position Of(Global.Player));
			Wait(0.016, Ignore Condition);
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Echo) + Facing Direction Of(Global.Echo) * 0.600),
				Update Every Frame(Eye Position(Global.Echo)) + Global.CamShake, 0);
			Press Button(Global.Echo, Button(Ability 2));
			Start Rule(CameraShake, Restart Rule);
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Echo);
		Else;
			Global.CurrentCam = 0;
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Echo) + Facing Direction Of(Global.Echo) * 1.500),
				Update Every Frame(Eye Position(Global.Echo)), 0);
			Small Message(All Players(All Teams), Custom String("DEAD!"));
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Echo);
		End;
	}
}

rule("[G] Echo Progression")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.Echo.HasMoved == True;
		Global.EchoAI != 0;
		Global.EchoPhase != 4;
		Global.EchoPhase != -4;
	}

	actions
	{
		Wait(5 + Global.EchoAI / 6, Abort When False);
		If(Random Integer(1, 20) <= Global.EchoAI);
			Global.Echo.HasMoved = False;
			If(Global.EchoPhase == 0);
				Clear Status(Global.Echo, Knocked Down);
				Global.EchoPhase = Random Value In Array(Array(1, -1));
			Else;
				Global.EchoPhase += Global.EchoPhase > 0 ? 1 : -1;
			End;
		End;
		Loop;
	}
}

rule("[G] Echo Phase 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.EchoAI != 0;
		Global.EchoPhase == 0;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 4, 99999);
		Abort If(Global.EchoPhase != 0);
		Teleport(Global.Echo, Vector(28.620, 3, 2.900));
		Set Facing(Global.Echo, Vector(0, 0, 1), To World);
		Global.Echo.HasMoved = True;
	}
}

rule("[G] Echo Phase 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.EchoAI != 0;
		Global.EchoPhase == 1;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 4, 99999);
		Abort If(Global.EchoPhase != 1);
		Teleport(Global.Echo, Vector(22.400, 3, 2.570));
		Set Facing(Global.Echo, Vector(-1, 0, 0), To World);
		Global.Echo.HasMoved = True;
	}
}

rule("[G] Echo Phase 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.EchoAI != 0;
		Global.EchoPhase == 2;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 4 && Global.CurrentCam != 5, 99999);
		Abort If(Global.EchoPhase != 2);
		Teleport(Global.Echo, Vector(18.330, 4, -6.300));
		Set Facing(Global.Echo, Vector(-0.220, 0.250, -0.940), To World);
		Global.Echo.HasMoved = True;
	}
}

rule("[G] Echo Phase 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.EchoAI != 0;
		Global.EchoPhase == 3;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 5 && (!Is In Line of Sight(Eye Position(Global.Player), Vector(16.390, 7.020, -14.720),
			Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Vector(16.390, 7.020, -14.720), 75)), 99999);
		Abort If(Global.EchoPhase != 3);
		Teleport(Global.Echo, Vector(17.180, 6.020, -13.960));
		Set Facing(Global.Echo, Vector(-0.860, 0.100, -0.500), To World);
		Global.Echo.HasMoved = True;
	}
}

rule("[G] Echo Phase -1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.EchoAI != 0;
		Global.EchoPhase == -1;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 4 && Global.CurrentCam != 6, 99999);
		Abort If(Global.EchoPhase != -1);
		Teleport(Global.Echo, Vector(27.300, 8.960, 2.530));
		Set Facing(Global.Echo, Vector(-0.450, 0, -0.890), To World);
		Global.Echo.HasMoved = True;
	}
}

rule("[G] Echo Phase -2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.EchoAI != 0;
		Global.EchoPhase == -2;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 6, 99999);
		Abort If(Global.EchoPhase != -2);
		Teleport(Global.Echo, Vector(22.800, 7.250, -11.800));
		Set Facing(Global.Echo, Direction Towards(Eye Position(Global.Echo), Global.CamPositions[6]), To World);
		Global.Echo.HasMoved = True;
	}
}

rule("[G] Echo Phase -3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.EchoAI != 0;
		Global.EchoPhase == -3;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 6 && (!Is In Line of Sight(Eye Position(Global.Player), Vector(14.550, 13.100, -20.300),
			Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Vector(14.550, 13.100, -20.300), 75)), 99999);
		Abort If(Global.EchoPhase != -3);
		Teleport(Global.Echo, Vector(15.500, 11.810, -21));
		Set Facing(Global.Echo, Vector(-0.900, -0.500, -0.050), To World);
		Global.Echo.HasMoved = True;
	}
}

rule("[G] Echo Phase 4 and -4")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.EchoAI != 0;
		(Global.EchoPhase == 4 || Global.EchoPhase == -4) == True;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 4 && Global.CurrentCam != 6 && (!Is In Line of Sight(Eye Position(Global.Player), Vector(6.740,
			9.020, -19.940), Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Vector(6.740, 9.020, -19.940), 75)), 99999);
		Abort If(Global.EchoPhase != 4 && Global.EchoPhase != -4);
		Teleport(Global.Echo, Vector(6.740, 7.020, -19.940));
		Set Facing(Global.Echo, Vector(-0.710, 0.100, -0.710), To World);
		Wait(6 - Global.EchoAI / 10, Ignore Condition);
		Wait Until(!Global.CurrentCam, 5);
		If(Global.ClosedFrontDoor);
			Wait Until(!Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Echo), Barriers Do Not Block LOS)
				|| !Is In View Angle(Global.Player, Eye Position(Global.Echo), 75), 99999);
			If(!Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Echo), Barriers Do Not Block LOS));
				Wait(Random Real(1, 3), Ignore Condition);
				Loop If(Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Echo), Barriers Do Not Block LOS));
			Else If(!Is In View Angle(Global.Player, Eye Position(Global.Echo), 75));
				Start Rule(CamsJammed, Restart Rule);
				Global.Power = Max(0, Global.Power - 3);
			End;
			Global.EchoPhase = Random Integer(1, 100) <= Global.EchoAI ? Random Value In Array(Array(-1, 1)) : 0;
		Else;
			Call Subroutine(EchoJumpscare);
		End;
		Global.Echo.HasMoved = True;
	}
}

disabled rule("ORISA")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[G] Orisa Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber != 5;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Orisa), Team 2, 1, Vector(-10.700, 8.520, -0.370), Vector(-1, 0, 0));
		Global.Orisa = Players In Slot(1, Team 2);
		Start Scaling Player(Global.Orisa, 1.350, False);
		Wait Until(Is Game In Progress, 99999);
		Set Status(Players On Hero(Hero(Orisa), All Teams), Null, Knocked Down, 9999);
		Global.OrisaMeter = 100;
		Skip If(!Global.Cheats[0], 1);
		Create In-World Text(All Players(All Teams), Custom String("{0} {1} / {2} A.I", Hero Icon String(Hero(Orisa)), Global.OrisaMeter,
			Global.OrisaAI), Global.Orisa, 1.200, Do Not Clip, Visible To Position and String, Custom Color(255, 255, 255, 175),
			Default Visibility);
	}
}

rule("[SR] Orisa Jumpscare")
{
	event
	{
		Subroutine;
		OrisaJumpscare;
	}

	actions
	{
		Destroy All In-World Text;
		If(!Global.NoJumpscares);
			Set Invisible(Global.Player, All);
			Global.CurrentCam = 0;
			Play Effect(All Players(All Teams), Ana Biotic Grenade No Healing Sound, Color(Team 1), Global.Player, 200);
			Play Effect(All Players(All Teams), Sombra Logo Sound, Color(Team 1), Global.Player, 200);
			Start Modifying Hero Voice Lines(Global.Player, 0.500, False);
			Add Health Pool To Player(Global.Player, Shields, 100, True, True);
			Damage(Global.Player, Null, 300);
			Wait(0.016, Ignore Condition);
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Orisa) + Facing Direction Of(Global.Orisa) * 1.200),
				Update Every Frame(Eye Position(Global.Orisa)) + Global.CamShake, 0);
			Damage(Global.Orisa, Null, 390);
			Start Rule(CameraShake, Restart Rule);
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Orisa);
		Else;
			Global.CurrentCam = 0;
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Orisa) + Facing Direction Of(Global.Orisa) * 1.500),
				Update Every Frame(Eye Position(Global.Orisa)), 0);
			Small Message(All Players(All Teams), Custom String("DEAD!"));
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Orisa);
		End;
	}
}

rule("[G] Orisa Progression")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.OrisaAI != 0;
	}

	actions
	{
		Chase Global Variable At Rate(OrisaMeter, 0, 0.450 + Global.OrisaAI / 15, Destination and Rate);
		Wait Until(Global.CurrentCam != 3 && Global.OrisaMeter <= 66, 99999);
		Clear Status(Global.Orisa, Knocked Down);
		Set Facing(Global.Orisa, Direction Towards(Eye Position(Global.Orisa), Global.CamPositions[3]), To World);
		Wait Until(Global.CurrentCam != 3 && Global.OrisaMeter <= 23, 99999);
		Teleport(Global.Orisa, Vector(-10.360, 7, -8.250));
		Set Facing(Global.Orisa, Vector(-1, 0, 0), To World);
		Wait Until(Global.CurrentCam != 3 && Global.OrisaMeter <= 0 && Global.BastionPhase != 3 && (!Is In Line of Sight(Eye Position(
			Global.Player), Vector(-15.570, 7.420, -11.650), Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Vector(-15.570,
			7.420, -11.650), 75)), 99999);
		Teleport(Global.Orisa, Vector(-15.570, 6.420, -11.650));
		Set Facing(Global.Orisa, Vector(0.680, 0, -0.730), To World);
		Wait Until(!Global.CurrentCam, 5);
		Start Throttle In Direction(Global.Orisa, Direction Towards(Position Of(Global.Orisa), Vector(-4.200, 7.070, -23.510)), 1,
			To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Distance Between(Position Of(Global.Orisa), Vector(-4.200, 7.070, -23.510)) <= 0.300, 99999);
		If(Global.ClosedRightDoor);
			Set Status(Global.Orisa, Global.Player, Stunned, 1);
			Stop Throttle In Direction(Global.Orisa);
			Wait Until(Global.CurrentCam != 3 && (!Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Orisa),
				Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Eye Position(Global.Orisa), 75)), 99999);
			If(Global.ClosedRightDoor);
				Teleport(Global.Orisa, Vector(-10.700, 8.520, -0.370));
				Set Facing(Global.Orisa, Direction Towards(Eye Position(Global.Orisa), Global.CamPositions[3]), To World);
				Global.OrisaMeter = 100;
				Loop If Condition Is True;
			Else;
				Call Subroutine(OrisaJumpscare);
			End;
		Else;
			Call Subroutine(OrisaJumpscare);
		End;
	}
}

rule("[G] Update Orisa Speed")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.OrisaAI != 0;
		Global.OrisaAIPrevious != Global.OrisaAI;
	}

	actions
	{
		Global.OrisaAIPrevious = Global.OrisaAI;
		Set Move Speed(Global.Orisa, 165 + Global.OrisaAI * 1.500);
	}
}

rule("[G] Orisa Stall Start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.CurrentCam == 3;
		Global.OrisaAI != 0;
		Global.OrisaMeter > 0;
	}

	actions
	{
		Stop Chasing Global Variable(OrisaMeter);
		Wait(Random Real(1.400, 2.200), Abort When False);
		Global.OrisaMeter = Min(100, Global.OrisaMeter + 0.900);
		Loop If Condition Is True;
	}
}

rule("[G] Orisa Stall Stop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.CurrentCam != 3;
		Global.OrisaAI != 0;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Chase Global Variable At Rate(OrisaMeter, 0, 0.450 + Global.OrisaAI / 15, Destination and Rate);
	}
}

disabled rule("GENJI")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[G] Genji Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber != 5;
		Global.NightNumber > 1;
	}

	actions
	{
		Wait(0.750, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 3, Vector(-2.600, 7, 54.500), Vector(-0.700, 0, -0.710));
		Global.Genji = Players In Slot(3, Team 2);
		Start Scaling Player(Global.Genji, 1.600, False);
		Wait Until(Is Game In Progress, 99999);
		Set Status(Players On Hero(Hero(Genji), All Teams), Null, Knocked Down, 9999);
		Global.HeaterPower = 100;
		Skip If(!Global.Cheats[0], 1);
		Create In-World Text(All Players(All Teams), Custom String("{0} {1} / {2} A.I", Hero Icon String(Hero(Genji)), Global.HeaterPower,
			Global.GenjiAI), Global.Genji, 1.200, Do Not Clip, Visible To Position and String, Custom Color(255, 255, 255, 175),
			Default Visibility);
		Create Effect(All Players(All Teams), Zarya Particle Beam Sound, Color(Team 2), Global.CamPositions[7], Global.HeaterPower / 2,
			Visible To Position and Radius);
		Create In-World Text(Global.CurrentCam == 7 ? Global.Player : Null, String Slice(Custom String("â â â â â â â â â â â â â â â â "), 0,
			Global.HeaterPower / 6.250), Update Every Frame(Direction From Angles(Horizontal Facing Angle Of(Global.Player),
			Vertical Facing Angle Of(Global.Player) + 22) * 1000 + Global.CamPositions[7]), 2.700, Do Not Clip,
			Visible To Position String and Color, Custom Color(255, Global.HeaterPower * 2.550, Global.HeaterPower,
			Global.HeaterPower / 6.250 > 15.500 ? 215 : 160), Default Visibility);
		Create In-World Text(Global.CurrentCam == 7 ? Local Player : Null, Custom String("HOLD [{0}] TO WIND UP HEATER",
			Input Binding String(Button(Reload))), Update Every Frame(Direction From Angles(Horizontal Facing Angle Of(Local Player),
			Vertical Facing Angle Of(Local Player) + 24.500) * 1000 + Global.CamPositions[7]), 1.700, Do Not Clip,
			Visible To Position String and Color, Custom Color(255, 255, 255, Is Button Held(Local Player, Button(Reload)) ? 255 : 140),
			Default Visibility);
		Create Icon(!Global.CurrentCam ? Global.WarningIconVisible : Null, Global.InteractCams, Fire, Visible To and Position,
			Custom Color(255, 80, 0, 255), True);
		Create HUD Text(Global.CurrentCam ? Global.WarningIconVisible : Null, Null, Null, Custom String("CAM 7", Icon String(Warning)),
			Top, 2, Color(White), Color(White), Custom Color(255, 80, 0, 255), Visible To, Default Visibility);
	}
}

rule("[SR] Genji Jumpscare")
{
	event
	{
		Subroutine;
		GenjiJumpscare;
	}

	actions
	{
		Destroy All In-World Text;
		If(!Global.NoJumpscares);
			Teleport(Global.Genji, Ray Cast Hit Position(Eye Position(Global.Player), Eye Position(Global.Player) + Facing Direction Of(
				Global.Player) * Vector(-3, 0, -3), Null, Global.Player, False));
			Start Facing(Global.Genji, Direction Towards(Eye Position(Global.Genji), Eye Position(Global.Player)), 360, To World,
				Direction and Turn Rate);
			Wait Until(!Global.CurrentCam, Random Real(4, 8));
			Wait Until(Is In View Angle(Global.Player, Eye Position(Global.Genji), 50), Random Real(4, 8));
			Wait(0.500, Ignore Condition);
			Play Effect(All Players(All Teams), Ana Biotic Grenade No Healing Sound, Color(Team 1), Global.Player, 200);
			Play Effect(All Players(All Teams), Sombra Logo Sound, Color(Team 1), Global.Player, 200);
			Start Modifying Hero Voice Lines(Global.Player, 0.500, False);
			Add Health Pool To Player(Global.Player, Shields, 100, True, True);
			Damage(Global.Player, Null, 300);
			Wait(0.016, Ignore Condition);
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Genji) + Facing Direction Of(Global.Genji) * 1.200),
				Update Every Frame(Eye Position(Global.Genji)) + Global.CamShake, 0);
			Start Rule(CameraShake, Restart Rule);
			Press Button(Global.Genji, Button(Ultimate));
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Genji);
		Else;
			Teleport(Global.Genji, Ray Cast Hit Position(Eye Position(Global.Player), Eye Position(Global.Player) + Facing Direction Of(
				Global.Player) * Vector(-3, 0, -3), Null, Global.Player, False));
			Start Facing(Global.Genji, Direction Towards(Eye Position(Global.Genji), Eye Position(Global.Player)), 360, To World,
				Direction and Turn Rate);
			Wait Until(!Global.CurrentCam, Random Real(4, 8));
			Wait Until(Is In View Angle(Global.Player, Eye Position(Global.Genji), 50), Random Real(4, 8));
			Wait(0.500, Ignore Condition);
			Global.CurrentCam = 0;
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Genji) + Facing Direction Of(Global.Genji) * 1.500),
				Update Every Frame(Eye Position(Global.Genji)), 0);
			Small Message(All Players(All Teams), Custom String("DEAD!"));
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Genji);
		End;
	}
}

rule("[G] Genji Progression")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.GenjiAI != 0;
		Global.HeaterPower <= 0;
	}

	actions
	{
		Wait Until(Global.CurrentCam != 7 && Global.HeaterPower <= 0, 99999);
		Clear Status(Global.Genji, Knocked Down);
		Set Facing(Global.Genji, Direction Towards(Eye Position(Global.Genji), Global.CamPositions[7]), To World);
		Wait(Random Real(2.200, 4.400 - Global.GenjiAI / 10), Ignore Condition);
		Wait Until(Global.CurrentCam != 7 && Global.HeaterPower <= 0, 99999);
		Teleport(Global.Genji, Vector(-12.560, 7, 45.080));
		Set Facing(Global.Genji, Vector(0.710, 0, -0.710), To World);
		Wait(Random Real(1.800, 4 - Global.GenjiAI / 10), Ignore Condition);
		Wait Until(Global.CurrentCam != 7 && Global.HeaterPower <= 0, 99999);
		Call Subroutine(GenjiJumpscare);
	}
}

rule("[G] Start Wind Down")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.GenjiAI != 0;
		Is Game In Progress == True;
	}

	actions
	{
		Chase Global Variable At Rate(HeaterPower, 0, 2.300 + Global.GenjiAI / 6.200, Destination and Rate);
	}
}

rule("[G] Wind Up")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.CurrentCam == 7;
		Is Button Held(Global.Player, Button(Reload)) == True;
		Global.GenjiAI != 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Brigitte Whip Shot Heal Area Sound, Color(Team 2), Global.CamPositions[7], 25);
		Chase Global Variable At Rate(HeaterPower, 100, 35, None);
		Wait Until(!Is Button Held(Global.Player, Button(Reload)) || Global.CurrentCam != 7, 99999);
		Chase Global Variable At Rate(HeaterPower, 0, 2.300 + Global.GenjiAI / 6.200, Destination and Rate);
	}
}

rule("[G] Warning")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.GenjiAI != 0;
		Global.HeaterPower < 28;
	}

	actions
	{
		Global.WarningIconVisible = All Players(All Teams);
		Wait(0.200, Ignore Condition);
		Global.WarningIconVisible = Null;
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("ZEN")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[G] Zen Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.NightNumber >= 1;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Zenyatta), Team 2, 4, Vector(2, 7.400, 22.400), Vector(1, 0, 0));
		Global.Zen = Players In Slot(4, Team 2);
		Start Scaling Player(Global.Zen, 1.350, False);
		Global.ZenPositions = Array(Vector(-1.920, 7, -54.260), Vector(-9.090, 7.230, -30.700), Vector(-10.110, 8.510, -1.690), Vector(
			28.200, 3, 1.200), Vector(18, 4.900, -9.520), Vector(23.900, 9, -5.630), Vector(-4.230, 7, 54.360));
		Global.ZenPositions2 = Array(Null, Array(Vector(-8.690, 7, -49.870), Vector(16.820, 8.960, -48.440)), Array(Vector(-12.250, 7.240,
			-33.650), Vector(-2.200, 7.340, -31.700)), Array(Vector(-20.720, 7, 6.540), Vector(-19.220, 12, 8.700), Vector(-10.910, 7,
			8.710)), Array(Vector(23.930, 3.150, -5.110), Vector(29.370, 3.150, 3.700)), Array(Vector(18, 5.960, -11.640)), Array(Vector(
			23.620, 9, 5.630), Vector(23.100, 6.860, -12.560)), Array(Vector(3.340, 8, 53.940), Vector(-13.060, 7, 44.260)));
		Set Invisible(Global.Zen, All);
		Set Healing Received(Global.Zen, 0);
		Disable Movement Collision With Players(Global.Zen);
		Start Facing(Global.Zen, Direction Towards(Eye Position(Global.Zen), Eye Position(Global.Player)), 1000, To World,
			Direction and Turn Rate);
		Disable Built-In Game Mode Respawning(Global.Zen);
	}
}

rule("[SR] Zen Jumpscare Nights 1-5")
{
	event
	{
		Subroutine;
		ZenSequence;
	}

	actions
	{
		Set Invisible(Global.Zen, None);
		Start Facing(Global.Zen, Direction Towards(Eye Position(Global.Zen), Global.CamPositions[Global.CurrentCam]), 1000, To World,
			Direction and Turn Rate);
		Teleport(Global.Zen, First Of(Sorted Array(Global.ZenPositions, Distance Between(Current Array Element,
			Global.CamPositions[Global.CurrentCam]))));
		Wait Until(Is Button Held(Global.Player, Button(Primary Fire)) || Is Button Held(Global.Player, Button(Secondary Fire))
			|| Is Button Held(Global.Player, Button(Interact)), 1.500 - Global.ZenAI / 30);
		If(Is Button Held(Global.Player, Button(Primary Fire)) || Is Button Held(Global.Player, Button(Secondary Fire)) || Is Button Held(
			Global.Player, Button(Interact)));
			Set Invisible(Global.Zen, All);
			Wait(4, Ignore Condition);
			Abort;
		Else;
			Wait Until(Global.CurrentCam != Global.LastCam, 9999);
			Teleport(Global.Zen, Vector(3.900, 7.400, -25.500));
			Wait Until(!Global.CurrentCam, 9999);
			Wait(0.100, Ignore Condition);
			Start Facing(Global.Zen, Direction Towards(Eye Position(Global.Zen), Eye Position(Global.Player)), 1000, To World,
				Direction and Turn Rate);
			Set Facing(Global.Player, Direction Towards(Eye Position(Global.Player), Eye Position(Global.Zen)), To World);
			Wait Until(Global.CurrentCam, 1.700 - Global.ZenAI / 30);
			If(Global.CurrentCam);
				Set Invisible(Global.Zen, All);
				Teleport(Global.Zen, First Of(Sorted Array(Global.ZenPositions, Distance Between(Current Array Element,
					Global.CamPositions[Global.CurrentCam]))));
				Wait(4, Ignore Condition);
				Abort;
			Else;
				Destroy All In-World Text;
				If(!Global.NoJumpscares);
					Play Effect(All Players(All Teams), Ana Biotic Grenade No Healing Sound, Color(Team 1), Global.Player, 200);
					Play Effect(All Players(All Teams), Sombra Logo Sound, Color(Team 1), Global.Player, 200);
					Start Modifying Hero Voice Lines(Global.Player, 0.500, False);
					Add Health Pool To Player(Global.Player, Shields, 100, True, True);
					Damage(Global.Player, Null, 300);
					Wait(0.016, Ignore Condition);
					Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Zen) + Facing Direction Of(Global.Zen)), Update Every Frame(
						Eye Position(Global.Zen)) + Global.CamShake, 0);
					Start Rule(CameraShake, Restart Rule);
					Press Button(Global.Zen, Button(Ultimate));
					Wait(1.500, Ignore Condition);
					Kill(Global.Player, Global.Zen);
				Else;
					Global.CurrentCam = 0;
					Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Zen) + Facing Direction Of(Global.Zen)), Update Every Frame(
						Eye Position(Global.Zen)), 0);
					Small Message(All Players(All Teams), Custom String("DEAD!"));
					Wait(1.500, Ignore Condition);
					Kill(Global.Player, Global.Zen);
				End;
			End;
		End;
	}
}

disabled rule("NIGHT 6")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[G] Zen Progression")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.NightNumber == 5;
		Global.NightPhase == 6;
		Is Alive(Global.Zen) == True;
		Global.ZenDoorNumber == 0;
		Global.CurrentCam != Global.ZenPickedCamAndPos[0];
		Global.ZenAI > 0;
	}

	actions
	{
		Start Facing(Global.Zen, Direction Towards(Eye Position(Global.Zen), First Of(Sorted Array(Remove From Array(Global.CamPositions,
			Null), Distance Between(Eye Position(Global.Zen), Current Array Element)))), 1000, To World, Direction and Turn Rate);
		Wait(6.500 - Global.ZenAI / 15, Abort When False);
		If(Random Integer(1, 20) > Global.ZenAI);
			Call Subroutine(ZenMove);
		Else;
			Start Facing(Global.Zen, Direction Towards(Eye Position(Global.Zen), Eye Position(Global.Player)), 1000, To World,
				Direction and Turn Rate);
			Call Subroutine(ZenDoor);
		End;
		Loop If Condition Is True;
	}
}

rule("[SR] Zen Jumpscare Night 6")
{
	event
	{
		Subroutine;
		ZenJumpscare;
	}

	actions
	{
		Enable Movement Collision With Players(Global.Zen);
		Set Invisible(Global.Zen, None);
		Destroy All In-World Text;
		Stop Facing(Global.Zen);
		If(!Global.NoJumpscares);
			Set Invisible(Global.Player, All);
			Global.CurrentCam = 0;
			Start Forcing Player Position(Players In Slot(1, Team 1), Global.Zen, False);
			Wait(0.040, Ignore Condition);
			Set Status(Global.Zen, Null, Phased Out, 3);
			Set Status(Players In Slot(1, Team 1), Null, Phased Out, 3);
			Wait(0.120, Ignore Condition);
			Start Forcing Player Position(Players In Slot(1, Team 1), Vector(0, 200, 0), False);
			Play Effect(All Players(All Teams), Ana Biotic Grenade No Healing Sound, Color(Team 1), Global.Player, 200);
			Play Effect(All Players(All Teams), Sombra Logo Sound, Color(Team 1), Global.Player, 200);
			Start Modifying Hero Voice Lines(Global.Player, 0.500, False);
			Add Health Pool To Player(Global.Player, Shields, 100, True, True);
			Damage(Global.Player, Null, 300);
			Teleport(Global.Zen, Position Of(Global.Player));
			Wait(0.025, Ignore Condition);
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Zen) + Facing Direction Of(Global.Zen) * 0.700),
				Update Every Frame(Eye Position(Global.Zen)) + Global.CamShake, 0);
			Start Rule(CameraShake, Restart Rule);
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Zen);
		Else;
			Global.CurrentCam = 0;
			Start Camera(Global.Player, Update Every Frame(Eye Position(Global.Zen) + Facing Direction Of(Global.Zen) * 1.500),
				Update Every Frame(Eye Position(Global.Zen)), 0);
			Small Message(All Players(All Teams), Custom String("DEAD!"));
			Wait(1.500, Ignore Condition);
			Kill(Global.Player, Global.Zen);
		End;
	}
}

rule("[SR] Night 6 Call")
{
	event
	{
		Subroutine;
		Night6Call;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Global.PhoneRings = 3;
		While(Global.PhoneRings && !Is Button Held(Global.Player, Button(Ability 1)));
			Call Subroutine(PhoneRing);
			Global.PhoneRings -= 1;
			Wait Until(Is Button Held(Global.Player, Button(Ability 1)), 2);
		End;
		Abort If(!Is Button Held(Global.Player, Button(Ability 1)));
		Global.PhoneRings = 0;
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 200);
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[?] TESTING... TESTING... 1... 2... 3..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[?] THIS IS VOICE LOG NUMBER NINETEEN..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[?] FROM HEAD OF A.I RESEARCH BOHAI LIAO."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] OUR WORK HAS BEEN SHOWING VERY"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("PROMISING RESULTS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] SPECIALLY WITH THE FRAGMENT THAT OVERWATCH"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("HAS RETRIEVED IN THEIR ANUBIS SIEGE."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] TO HAVE A PIECE OF A GOD PROGRAM IN MY HANDS?"));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] IT IS A PRIVILEGE. AND A RESPONSIBILITY."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] WE CAN ACHIEVE GREATNESS WITH THIS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] I'LL MAKE SURE WE DO."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] I'VE UPLOADED A PROTOTYPE CODE INTO AN OLD SECURITY ROBOT..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] WHICH MUST BE KEPT IN ECOPOINT NOT TO RAISE ANY SUSPICION."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] AT LEAST IN THE NEAR FUTURE."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] A \"FRIEND\" OF MINE WITH CLOSE RELATIONS"));
		Wait(0.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("TO THE SHAMBALI..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] STRONGLY ADVISED AGAINST THIS..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] STATING I'M MESSING WITH SOMETHING I DON'T UNDERSTAND."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] AND SOMETHING ABOUT ASCENDED PROGRAMS..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] BEING ABLE TO INTERACT WITH THE REALM OF THE DEAD."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] I'VE NEVER HEARD ANYTHING MORE ABSURD THAN THIS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] THEY WILL NEVER UNDERSTAND."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] BUT IT DOESN'T MATTER."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] MY WORK IS ALMOST COMPLETE."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO] THEY WILL SEE."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[LIAO ENDS THE LOG]"));
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(Team 1), Eye Position(Global.Player), 130);
		Wait(3, Ignore Condition);
	}
}

rule("[G] Night 6 Part 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.NightNumber == 5;
	}

	actions
	{
		Skip If(Global.Cheats[1], 1);
		Chase Global Variable At Rate(Power, 0, 0.131 * Global.PowerUsage, Destination and Rate);
		Call Subroutine(Night6Call);
		Global.NightPhase = 4;
		Small Message(All Players(All Teams), Custom String("[MEI] MAX SAID HE UNCOVERED PROJECTS FOR A FIFTH ROBOT..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MEI] IF I RETRIEVE THEM I MAY BE ABLE TO FIND A WEAKNESS."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MEI] I SHOULD BE ABLE TO DOWNLOAD THEM FROM THE MONITOR STATION..."));
		Wait Until(Global.CurrentCam != 0, 99999);
		Small Message(All Players(All Teams), Custom String("[MEI] THERE IT IS!"));
		Create Effect(Global.BarValue != 100 ? All Players(All Teams) : Null, Echo Cloning Sound, Color(Team 1),
			Global.CurrentCam ? Global.CamPositions[Global.CurrentCam] : Global.InteractCams, Global.BarValue,
			Visible To Position and Radius);
		Create Progress Bar HUD Text(Global.CurrentCam && (Global.NightPhase == 4 || Global.NightPhase == 5) ? Local Player : Null,
			Global.BarValue, Global.NightPhase == 4 ? Custom String("SIGNAL LOCATED. PRESS [{0}] TO BEGIN TRANSMISSION.",
			Input Binding String(Button(Ability 2))) : Global.BarTextAndColor[0], Top, 2, Global.BarTextAndColor[1], Color(White),
			Visible To Values and Color, Visible Always);
		Global.BarTextAndColor[1] = Color(Yellow);
		Global.BarValue = 100;
		Wait Until(Global.CurrentCam && Is Button Held(Global.Player, Button(Ability 2)), 99999);
		Play Effect(All Players(All Teams), Brigitte Repair Pack Impact Sound, Color(Team 1), Global.CamPositions[Global.CurrentCam], 60);
		Global.NightPhase = 5;
		Global.BarValue = 0;
		Global.BarTextAndColor[0] = Custom String("FETCHING DATA...");
		Global.BarTextAndColor[1] = Color(White);
		Chase Global Variable At Rate(BarValue, 100, Max(100 - Global.BarValue, 3), Destination and Rate);
		Wait Until(Global.BarValue >= 100, 99999);
		Global.BarTextAndColor[0] = Custom String("DOWNLOADING SCHEMATICS...");
		Global.BarValue = 0;
		Chase Global Variable At Rate(BarValue, 100, 20, None);
		Wait Until(Global.BarValue >= 100, 99999);
		Global.BarTextAndColor[0] = Custom String("UPDATING TRANSMITTERS...");
		Global.BarValue = 0;
		Chase Global Variable At Rate(BarValue, 100, 25, None);
		Wait Until(Global.BarValue >= 100, 99999);
		Global.BarTextAndColor[0] = Custom String("COMPLETE");
		Global.BarTextAndColor[1] = Color(Green);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Team 2),
			Global.CurrentCam ? Global.CamPositions[Global.CurrentCam] : Global.InteractCams, 35);
		Wait(2, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MEI] WITH THIS I CAN REMOTELY INDUCE AN OVERLOAD..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MEI] BUT IT DRAINS POWER, SO I NEED TO BE CAREFUL."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MEI] NOW I JUST NEED TO FIND IT..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[MEI] BEFORE IT FINDS ME."));
		Wait(3, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("SHUT THE FIFTH ROBOT DOWN"));
		Chase Global Variable Over Time(BarValue, 0, 4, None);
		Global.BarValue = 0;
		Create Progress Bar In-World Text(Global.CurrentCam && Global.NightPhase == 6 ? Local Player : Null, Global.BarValue,
			Global.BarValue ? Custom String("RECHARGING...") : Custom String(
			"[{0}] TO FIRE OVERLOAD\r\n(MUST BE AIMING DIRECTLY AT TARGET)", Input Binding String(Button(Reload))), Update Every Frame(
			Global.CamPositions[Global.CurrentCam] + Direction From Angles(Horizontal Facing Angle Of(Local Player),
			Vertical Facing Angle Of(Local Player) + 15) * 1000), 1, Do Not Clip, Color(Orange), Color(Gray),
			Visible To Position Values and Color, Default Visibility);
		Global.NightPhase = 6;
		Global.ZenAI += 2;
		Call Subroutine(ZenMove);
		Set Invisible(Global.Zen, None);
		Skip If(!Global.Cheats[0], 1);
		Create In-World Text(All Players(All Teams), Custom String("{0} {2} / {1} A.I", Hero Icon String(Hero(Zenyatta)), Global.ZenAI,
			Global.ZenDoorNumber ? Custom String("OFFICE GATE") : Custom String("CAM {0}", Global.ZenPickedCamAndPos[0])), Global.Zen,
			1.200, Do Not Clip, Visible To Position and String, Custom Color(255, 255, 255, 175), Default Visibility);
		Create In-World Text(Global.CurrentCam ? Global.Player : Null, Custom String("â"), Update Every Frame(
			Global.CamPositions[Global.CurrentCam] + Direction From Angles(Horizontal Facing Angle Of(Global.Player),
			Vertical Facing Angle Of(Global.Player) + 3.870) * 1000), 2.300, Do Not Clip, Visible To Position and String,
			Global.BarValue ? Color(Gray) : Color(Orange), Default Visibility);
	}
}

rule("[G] Night 6 Part 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dead(Global.Zen) == True;
		Global.NightNumber == 5;
		Global.NightPhase == 6;
	}

	actions
	{
		Destroy All In-World Text;
		Set Invisible(Global.Zen, All);
		Global.NightPhase = 7;
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("[?] THIS IS NOT OVER YET..."));
		Wait(3, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("ESCAPE"));
		Global.DoorsWalkable = 1;
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(-7.830, 7.020, -2.910), 1.500, Visible To);
		Create Icon(All Players(All Teams), Vector(-7.830, 7.020, -2.910), Flag, Visible To, Color(White), True);
		Wait Until(Distance Between(Position Of(Global.Player), Vector(-7.830, 7.020, -2.910)) <= 1.500, 20);
		If(Distance Between(Position Of(Global.Player), Vector(-7.830, 7.020, -2.910)) <= 1.550);
			Set Invisible(Global.Player, All);
			Start Camera(Global.Player, Evaluate Once(Eye Position(Global.Player) + Up * 2), Vector(-7.830, 7.020, -2.910), 0);
			Destroy All Effects;
			Enable Built-In Game Mode Music;
			Declare Team Victory(Team 1);
		Else;
			Resurrect(Global.Zen);
			Teleport(Global.Zen, Position Of(Global.Player));
			Call Subroutine(ZenJumpscare);
		End;
	}
}

rule("[G] Fire Overload")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.NightNumber == 5;
		Global.NightPhase == 6;
		Global.CurrentCam != 0;
		Global.BarValue <= 0;
		Is Button Held(Global.Player, Button(Reload)) == True;
	}

	actions
	{
		Global.BarValue = 100;
		Global.Power = Max(0, Global.Power - 5);
		Global.PowerUsage -= 1;
		Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Color(Team 1),
			Global.CamPositions[Global.CurrentCam], 50);
		Play Effect(All Players(All Teams), Sombra Logo Sound, Color(Team 1), Global.CamPositions[Global.CurrentCam], 50);
		Play Effect(All Players(All Teams), Sombra Logo Effect, Color(Team 2), Ray Cast Hit Position(
			Global.CamPositions[Global.CurrentCam], Global.CamPositions[Global.CurrentCam] + Facing Direction Of(Global.Player) * 100,
			All Players(All Teams), Null, False), 1);
		If(Ray Cast Hit Player(Global.CamPositions[Global.CurrentCam], Global.CamPositions[Global.CurrentCam] + Facing Direction Of(
			Global.Player) * 100, All Players(Team 2), Null, False) == Global.Zen);
			Set Damage Dealt(Global.Player, 100);
			Skip If(Global.ZenAI > 2, 1);
			Small Message(All Players(All Teams), Custom String("[MEI] THAT'S IT! JUST A FEW MORE HITS..."));
			Damage(Global.Zen, Global.Player, 41);
			Start Rule(CamsJammed, Do Nothing);
			Call Subroutine(ZenMove);
			Wait(0.200, Ignore Condition);
			Global.CamsJammed = 4.800;
			Global.ZenAI += 2;
			Set Damage Dealt(Global.Player, 0);
		End;
	}
}

rule("[G] Stalling in Cam")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.NightNumber == 5;
		Global.NightPhase == 6;
		Has Status(Global.Zen, Stunned) == False;
		Global.CurrentCam == Global.ZenPickedCamAndPos[0];
		Angle Between Vectors(Facing Direction Of(Global.Player), Direction Towards(Global.CamPositions[Global.CurrentCam], Eye Position(
			Global.Zen))) < 20;
	}

	actions
	{
		Wait(2.500, Ignore Condition);
		Abort If(Global.CurrentCam != Global.ZenPickedCamAndPos[0]);
		Call Subroutine(ZenJumpscare);
	}
}

rule("[SR] Zen at Doors")
{
	event
	{
		Subroutine;
		ZenDoor;
	}

	actions
	{
		Global.ZenDoorNumber = Random Integer(1, 3);
		If(Global.ZenDoorNumber == 1);
			Wait Until(!Is In Line of Sight(Eye Position(Global.Player), Vector(1.930, 8.430, -30.570), Barriers Do Not Block LOS)
				|| !Is In View Angle(Global.Player, Vector(1.930, 8.430, -30.570), 75), 99999);
			Teleport(Global.Zen, Vector(3.390, 7.060, -31.060));
			Wait(6 - Global.ZenAI / 10, Ignore Condition);
			Wait Until(!Global.CurrentCam, 4);
			If(Global.ClosedLeftDoor);
				Wait Until(!Global.CurrentCam && (!Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Bastion),
					Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Eye Position(Global.Bastion), 75)), 99999);
				If(Global.ClosedLeftDoor);
					Global.ZenDoorNumber = 0;
				Else;
					Call Subroutine(ZenJumpscare);
				End;
			Else;
				Call Subroutine(ZenJumpscare);
			End;
		Else If(Global.ZenDoorNumber == 2);
			Wait Until(!Global.CurrentCam && (!Is In Line of Sight(Eye Position(Global.Player), Vector(-4.380, 9, -23.220),
				Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Vector(-4.380, 9, -23.220), 75)), 99999);
			Teleport(Global.Zen, Vector(-4.380, 7.040, -23.220));
			Wait(6 - Global.ZenAI / 10, Ignore Condition);
			Wait Until(!Global.CurrentCam, 4);
			If(Global.ClosedRightDoor);
				Wait Until(!Global.CurrentCam && (!Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Zen),
					Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Eye Position(Global.Zen), 75)), 99999);
				If(Global.ClosedRightDoor);
					Global.ZenDoorNumber = 0;
				Else;
					Call Subroutine(ZenJumpscare);
				End;
			Else;
				Call Subroutine(ZenJumpscare);
			End;
		Else If(Global.ZenDoorNumber == 3);
			Wait Until(!Global.CurrentCam && (!Is In Line of Sight(Eye Position(Global.Player), Vector(6.740, 9.020, -19.940),
				Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Vector(6.740, 9.020, -19.940), 75)), 99999);
			Teleport(Global.Zen, Vector(6.740, 7.020, -19.940));
			Wait(6 - Global.ZenAI / 10, Ignore Condition);
			Wait Until(!Global.CurrentCam, 4);
			If(Global.ClosedFrontDoor);
				Wait Until(!Global.CurrentCam && (!Is In Line of Sight(Eye Position(Global.Player), Eye Position(Global.Zen),
					Barriers Do Not Block LOS) || !Is In View Angle(Global.Player, Eye Position(Global.Zen), 75)), 99999);
				If(Global.ClosedFrontDoor);
					Global.ZenDoorNumber = 0;
				Else;
					Call Subroutine(ZenJumpscare);
				End;
			Else;
				Call Subroutine(ZenJumpscare);
			End;
			Call Subroutine(ZenMove);
	}
}

rule("[SR] Zen Move")
{
	event
	{
		Subroutine;
		ZenMove;
	}

	actions
	{
		Global.ZenPickedCamAndPos[0] = Random Value In Array(Remove From Array(Array(1, 2, 3, 4, 5, 6, 7), Global.ZenPickedCamAndPos[0]));
		Global.ZenPickedCamAndPos[1] = Random Value In Array(Global.ZenPositions2[Global.ZenPickedCamAndPos[0]]);
		Wait Until(Global.CurrentCam != Global.ZenPickedCamAndPos[0], 99999);
		Teleport(Global.Zen, Global.ZenPickedCamAndPos[1]);
	}
}
