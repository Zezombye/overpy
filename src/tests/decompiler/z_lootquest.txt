settings
{
	main
	{
		Description: "Loot Quest - Regular Maps - v7.5.1.8 (by Delwion#2667) Share Code 4QV99: Hunt enemies for a chance to obtain epic loot and save your progress with the help of a 40-digit save code! Enemy levels: 1-60. Loot Quest news, game mode manual, and forums on: https://lootquest.shivtr.com"
		Mode Name: "Loot Quest - Regular Maps"
	}

	lobby
	{
		Map Rotation: After A Game
		Max Spectators: 0
		Max Team 1 Players: 0
		Max Team 2 Players: 6
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Blizzard World 972777519512068153 972777519512068154 972777519512068194
				Blizzard World Winter 972777519512063901
				Dorado 972777519512068153 972777519512068292
				Eichenwalde 972777519512068292 972777519512068154
				Eichenwalde Halloween 972777519512063901
				Hanamura 972777519512068154
				Hanamura Winter 972777519512063901
				Havana 972777519512068153 972777519512068154
				Hollywood 972777519512068153 972777519512068154
				Hollywood Halloween 972777519512063901
				Horizon Lunar Colony 972777519512068154
				Junkertown 972777519512068154
				King's Row 972777519512068153 972777519512068292
				King's Row Winter 972777519512063901
				Numbani 972777519512068154
				Paris 972777519512068292
				Rialto 972777519512068292 972777519512068154
				Route 66 972777519512068153 972777519512068154 972777519512068194
				Temple of Anubis 972777519512068154
				Volskaya Industries 972777519512068292
				Watchpoint: Gibraltar 972777519512068154 972777519512068292
			}
		}

		General
		{
			Allow Hero Switching: Disabled
			Game Mode Start: Immediately
			Hero Limit: Off
			Kill Cam: Disabled
			Kill Feed: Disabled
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		Team 2
		{
			enabled heroes
			{
				Tracer
			}
		}
	}
}

variables
{
	global:
		0: llIIIllIllIlllIlllIIIlllll
		1: lIlIlIIlIIIIlIllIIllllllll
		2: IlllllIIlIIllIlIlIIIlIlIlI
		3: IllIIlIllllIIIllIlllIIlIIl
		4: IIIlIlllIllllIlllllllIIlII
		5: IIIIlIIllIlllIllIIIlIlIlll
		6: lIllIIlIlIIIIIlIIIlIlIlllI
		7: IlllIIIIlIIIlIllIIlIlIlllI
		8: IIIllIIlllIlllllllllIlIllI
		9: lllIlIIIIIIlIlIIllIlIllllI
		10: lllllIIlIlllIIllIIlIIlllII
		11: IIllIllIllllIIlIlIlIIIIlIl
		12: lIIlIlIlllllIllIIllIlllIIl
		13: IllIllllIIIIllIIIIIIIlIIIl
		14: lIlIllIlIIlllIIllIIIIllIlI
		15: IIlIllIIlIIllIlIlIIllIIIIl
		16: IIIllIIIlIIllIIIIlIllllllI
		17: IIlIlllIlIIIIllIIlIlIlIlll
		18: llIlIIIlllIlIllllllllllIII
		19: IIlllIIIIIllIlIllIlIlllIII
		20: IIIlIIIlIIllIIlllIlIIllIll
		21: IIlIllIIllIIlIllIIIIIIIIlI
		22: lIIlIIIIllIIIIIlIlIIIlIIll
		23: IIIlllllIIIllllllIIllIlIIl
		24: IlIllIIlIIIIlIIlIlIIIlIIlI
		25: lllllIIIlIlIlllllIlllIlllI
		26: IlIIlIIIlllIIlIllIIIIIllIl
		27: IlIllllIllllllIIlIIlIllIII
		28: llIlIlIllIIllIlIlllIIlllIl
		29: lIIlIllllllIlllIlIIlIIllll
		30: lllIIllllIlIIlllIlIIIIlIIl
		31: IlllllIlllIIIllIIllllIlllI
		32: IlllIlllllIIllIlIlIIlIllll
		33: llIllIlIIIIlIIlllIllIlllIl
		34: IlllIllIIIlIIlIIIIlIlIIIIl
		35: IllIlIIllIIIIllllIllIIIIlI
		36: IIIIlllIIIIlIIIlIIIIllllIl
		37: IIIlIlllIlIllIIllllllIIIIl
		38: IllIIIlIllllllIllIlllIlIll
		39: lllIIIIllIIlIIllIlIIllllII
		40: lllllIlIIlllIIIlIlllllllIl
		41: lIIlllIllllIlIIIIlIllIIIlI
		42: IlIlIIIlIIllllIllIlllllIll
		43: IlIIIIllIllIllllIlIlIllllI
		44: llIIlllllIIlllllllllIIlIII
		45: IlIllIIIlIIIIIIllIIIIIIIIl
		46: IlIIIIIlllIlIlIIlllIIlllll
		47: IlllllIIllIlIIIllIIIllIIIl
		48: llIIllllIIIlIIIIIllIlIIIll
		49: IIlIllllllllIlIIIlllIlllIl
		50: IIIIlIIIIIlIIIIlIIIIllIlII
		51: IIllIIIlIllIlIlllIlllIlllI
		52: IlIllIIIIIIIIllIIlIIllllII
		53: llllIIlIlllIIlllllIIIlIlll
		54: llIIIllIlIlIIIIllIlllllIIl
		55: IIIlIlIIIIllIlllllIIIIllIl
		56: llIlIllIIIlllIlllIIlIIIIII
		57: llllIIllIIlIIIlIlIlIlIlIlI
		58: lllIllIlIlllIIIIlIIlIIllII
		59: lllllIIIllIIIllIlIIllIllII
		60: IllIlIllIllIllIIlIIIIllIIl
		61: llllIIIIllIIlIlIIllIIllIll
		62: IllIIlIllIlIIIllIIlIIlllIl
		63: llIlIIlIlIlIllIllllIllIllI
		64: lIllllllIlIIlllIlllllIllll
		65: IIIIllIlIIlIIIlIIllIllIIlI
		66: lIlIIIlIlIIllIIIIllIlIlIlI
		67: IIllllIlIIlIIIllIllIIIIlII
		68: IIlIlIIlllIlIIllllIIlIlIIl
		69: IlIllllIIIIIIIIlllIIllIIII
		70: llIIIllIIIIlIlllIlIIIllIll
		71: lIlIIlIIlIlIIlIlllllIlIIII
		72: lIllIllIIllIllllIIlllIIlIl
		73: IlIIlIlIIIlIIlIIlllllIlllI
		74: lIIllIllIllIlIIIlllIlllIIl
		75: IllIlIIIlIlIIIlIlllIIIllII
		76: IIIllIIIlllIllIIlIIIllllII
		77: lIIIIIllllIlIIIIlIIIlIIIll
		78: IIIlIIlIIIIIlIlIIIlIllIlII

	player:
		0: IIIIIlIlIlIllIlllllIIllIll
		1: IlllIlIIIIIlIlllIIIIlIllll
		2: llllllIlIIlIIllIIlllIlIIII
		3: lIlllllllIlIlIlIIIIIlllIII
		4: llllllIlIIIIllIllIlIIIllII
		5: lllIIIIIIIlllIIlIIIlllIIIl
		6: lIllIIIIlIIlllIllIllIIIlII
		7: IIllIIlIIllIIlIIlIlllIIllI
		8: IIllIlllIllIIIllIIIlllIIII
		9: lIIIIllIIIIIlIIIIllllIlIlI
		10: lIlIlIIlIIIllIIIlIIlIllIIl
		11: lIlllllllllIllllIIIIlllIlI
		12: IIlIllllllIIlIIIllllIIllII
		13: lIIllIlllIllIlIIIlIllIIIlI
		14: llllIIlIlllllllIIllIlIllII
		15: llIlIIllIIIIIIIIlIlIlIIlII
		16: IlIlIlIIIlIIlIIlIlIlIIllll
		17: IllIlIIIllIlIlIIIlIIlIlIII
		18: IlIIlllllIIlIIllIIlllIIIll
		19: IllIlIllIlllIlIlIIIIIlllll
		20: IIllIIlllllllIlIIllIIIIIll
		21: IIlIIIIllllIllIIlIIIIlIlll
		22: lllIlIIllIIllIIIIlllIIllII
		23: IlIllIIlllllllllIIIIllllll
		24: IIlIIIIIIllIIlIlIIIlllllIl
		25: lIlIIlIIlIllIIIIIlIlIIIIll
		26: IlllIIlilllIilIIIIIIlIlIil
		27: llIIlllIllIIIllIllIIIIIIll
		28: llIllIlIllIIlIlIIlIIlIIIll
		29: IlIIIIIlllIlIIlIlIlllIlllI
		30: llIIllIlIlIlIIlllIllllIIIl
		31: IIIIlIIlIIlIlIIllIIlIIIIII
		32: IllIlIllIIIIlIIllIllIllIlI
		33: lIIlIIIIIIIlIIlIIlIIIlllIl
		34: lIlIlllIIlIlllIIIIllIIlIlI
		35: lIIlIlllIIlllIIlIlIlIIllll
		36: lIlIlllIllIlIIIllllIllIlll
		37: IllIIIIlIlIIlIIllIllIIIlll
		38: llllIlIIllIlllIlIllIIIllll
		39: llllIIlIIIllIIIllllIIllllI
		40: lllIIlllIIlIIlllIIIIlllIlI
		41: lIlIIIIIIlIIlIlIlIIlIIIIlI
		42: IIlllllIIIIlllIIIlllIllIlI
		43: llllIIlIIllIllIIlllllIllll
		44: lIIIIIlIlIllIlIIIIIlIlIIlI
		45: IlIlIIIlIIllIIIIllIlIIllll
		46: lIlIIlIlIlIIIlIlllllIlIIII
		47: lIIIllIIllIIIllIlIIllIlIll
		48: IIIllIIllIIIIllIlIlIIIIIII
		49: IlIllIlIlIlllIIlIllllllllI
		50: lIIIIlIlIIlIIlIllllllIIllI
		51: lIllIIlIllllIlIIIllIIllIlI
		52: IllIlIIlIIlIlIlIllIllllllI
		53: llIIllllIIlIIIIIIIlIlIlllI
		54: llllllIllIIlllllIlIIlIIllI
		55: llIIIIIIllIIlIIlIlIIIIllII
		56: IIIlIlIllIIIlIIllllIIllIII
		57: IIIlIlIIlIIlIIIlllllIIIlIl
		58: IlllIIlllIlllIIlIlIIIIllIl
		59: IIIIIIlIlIllIIIllllIllIlll
		60: llIIlllIIIIllIIllIIIIIllII
		61: lIlIlIIIIllIlllIIIIIlIlIll
		62: IIllIIllIllllllllIIlIIIIll
		63: IlIIllIlllllIlIIlIlIlllllI
		64: IIIllIIIlIlIlIlIlIllIIIlIl
		65: IIIlIlIllIlllIllllIlIllIll
		66: lIIllIlIlllIIllIlIIllllIIl
		67: IIlIllllIllIIllIlIIlIIlIll
		68: IllIlIlIIlIIIIIIIIlIlIlIlI
		69: IIIlIlIIlllIIlIIlllIIIIlII
		70: IlIIIlIIlIIIIlIlIlIlIIlIll
		71: lllIlllIIllIlIIIlllIIlIllI
		72: lIIIIIllIlIIlIlIIIlIlIIlII
		73: IlIlIlIlIIIlIIllIIlllllIIl
		74: lIIlIllIIIIllIlIIIlIIlIIII
		75: llllllIIIlllIlIlIlIIIIIlll
		76: lIIIIIIlIIllllIllIlIIllIlI
		77: lIIIlIlIIIIIIllllIlIlIlllI
		78: IlllIllIlIlllIlIlIIlIllIlI
		79: IIlllIlIIIlIlIlIlIIIIIllII
		80: IIIIlllIllIIIllIllIlIlIlll
		81: llIllIIIlIllllIIlIlIIIlllI
		82: llIIIIIIIlIIIIlIlIIIIlIllI
		83: IIIlIllIlIIllIlIlllllIlIll
		84: IllIlllllIIIlIllIllllllIII
		85: lIlIIIIlIIlIIlIIlIIIllllII
		86: IIlIIllIIIllIllllIIIIlIIll
		87: lIIIlIIIlllllIIllIllIIIIll
		88: IIIIIIlllllllIlIIIIIlllIlI
		89: IlIIIllIIlIIllllIlIIllllIl
		90: llIIlIIIIlIllIIIIIlIIlIIll
		91: IIIIIIIIlIIlIIIIIIIllIIIII
		92: lllIlIlIlIIIIlIIllIIlIIIIl
		93: IllllllllIlIlllIIlllIlIlII
		94: lIlIIlllIIIlIllllIllIIlIlI
		95: IIIIllIIlIllIlIlIllIlIIIIl
		96: IIllIIllIIIIIlIlIIllIllllI
		97: llllllIIIlIIIIIlIIllIlllll
		98: lIllIlIIlllIllIlIlllllIIII
		99: IlIIlIIlIIlIIIIlIlIllllllI
		100: IllIIIlIlllIllIlIIllIllIII
		101: llIlIlIllIIllIlllIlIIlIllI
		102: lIllIlllIlllIIlIIlllllIllI
		103: IlIIlIIIIIllIlIlIlIIIlIIIl
		104: IIIlIIIIlIlllllIllIlIIlllI
		105: llIIIlllIIIlllllIIllIIIIIl
		106: IIIIIlllIIIlllIIIIIIIIIIII
		107: lIIIlIIllIIIlllllIIIIllIlI
		108: lIIllIIIlIlIlIllIIIlIllIII
		109: llIlIIIlIlIIlIIIllllIlllII
		110: lllIlllIllIIIlIIIIlllllIIl
		111: IlIIIIIlIIIllllIllIlIIIlll
		112: lIIlIIlIllIIllIIlIllIllIIl
		113: IIlIlIlIIlIIIllIllIlIIllll
		114: lIlIlIIIlllIIIIlIIlIlllllI
		115: lIlIIllIlllIIlIIlIlIIlIlIl
		116: IIIllIlIIIIlIlllIlllIlIIlI
		117: IIlllllIIlIIlIIIIIIIIlIlII
		118: IllllIIlllllIIllIIllIlIlIl
		119: lllllIIlllIlllllIIlIIlllII
		120: lIIllllIlIIIllIIllllIIIlll
		121: IlIIllllIlllIllIIIllIlIlll
		122: IIIIlIIIIllllIlllIIIlllIIl
		123: IIllIlIIIIIIllIIIllIlIllII
		124: IIIllIIlIlIIIlllllllIIIlIl
}

subroutines
{
	0: IllIlIlIllIlIlIllIlllIlIIl
	1: lIlIlIIIIllllIlIIIIIIlllIl
	2: lIllIlllIIIlIllIIIlIlIlIlI
	3: IIlllIIlllIllllllIIIIIIlII
	4: IlllIlIIIIIllllIlllllIlllI
	5: lIIllIllllIlIIIlllIIllIllI
	6: lIIlllIlllIIllIllllllIllII
	7: llIllIlIIIllIIlIlIlllIIllI
	8: IlllllIlIllllIIlllIllllllI
	9: llllIlIllIlllIllllIllIIllI
	10: IlllIlIlIlllIIlIllIlllllll
	11: lllllIIIllIlIIIlIlIllllllI
	12: IIllllIlIIIllllllIlIIIlllI
	13: IllllIIllIllllIIIIIIllIlII
	14: IIllllIlIllIllIlIlIIlIllII
	15: lIIlllIlIIlIIIllIllllIlllI
	16: lIIIlllIlIIllIlllllllIlllI
	17: lllllllIIIIIIIllIIllllIIlI
	18: lIIllllIIIlIlIIIIllIIIIIll
	19: IIlIllIIllIlIIIIlIIIIllIll
	20: IllIIIIllIlIIIIIlIlIlIlIll
	21: lIIIIlIllllIIIlIIllllIllll
	22: lllIIIlIlIllIIIlIIIIIlIIIl
	23: IIIlIlllIlIIIlIlllIllIIllI
	24: llIIlIIIIIIIllIlllIIIIlIII
	25: llIlIIllIIllIIllllIlIIlIlI
	26: llIlIlllIIIIIlIIllIlIIIIlI
	27: lIIlIIIllllllIlIIllIlIlllI
	28: IlllIIlIllIlIIIIIlIIIllIII
	29: llIlIIlIlIllIIIIlllIIIlIlI
	30: IllIIIIIllIlllllIlIllIlllI
	31: IIllIIllllIIIlIlIIllIIlIII
	32: lIllIIlIIIlIllllIlIlIIIlIl
	33: lIlIllllllllIIIIllIlIlIIlI
	34: llIIlIllIllIlIIIIlIlIIIlII
	35: IIIlIlllIIIIIllIlIllIIlIII
	36: lIlIIIIlIIlIlIlIlllIllllIl
	37: llllIllIlIIIIIllIlIIIIIIIl
	38: llIIIllllIlIllIlIIIlIlIIIl
	39: IIIIlIIlIllIlllIIIIlIlllII
	40: IIIlIIIIllllIllllIlIIlIlll
	41: lIlIIlIllllllIIllllllIIIIl
	42: IIIlIlllllIlIlllIIIllIIllI
	43: lllIIlllllIlllIllllIllIIll
	44: IIlIIllIlIllIIIlllIlllllll
	45: IIIIlllllIIIlllIIlllIllllI
	46: IIlIIIlllIIIllIlllIllllIII
	47: IlllIlIIlIllllIlllIIlIlllI
	48: llIlllIllIIllllIIIIIllIlII
	49: llIllIIIIlIIIIlIlIlIIllIll
	50: IlIIlllIllIIllIIIIlIlIllll
	51: IlIlIlIIIIIlllllllllIlllIl
	52: lIlIlllllIIIlllllIIIllIIII
	53: IllllIIIlllIlIIlIlIlllIllI
	54: lIlIllllIllllIIIllllIIIIlI
	55: IlIllIllIllIlIlIIlIIIlllIl
	56: lllIlllIIIlIllllIIIIIIlIlI
	57: lIIlllIIlIlllIlIIIIIIIIIII
	58: IlllllllIIlllllllllllIlIlI
	59: llIIIIlllIIIIIllllllIllllI
	60: IllllIlIlIllIIllIIIllllllI
	61: IlIllIIIlIIIIIlIIlIlIIlIIl
	62: IlllllIIlIIIlIlIIIlllIllII
	63: IlllIIlIllIlllllIlIIllIlIl
	64: IIlllllIllIIlIIIIIlllIlIIl
	65: llllIlIIlIIIIlIllIlIlIIlll
	66: lIIlIIlIlllIIlllIlIllIllIl
	67: IlIllIIIlllIIIllIIlllllllI
	68: IIIllIlIIllIllllIIIlllIlIl
	69: lIIlIlIIlIlIIllIllIIlIIIlI
	70: lIIlIllllIIlIlIIIIIIlIIlII
	71: llIIlIIlIllIIlIllIIlIlIIII
	72: lIIlllIIlIIlIlIIllIllIIIIl
	73: llIllIllIllIIIlIlIlIIlIlII
	74: IIIIlIIlIIlIlllIIlIlIlIIIl
	75: IllIIllIIIIIllIIIIllIIIlII
	76: lllIIllIIIlIIllIIllIlllIlI
	77: IIlIIIIlIIlIlIllllIIlIlllI
	78: llIIlllllIlIIIIIIIllIIIlII
	79: lIIIllIIIlllllIllIIlllIIll
	80: lIllIIIIIIllllIIlllIllllIl
	81: lIlIlIIllIIlllIlllllllllll
	82: IllIlIlIIIlIIIlIlIlIlIlIll
	83: llllIlIllIIIlIIIlllIIlIIIl
	84: IIIlIllIIIIllIIlllIIlIlIll
	85: lIIIIlIllIIIIlIIIIllIIlIlI
	86: llIIlIIllllllIIlIIIIIIlIll
	87: IlllIIIIlIIlIIIIllllllllIl
	88: IIlIIlllIIIIIlIIIIllIIIIIl
	89: IlIlllllIlIIIlIlllIlIlIIll
	90: IIlIIIIIllIIlIIIIlIlIlllII
	91: llIlIlIlIllIlIIIlIlllllIII
	92: IlIIIIIlIllIIllIlIIlIlIIII
	93: IIlIIIIIIllIlIlllIllIIIlll
	94: llIlIIIlIIlIIIIIllIlIIllIl
	95: IllIIIlIIIIlllIllIlIlIlllI
	96: lIIIllIlIlIIllIlIIlIlIIlIl
	97: lllIlllIlIlIllIlIllIIlllIl
	98: lIlllIlIIIllllIIllIlIlIIIl
	99: IllllllIlIlIIIlIlIIIlIIlII
	100: llIIIlIIIIllIlIllIIllllIlI
	101: IlIlIllIIlIlIlllIIIIIIIlII
	102: llIIlIlIIIIIllIIlIllIIIlII
	103: IlIllIIIIIlIlIIllIIIlllIll
	104: llIlIIIlllllIllIlIIIlllIIl
	105: IIIlIIlIIIlIIllIlllIlIllII
	106: lIIIIllIIlIllIlllllIlllIII
	107: lIllIlIlIllIIIIIlIlllIllIl
	108: IIIlIIllllIlIlIlIlIlIlIIlI
	109: lIIlllIIlllllIIlIIlIIIIIlI
	110: IIIIIIlIIIlIIIIIIIIlIIIlIl
	111: llIIlIllIllIIIIlIlllIlIlll
	112: IIIIlIllIlIIIlIlllllIIIllI
	113: IllIIIIllIIllIIllIlIlIIlll
	114: lIIIIIIllIIllIlIIIlIlIlIll
	115: lllIllllIllIIlIllIIIIIIllI
	116: lllIlllllIlIIIllIlIlIIIlIl
	117: lllIllIlIIllllIlIlIlllllll
	118: lllIIIIIIllIlIIlIIlIIIIIII
}

rule("lIIlllllIlIlllIllIIIlIIlll")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Disable Built-In Game Mode Completion;
		Call Subroutine(IIIIlIIlIIlIlllIIlIlIlIIIl);
		Modify Global Variable(IllIlIIIlIlIIIlIlllIIIllII, Append To Array, Global.IlIlIIIlIIllllIllIlllllIll);
		Global.llIIIllIllIlllIlllIIIlllll = Array(1, 0.400, 0.067, 0.045);
		If(!Global.lIllllllIlIIlllIlllllIllll);
			Global.lIllllllIlIIlllIlllllIllll = Global.lIIllIllIllIlIIIlllIlllIIl[0];
		End;
		If(!Global.IIlIllIIllIIlIllIIIIIIIIlI);
			Global.IIlIllIIllIIlIllIIIIIIIIlI = Direction Towards(Global.lIIllIllIllIlIIIlllIlllIIl[4], Global.lIIllIllIllIlIIIlllIlllIIl[3]);
		End;
		Global.llIlIIIlllIlIllllllllllIII = Global.IllIlIIIlIlIIIlIlllIIIllII[2];
		Create In-World Text(Filtered Array(All Players(Team 2),
			Current Array Element.IlllIllIlIlllIlIlIIlIllIlI == 1 && !Current Array Element.IlIIlllllIIlIIllIIlllIIIll), Custom String(
			"     1   2   3   <\r\n     4   5   6   >\r\n     7   8   9   0"), Global.llIlIIIlllIlIllllllllllIII + Direction From Angles(
			Global.IlIllllIIIIIIIIlllIIllIIII, 0) * 1000, 4, Do Not Clip, Visible To, Color(White), Visible Never);
		Create In-World Text(Filtered Array(All Players(Team 2),
			Current Array Element.IlllIllIlIlllIlIlIIlIllIlI == 1 && Current Array Element.IlIIlllllIIlIIllIIlllIIIll), Custom String(
			"     1   2   3   <\r\n     4   5   6   >\r\n     7   8   9   0"), Global.llIlIIIlllIlIllllllllllIII + Direction From Angles(
			Global.IlIllllIIIIIIIIlllIIllIIII, 0) * 1000, 4, Do Not Clip, Visible To, Color(Aqua), Visible Never);
		Global.lIlIIlIIlIlIIlIlllllIlIIII = Null;
		Global.IIllIllIllllIIlIlIlIIIIlIl = Empty Array;
		Global.lllllIIIlIlIlllllIlllIlllI = Empty Array;
		Global.IlIIIIllIllIllllIlIlIllllI[6] = 2.667;
		Global.IIIlIlIIIIllIlllllIIIIllIl[1] = 1;
		Set Match Time(0);
		Global.lllllIIIllIIIllIlIIllIllII = (Workshop Setting Combo(Custom String("General"), Custom String("Initial match duration"), 25,
			Array(Custom String("20min"), Custom String("30min"), Custom String("40min"), Custom String("50min"), Custom String("1h"),
			Custom String("1h 10min"), Custom String("1h 20min"), Custom String("1h 30min"), Custom String("1h 40min"), Custom String(
			"1h 50min"), Custom String("2h"), Custom String("2h 10min"), Custom String("2h 20min"), Custom String("2h 30min"),
			Custom String("2h 40min"), Custom String("2h 50min"), Custom String("3h"), Custom String("3h 10min"), Custom String(
			"3h 20min"), Custom String("3h 30min"), Custom String("3h 40min"), Custom String("3h 50min"), Custom String("4h"),
			Custom String("4h 10min"), Custom String("4h 20min"), Custom String("4h 30min")), 0) + 2) * 600 - 600;
		Global.IlIllllIllllllIIlIIlIllIII = Workshop Setting Combo(Custom String("General"), Custom String("Allow Autosave"), 1, Array(
			Custom String("Every 5 minutes (not recommended)"), Custom String("Every 10 minutes"), Custom String("Every 15 minutes"),
			Custom String("Every 20 minutes"), Custom String("Every 25 minutes"), Custom String("Every 30 minutes"), Custom String(
			"Disabled")), 1);
		Global.IIIlIIIlIIllIIlllIlIIllIll = 1 + 0.100 * Workshop Setting Combo(Custom String("General"), Custom String(
			"Enemy health and EXP modifier"), 0, Array(Custom String("100%"), Custom String("110%"), Custom String("120%"), Custom String(
			"130%"), Custom String("140%"), Custom String("150%"), Custom String("160%"), Custom String("170%"), Custom String("180%"),
			Custom String("190%"), Custom String("200%")), 2);
		Global.lllllIIlIlllIIllIIlIIlllII[7] = Round To Integer(100 * Global.IIIlIIIlIIllIIlllIlIIllIll, To Nearest);
		Global.IlIIIIllIllIllllIlIlIllllI[5] = Global.IIIlIIIlIIllIIlllIlIIllIll;
		Global.IlIIIIllIllIllllIlIlIllllI[2] = Global.lllllIIIllIIIllIlIIllIllII;
		Global.IlllIlllllIIllIlIlIIlIllll[9] = Workshop Setting Combo(Custom String("General"), Custom String("Text log"), 0, Array(
			Custom String("Allowed"), Custom String("Disabled")), 3);
		Global.IlllIlllllIIllIlIlIIlIllll[10] = !Workshop Setting Combo(Custom String("General"), Custom String(
			"Large health bar for special bosses"), 0, Array(Custom String("Enabled"), Custom String("Disabled")), 6);
		Global.lllllIIlIlllIIllIIlIIlllII[0] = Workshop Setting Integer(Custom String("Player Level Limit"), Custom String(
			"Min player level"), 1, -118, 120, 9);
		Global.lllllIIlIlllIIllIIlIIlllII[5] = Max(Global.lllllIIlIlllIIllIIlIIlllII[0], 1);
		Global.lllllIIlIlllIIllIIlIIlllII[1] = Max(Workshop Setting Integer(Custom String("Player Level Limit"), Custom String(
			"Max player level"), 120, 1, 120, 10), Global.lllllIIlIlllIIllIIlIIlllII[0]);
		Global.lllllIIlIlllIIllIIlIIlllII[2] = Workshop Setting Combo(Custom String("Player Level Limit"), Custom String(
			"Increase min player level as host gains levels"), 0, Array(Custom String("No (-)"), Custom String("Yes (+)")), 11);
		Global.lllllIIlIlllIIllIIlIIlllII[3] = Workshop Setting Combo(Custom String("Player Level Limit"), Custom String(
			"Increase max player level as host gains levels"), 0, Array(Custom String("No (-)"), Custom String("Yes (+)")), 12);
		Global.lllllIIlIlllIIllIIlIIlllII[6] = Custom String("({0}{1})", Array(Custom String("-"), Custom String("+"))
			[Global.lllllIIlIlllIIllIIlIIlllII[2]], Array(Custom String("-"), Custom String("+"))[Global.lllllIIlIlllIIllIIlIIlllII[3]]);
		Global.IIIllIIIlIIllIIIIlIllllllI = Workshop Setting Combo(Custom String("Enemy Levels"), Custom String("Adaptive or fixed"), 0,
			Array(Custom String("Adaptive"), Custom String("Fixed")), 13);
		Global.IlIIIIllIllIllllIlIlIllllI[3] = !Global.IIIllIIIlIIllIIIIlIllllllI;
		Global.IlIIIIllIllIllllIlIlIllllI[0] = -5 + Workshop Setting Combo(Custom String("Enemy Levels"), Custom String(
			"(Adaptive) Enemy level shift"), 5, Array(Custom String("-15"), Custom String("-12"), Custom String("-9"), Custom String("-6"),
			Custom String("-3"), Custom String("+0"), Custom String("+3"), Custom String("+6"), Custom String("+9"), Custom String("+12"),
			Custom String("+15")), 14);
		Global.IlIIIIllIllIllllIlIlIllllI[4] = Global.IlIIIIllIllIllllIlIlIllllI[0];
		Global.IlIIIIllIllIllllIlIlIllllI[7] = Global.IIIllIIIlIIllIIIIlIllllllI;
		Global.IlIIIIllIllIllllIlIlIllllI[1] = Workshop Setting Combo(Custom String("Enemy Levels"), Custom String("(Fixed) Enemy levels"),
			0, Array(Custom String("1-12"), Custom String("3-15"), Custom String("6-18"), Custom String("9-21"), Custom String("12-24"),
			Custom String("15-27"), Custom String("18-30"), Custom String("21-33"), Custom String("24-36"), Custom String("27-39"),
			Custom String("30-42"), Custom String("33-45"), Custom String("36-48"), Custom String("39-51"), Custom String("42-54"),
			Custom String("45-57"), Custom String("48-60"), Custom String("51-60"), Custom String("54-60"), Custom String("57-60"),
			Custom String("60")), 15);
		Global.IlllIlllllIIllIlIlIIlIllll[0] = !Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"On hit ability effects"), 0, Array(Custom String("Allowed"), Custom String("Disabled")), 17);
		Global.IlllIlllllIIllIlIlIIlIllll[1] = !Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"On hit visual effects"), 0, Array(Custom String("Allowed"), Custom String("Disabled")), 18);
		Global.IlllIlllllIIllIlIlIIlIllll[2] = !Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"Permanent glow effects"), 0, Array(Custom String("Enabled"), Custom String("Disabled")), 19);
		Global.IlllIlllllIIllIlIlIIlIllll[3] = !Workshop Setting Combo(Custom String("Visual Effects"), Custom String("Loot explosions"),
			0, Array(Custom String("Enabled"), Custom String("Disabled")), 20);
		Global.IlllIlllllIIllIlIlIIlIllll[4] = !Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"Teleport, spawn, and despawn effects"), 0, Array(Custom String("Enabled"), Custom String("Disabled")), 21);
		Global.IlllIlllllIIllIlIlIIlIllll[5] = !Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"Level up and boss effects"), 0, Array(Custom String("Enabled"), Custom String("Disabled")), 22);
		Global.IlllIlllllIIllIlIlIIlIllll[6] = !Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"Heirloom visual effects"), 0, Array(Custom String("Enabled"), Custom String("Disabled")), 23);
		Global.IlllIlllllIIllIlIlIIlIllll[7] = Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"Custom enemy outlines"), 1, Array(Custom String("Disabled"), Custom String("Enabled (default visibility)"), Custom String(
			"Enabled (always visible)")), 24);
		Global.IlllIlllllIIllIlIlIIlIllll[8] = !Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"Input effect (enter code mode)"), 0, Array(Custom String("Enabled"), Custom String("Disabled")), 25);
		If(Workshop Setting Combo(Custom String("Visual Effects"), Custom String(
			"Disable all visual effects (overrides individual settings below)"), 0, Array(Custom String("Off"), Custom String(
			"Disable all")), 16));
			For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 9, 1);
				Global.IlllIlllllIIllIlIlIIlIllll[Global.lIIlllIllllIlIIIIlIllIIIlI] = False;
			End;
		End;
		Global.lIIlIllllllIlllIlIIlIIllll = Array(Custom String("Common"), Custom String("Uncommon"), Custom String("Rare"), Custom String(
			"Epic"), Custom String("Legendary"), Custom String("Primal"), Custom String("Heirloom"), Custom String("Unique"));
		Global.IIllllIlIIlIIIllIllIIIIlII = Custom Color(255, 0, 0, 255);
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Custom Color(255, 127, 0, 255);
		Global.IIlIlllIlIIIIllIIlIlIlIlll[0] = Array(Color(Yellow), Color(White), Custom Color(30, 255, 0, 255), Custom Color(0, 112, 221,
			255), Custom Color(163, 53, 238, 255), Custom Color(255, 128, 0, 255), Global.IIllllIlIIlIIIllIllIIIIlII, Custom Color(0, 204,
			255, 255), Custom Color(165, 146, 99, 255));
		Global.IIlIlllIlIIIIllIIlIlIlIlll[1] = Array(Color(White), Color(Yellow), Color(White), Color(Orange), Color(Red), Color(Aqua),
			Color(Blue), Color(Sky Blue));
		Global.IIlIlllIlIIIIllIIlIlIlIlll[2] = Array(Color(White), Custom Color(39, 170, 255, 255), Global.IlllllIIlIIllIlIlIIIlIlIlI,
			Global.IIllllIlIIlIIIllIllIIIIlII);
		If(Global.IlllIlllllIIllIlIlIIlIllll[7]);
			Global.IIlIlllIlIIIIllIIlIlIlIlll[3] = Array(Custom Color(255, 255, 255, 127), Custom Color(39, 170, 255, 191),
				Global.IlllllIIlIIllIlIlIIIlIlIlI, Global.IIllllIlIIlIIIllIllIIIIlII);
		End;
		Global.IIlIlllIlIIIIllIIlIlIlIlll[4] = Array(Color(White), Color(Yellow), Color(Green), Color(Purple), Color(Red), Color(Blue),
			Color(Aqua), Color(Lime Green), Color(Orange), Color(Sky Blue), Color(Black));
		Global.IIlIlllIlIIIIllIIlIlIlIlll[5] = Array(Custom String("Attack"), Custom String("Defense"), Custom String("Health"),
			Custom String("Speed"), Custom String("Sustain"));
		Global.IIlIlllIlIIIIllIIlIlIlIlll[6] = Array(Custom String("Crit"), Custom String("Burning"), Custom String("Lifesteal"),
			Custom String("Ult Charge"), Custom String("Root"), Custom String("Teleport"));
		Global.llllIIlIlllIIlllllIIIlIlll = Array(Array(Custom String(""), Custom String(" I"), Custom String(" II"), Custom String(
			" III"), Custom String(" IV"), Custom String(" V")), Array(Custom String(""), Custom String("+"), Custom String("++"),
			Custom String("+++"), Custom String("++++"), Custom String("+++++")), Array(Custom String(""), Custom String(" +1"),
			Custom String(" +2"), Custom String(" +3"), Custom String(" +4"), Custom String(" +5")), Array(Custom String(""),
			Custom String(" *"), Custom String(" **"), Custom String(" ***"), Custom String(" ****"), Custom String(" *****")), Array(
			Custom String(""), Custom String("-I"), Custom String("-II"), Custom String("-III"), Custom String("-IV"), Custom String(
			"-V")), Array(Custom String(""), Custom String("-1"), Custom String("-2"), Custom String("-3"), Custom String("-4"),
			Custom String("-5")))[Workshop Setting Combo(Custom String("General"), Custom String("Enchant levels - HUD text format"), 0,
			Array(Custom String("I, II, III, IV, V"), Custom String("+, ++, +++, ++++, +++++"), Custom String("+1, +2, +3, +4, +5"),
			Custom String("*, **, ***, ****, *****"), Custom String("-I, -II, -III, -IV, -V"), Custom String("-1, -2, -3, -4, -5")), 7)];
		Global.lIlIIIlIlIIllIIIIllIlIlIlI = Array(Custom String(""), Custom String(" {0}", Ability Icon String(Hero(Doomfist), Button(
			Secondary Fire))), Custom String(" {0}", Ability Icon String(Hero(Mei), Button(Ability 1))), Custom String(" {0}",
			Ability Icon String(Hero(Mercy), Button(Ability 1))), Custom String(" {0}", Ability Icon String(Hero(Zenyatta), Button(
			Secondary Fire))), Custom String(" {0}", Ability Icon String(Hero(Baptiste), Button(Ability 2))));
		Global.IlllllIIllIlIIIllIIIllIIIl = Array(Custom String("^___"), Custom String("_^_"), Custom String("__^_"), Custom String(
			"___^"));
		Global.IlllIllIIIlIIlIIIIlIlIIIIl = Array(Array(1, 3, 5, 4, 7, 2, 6, 8, 9), Array(1, 7, 5, 4, 6, 4, 3, 2, 9));
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 2, 1);
			Create Effect(All Players(Team 2), Light Shaft, Array(Color(Green), Color(Purple))[Global.lIIlllIllllIlIIIIlIllIIIlI],
				Global.IllIlIIIlIlIIIlIlllIIIllII[Global.lIIlllIllllIlIIIIlIllIIIlI], 1.750, Visible To);
			Create In-World Text(All Players(Team 2), Custom String("Teleporter {0}", Global.lIIlllIllllIlIIIIlIllIIIlI + 1),
				Ray Cast Hit Position(
				Global.IllIlIIIlIlIIIlIlllIIIllII[Global.lIIlllIllllIlIIIIlIllIIIlI] + 2 * Global.lllIllIlIlllIIIIlIIlIIllII,
				Global.IllIlIIIlIlIIIlIlllIIIllII[Global.lIIlllIllllIlIIIIlIllIIIlI], Null, Null, False) + Global.lllIllIlIlllIIIIlIIlIIllII,
				1.500, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
		End;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 2, 10, 1);
			Create Effect(All Players(Team 2), Ring, Array(Color(White), Color(Yellow), Color(Blue), Color(Red), Color(Green), Color(Sky Blue),
				Color(Orange), Color(Purple))[Global.lIIlllIllllIlIIIIlIllIIIlI - 2],
				Global.IllIlIIIlIlIIIlIlllIIIllII[Global.lIIlllIllllIlIIIIlIllIIIlI], 1.750, Visible To);
		End;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 2, 10, 1);
			Create In-World Text(All Players(Team 2), Array(Custom String("Load Save State\r\n(Reload + Crouch: Load Item)"), Custom String(
				"Soul Stones\r\n(Summon Boss)"), Custom String("Gamble\r\n(Buy Random Item)"), Custom String(
				"Imbue\r\n(Upgrade Equipped Item)"), Custom String("Create Save Code\r\n(Reload + Crouch: Item Quick Save)"), Custom String(
				"Reroll Equipped Item\r\n(Reload + Crouch: Roll Back)"), Custom String("Buy Back"), Custom String(
				"Start / Turn In Quest\r\n(Reload + Crouch: Abandon)"))[Global.lIIlllIllllIlIIIIlIllIIIlI - 2], Ray Cast Hit Position(
				Global.IllIlIIIlIlIIIlIlllIIIllII[Global.lIIlllIllllIlIIIIlIllIIIlI] + 2 * Global.lllIllIlIlllIIIIlIIlIIllII,
				Global.IllIlIIIlIlIIIlIlllIIIllII[Global.lIIlllIllllIlIIIIlIllIIIlI], Null, Null, False) + Global.lllIllIlIlllIIIIlIIlIIllII,
				1.500, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
		End;
		Create Effect(All Players(Team 2), Ring, Color(Aqua), Global.IlIlIIIlIIllllIllIlllllIll, 1.750, Visible To);
		Create In-World Text(Filtered Array(All Players(Team 2), Current Array Element.IIIlIlIllIlllIllllIlIllIll <= 3), Custom String(
			"Crouch here\r\nfor Instructions"), Global.IlIlIIIlIIllllIllIlllllIll + Global.lllIllIlIlllIIIIlIIlIIllII, 3, Do Not Clip,
			Visible To, Color(Aqua), Default Visibility);
		Create HUD Text(Filtered Array(All Players(Team 2),
			Current Array Element.IlllIllIlIlllIlIlIIlIllIlI == 1 && !Current Array Element.IIlIIIIIIllIIlIlIIIlllllIl), Null, Null,
			Custom String("{0}{1}{2}", Custom String(
			" \r\nControl Scheme: Gamepad\r\n(Change with Reload + Jump)\r\n\r\nPick number: Primary Fire\r\n\r\n"), Custom String(
			"Increase current digit: Crouch\r\nLower current digit: Secondary Fire\r\n(Hold Jump to increase/lower by 2)\r\n\r\n"),
			Custom String("{0}{1}{2}", Custom String(
			"Go to next digit: Ability 2\r\nGo to previous digit: Ability 1\r\n(Hold Jump to jump 4 digits)\r\n\r\n"), Custom String(
			"Confirm Code: Melee\r\nCancel: Ultimate\r\nReset Code: Reload + Ultimate\r\n\r\n"), Custom String(
			"Adjust for Field of View:\r\nAim at the center of the '0'\r\nand press Interact"))), Right, -2, Null, Null, Color(Aqua),
			Visible To, Default Visibility);
		Create HUD Text(Filtered Array(All Players(Team 2),
			Current Array Element.IlllIllIlIlllIlIlIIlIllIlI == 1 && Current Array Element.IIlIIIIIIllIIlIlIIIlllllIl), Null, Null,
			Custom String("{0}{1}{2}", Custom String(
			" \r\nControl Scheme: Legacy\r\n(Change with Reload + Jump)\r\n\r\nPick number: Primary Fire\r\n\r\n"), Custom String(
			"Increase current digit: Interact\r\nLower current digit: Melee\r\n(Hold Jump to increase/lower by 2)\r\n\r\n"), Custom String(
			"{0}{1}{2}", Custom String(
			"Go to next digit: Crouch / Ability 2\r\nGo to previous digit: Ability 1\r\n(Hold Jump to jump 4 digits)\r\n\r\n"),
			Custom String("Confirm Code: Ultimate\r\nCancel: Secondary Fire\r\nReset Code: Reload + Secondary Fire\r\n\r\n"),
			Custom String("Adjust for Field of View:\r\nAim at the center of the '0'\r\nand press Reload + Ultimate"))), Right, -2, Null,
			Null, Color(Aqua), Visible To, Default Visibility);
		Wait Until(Global.IllIIlIllllIIIllIlllIIlIIl == True, 16000);
		Global.IIlIllllllllIlIIIlllIlllIl = Custom String("{0}", Host Player);
		Create HUD Text(All Players(Team 2), Null, Custom String("Initial Host: {0} / Enemy Health/EXP: {1}% / Regular Maps v7.5.1.8",
			Global.IIlIllllllllIlIIIlllIlllIl, Global.lllllIIlIlllIIllIIlIIlllII[7]), Null, Right, -6, Null, Color(Aqua), Null,
			Visible To and String, Visible Never);
		Create HUD Text(All Players(Team 2), Null, Custom String("Current Host: {0} / Player Lv Limit: {1}-{2}", Host Player,
			Global.lllllIIlIlllIIllIIlIIlllII[5], Custom String("{0} {1} / Enemy Lv: {2}", Global.lllllIIlIlllIIllIIlIIlllII[1],
			Global.lllllIIlIlllIIllIIlIIlllII[6], Custom String("{0} / SoJ sold: {1} / Time Left: {2}",
			Global.lllllIIlIlllIIllIIlIIlllII[4], Global.lIIlIlIlllllIllIIllIlllIIl, Global.lllIIIIllIIlIIllIlIIllllII))), Null, Left, -2,
			Null, Color(Aqua), Null, Visible To and String, Visible Never);
	}
}

rule("IlIIIIIIlIIlIIIlIlIIIlIIlI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
		If(Is Dummy Bot(Event Player));
			Global.IIIllIIlllIlllllllllIlIllI = Event Player;
			Abort;
		End;
		Disable Messages(Event Player);
		Call Subroutine(lIlllIlIIIllllIIllIlIlIIIl);
		Event Player.IIlIIIIIIllIIlIlIIIlllllIl = Workshop Setting Combo(Custom String("Enter Code Controls"), Custom String(
			"Default Enter Code Control Scheme"), 1, Array(Custom String("Gamepad"), Custom String("Legacy")), 26);
		Event Player.IIlIllllIllIIllIlIIlIIlIll[0] = Array(0.798, 0.949, 1)[Workshop Setting Combo(Custom String("Enter Code Controls"),
			Custom String("Default Field of View Setting"), 2, Array(Custom String("90"), Custom String("100"), Custom String("103")), 27)
			];
		Call Subroutine(IIIlIlllllIlIlllIIIllIIllI);
		Event Player.lllIlllIllIIIlIIIIlllllIIl = 2;
		Event Player.lIIIIIIlIIllllIllIlIIllIlI = Empty Array;
		Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
		Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[2] = Event Player;
		Event Player.IIIlIllIlIIllIlIlllllIlIll = Empty Array;
		For Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, 0, 3, 1);
			Event Player.lIIIIllIIIIIlIIIIllllIlIlI[Global.IlllllIIlIIllIlIlIIIlIlIlI] = Global.lIllIIlIlIIIIIlIIIlIlIlllI;
		End;
		If(!Global.IllIIlIllllIIIllIlllIIlIIl);
			Global.IllIIlIllllIIIllIlllIIlIIl = 1;
			Start Rule(lIIllIllllIlIIIlllIIllIllI, Do Nothing);
		End;
		Start Damage Modification(Event Player, Event Player, 0, Receivers and Damagers);
		Teleport(Event Player, Global.IlIlIIIlIIllllIllIlllllIll);
		Global.IIIlllllIIIllllllIIllIlIIl = Total Time Elapsed + 5;
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
		Event Player.llIllIIIlIllllIIlIlIIIlllI = Total Time Elapsed + 1;
		Event Player.IlIllIlIlIlllIIlIllllllllI = Total Time Elapsed + 2 * Count Of(All Players(Team 2));
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 3;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[0] = Hero(Tracer);
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[18] = 5;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = 5;
		Event Player.IIIlIlIllIlllIllllIlIllIll = 1;
		Event Player.llIIlllIIIIllIIllIIIIIllII = 10;
		Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
		Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
		If(!Global.IlllIlllllIIllIlIlIIlIllll[0]);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] = 2;
		Else;
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[10] = True;
		End;
		If(!Global.IlllIlllllIIllIlIlIIlIllll[1]);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] += 1;
		Else;
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[11] = True;
		End;
		Wait(1, Ignore Condition);
		If(Global.IlllIlllllIIllIlIlIIlIllll[8]);
			Create Effect(Filtered Array(Event Player, Event Player.lIlIlIIlIIIllIIIlIIlIllIIl > Total Time Elapsed), Good Aura, Color(White),
				Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Event Player.IIlIllllIllIIllIlIIlIIlIll[1][Event Player.lIlIlllIIlIlllIIIIllIIlIlI - 1]), 0.034,
				Visible To Position and Radius);
		End;
		Wait(1, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("Experience Bonus: {0}% / Magic Find: {1}‰ {2}",
			Event Player.IIIlIlIIlIIlIIIlllllIIIlIl, Round To Integer(Event Player.lIIllIIIlIlIlIllIIIlIllIII, Up), Custom String(
			"{0}\r\nEquipped {1}", Event Player.llIllIlIllIIlIlIIlIIlIIIll, Event Player.IIIIIIlllllllIlIIIIIlllIlI[1])), Left, -1, Null,
			Null, Color(White), String, Visible Never);
		Create HUD Text(Event Player, Null, Null, Custom String("Horadric Favor: {0} / Soul Stones: {2} / Gold: {1}", Round To Integer(
			Event Player.IlllIlIIIIIlIlllIIIIlIllll, Down), Event Player.IlIIllllIlllIllIIIllIlIlll,
			Event Player.IIlIllllllIIlIIIllllIIllII), Right, -5, Null, Null, Color(White), String, Visible Never);
		Create HUD Text(Event Player, Null, Null, Custom String("Inventory: {0}/{1}", Event Player.IlIlIIIlIIllIIIIllIlIIllll,
			Event Player.lIlIIlIlIlIIIlIlllllIlIIII), Right, -4, Null, Null, Color(White), String, Visible Never);
		Wait(1, Ignore Condition);
		If(Global.IlllIlllllIIllIlIlIIlIllll[2]);
			Create Effect(Filtered Array(Remove From Array(All Players(Team 2), Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[2]),
				Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[0] > 0), Good Aura, Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[1], Event Player,
				Event Player.lIIlIlllIIlllIIlIlIlIIllll, Visible To Position Radius and Color);
		End;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[0] = Custom String("");
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[1] = Empty Array;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[13] = Empty Array;
		If(!Global.IlllIlllllIIllIlIlIIlIllll[9]);
			Create HUD Text(Event Player, Null, Event Player.lIlIIIIlIIlIIlIIlIIIllllII[0], Null, Right, -1, Null,
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[7], Null, String and Color, Visible Never);
		End;
		Create In-World Text(Event Player, Custom String("!"),
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[3] + Global.lllIllIlIlllIIIIlIIlIIllII, 3, Do Not Clip,
			Visible To Position String and Color, Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2], Visible Never);
		Wait(1, Ignore Condition);
		Create HUD Text(All Players(Team 2), Event Player.lIlIIllIlllIIlIIlIlIIlIlIl,
			Event Player.IIIlIlIllIlllIllllIlIllIll <= 119 ? Custom String("EXP: {0}%", Event Player.lllIIIIIIIlllIIlIIIlllIIIl)
			: Custom String(""), Custom String("{0} - Lv {1}", Event Player, Event Player.IIIlIlIllIlllIllllIlIllIll), Left,
			Total Time Elapsed, Event Player.IlIIlIIlIIlIIIIlIlIllllllI[0], Color(White), Color(White), Visible To String and Color,
			Visible Always);
		Create HUD Text(Event Player, Event Player.IIIIIlllIIIlllIIIIIIIIIIII, Null, Null, Right, -3,
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[1], Null, Null, String and Color, Visible Never);
		Big Message(Event Player, Custom String("So it begins..."));
	}
}

rule("lllIlIlllIlIIIlllIIllIlIIl")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI == True;
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI <= Total Time Elapsed;
	}

	actions
	{
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 5;
		If(Event Player.IlIlIlIlIIIlIIllIIlllllIIl[1]);
			Call Subroutine(lIlIIIIlIIlIlIlIlllIllllIl);
		End;
		Event Player.llIllIlIllIIlIlIIlIIlIIIll = Custom String("{0} {1}",
			Event Player.IIllIIlllllllIlIIllIIIIIll > Total Time Elapsed ? Custom String("{0} {1} s", Icon String(Skull), Round To Integer(
			Event Player.IIllIIlllllllIlIIllIIIIIll - Total Time Elapsed, To Nearest)) : Custom String(""),
			Event Player.IIIllIIllIIIIllIlIlIIIIIII > Total Time Elapsed ? Custom String("{0} {1} s", Icon String(Club), Round To Integer(
			Event Player.IIIllIIllIIIIllIlIlIIIIIII - Total Time Elapsed, To Nearest)) : Custom String(""));
		Event Player.lIIllIlllIllIlIIIlIllIIIlI = ((Event Player.IIllIIlllllllIlIIllIIIIIll > Total Time Elapsed) + (
			Event Player.IIIllIIllIIIIllIlIlIIIIIII > Total Time Elapsed)) * (1 + 0.500 * (Event Player.llllllIllIIlllllIlIIlIIllI[0] == 8)
			* Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1]);
		Event Player.IIIlIlIIlIIlIIIlllllIIIlIl = Event Player.lIIllIlllIllIlIIIlIllIIIlI * 20 + Round To Integer(
			Event Player.IlllIlIIIIIlIlllIIIIlIllll, Down) + 20 * (Event Player.llllllIllIIlllllIlIIlIIllI[0] == 7)
			* Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1];
		Event Player.lIIllIIIlIlIlIllIIIlIllIII = Event Player.lIIllIlllIllIlIIIlIllIIIlI * 50 + Event Player.IIIlIlIllIlllIllllIlIllIll * 5 + Round To Integer(
			Event Player.IlllIlIIIIIlIlllIIIIlIllll, Down) * 2.500 + 50 * (Event Player.llllllIllIIlllllIlIIlIIllI[0] == 6)
			* Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1];
		If(
			Event Player.lIlllllllllIllllIIIIlllIlI >= 6 && Event Player.IIIIlllIllIIIllIllIlIlIlll < Event Player.IllllIIlllllIIllIIllIlIlIl);
			Event Player.IlIIIllIIlIIllllIlIIllllIl -= 1;
			If(!Event Player.IlIIIllIIlIIllllIlIIllllIl);
				Event Player.IlIIIllIIlIIllllIlIIllllIl = 12;
				Call Subroutine(IIIlIlllIIIIIllIlIllIIlIII);
			End;
		End;
		If(Distance Between(Event Player.llllIlIIllIlllIlIllIIIllll, Event Player) >= 7.500 || Is In Spawn Room(Event Player));
			Event Player.llllIlIIllIlllIlIllIIIllll = Position Of(Event Player);
			Event Player.IIlllllIIIIlllIIIlllIllIlI = Total Time Elapsed;
		Else If(Event Player.IIlllllIIIIlllIIIlllIllIlI < Total Time Elapsed - 120);
			Event Player.IIlllllIIIIlllIIIlllIllIlI = Total Time Elapsed;
			Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
			Event Player.IIIIIlIlIlIllIlllllIIllIll = Global.IlIlIIIlIIllllIllIlllllIll;
			Call Subroutine(llIlIIIlIIlIIIIIllIlIIllIl);
			Call Subroutine(lllIlllIIIlIllllIIIIIIlIlI);
			Event Player.lllIlllIllIIIlIIIIlllllIIl = 2;
		End;
		If(
			Event Player.IIIlIlIllIlllIllllIlIllIll < Global.lllllIIlIlllIIllIIlIIlllII[0] || Event Player.IIIlIlIllIlllIllllIlIllIll > Global.lllllIIlIlllIIllIIlIIlllII[1]);
			Event Player.lllIlllIllIIIlIIIIlllllIIl = 2;
		Else If(Event Player.lllIlllIllIIIlIIIIlllllIIl && !Is In Spawn Room(Event Player));
			Event Player.lllIlllIllIIIlIIIIlllllIIl -= 1;
			If(Event Player.lllIlllIllIIIlIIIIlllllIIl);
				Small Message(Event Player, Custom String("Damage locked for 5 more seconds"));
			Else;
				Small Message(Event Player, Custom String("Damage ready"));
			End;
		End;
		Set Damage Dealt(Event Player, Event Player.lllIlllIllIIIlIIIIlllllIIl ? 0 : Event Player.IIlllllIIlIIlIIIIIIIIlIlII[0]);
		Set Healing Dealt(Event Player, Event Player.lllIlllIllIIIlIIIIlllllIIl ? 0 : Event Player.IIlllllIIlIIlIIIIIIIIlIlII[1]);
		If(Event Player.IlIllIlIlIlllIIlIllllllllI && Event Player.IlIllIlIlIlllIIlIllllllllI + 25 <= Total Time Elapsed);
			Event Player.IlIllIlIlIlllIIlIllllllllI = Null;
			If(!Event Player.IlllIllIlIlllIlIlIIlIllIlI);
				Call Subroutine(lIlllIlIIIllllIIllIlIlIIIl);
			End;
		End;
		Abort If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4]);
		Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
	}
}

rule("IlIIlIIlIIllIllllIIllIIllI")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		All;
	}

	conditions
	{
		Team Of(Victim) == Team 1;
	}

	actions
	{
		If(Event Player.IIIlIlIllIlllIllllIlIllIll > 59);
			Event Player.IIlllllIIlIIlIIIIIIIIlIlII[4] = Index Of Array Value(Array(Null, Button(Primary Fire), Button(Secondary Fire), Button(
				Ability 1), Button(Ability 2), Button(Ultimate), Button(Crouch)), Event Ability);
			If(Event Player.IIlllllIIlIIlIIIIIIIIlIlII[4] > 0);
				If(Event Player.IIlllllIIlIIlIIIIIIIIlIlII[Event Player.IIlllllIIlIIlIIIIIIIIlIlII[4] + 4] <= Total Time Elapsed);
					Global.IlllllIIlIIllIlIlIIIlIlIlI = Event Damage * Min(2, 0.638 * (
						Total Time Elapsed - Event Player.IIlllllIIlIIlIIIIIIIIlIlII[Event Player.IIlllllIIlIIlIIIIIIIIlIlII[4] + 4]) + 0.500);
					Damage(Victim, Null, Max(0, Global.IlllllIIlIIllIlIlIIIlIlIlI * (Event Damage > Event Player.IIlllllIIlIIlIIIIIIIIlIlII * 1.500 ? (
						8 * Event Player.IIlllllIIlIIlIIIIIIIIlIlII - Event Damage) / (6.500 * Event Player.IIlllllIIlIIlIIIIIIIIlIlII) : 1)));
				End;
				Event Player.IIlllllIIlIIlIIIIIIIIlIlII[Event Player.IIlllllIIlIIlIIIIIIIIlIlII[4] + 4] = Total Time Elapsed + 0.650;
			End;
		End;
		Abort If(Event Player.IlIIlIIIIIllIlIlIlIIIlIIIl[Slot Of(Victim)] > Total Time Elapsed);
		Call Subroutine(IlllllllIIlllllllllllIlIlI);
		Call Subroutine(IIlllIIlllIllllllIIIIIIlII);
	}
}

rule("lIllIIIlIllIIIIllIlIllIIII")
{
	event
	{
		Player Dealt Knockback;
		Team 2;
		All;
	}

	conditions
	{
		Team Of(Victim) == Team 1;
		Event Player.IlIIlIIIIIllIlIlIlIIIlIIIl[Slot Of(Victim)] <= Total Time Elapsed;
		Has Status(Victim, Invincible) == False;
	}

	actions
	{
		Call Subroutine(IlllllllIIlllllllllllIlIlI);
		Call Subroutine(IIlllIIlllIllllllIIIIIIlII);
	}
}

rule("lIlIIlllIIIlIIIllIllllllIl")
{
	event
	{
		Player Dealt Healing;
		Team 2;
		All;
	}

	conditions
	{
		Healee != Event Player;
		Event Player.llllIIlIIIllIIIllllIIllllI <= Total Time Elapsed;
	}

	actions
	{
		Event Player.llllIIlIIIllIIIllllIIllllI = Total Time Elapsed + 2;
		Call Subroutine(lllIllllIllIIlIllIIIIIIllI);
		If(Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[0] && Random Integer(0, 19) < 7);
			Heal(Healee, Null, (0.200 + 0.050 * Event Player.IIlIIllIIIllIllllIIIIlIIll) * Max Health(Healee));
		End;
		Global.lIIlllIllllIlIIIIlIllIIIlI = Healee;
		Call Subroutine(llIllIlIIIllIIlIlIlllIIllI);
	}
}

rule("lIIlllIlIIlIlIIIlIIIlIIIlI")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Team Of(Victim) == Team 2;
		Event Player.IlIIlIIIIIllIlIlIlIIIlIIIl[Slot Of(Victim)] <= Total Time Elapsed;
	}

	actions
	{
		Event Player.IlIIlIIIIIllIlIlIlIIIlIIIl[Slot Of(Victim)] = Total Time Elapsed + 0.250;
		Call Subroutine(IlIllIIIIIlIlIIllIIIlllIll);
		Victim.llIllIIIlIllllIIlIlIIIlllI = Total Time Elapsed + 3;
		Victim.IIlllllIIIIlllIIIlllIllIlI = Total Time Elapsed;
		Stop All Heal Over Time(Victim);
		If(Victim.IIIIIIIIlIIlIIIIIIIllIIIII[0] && Random Integer(0, 19) < 2 + Victim.IIlIIllIIIllIllllIIIIlIIll);
			Heal(Victim, Null, Event Damage);
		End;
		If(!Victim.IlllIllIlIlllIlIlIIlIllIlI && !Has Status(Victim, Invincible)
			&& Victim.llllllIllIIlllllIlIIlIIllI[0] == 1 && Random Integer(0, 39) < 2 * Victim.IIIIIIIIlIIlIIIIIIIllIIIII[1]);
			Set Status(Victim, Null, Invincible, 2);
			If(Global.IlllIlllllIIllIlIlIIlIllll[1]);
				Play Effect(Filtered Array(All Players(Team 2), Current Array Element.lIlIIIIlIIlIIlIIlIIIllllII[11]), Bad Explosion, Color(White),
					Eye Position(Victim) + Facing Direction Of(Victim), 2);
			End;
		End;
		Abort If(Victim.lllIlllIllIIIlIIIIlllllIIl);
		If(Array Contains(All Tank Heroes, Hero Of(Victim)));
			Victim.lllIlIIllIIllIIIIlllIIllII[Slot Of(Event Player)] = True;
		End;
		Abort If(Victim.IIIIlIIIIllllIlllIIIlllIIl != 2);
		Abort If(Event Player.IllIlIllIlllIlIlIIIIIlllll > Total Time Elapsed || Distance Between(Event Player, Victim)
			> 12.500 + Victim.IIlIIllIIIllIllllIIIIlIIll * 2.500);
		Victim.lllIlIIllIIllIIIIlllIIllII[Slot Of(Event Player)] = True;
		Event Player.IllIlIllIlllIlIlIIIIIlllll = Total Time Elapsed + 2;
		If(Global.IlllIlllllIIllIlIlIIlIllll[6]);
			Play Effect(All Players(Team 2), Good Pickup Effect, Color(Sky Blue), Position Of(Event Player), True);
		End;
		Damage(Event Player, Null, (35.513 + 14.205 * Victim.IIlIIllIIIllIllllIIIIlIIll) * Victim.IIlllllIIlIIlIIIIIIIIlIlII[3]);
		Modify Player Variable At Index(Event Player, lllllIIlllIlllllIIlIIlllII, 1, Append To Array,
			0.300 + 0.050 * Victim.IIlIIllIIIllIllllIIIIlIIll);
		Modify Player Variable At Index(Event Player, lllllIIlllIlllllIIlIIlllII, 2, Append To Array,
			Total Time Elapsed + 2 + 0.300 * Victim.IIlIIllIIIllIllllIIIIlIIll);
		Abort If(Event Player.lllllIIlllIlllllIIlIIlllII);
		Event Player.lllllIIlllIlllllIIlIIlllII[0] = True;
	}
}

rule("IIllIIIIlllIlllllIIlIlllII")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		All;
	}

	conditions
	{
		Team Of(Victim) == Team 2;
		Event Player.IlIIlIIIIIllIlIlIlIIIlIIIl[Slot Of(Victim)] <= Total Time Elapsed;
	}

	actions
	{
		Event Player.IlIIlIIIIIllIlIlIlIIIlIIIl[Slot Of(Victim)] = Total Time Elapsed + 0.250;
		Call Subroutine(IlIllIIIIIlIlIIllIIIlllIll);
		Victim.llIllIIIlIllllIIlIlIIIlllI = Total Time Elapsed + 3;
		Victim.IIlllllIIIIlllIIIlllIllIlI = Total Time Elapsed;
		Stop All Heal Over Time(Victim);
		Abort If(Victim.lllIlllIllIIIlIIIIlllllIIl);
		If(Array Contains(All Tank Heroes, Hero Of(Victim)));
			Victim.lllIlIIllIIllIIIIlllIIllII[Slot Of(Event Player)] = True;
		End;
	}
}

rule("IIIIIIlIllIIIlllIlIIIIIIIl")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.llIllIIIlIllllIIlIlIIIlllI == True;
		Event Player.llIllIIIlIllllIIlIlIIIlllI <= Total Time Elapsed;
	}

	actions
	{
		Start Heal Over Time(Event Player, Null, Global.IIlllIIIIIllIlIllIlIlllIII, (
			10 + Event Player.llIlIIIlIlIIlIIIllllIlllII * 0.750 + Event Player.IIlIIIIllllIllIIlIIIIlIlll * 7.500) * (
			1 + Event Player.IIllIIlIIllIIlIIlIlllIIllI * 0.500));
		While(!Health(Event Player));
			Small Message(Event Player, Custom String("Hold Interact or Melee to respawn"));
			Event Player.IIIIIlIlIlIllIlllllIIllIll = Nearest Walkable Position(Event Player);
			Teleport(Event Player, Event Player.IIIIIlIlIlIllIlllllIIllIll);
			Wait(3, Ignore Condition);
		End;
	}
}

rule("IllIIIllllIlllIlIIllIlIlII")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Health(Event Player) == False;
	}

	actions
	{
		Event Player.IIllIIlllllllIlIIllIIIIIll = Ray Cast Hit Position(Position Of(Event Player) + Up, Position Of(Event Player) + Vector(
			0, -29, 0), Null, Null, False);
	}
}

rule("IllIlIlIllIllllIlIIllIIIII")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.lIIIIlIlIIlIIlIllllllIIllI == True;
		(Health(Event Player) || Event Player.llllllIlIIlIIllIIlllIlIIII) == True;
		Event Player.lIIIIlIlIIlIIlIllllllIIllI <= Total Time Elapsed;
		Global.IIIlllllIIIllllllIIllIlIIl <= Total Time Elapsed + 0.250;
		Global.llIllIlIIIIlIIlllIllIlllIl <= Total Time Elapsed;
	}

	actions
	{
		If(!Event Player.llllllIlIIlIIllIIlllIlIIII && Event Player.lllIlIIllIIllIIIIlllIIllII >= 3);
			Call Subroutine(IlIllIIIIIlIlIIllIIIlllIll);
			Abort;
		End;
		Global.llIllIlIIIIlIIlllIllIlllIl = Total Time Elapsed + 0.250;
		If(!Event Player.llllllIlIIlIIllIIlllIlIIII);
			Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
		End;
		If(Event Player.lllIlIIllIIllIIIIlllIIllII >= 2);
			Global.lIlIIlIIlIlIIlIlllllIlIIII = Null;
			Global.IlllIIIIlIIIlIllIIlIlIlllI = False;
		End;
		Global.IIIlllllIIIllllllIIllIlIIl = Total Time Elapsed + 1;
		Global.IIIIlIIIIIlIIIIlIIIIllIlII -= 1;
		Destroy Dummy Bot(Team 1, Slot Of(Event Player));
	}
}

rule("IIIlIlIlIIlIllIIIllIIllllI")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.IllIIIlIlllIllIlIIllIllIII == True;
		(Is Dead(Event Player) && Event Player.IIllIIlllllllIlIIllIIIIIll) == True;
		Event Player.llllllIlIIlIIllIIlllIlIIII == False;
		Global.llIllIlIIIIlIIlllIllIlllIl <= Total Time Elapsed;
	}

	actions
	{
		Destroy In-World Text(Event Player.IIllIIlIIllIIlIIlIlllIIllI);
		If(Event Player.lIlllllllIlIlIlIIIIIlllIII);
			Destroy Progress Bar HUD Text(Event Player.lIlllllllIlIlIlIIIIIlllIII);
		End;
		If(Global.IlllIlllllIIllIlIlIIlIllll[7]);
			Stop Forcing Player Outlines(Event Player, All Players(Team 2));
		End;
		Global.llIllIlIIIIlIIlllIllIlllIl = Total Time Elapsed + 0.250;
		Wait(0.100, Ignore Condition);
		Event Player.IllIIIlIlllIllIlIIllIllIII = False;
		Event Player.IlIllIlIlIlllIIlIllllllllI = False;
		Event Player.lIIIIllIIIIIlIIIIllllIlIlI = False;
		Event Player.llllllIllIIlllllIlIIlIIllI = False;
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IIIlIlllIlIllIIllllllIIIIl == True ? Y Component Of(
			Event Player.IIllIIlllllllIlIIllIIIIIll) <= Global.IIIlIlllIlIllIIllllllIIIIl : Y Component Of(
			Event Player.IIllIIlllllllIlIIllIIIIIll) <= X Component Of(Event Player.IIllIIlllllllIlIIllIIIIIll) * 0.050 + Z Component Of(
			Event Player.IIllIIlllllllIlIIllIIIIIll) * -0.060 - 4;
		If(Global.IIIIlIIllIlllIllIIIlIlIlll <= 12 || !Global.IlllllIIlIIllIlIlIIIlIlIlI);
			Global.IlIIlIlIIIlIIlIIlllllIlllI = Filtered Array(All Players(Team 2), Current Array Element.lllIlIIllIIllIIIIlllIIllII[Slot Of(
				Event Player)] && (Absolute Value(
				Current Array Element.IIIlIlIllIlllIllllIlIllIll - Event Player.lllIIIIIIIlllIIlIIIlllIIIl * 3) <= 15 || (
				Event Player.lllIIIIIIIlllIIlIIIlllIIIl >= 20 && Current Array Element.IIIlIlIllIlllIllllIlIllIll >= 45)));
			If(Count Of(Global.IlIIlIlIIIlIIlIIlllllIlllI));
				Global.IlIIlIlIIIlIIlIIlllllIlllI = Filtered Array(All Players(Team 2), Array Contains(Global.IlIIlIlIIIlIIlIIlllllIlllI,
					Current Array Element) || (Health(Current Array Element) && Array Contains(All Support Heroes, Hero Of(Current Array Element))
					&& Current Array Element.IIIlIlIllIlllIllllIlIllIll >= Global.lllllIIlIlllIIllIIlIIlllII[0] && Current Array Element.IIIlIlIllIlllIllllIlIllIll <= Global.lllllIIlIlllIIllIIlIIlllII[1] && Distance Between(
					Current Array Element, Event Player.IIllIIlllllllIlIIllIIIIIll) <= 40 && Distance Between(Current Array Element,
					Global.IlIlIIIlIIllllIllIlllllIll) > Global.IIIlIIlIIIIIlIlIIIlIllIlII));
			End;
			Global.IllIIlIllIlIIIllIIlIIlllIl = Filtered Array(Global.IlIIlIlIIIlIIlIIlllllIlllI,
				Current Array Element.IIIIlIIIIllllIlllIIIlllIIl == 4);
			Global.IllIIlIllIlIIIllIIlIIlllIl = Global.IllIIlIllIlIIIllIIlIIlllIl == Empty Array ? 0 : 0.500 + 0.100 * Last Of(Sorted Array(
				Mapped Array(Global.IllIIlIllIlIIIllIIlIIlllIl, Current Array Element.IIlIIllIIIllIllllIIIIlIIll), Current Array Element));
		Else;
			Global.IlIIlIlIIIlIIlIIlllllIlllI = Empty Array;
			Global.IllIIlIllIlIIIllIIlIIlllIl = 0;
		End;
		If(Count Of(Global.IlIIlIlIIIlIIlIIlllllIlllI));
			Global.IIIIlIIllIlllIllIIIlIlIlll = Max(0, Global.IIIIlIIllIlllIllIIIlIlIlll - 2 + 5 * Global.IlllllIIlIIllIlIlIIIlIlIlI);
		End;
		Global.IIlIlIIlllIlIIllllIIlIlIIl += 1;
		Global.IIIllIIlllIlllllllllIlIllI = Event Player;
		If(Event Player.IIIllIIllIIIIllIlIlIIIIIII);
			Global.IIIIllIlIIlIIIlIIllIllIIlI += 1;
			If(Global.IlllIlllllIIllIlIlIIlIllll[6]);
				Play Effect(All Players(Team 2), Bad Explosion, Color(Orange), Event Player, 12 + Event Player.IIIllIIllIIIIllIlIlIIIIIII * 3);
			End;
		End;
		Global.IlIIIIIlllIlIlIIlllIIlllll = Event Player.IIllIIlllllllIlIIllIIIIIll;
		Global.IlIIIIIlllIlIlIIlllIIlllll = Nearest Walkable Position(Global.IlIIIIIlllIlIlIIlllIIlllll);
		If((Global.lllllIlIIlllIIIlIlllllllIl[0] && Distance Between(Global.IlIIIIIlllIlIlIIlllIIlllll,
			Global.lllllIlIIlllIIIlIlllllllIl[0]) <= Global.lIllIllIIllIllllIIlllIIlIl[0]) || (
			Global.lllllIlIIlllIIIlIlllllllIl[1] && Distance Between(Global.IlIIIIIlllIlIlIIlllIIlllll,
			Global.lllllIlIIlllIIIlIlllllllIl[1]) <= Global.lIllIllIIllIllllIIlllIIlIl[1]));
			Global.IlIIIIIlllIlIlIIlllIIlllll = Event Player.IIIllIlIIIIlIlllIlllIlIIlI;
		End;
		Event Player.lIIIIlIlIIlIIlIllllllIIllI = Total Time Elapsed + 1.500;
		Event Player.llllllIlIIlIIllIIlllIlIIII = True;
		If(Event Player.lllIlIIllIIllIIIIlllIIllII >= 3);
			Play Effect(All Players(Team 2), Ring Explosion Sound, Null, Event Player, 200);
			If(Global.IlllIlllllIIllIlIlIIlIllll[5]);
				Play Effect(All Players(Team 2), Ring Explosion, Color(Red), Event Player, 30);
			End;
		End;
	}
}

rule("IlIllIllIlIlIIIIIlIIllIIlI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IlllIIlllIlllIIlIlIIIIllIl != Global.IIlIlIIlllIlIIllllIIlIlIIl;
		Event Player.llllllIIIlIIIIIlIIllIlllll <= Total Time Elapsed;
	}

	actions
	{
		Event Player.llllllIIIlIIIIIlIIllIlllll = Total Time Elapsed + 0.250;
		Event Player.lllIlIIllIIllIIIIlllIIllII[Slot Of(Global.IIIllIIlllIlllllllllIlIllI)] = False;
		Event Player.IlllIIlllIlllIIlIlIIIIllIl = Global.IIlIlIIlllIlIIllllIIlIlIIl;
		Abort If(!Array Contains(Global.IlIIlIlIIIlIIlIIlllllIlllI, Event Player));
		Global.IIIIlllIIIIlIIIlIIIIllllIl = Event Player.IIIlIlIllIIIlIIllllIIllIII;
		Set Ability Cooldown(Event Player, Button(Primary Fire), Ability Cooldown(Event Player, Button(Primary Fire))
			* Global.IIIIlllIIIIlIIIlIIIIllllIl);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Ability Cooldown(Event Player, Button(Secondary Fire))
			* Global.IIIIlllIIIIlIIIlIIIIllllIl);
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1))
			* Global.IIIIlllIIIIlIIIlIIIIllllIl);
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2))
			* Global.IIIIlllIIIIlIIIlIIIIllllIl);
		If(Random Real(0, 1) >= Global.IIIIlllIIIIlIIIlIIIIllllIl);
			If(Ability Charge(Event Player, Button(Ability 1)) < 10);
				Set Ability Charge(Event Player, Button(Ability 1), Ability Charge(Event Player, Button(Ability 1)) + 1);
			End;
			If(Ability Charge(Event Player, Button(Ability 2)) < 10);
				Set Ability Charge(Event Player, Button(Ability 2), Ability Charge(Event Player, Button(Ability 2)) + 1);
			End;
		End;
		Event Player.lIllIlIIlllIllIlIlllllIIII = Global.IIIllIIlllIlllllllllIlIllI.lllIIIIIIIlllIIlIIIlllIIIl;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Absolute Value(
			Event Player.IIIlIlIllIlllIllllIlIllIll - Event Player.lIllIlIIlllIllIlIlllllIIII * 3);
		Global.lIIlIIIIllIIIIIlIlIIIlIIll = Max(1 - (Global.IllIllllIIIIllIIIIIIIlIIIl > 6 && (
			Event Player.IIIlIlIllIlllIllllIlIllIll < 67 || Event Player.lIllIlIIlllIllIlIlllllIIII < 20)) * (
			Global.IllIllllIIIIllIIIIIIIlIIIl - 6) * 0.100, 0);
		Abort If(!Global.lIIlIIIIllIIIIIlIlIIIlIIll);
		Global.llIlIIlIlIlIllIllllIllIllI = Global.IIIllIIlllIlllllllllIlIllI.lllIlIIllIIllIIIIlllIIllII;
		If(Event Player.lIlllllllllIllllIIIIlllIlI == 3);
			Call Subroutine(llIIIllllIlIllIlIIIlIlIIIl);
		End;
		If(
			Global.llIlIIlIlIlIllIllllIllIllI && Event Player.lIlllllllllIllllIIIIlllIlI && Event Player.lIlllllllllIllllIIIIlllIlI <= 2 && Global.llIlIIlIlIlIllIllllIllIllI == Event Player.lIlllllllllIllllIIIIlllIlI * -1 + 3);
			Call Subroutine(llIIIllllIlIllIlIIIlIlIIIl);
		End;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8] = 0.200 * (1 + Global.llIlIIlIlIlIllIllllIllIllI)
			* Global.lIIlIIIIllIIIIIlIlIIIlIIll * (1 + Global.IllIIlIllIlIIIllIIlIIlllIl);
		Event Player.IlllIlIIIIIlIlllIIIIlIllll = Min(Event Player.IlllIlIIIIIlIlllIIIIlIllll + Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8],
			40);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] = 1 + Event Player.IIIlIlIIlIIlIIIlllllIIIlIl * 0.010 + (Count Of(
			Global.IlIIlIlIIIlIIlIIlllllIlllI) - 1) * 0.300;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5] = Global.IIIllIIlllIlllllllllIlIllI.IlIIllllIlllIllIIIllIlIlll * Global.lIIlIIIIllIIIIIlIlIIIlIIll * Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] * Event Player.IlIlIlIlIIIlIIllIIlllllIIl[0];
		Event Player.llIIIIIIllIIlIIlIlIIIIllII += Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5] * (1 - (
			Event Player.llllIIlIlllllllIIllIlIllII == True) * 0.900);
		If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2]);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Earned {0} EXP (+{1}%) / {2}",
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5], Round To Integer(100 * (Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] - 1),
				To Nearest), Custom String("{0} HF: {1} ({2}", Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8],
				Global.IIIllIIlllIlllllllllIlIllI.lIlIIIIlIIlIIlIIlIIIllllII, Custom String("{0}){1}",
				Global.IIIllIIlllIlllllllllIlIllI.lIlIIlIlIlIIIlIlllllIlIIII, Global.lIIlIIIIllIIIIIlIlIIIlIIll >= 1 ? Custom String("")
				: Custom String(" ({0}%)", Round To Integer(100 * (Global.lIIlIIIIllIIIIIlIlIIIlIIll - 1), To Nearest)))));
			Call Subroutine(llIlllIllIIllllIIIIIllIlII);
		End;
		Call Subroutine(IlllllIlIllllIIlllIllllllI);
		Call Subroutine(llIllIllIllIIIlIlIlIIlIlII);
		Abort If(Global.llIlIIlIlIlIllIllllIllIllI < 2);
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
		Global.IlllllIIlIIllIlIlIIIlIlIlI = 300;
		Event Player.IIllIIlllllllIlIIllIIIIIll = Max(Event Player.IIllIIlllllllIlIIllIIIIIll + Global.IlllllIIlIIllIlIlIIIlIlIlI,
			Total Time Elapsed + Global.IlllllIIlIIllIlIlIIIlIlIlI);
	}
}

rule("IIllIIlIlIlllIllIIIIlIIlII")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.IIIIlIIIIIlIIIIlIIIIllIlII < 6;
		Global.IIIlllllIIIllllllIIllIlIIl <= Total Time Elapsed;
	}

	actions
	{
		If(Global.IllIIlIllllIIIllIlllIIlIIl == 3);
			Call Subroutine(lIIlIlIIlIlIIllIllIIlIIIlI);
			Abort;
		End;
		Global.IIIlllllIIIllllllIIllIlIIl = Total Time Elapsed + 2;
		Abort If(Global.IllIIlIllllIIIllIlllIIlIIl != 2);
		Global.llIlIIlIlIlIllIllllIllIllI = Filtered Array(All Living Players(Team 2), Has Spawned(Current Array Element)
			&& !Current Array Element.lllIlllIllIIIlIIIIlllllIIl);
		Abort If(!Count Of(Global.llIlIIlIlIlIllIllllIllIllI) || Global.IIIIlIIIIIlIIIIlIIIIllIlII > Count Of(
			Global.llIlIIlIlIlIllIllllIllIllI));
		If(!Global.IIIllIIIlIIllIIIIlIllllllI && !Global.IlllIIIIlIIIlIllIIlIlIlllI);
			Global.IIIIlllIIIIlIIIlIIIIllllIl = Sorted Array(Global.llIlIIlIlIlIllIllllIllIllI,
				Current Array Element.IIIlIlIllIlllIllllIlIllIll);
			While(Count Of(Global.IIIIlllIIIIlIIIlIIIIllllIl) > 2);
				Modify Global Variable(IIIIlllIIIIlIIIlIIIIllllIl, Remove From Array By Index, Count Of(Global.IIIIlllIIIIlIIIlIIIIllllIl));
				If(Count Of(Global.IIIIlllIIIIlIIIlIIIIllllIl) <= 2);
					Break;
				End;
				Modify Global Variable(IIIIlllIIIIlIIIlIIIIllllIl, Remove From Array By Index, 0);
			End;
			Global.llllIIllIIlIIIlIlIlIlIlIlI = Round To Integer(0.333 * (Count Of(Global.IIIIlllIIIIlIIIlIIIIllllIl) > 1 ? (
				Global.IIIIlllIIIIlIIIlIIIIllllIl[0].IIIlIlIllIlllIllllIlIllIll + Global.IIIIlllIIIIlIIIlIIIIllllIl[1].IIIlIlIllIlllIllllIlIllIll)
				* 0.500 : Global.IIIIlllIIIIlIIIlIIIIllllIl.IIIlIlIllIlllIllllIlIllIll), To Nearest)
				+ Global.IlIIIIllIllIllllIlIlIllllI[0] - 2;
			Global.llllIIllIIlIIIlIlIlIlIlIlI = Min(Max(Global.llllIIllIIlIIIlIlIlIlIlIlI, 0), 20);
			Global.lIlIllIlIIlllIIllIIIIllIlI = Global.llllIIllIIlIIIlIlIlIlIlIlI * 0.113;
			Global.IlIIIIllIllIllllIlIlIllllI[3] = False;
		End;
		Global.llIIlllllIIlllllllllIIlIII = Random Value In Array(Global.llIlIIlIlIlIllIllllIllIllI);
		If(Global.IlllIIIIlIIIlIllIIlIlIlllI != 7 && Global.IlllIIIIlIIIlIllIIlIlIlllI.IIIlIlIllIlllIllllIlIllIll == False);
			Global.IlllIIIIlIIIlIllIIlIlIlllI = False;
		Else If(Array Contains(All Players(Team 2), Global.IlllIIIIlIIIlIllIIlIlIlllI));
			Global.llIIlllllIIlllllllllIIlIII = Global.IlllIIIIlIIIlIllIIlIlIlllI;
		End;
		Global.llIlIllIIIlllIlllIIlIIIIII = Position Of(Global.llIIlllllIIlllllllllIIlIII);
		Global.lllIlIIIIIIlIlIIllIlIllllI = Count Of(Filtered Array(All Players(Team 2),
			Current Array Element.IIIlIlIllIlllIllllIlIllIll >= Global.lllllIIlIlllIIllIIlIIlllII[0] && Current Array Element.IIIlIlIllIlllIllllIlIllIll <= Global.lllllIIlIlllIIllIIlIIlllII[1]));
		Global.llIIIllIlIlIIIIllIlllllIIl[0] = First Of(Sorted Array(Global.lIIllIllIllIlIIIlllIlllIIl, Distance Between(
			Current Array Element, Global.llIlIllIIIlllIlllIIlIIIIII)));
		Global.llIIIllIlIlIIIIllIlllllIIl[1] = Index Of Array Value(Global.lIIllIllIllIlIIIlllIlllIIl,
			Global.llIIIllIlIlIIIIllIlllllIIl[0]) + Global.llllIIllIIlIIIlIlIlIlIlIlI;
		Global.llIIIllIlIlIIIIllIlllllIIl[2] = Global.llIIIllIlIlIIIIllIlllllIIl[1] - Global.llllIIllIIlIIIlIlIlIlIlIlI + (
			Global.llllIIllIIlIIIlIlIlIlIlIlI > 16) * (Global.llllIIllIIlIIIlIlIlIlIlIlI - 16);
		Global.llIIIllIlIlIIIIllIlllllIIl[1] = Min(Global.llIIIllIlIlIIIIllIlllllIIl[1], 20);
		Global.llIIIllIlIlIIIIllIlllllIIl[2] = Min(Global.llIIIllIlIlIIIIllIlllllIIl[2], 4);
		Global.llIIIllIlIlIIIIllIlllllIIl[3] = (Random Integer(0, 9) <= (Global.llIIIllIlIlIIIIllIlllllIIl[2] + 1)
			* Global.lIlIllIlIIlllIIllIIIIllIlI) * 1;
		If(Global.llIIlllllIIlllllllllIIlIII == Global.IlllIIIIlIIIlIllIIlIlIlllI);
			Global.llIIIllIlIlIIIIllIlllllIIl[3] = 2 + 1 * (Global.lIIlIlIlllllIllIIllIlllIIl >= Random Integer(3, 17));
			If(
				Global.llIIIllIlIlIIIIllIlllllIIl[3] >= 3 && Global.llIIIllIlIlIIIIllIlllllIIl[1] >= 20 && Global.IlllIIIIlIIIlIllIIlIlIlllI.IIlIlIlIIlIIIllIllIlIIllll[Global.IlllIIIIlIIIlIllIIlIlIlllI.lllllIIlllIlllllIIlIIlllII + 17] % 100 == 56);
				Global.llIIIllIlIlIIIIllIlllllIIl[3] = 4;
			End;
		End;
		If(Global.llIIIllIlIlIIIIllIlllllIIl[3] < 4);
			Global.llIIIllIlIlIIIIllIlllllIIl[4] = Random Value In Array(All Heroes);
		Else;
			Global.llIIIllIlIlIIIIllIlllllIIl[4] = Hero(Roadhog);
		End;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 6, 1);
			Global.IlIllIIIIIIIIllIIlIIllllII += 1 - 6 * (Global.IlIllIIIIIIIIllIIlIIllllII >= 5);
			If(Players In Slot(Global.IlIllIIIIIIIIllIIlIIllllII, Team 1) == False);
				Break;
			End;
		End;
		Create Dummy Bot(Global.llIIIllIlIlIIIIllIlllllIIl[4], Team 1, Global.IlIllIIIIIIIIllIIlIIllllII,
			Global.llIIllllIIIlIIIIIllIlIIIll, Direction From Angles(Random Integer(0, 359), 0));
	}
}

rule("IIIlIIIlllIlIIIlIlIIllIIII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[2] = Null;
		Wait Until(!Is Communicating Any Emote(Event Player), 16000);
		Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[2] = Event Player;
	}
}

rule("IIllllIlIIlIIlIllllIllIIIl")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Is Communicating(Event Player, Hello) || Is Communicating(Event Player, Goodbye) || (Is Button Held(Event Player, Button(Reload))
			&& Is Button Held(Event Player, Button(Interact)))) == True;
	}

	actions
	{
		Abort If(!Health(Event Player));
		Abort If(Event Player.IlllIllIlIlllIlIlIIlIllIlI);
		Abort If(!Event Player.llllllIllIIlllllIlIIlIIllI[6]);
		Abort If(Event Player.IIIIIIlllllllIlIIIIIlllIlI[0] > Total Time Elapsed);
		Abort If(Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Hacked) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned));
		Event Player.IIIIIlIlIlIllIlllllIIllIll = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * (10 + Event Player.llllllIllIIlllllIlIIlIIllI[6] * 0.900), Null, Null,
			False) + Facing Direction Of(Event Player) * -0.500);
		Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
		Call Subroutine(llIlIIIlIIlIIIIIllIlIIllIl);
		Call Subroutine(lllIlllIIIlIllllIIIIIIlIlI);
		Event Player.IIIIIIlllllllIlIIIIIlllIlI[0] = Total Time Elapsed + 6.500 - 0.030 * Event Player.llllllIllIIlllllIlIIlIIllI[6];
		Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
		Heal(Event Player, Null, 75 + Event Player.llllllIllIIlllllIlIIlIIllI[6] * 3.500);
	}
}

rule("IIlIIIlIllllIIIIIlllIIIIII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IIIIIIlllllllIlIIIIIlllIlI == True;
		Event Player.IIIIIIlllllllIlIIIIIlllIlI <= Total Time Elapsed;
	}

	actions
	{
		Event Player.IIIIIIlllllllIlIIIIIlllIlI[0] = 0;
		Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
	}
}

rule("llIIlIllIIIllIIIlIIIIlIlll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Is Communicating(Event Player, Need Healing) || Is Communicating(Event Player, Fall Back)) == True;
	}

	actions
	{
		Abort If(!Health(Event Player));
		If(Event Player.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
			Call Subroutine(lIIIIlIllllIIIlIIllllIllll);
			Event Player.lIlIIlIIlIllIIIIIlIlIIIIll *= 1;
			Abort;
		End;
		Call Subroutine(lIlIlIIllIIlllIlllllllllll);
	}
}

rule("lIlIIlllIlllIIllIlIIIIlllI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Is Communicating(Event Player, Thanks) || Is Communicating(Event Player, You are Welcome)) == True;
	}

	actions
	{
		Abort If(!Health(Event Player));
		If(Event Player.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
			Call Subroutine(lIIIIlIllllIIIlIIllllIllll);
			Event Player.lIlIIlIIlIllIIIIIlIlIIIIll *= 2;
			Abort;
		End;
		Call Subroutine(llIlIIIlllllIllIlIIIlllIIl);
	}
}

rule("IlIIIllIllIIlIllIlIlllIllI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Is Communicating(Event Player, Group Up) || Is Communicating(Event Player, Press the Attack) || Is Communicating(Event Player,
			Push Forward)) == True;
	}

	actions
	{
		Abort If(!Health(Event Player));
		If(!Event Player.IIlIllllllIIlIIIllllIIllII);
			Small Message(Event Player, Custom String("Soul Stone required"));
			Abort;
		End;
		If(Global.IlIIIIllIllIllllIlIlIllllI[3]);
			Small Message(Event Player, Custom String("Cannot summon a boss right now"));
			Abort;
		End;
		If(!Global.IlllIIIIlIIIlIllIIlIlIlllI);
			If(Event Player.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
				Call Subroutine(lIIIIlIllllIIIlIIllllIllll);
				Event Player.lIlIIlIIlIllIIIIIlIlIIIIll *= 3;
				Abort;
			End;
			Call Subroutine(IIIIlIllIlIIIlIlllllIIIllI);
			Abort;
		End;
		If(Global.IlllIIIIlIIIlIllIIlIlIlllI == 7);
			Small Message(Event Player, Custom String("A boss is here already"));
			Abort;
		End;
		If(Global.IlllIIIIlIIIlIllIIlIlIlllI == Event Player);
			Small Message(Event Player, Custom String("You are already summoning a boss"));
			Abort;
		End;
		Small Message(Event Player, Custom String("{0} is already summoning a boss", Global.IlllIIIIlIIIlIllIIlIlIlllI));
		Abort;
	}
}

rule("llIIIIIlIIIlIIIIIllllIIllI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Is Communicating(Event Player, Acknowledge) || Is Communicating(Event Player, Yes)) == True;
	}

	actions
	{
		Abort If(!Health(Event Player));
		If(Event Player.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
			Call Subroutine(lIIIIlIllllIIIlIIllllIllll);
			Event Player.lIlIIlIIlIllIIIIIlIlIIIIll *= 4;
			Abort;
		End;
		Call Subroutine(IllllIIllIllllIIIIIIllIlII);
	}
}

rule("lIllIIllIIlIIllllIIlllIllI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Is Communicating(Event Player, Ultimate Status) || Is Communicating(Event Player, Ready)) == True;
	}

	actions
	{
		Abort If(!Health(Event Player));
		If(Event Player.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
			Call Subroutine(lIIIIlIllllIIIlIIllllIllll);
			Event Player.lIlIIlIIlIllIIIIIlIlIIIIll *= 5;
			Abort;
		End;
		Call Subroutine(IIlIllIIllIlIIIIlIIIIllIll);
	}
}

rule("IllllIlIIIIIIllllIIIlllllI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Abort If(!Health(Event Player));
		If(Event Player.IlllIllIlIlllIlIlIIlIllIlI);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][5];
			Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
			Abort;
		End;
		If(Event Player.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
			Call Subroutine(lIIIIlIllllIIIlIIllllIllll);
			Event Player.lIlIIlIIlIllIIIIIlIlIIIIll *= 6;
			Event Player.lIlIlllIllIlIIIllllIllIlll[1] = Is Button Held(Event Player, Button(Reload));
			Call Subroutine(lIIIIIIllIIllIlIIIlIlIlIll);
			Event Player.lIlIlIIIlllIIIIlIIlIlllllI[1] = Distance Between(Event Player, Global.IIIIlllIIIIlIIIlIIIIllllIl) <= 2.500 + 15 * (
				Event Player.llllllIllIIlllllIlIIlIIllI[0] == 2) * !(
				Event Player.llIIIlllIIIlllllIIllIIIIIl[Global.lIIIIIllllIlIIIIlIIIlIIIll] % 1)
				* Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1] ? Global.IIIIlllIIIIlIIIlIIIIllllIl : False;
			Abort If(Event Player.lIlIlIIIlllIIIIlIIlIlllllI[1]);
			Call Subroutine(lIlIllllIllllIIIllllIIIIlI);
			Event Player.lIlIlIIIlllIIIIlIIlIlllllI[1] = Distance Between(Event Player, Global.IIIlIlllIllllIlllllllIIlII)
				<= 1.750 ? Global.IIIlIlllIllllIlllllllIIlII : False;
			Abort;
		End;
		Event Player.lIlIlllIllIlIIIllllIllIlll[0] = Is Button Held(Event Player, Button(Reload));
		Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] = False;
		Call Subroutine(llIIlIlIIIIIllIIlIllIIIlII);
	}
}

rule("IlIlIIlIlIIIlllIlIlllllIII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Abort If(Is Button Held(Event Player, Button(Reload)));
		If(!Health(Event Player));
			Event Player.lIIIIlIlIIlIIlIllllllIIllI = (Health(Event Player) == False) * (Total Time Elapsed + 1);
			Abort;
		End;
		If(Event Player.IlllIllIlIlllIlIlIIlIllIlI);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][7];
			Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
			Abort;
		End;
		If(Event Player.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
			Call Subroutine(lIIIIlIllllIIIlIIllllIllll);
			Event Player.lIlIIlIIlIllIIIIIlIlIIIIll *= 7;
			Call Subroutine(lIlIllllIllllIIIllllIIIIlI);
			Event Player.lIlIlIIIlllIIIIlIIlIlllllI[1] = Distance Between(Event Player, Global.IIIlIlllIllllIlllllllIIlII)
				<= 1.750 ? Global.IIIlIlllIllllIlllllllIIlII : False;
			Abort;
		End;
		Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] = False;
		Call Subroutine(IllIIIIllIlIIIIIlIlIlIlIll);
	}
}

rule("lIlIllIIIllIIIIIlIllIlIIII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		If(!Health(Event Player));
			Event Player.lIIIIlIlIIlIIlIllllllIIllI = (Health(Event Player) == False) * (Total Time Elapsed + 1);
			Abort;
		End;
		If(Event Player.IlllIllIlIlllIlIlIIlIllIlI);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][6];
			Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
			Abort;
		End;
		If(Event Player.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
			Call Subroutine(lIIIIlIllllIIIlIIllllIllll);
			Event Player.lIlIIlIIlIllIIIIIlIlIIIIll *= 8;
			Event Player.lIlIlllIllIlIIIllllIllIlll[1] = Is Button Held(Event Player, Button(Reload));
			Event Player.lIlIlllIllIlIIIllllIllIlll[3] = Is Button Held(Event Player, Button(Crouch));
			Call Subroutine(lIlIllllIllllIIIllllIIIIlI);
			Event Player.lIlIlIIIlllIIIIlIIlIlllllI[1] = Distance Between(Event Player, Global.IIIlIlllIllllIlllllllIIlII)
				<= 1.750 ? Global.IIIlIlllIllllIlllllllIIlII : False;
			Abort;
		End;
		Event Player.lIlIlllIllIlIIIllllIllIlll[0] = Is Button Held(Event Player, Button(Reload));
		Event Player.lIlIlllIllIlIIIllllIllIlll[2] = Is Button Held(Event Player, Button(Crouch));
		Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] = False;
		Call Subroutine(lIIIlllIlIIllIlllllllIlllI);
	}
}

rule("IIlIIIlIllIllIIIIIIlIIIIII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IlllIllIlIlllIlIlIIlIllIlI == True;
		(Is Button Held(Event Player, Button(Secondary Fire)) || Is Button Held(Event Player, Button(Ability 1)) || Is Button Held(
			Event Player, Button(Ability 2)) || Is Button Held(Event Player, Button(Ultimate))) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][1];
			Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.IIlIIIIIIllIIlIlIIIlllllIl && Is Button Held(Event Player, Button(Reload)));
				Global.IlllllIIlIIllIlIlIIIlIlIlI = 8;
			Else;
				Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][4];
			End;
			Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Ability 2)));
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][3];
			Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Ability 1)));
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][2];
			Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
			Abort;
		End;
	}
}

rule("lIllIIIlIIIIIlIIIIIlllIIll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Event Player.IlllIllIlIlllIlIlIIlIllIlI || (Event Player.IIIIlIIIIllllIlllIIIlllIIl == 3 && Is In Air(Event Player))) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		If(Event Player.IlllIllIlIlllIlIlIIlIllIlI);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][8];
			Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
			Abort;
		End;
		If(!Event Player.IllllllllIlIlllIIlllIlIlII);
			Apply Impulse(Event Player, Up, 7.500 + Event Player.IIlIIllIIIllIllllIIIIlIIll, To World, Incorporate Contrary Motion);
			Event Player.IllllllllIlIlllIIlllIlIlII = True;
			Abort;
		End;
		Event Player.IIIIIIlIlIllIIIllllIllIlll = True;
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Up, 0.100, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Down, 0.100, To World, Cancel Contrary Motion);
	}
}

rule("lIIIlIIllIlllIIIIllIIlllll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.lllIlIlIlIIIIlIIllIIlIIIIl == True;
	}

	actions
	{
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		Event Player.lIlIIlIlIlIIIlIlllllIlIIII += 1;
		Event Player.IlIllIIlllllllllIIIIllllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII * 19;
		Event Player.IlIlIIIlIIllIIIIllIlIIllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII;
		Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
		Event Player.lllIlIlIlIIIIlIIllIIlIIIIl = False;
		Big Message(Event Player, Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3]);
		Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
		Call Subroutine(llIlllIllIIllllIIIIIllIlII);
	}
}

rule("IIIIlIllllIlllIlllIIIIIlIl")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IIIIIIlIlIllIIIllllIllIlll == True;
		Is Button Held(Event Player, Button(Jump)) == False;
	}

	actions
	{
		Event Player.IIIIIIlIlIllIIIllllIllIlll = False;
		Set Gravity(Event Player, 100);
	}
}

rule("lIlIlIlIIlIIIIlIIlIIlIIIll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IllllllllIlIlllIIlllIlIlII == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.IllllllllIlIlllIIlllIlIlII = False;
		Event Player.IIIIIIlIlIllIIIllllIllIlll = False;
		Set Gravity(Event Player, 100);
	}
}

rule("IIIIIllIIIIIIIIIllIlllIlll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IlllIllIlIlllIlIlIIlIllIlI == True;
		Distance Between(Event Player, Event Player.IIllIIllIllllllllIIlIIIIll) > 3;
	}

	actions
	{
		Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
		Event Player.IIIIIlIlIlIllIlllllIIllIll = Event Player.IIllIIllIllllllllIIlIIIIll;
		Call Subroutine(llIlIIIlIIlIIIIIllIlIIllIl);
		Call Subroutine(lllIlllIIIlIllllIIIIIIlIlI);
	}
}

rule("IlIllllIIlIIIIIllllIIlIlll")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.IllllllllIlIlllIIlllIlIlII == True;
		Event Player.lllIlIIllIIllIIIIlllIIllII >= 2;
		((!Global.IIIlIlllIlIllIIllllllIIIIl && Y Component Of(Position Of(Event Player)) <= X Component Of(Position Of(Event Player))
			* 0.050 + Z Component Of(Position Of(Event Player)) * -0.060 - 4) || (Global.IIIlIlllIlIllIIllllllIIIIl && Y Component Of(
			Position Of(Event Player)) <= Global.IIIlIlllIlIllIIllllllIIIIl) || Is In Spawn Room(Event Player)) == True;
	}

	actions
	{
		Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
		Event Player.IIIIIlIlIlIllIlllllIIllIll = Event Player.IIIllIlIIIIlIlllIlllIlIIlI;
		Call Subroutine(llIlIIIlIIlIIIIIllIlIIllIl);
	}
}

rule("lIIllIIIlIIIIIIIIIlIlIIlII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.lIIIIlIlIIlIIlIllllllIIllI == True;
		Event Player.lIIIIlIlIIlIIlIllllllIIllI <= Total Time Elapsed;
	}

	actions
	{
		Event Player.lIIIIlIlIIlIIlIllllllIIllI = False;
		Abort If(Health(Event Player));
		Abort If(!Is Button Held(Event Player, Button(Interact)) && !Is Button Held(Event Player, Button(Melee)));
		Event Player.lIllIIlIllllIlIIIllIIllIlI = Min(Event Player.lllIIIIIIIlllIIlIIIlllIIIl,
			Event Player.llllIIlIlllllllIIllIlIllII == True ? 0.250 : 2.500);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5] = Min(Event Player.llIIIIIIllIIlIIlIlIIIIllII,
			Event Player.llllIIlIlllllllIIllIlIllII ? Event Player.llIIlllIIIIllIIllIIIIIllII / 400 : Event Player.llIIlllIIIIllIIllIIIIIllII * 0.025);
		Event Player.llIIIIIIllIIlIIlIlIIIIllII -= Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5];
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5] *= 1 + (Event Player.llllIIlIlllllllIIllIlIllII == True) * 9;
		Event Player.lllIIIIIIIlllIIlIIIlllIIIl = Event Player.llIIIIIIllIIlIIlIlIIIIllII / Event Player.llIIlllIIIIllIIllIIIIIllII * 100;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8] = Min(Event Player.IlllIlIIIIIlIlllIIIIlIllll, 1);
		Event Player.IlllIlIIIIIlIlllIIIIlIllll -= Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8];
		Small Message(Event Player, Custom String("Death takes its toll of {0}% Experience and {1} Horadric Favor",
			Event Player.lIllIIlIllllIlIIIllIIllIlI, Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8]));
		If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2]);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Respawn: -{0} EXP / -{1} HF",
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5], Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8]);
			Call Subroutine(llIlllIllIIllllIIIIIllIlII);
		End;
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
		Event Player.IIIIIlIlIlIllIlllllIIllIll = Global.IlIlIIIlIIllllIllIlllllIll;
		Call Subroutine(llIlIIIlIIlIIIIIllIlIIllIl);
		Event Player.lllIlllIllIIIlIIIIlllllIIl = 2;
		Resurrect(Event Player);
		Wait(0.100, Ignore Condition);
		Call Subroutine(lllIlllIIIlIllllIIIIIIlIlI);
	}
}

rule("llIIlIIlIIlIlllIIIlIIIllII")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.IIIlIlIIIIllIlllllIIIIllIl[0] <= Total Time Elapsed;
	}

	actions
	{
		If(Global.IIIlIlIIIIllIlllllIIIIllIl[1] == 1 && (
			Global.IlIIIIllIllIllllIlIlIllllI[6] != Global.IlIIIIllIllIllllIlIlIllllI[1] || Global.IlIIIIllIllIllllIlIlIllllI[4] != Global.IlIIIIllIllIllllIlIlIllllI[0] || Global.IlIIIIllIllIllllIlIlIllllI[7] != Global.IIIllIIIlIIllIIIIlIllllllI));
			Global.IlIIIIllIllIllllIlIlIllllI[6] = Global.IlIIIIllIllIllllIlIlIllllI[1];
			Global.IlIIIIllIllIllllIlIlIllllI[4] = Global.IlIIIIllIllIllllIlIlIllllI[0];
			Global.IlIIIIllIllIllllIlIlIllllI[7] = Global.IIIllIIIlIIllIIIIlIllllllI;
			Global.lllllIIlIlllIIllIIlIIlllII[4] = Global.IIIllIIIlIIllIIIIlIllllllI == False ? Custom String("Adaptive {0}",
				Global.IlIIIIllIllIllllIlIlIllllI[0] < 0 ? Global.IlIIIIllIllIllllIlIlIllllI[0] * 3 : Custom String("+{0}",
				3 * Global.IlIIIIllIllIllllIlIlIllllI[0])) : Custom String("Fixed {0}-{1}",
				Global.IlIIIIllIllIllllIlIlIllllI[1] * 3 + 1 * !Global.IlIIIIllIllIllllIlIlIllllI[1], Min((
				Global.IlIIIIllIllIllllIlIlIllllI[1] + 4) * 3, 60));
			If(Global.IIIllIIIlIIllIIIIlIllllllI);
				Global.llllIIllIIlIIIlIlIlIlIlIlI = Global.IlIIIIllIllIllllIlIlIllllI[1];
				Global.lIlIllIlIIlllIIllIIIIllIlI = Global.llllIIllIIlIIIlIlIlIlIlIlI * 0.113;
			End;
			Wait(0.100, Ignore Condition);
			Small Message(All Players(Team 2), Custom String("New Enemy Levels Setting: {0}", Global.lllllIIlIlllIIllIIlIIlllII[4]));
		End;
		If(Global.IIIlIlIIIIllIlllllIIIIllIl[1] == 2 && Global.IlIIIIllIllIllllIlIlIllllI[2] != Global.lllllIIIllIIIllIlIIllIllII);
			Global.IlIIIIllIllIllllIlIlIllllI[2] = Global.lllllIIIllIIIllIlIIllIllII;
			Host Player.lIllIIlIllllIlIIIllIIllIlI = Round To Integer((Global.lllllIIIllIIIllIlIIllIllII + 600) / 60, To Nearest);
			Host Player.llIlIIllIIIIIIIIlIlIlIIlII = Round To Integer((Global.lllllIIIllIIIllIlIIllIllII + 600 - Total Time Elapsed) / 60,
				To Nearest);
			Wait(0.100, Ignore Condition);
			Call Subroutine(IIIlIllIIIIllIIlllIIlIlIll);
			Small Message(All Players(Team 2), Custom String("Match Duration Changed: Total Duration: {0} h {1} min - Remaining: {2}",
				Round To Integer(Host Player.lIllIIlIllllIlIIIllIIllIlI / 60, Down), Host Player.lIllIIlIllllIlIIIllIIllIlI % 60,
				Custom String("{0} h {1} min", Round To Integer(Host Player.llIlIIllIIIIIIIIlIlIlIIlII / 60, Down),
				Host Player.llIlIIllIIIIIIIIlIlIlIIlII % 60)));
		End;
		If(Global.IIIlIlIIIIllIlllllIIIIllIl[1] == 3 && Global.IlIIIIllIllIllllIlIlIllllI[5] != Global.IIIlIIIlIIllIIlllIlIIllIll);
			Global.IlIIIIllIllIllllIlIlIllllI[5] = Global.IIIlIIIlIIllIIlllIlIIllIll;
			Global.lllllIIlIlllIIllIIlIIlllII[7] = Round To Integer(100 * Global.IIIlIIIlIIllIIlllIlIIllIll, To Nearest);
			Small Message(All Players(Team 2), Custom String("New Enemy Health/EXP Setting: {0}%", Global.lllllIIlIlllIIllIIlIIlllII[7]));
		End;
		Global.IIIlIlIIIIllIlllllIIIIllIl[1] = 0;
	}
}

rule("IlIIlIIllIIlIIIIllIIIllIlI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Abort If(Hero Of(Event Player) != Hero(Sombra) && Hero Being Duplicated(Event Player) != Hero(Sombra));
		Event Player.llllllIlIIlIIllIIlllIlIIII = True;
	}
}

rule("IlIlIIlllIllllllIIllllllll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.llllllIlIIlIIllIIlllIlIIII == True;
		(!Is Using Ability 1(Event Player) || (Hero Of(Event Player) != Hero(Sombra) && Hero Being Duplicated(Event Player) != Hero(
			Sombra))) == True;
	}

	actions
	{
		Event Player.llllllIlIIlIIllIIlllIlIIII = False;
	}
}

rule("IllIlIIllIllllIllIlIlllIll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.lIIIllIIllIIIllIlIIllIlIll == True;
		(!Is Using Ultimate(Event Player) || (Hero Of(Event Player) != Hero(Sigma) && Hero Being Duplicated(Event Player) != Hero(Sigma)))
			== True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.lIIIllIIllIIIllIlIIllIlIll = False;
	}
}

rule("IllllIlIIllIIllIlIIlllllll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI == True;
		Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI <= Total Time Elapsed;
	}

	actions
	{
		Event Player.lIIIlIIIlllllIIllIllIIIIll -= 1;
		Global.IIIlIlllIllllIlllllllIIlII = Index Of Array Value(Event Player.llIlIlIllIIllIlllIlIIlIllI,
			Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI);
		Event Player.lIIIIllIIIIIlIIIIllllIlIlI[Global.IIIlIlllIllllIlllllllIIlII] = Global.lIllIIlIlIIIIIlIIIlIlIlllI;
		Event Player.llIlIlIllIIllIlllIlIIlIllI[Global.IIIlIlllIllllIlllllllIIlII] = 0;
		Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI = First Of(Sorted Array(Remove From Array(Event Player.llIlIlIllIIllIlllIlIIlIllI, 0),
			Current Array Element));
		Destroy Effect(Event Player.IIIlIlIIlllIIlIIlllIIIIlII[Global.IIIlIlllIllllIlllllllIIlII]);
		Abort If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4]);
		Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
	}
}

rule("lIlIlllIllIlllllIlIlllIlII")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.lllllIIlllIlllllIIlIIlllII[0] == True;
		Event Player.lllllIIlllIlllllIIlIIlllII[0] <= Total Time Elapsed;
	}

	actions
	{
		Event Player.lllllIIlllIlllllIIlIIlllII[0] = False;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, Count Of(Event Player.lllllIIlllIlllllIIlIIlllII), 1);
			If(Event Player.lllllIIlllIlllllIIlIIlllII[2][Global.lIIlllIllllIlIIIIlIllIIIlI] <= Total Time Elapsed);
				Modify Player Variable At Index(Event Player, lllllIIlllIlllllIIlIIlllII, 1, Remove From Array By Index,
					Global.lIIlllIllllIlIIIIlIllIIIlI);
				Modify Player Variable At Index(Event Player, lllllIIlllIlllllIIlIIlllII, 2, Remove From Array By Index,
					Global.lIIlllIllllIlIIIIlIllIIIlI);
			End;
		End;
		Event Player.lllllIIlllIlllllIIlIIlllII[3] = Last Of(Sorted Array(Event Player.lllllIIlllIlllllIIlIIlllII[1],
			Current Array Element));
		Call Subroutine(llIlIIllIIllIIllllIlIIlIlI);
		Event Player.lllllIIlllIlllllIIlIIlllII[0] = Event Player.lllllIIlllIlllllIIlIIlllII[3] ? Total Time Elapsed + 0.250 : False;
	}
}

rule("lIlllIIIIIlllIlIlIIIIIlIII")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		If(Global.IllIIlIllllIIIllIlllIIlIIl != 2);
			Call Subroutine(IlllIlIIIIIllllIlllllIlllI);
			Abort;
		End;
		Disable Built-In Game Mode Respawning(Event Player);
		Global.IIIIlIIIIIlIIIIlIIIIllIlII += 1;
		Event Player.IIIllIlIIIIlIlllIlllIlIIlI = Global.llIIIllIlIlIIIIllIlllllIIl[0];
		Event Player.lllIIIIIIIlllIIlIIIlllIIIl = Global.llIIIllIlIlIIIIllIlllllIIl[1];
		Event Player.llIllIIIlIllllIIlIlIIIlllI = Global.llIIIllIlIlIIIIllIlllllIIl[2];
		Event Player.lIlIlIIlIIIllIIIlIIlIllIIl = Global.llIIIllIlIlIIIIllIlllllIIl[3] >= 4;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII = Global.IIlIllIIlIIllIlIlIIllIIIIl[Global.llIIIllIlIlIIIIllIlllllIIl[3]];
		Event Player.lllIlIIllIIllIIIIlllIIllII = Min(Global.llIIIllIlIlIIIIllIlllllIIl[3], 3);
		If(Event Player.lllIlIIllIIllIIIIlllIIllII >= 2);
			Global.lIlIIlIIlIlIIlIlllllIlIIII = Event Player;
		End;
		Event Player.lIlIIlIlIlIIIlIlllllIlIIII = Max(Event Player.lllIIIIIIIlllIIlIIIlllIIIl * 3, 1);
		Call Subroutine(IllllIlIlIllIIllIIIllllllI);
		Set Weapon(Event Player, 1);
		Set Status(Event Player, Null, Invincible, 1.500);
		Set Invisible(Event Player, Enemies);
		Set Ultimate Charge(Event Player, Random Integer(0, 100));
		Event Player.IIlllIlIIIlIlIlIlIIIIIllII = Event Player.lIllIIIIlIIlllIllIllIIIlII[0];
		Event Player.llIIllllIIlIIIIIIIlIlIlllI = Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII[1] % 1 * 100, Down);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII[1], Down);
		Event Player.IllIlIllIIIIlIIllIllIllIlI[5] = Event Player.IllIlIllIIIIlIIllIllIllIlI[2];
		Event Player.IllIlIllIIIIlIIllIllIllIlI[6] = Event Player.IllIlIllIIIIlIIllIllIllIlI[3];
		Event Player.lIIlIIIIIIIlIIlIIlIIIlllIl = -2.667;
		Event Player.lIlIIlllIIIlIllllIllIIlIlI = Vector(45.120, -23.900, 15.140);
		Event Player.lIllIlIIlllIllIlIlllllIIII = Random Integer(0, 359);
		Event Player.IlIlIIIlIIllIIIIllIlIIllll = Direction From Angles(Event Player.lIllIlIIlllIllIlIlllllIIII, 0);
		Start Throttle In Direction(Event Player, Event Player.IlIlIIIlIIllIIIIllIlIIllll, 1, To World, Replace existing throttle,
			Direction and Magnitude);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Event Player.lllIIlllIIlIIlllIIIIlllIlI + Up), 360,
			To World, Direction and Turn Rate);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = Event Player + Event Player.IlIlIIIlIIllIIIIllIlIIllll * 100;
		If(Event Player.lllIlIIllIIllIIIIlllIIllII >= 2 && Array Contains(Array(Hero(D.Va), Hero(Echo), Hero(Winston)), Hero Of(
			Event Player)));
			Event Player.IIIllIIIlIlIlIlIlIllIIIlIl = Total Time Elapsed + Global.IIlllIIIIIllIlIllIlIlllIII;
		End;
		Call Subroutine(IlIllIIIIIlIlIIllIIIlllIll);
		Event Player.IlIIllllIlllIllIIIllIlIlll = (0.050 * (Event Player.lllIIIIIIIlllIIlIIIlllIIIl + 1) ^ 2 + (
			Event Player.lllIIIIIIIlllIIlIIIlllIIIl + 1) * 0.950) * Array(1, 2.500, 15, 36.250)
			[Event Player.lllIlIIllIIllIIIIlllIIllII] * Global.IIIlIIIlIIllIIlllIlIIllIll;
		Event Player.IIIlIlIllIlllIllllIlIllIll = 0.999 * 1.119 ^ Event Player.lllIIIIIIIlllIIlIIIlllIIIl * (
			0.400 + 0.600 * Global.lllIlIIIIIIlIlIIllIlIllllI) * Array(1, 2.500, 15, 22)
			[Event Player.lllIlIIllIIllIIIIlllIIllII] * Global.IIIlIIIlIIllIIlllIlIIllIll;
		Event Player.IIIIIIIIlIIlIIIIIIIllIIIII = Array(1, 0.625, 0.455, 0.357, 0.294, 0.250)[Max(0, Global.lllIlIIIIIIlIlIIllIlIllllI - 1)
			];
		Event Player.IIlllllIIlIIlIIIIIIIIlIlII = Max Health(Event Player);
		Set Max Health(Event Player, 1);
		Set Healing Received(Event Player,
			Event Player.IIIlIlIllIlllIllllIlIllIll * Global.llIIIllIllIlllIlllIIIlllll[Event Player.lllIlIIllIIllIIIIlllIIllII]);
		Global.IIllllIlIIlIIIllIllIIIIlII = (
			0.750 + 0.175 * Event Player.lllIIIIIIIlllIIlIIIlllIIIl + 0.050 * Event Player.lllIIIIIIIlllIIlIIIlllIIIl ^ 2 * 0.525) * Array(
			1, 1.250, 1.750, 2.500)[Event Player.lllIlIIllIIllIIIIlllIIllII] * Min(2.800,
			1 + 0.100 * Event Player.lllIIIIIIIlllIIlIIIlllIIIl);
		Set Damage Dealt(Event Player, Global.IIllllIlIIlIIIllIllIIIIlII);
		If(Hero Of(Event Player) == Hero(Sigma));
			Start Damage Modification(All Players(Team 2), Is Using Ultimate(Event Player) ? Event Player : Null,
				10000 / Global.IIllllIlIIlIIIllIllIIIIlII, Receivers and Damagers);
		Else If(Hero Of(Event Player) == Hero(Echo));
			Start Damage Modification(All Players(Team 2), Hero Being Duplicated(Event Player) == Hero(Sigma) && Is Using Ultimate(
				Event Player) ? Event Player : Null, 10000 / Global.IIllllIlIIlIIIllIllIIIIlII, Receivers and Damagers);
		End;
		Event Player.IllIlIIlIIlIlIlIllIllllllI = (
			80 + Event Player.lllIIIIIIIlllIIlIIIlllIIIl + Event Player.llIllIIIlIllllIIlIlIIIlllI * 5) * (
			1 + Event Player.lllIlIIllIIllIIIIlllIIllII * 0.167);
		Event Player.lllllIIlllIlllllIIlIIlllII = True;
		Wait(0.250, Ignore Condition);
		Event Player.IIlllllIIlIIlIIIIIIIIlIlII = Event Player.IIlllllIIlIIlIIIIIIIIlIlII * Event Player.IIIlIlIllIlllIllllIlIllIll * 0.010 - Max Health(
			Event Player);
		While(Event Player.IIlllllIIlIIlIIIIIIIIlIlII > 0);
			Add Health Pool To Player(Event Player, Health, Min(9999, Event Player.IIlllllIIlIIlIIIIIIIIlIlII), True, False);
			Event Player.IIlllllIIlIIlIIIIIIIIlIlII -= 9999;
		End;
		Set Player Health(Event Player, Max Health(Event Player));
		Event Player.IllIIIlIlllIllIlIIllIllIII = True;
		Wait(1.250, Ignore Condition);
		Event Player.IllllllllIlIlllIIlllIlIlII = True;
		Event Player.IlIllIlIlIlllIIlIllllllllI = True;
		Event Player.IIIIlIIlIIlIlIIllIIlIIIIII = Global.IIIIllIlIIlIIIlIIllIllIIlI;
		Event Player.lIIIIllIIIIIlIIIIllllIlIlI = True;
		Event Player.llllllIllIIlllllIlIIlIIllI = Total Time Elapsed + 1.800 + (Hero Of(Event Player) == Hero(Tracer)) * 3;
		If(Event Player.lllIlIIllIIllIIIIlllIIllII >= 2);
			If(Event Player.IIIllIlIIIIlIlllIlllIlIIlI == Global.lIIllIllIllIlIIIlllIlllIIl[0]);
				Event Player.IIIllIlIIIIlIlllIlllIlIIlI = Global.lIIllIllIllIlIIIlllIlllIIl[1];
			End;
			Teleport(Event Player, Event Player.IIIllIlIIIIlIlllIlllIlIIlI);
			Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
			Global.IlllIIIIlIIIlIllIIlIlIlllI = 7;
			Wait(0.250, Ignore Condition);
			Set Invisible(Event Player, None);
			If(Event Player.lllIlIIllIIllIIIIlllIIllII >= 3);
				Global.lIIlIlIlllllIllIIllIlllIIl = 0;
				If(Event Player.lIlIlIIlIIIllIIIlIIlIllIIl);
					Big Message(All Players(Team 2), Custom String("Not even death can stop me!"));
				Else;
					Big Message(All Players(Team 2), Custom String("A Great Evil has appeared"));
				End;
			Else;
				Small Message(All Players(Team 2), Custom String("{0} {1} appeared", Global.lIlIIlIIlIlIIlIlllllIlIIII,
					Event Player.lIlIIIIlIIlIIlIIlIIIllllII));
			End;
			Create In-World Text(All Players(Team 2), Custom String("{0} {1} ({2})", Icon String(Skull),
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII, Event Player.lIlIIlIlIlIIIlIlllllIlIIII), Event Player,
				1.500 + 0.250 * Event Player.lllIlIIllIIllIIIIlllIIllII, Do Not Clip, Visible To,
				Global.IIlIlllIlIIIIllIIlIlIlIlll[2][Event Player.lllIlIIllIIllIIIIlllIIllII], Default Visibility);
			Event Player.IIllIIlIIllIIlIIlIlllIIllI = Last Text ID;
			Call Subroutine(IIllllIlIllIllIlIlIIlIllII);
		Else;
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Vector(Random Integer(-17, 17), Random Integer(-15, 15), Random Integer(-17, 17));
			Global.llIlIIlIlIlIllIllllIllIllI = Nearest Walkable Position(
				Global.llIlIllIIIlllIlllIIlIIIIII + Global.IlllllIIlIIllIlIlIIIlIlIlI);
			If(Distance Between(Global.llIlIIlIlIlIllIllllIllIllI, Global.IlIlIIIlIIllllIllIlllllIll) <= Global.IIIlIIlIIIIIlIlIIIlIllIlII);
				Global.llIlIIlIlIlIllIllllIllIllI = Nearest Walkable Position(
					Global.lIllllllIlIIlllIlllllIllll + Global.IlllllIIlIIllIlIlIIIlIlIlI * Global.llIIIllIIIIlIlllIlIIIllIll);
			End;
			Event Player.IIIIIlIlIlIllIlllllIIllIll = Global.llIlIIlIlIlIllIllllIllIllI;
			Teleport(Event Player, Event Player.IIIIIlIlIlIllIlllllIIllIll);
			Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
			Event Player.IIIllIlIIIIlIlllIlllIlIIlI = Global.llIlIIlIlIlIllIllllIllIllI;
			Wait(0.250, Ignore Condition);
			Set Invisible(Event Player, None);
			If(Event Player.lllIlIIllIIllIIIIlllIIllII == 1);
				Small Message(All Players(Team 2), Custom String("{0} {1} spawned", Event Player, Event Player.lIlIIIIlIIlIIlIIlIIIllllII));
			End;
			Create In-World Text(All Players(Team 2), Custom String("{0} ({1})", Event Player.lIlIIIIlIIlIIlIIlIIIllllII,
				Event Player.lIlIIlIlIlIIIlIlllllIlIIII), Event Player, 1.500 + 0.250 * Event Player.lllIlIIllIIllIIIIlllIIllII,
				Clip Against Surfaces, Visible To, Global.IIlIlllIlIIIIllIIlIlIlIlll[2][Event Player.lllIlIIllIIllIIIIlllIIllII],
				Default Visibility);
			Event Player.IIllIIlIIllIIlIIlIlllIIllI = Last Text ID;
		End;
		Start Damage Modification(Event Player, Filtered Array(All Players(Team 2), Current Array Element.lIIIllIIllIIIllIlIIllIlIll),
			1686.500 * Global.llIIIllIllIlllIlllIIIlllll[Event Player.lllIlIIllIIllIIIIlllIIllII] * Event Player.IIIIIIIIlIIlIIIIIIIllIIIII / Global.IIIlIIIlIIllIIlllIlIIllIll,
			Receivers and Damagers);
		Skip(2 * Global.IlllIlllllIIllIlIlIIlIllll[7]);
		Abort;
		Abort;
		Start Forcing Player Outlines(Event Player, All Players(Team 2), True,
			Global.IIlIlllIlIIIIllIIlIlIlIlll[3][Event Player.lllIlIIllIIllIIIIlllIIllII], Default);
		Abort;
		Start Forcing Player Outlines(Event Player, All Players(Team 2), True,
			Global.IIlIlllIlIIIIllIIlIlIlIlll[3][Event Player.lllIlIIllIIllIIIIlllIIllII], Always);
	}
}

rule("lIIIlIIIlllIIlIlIllllIIlII")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.IlIllIlIlIlllIIlIllllllllI == True;
		Event Player.IlIllIlIlIlllIIlIllllllllI <= Total Time Elapsed;
	}

	actions
	{
		Abort If(!Health(Event Player));
		Event Player.IlIllIlIlIlllIIlIllllllllI = Total Time Elapsed + 0.250;
		If(Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned));
			Event Player.lIIIIllIIIIIlIIIIllllIlIlI = Total Time Elapsed + 0.250;
			Event Player.lllIIlllIIlIIlllIIIIlllIlI = Event Player + Event Player.IlIlIIIlIIllIIIIllIlIIllll * 100;
			Abort;
		End;
		If(Event Player.lIIIIIllIlIIlIlIIIlIlIIlII < 7);
			If(Array Contains(All Players(All Teams), Event Player.lllIIlllIIlIIlllIIIIlllIlI));
				Global.IlIIlIIIlllIIlIllIIIIIllIl = Distance Between(Event Player.lllIIlllIIlIIlllIIIIlllIlI, Event Player);
				If(Global.IlIIlIIIlllIIlIllIIIIIllIl > Event Player.lIllIIIIlIIlllIllIllIIIlII);
					Event Player.lIllIlIIlllIllIlIlllllIIII = Horizontal Angle From Direction(Direction Towards(Event Player,
						Event Player.lllIIlllIIlIIlllIIIIlllIlI));
				Else If(Global.IlIIlIIIlllIIlIllIIIIIllIl < Event Player.IIlllIlIIIlIlIlIlIIIIIllII);
					If(Dot Product(Event Player.IlIlIIIlIIllIIIIllIlIIllll, Direction Towards(Event Player, Event Player.lllIIlllIIlIIlllIIIIlllIlI)
						* Vector(1, 0, 1)) >= 0.500);
						Event Player.lIllIlIIlllIllIlIlllllIIII = Horizontal Angle From Direction(Direction Towards(
							Event Player.lllIIlllIIlIIlllIIIIlllIlI, Event Player)) + Random Integer(-25, 25);
					End;
				Else If(Dot Product(Event Player.IlIlIIIlIIllIIIIllIlIIllll, Direction Towards(Event Player,
						Event Player.lllIIlllIIlIIlllIIIIlllIlI) * Vector(1, 0, 1)) <= -0.600);
					Event Player.lIllIlIIlllIllIlIlllllIIII = Horizontal Angle From Direction(Direction Towards(Event Player,
						Event Player.lllIIlllIIlIIlllIIIIlllIlI)) + Random Integer(50, 90) * Random Value In Array(Array(-1, 1));
				End;
			End;
			If(!Random Integer(0, 3) && Distance Between(Event Player.lllIIlllIIlIIlllIIIIlllIlI, Event Player) <= 2 && Array Contains(
				All Living Players(Team 2), Event Player.lllIIlllIIlIIlllIIIIlllIlI));
				Press Button(Event Player, Button(Melee));
			End;
		End;
		If(Event Player.lllIlIIllIIllIIIIlllIIllII >= 2);
			If(Distance Between(Event Player, Global.IlIlIIIlIIllllIllIlllllIll) <= Global.IIIlIIlIIIIIlIlIIIlIllIlII || (
				Global.lllllIlIIlllIIIlIlllllllIl[0] && Distance Between(Event Player, Global.lllllIlIIlllIIIlIlllllllIl[0])
				<= Global.lIllIllIIllIllllIIlllIIlIl[0]) || (Global.lllllIlIIlllIIIlIlllllllIl[1] && Distance Between(Event Player,
				Global.lllllIlIIlllIIIlIlllllllIl[1]) <= Global.lIllIllIIllIllllIIlllIIlIl[1]));
				Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
				Event Player.IIIIIlIlIlIllIlllllIIllIll = Event Player.IIIllIlIIIIlIlllIlllIlIIlI;
				Call Subroutine(llIlIIIlIIlIIIIIllIlIIllIl);
				Event Player.lIllIlIIlllIllIlIlllllIIII = Random Integer(0, 359);
				Event Player.IlIlIIIlIIllIIIIllIlIIllll = Direction From Angles(Event Player.lIllIlIIlllIllIlIlllllIIII, 0);
			End;
		End;
		If(Distance Between(Event Player, Event Player.lIlIIlllIIIlIllllIllIIlIlI) <= 0.100);
			Press Button(Event Player, Button(Jump));
			Event Player.lIllIlIIlllIllIlIlllllIIII = Random Integer(0, 359);
			Event Player.IlIlIIIlIIllIIIIllIlIIllll = Direction From Angles(Event Player.lIllIlIIlllIllIlIlllllIIII, 0);
		End;
		Event Player.lIlIIlllIIIlIllllIllIIlIlI = Position Of(Event Player);
		Global.lIIIIIllllIlIIIIlIIIlIIIll = Y Component Of(Position Of(Event Player)) - 2.500;
		For Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, 0, 7, 1);
			Event Player.lIllIlIIlllIllIlIlllllIIII += 30 * Global.IlllllIIlIIllIlIlIIIlIlIlI * (1 - 2 * (
				Global.IlllllIIlIIllIlIlIIIlIlIlI % 2));
			Event Player.IlIlIIIlIIllIIIIllIlIIllll = Direction From Angles(Event Player.lIllIlIIlllIllIlIlllllIIII, 0);
			If(Is In Air(Event Player));
				If(Distance Between(Ray Cast Hit Position(Event Player + Up, Event Player + Up + Event Player.IlIlIIIlIIllIIIIllIlIIllll * 2, Null,
					Null, False), Event Player + Up + Event Player.IlIlIIIlIIllIIIIllIlIIllll * 2) <= 0.100);
					Break;
				End;
			Else If(Y Component Of(Ray Cast Hit Position(Event Player + Vector(0, 2.500, 0) + Event Player.IlIlIIIlIIllIIIIllIlIIllll * 2,
					Event Player + Vector(0, -10, 0) + Event Player.IlIlIIIlIIllIIIIllIlIIllll * 2, Null, Null, False))
					>= Global.lIIIIIllllIlIIIIlIIIlIIIll);
				If(Is In Line of Sight(Event Player + Up, Up + Ray Cast Hit Position(Event Player + Vector(0, 2.500, 0)
					+ Event Player.IlIlIIIlIIllIIIIllIlIIllll * 4, Event Player + Vector(0, -10, 0) + Event Player.IlIlIIIlIIllIIIIllIlIIllll * 4,
					Null, Null, False), Barriers Do Not Block LOS));
					Break;
				End;
			End;
		End;
	}
}

rule("IIIllIIllllIlllllIllllIlll")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.llllllIllIIlllllIlIIlIIllI == True;
		Event Player.llllllIllIIlllllIlIIlIIllI <= Total Time Elapsed;
	}

	actions
	{
		Abort If(!Health(Event Player));
		If(Hero Of(Event Player) == Hero(Mercy));
			If(!Count Of(Filtered Array(Remove From Array(All Living Players(Team 1), Event Player), Is In Line of Sight(Eye Position(
				Event Player), Current Array Element + Up, Barriers Do Not Block LOS))) != Event Player.IIlllllIIIIlllIIIlllIllIlI);
				Event Player.IIlllllIIIIlllIIIlllIllIlI = !Event Player.IIlllllIIIIlllIIIlllIllIlI;
				Set Weapon(Event Player, Event Player.IIlllllIIIIlllIIIlllIllIlI + 1);
				Event Player.IllIlIllIIIIlIIllIllIllIlI[0] = 1.025 + 2 * !Event Player.IIlllllIIIIlllIIIlllIllIlI;
				Event Player.IllIlIllIIIIlIIllIllIllIlI[1] = 102.025 * !Event Player.IIlllllIIIIlllIIIlllIllIlI;
			End;
		End;
		If(Event Player.llIlIlIllIIllIlllIlIIlIllI <= Total Time Elapsed);
			Event Player.IllIlIllIIIIlIIllIllIllIlI[2] = Event Player.IllIlIllIIIIlIIllIllIllIlI[5];
			Event Player.llIlIlIllIIllIlllIlIIlIllI = Total Time Elapsed + 16000;
		End;
		If(Event Player.IlllIIlllIlllIIlIlIIIIllIl <= Total Time Elapsed);
			Event Player.IllIlIllIIIIlIIllIllIllIlI[3] = Event Player.IllIlIllIIIIlIIllIllIllIlI[6];
			Event Player.IlllIIlllIlllIIlIlIIIIllIl = Total Time Elapsed + 16000;
		End;
		Event Player.IIIlIlIIlIIlIIIlllllIIIlIl = Random Value In Array(Remove From Array(Array Slice(
			Event Player.IllIlIllIIIIlIIllIllIllIlI, 0, 4 + 1 * (Ultimate Charge Percent(Event Player)
			>= 100 && Event Player.IIIllIIIlIlIlIlIlIllIIIlIl <= Total Time Elapsed)), False));
		Event Player.IlIIllIlllllIlIIlIlIlllllI = Index Of Array Value(Event Player.IllIlIllIIIIlIIllIllIllIlI,
			Event Player.IIIlIlIIlIIlIIIlllllIIIlIl);
		Event Player.lIIIIIllIlIIlIlIIIlIlIIlII = Round To Integer(Event Player.IIIlIlIIlIIlIIIlllllIIIlIl % 10, Down);
		Event Player.IIlIlIlIIlIIIllIllIlIIllll = Event Player.IIIlIlIIlIIlIIIlllllIIIlIl % 1 * 100;
		Wait(0.250 + (
			Event Player.lIIIIIllIlIIlIlIIIlIlIIlII <= 6 && Event Player.lIIlIIIIIIIlIIlIIlIIIlllIl != Event Player.IlIIllIlllllIlIIlIlIlllllI)
			* 0.500, Ignore Condition);
		If(Event Player.lIIIIIllIlIIlIlIIIlIlIIlII == 7);
			If(Health(Event Player) >= Max Health(Event Player) * 0.950);
				Event Player.llllllIllIIlllllIlIIlIIllI = 1;
				Loop;
			End;
		Else If(Event Player.lIIIIIllIlIIlIlIIIlIlIIlII <= 6);
			If(!Array Contains(All Players(All Teams), Event Player.lllIIlllIIlIIlllIIIIlllIlI) || Is In View Angle(Event Player,
				Event Player.lllIIlllIIlIIlllIIIIlllIlI, 10 + (Distance Between(Event Player, Event Player.lllIIlllIIlIIlllIIIIlllIlI) < 20)
				* (20 - Distance Between(Event Player, Event Player.lllIIlllIIlIIlllIIIIlllIlI)) * 4.500) == False || Is In Line of Sight(
				Eye Position(Event Player), Event Player.lllIIlllIIlIIlllIIIIlllIlI + Up, Barriers Do Not Block LOS) == False);
				Loop;
			End;
		End;
		If(!Event Player.IlIIllIlllllIlIIlIlIlllllI);
			If(Event Player.IIlIlIlIIlIIIllIllIlIIllll <= 0 || Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI);
				Press Button(Event Player, Button(Primary Fire));
			Else;
				Start Holding Button(Event Player, Button(Primary Fire));
				Wait(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Ignore Condition);
				Stop Holding Button(Event Player, Button(Primary Fire));
			End;
		Else If(Event Player.IlIIllIlllllIlIIlIlIlllllI == 1);
			If(Event Player.IIlIlIlIIlIIIllIllIlIIllll <= 0);
				Press Button(Event Player, Button(Secondary Fire));
			Else;
				Start Holding Button(Event Player, Button(Secondary Fire));
				If(Hero Of(Event Player) == Hero(Brigitte) && Distance Between(Event Player, Event Player.lllIIlllIIlIIlllIIIIlllIlI) <= 8);
					Wait(Event Player.IIlIlIlIIlIIIllIllIlIIllll * 0.500, Ignore Condition);
					Press Button(Event Player, Button(Primary Fire));
					Wait(Event Player.IIlIlIlIIlIIIllIllIlIIllll * 0.500, Ignore Condition);
				Else;
					Wait(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Ignore Condition);
				End;
				Stop Holding Button(Event Player, Button(Secondary Fire));
			End;
		Else If(Event Player.IlIIllIlllllIlIIlIlIlllllI == 2);
			If(Hero Of(Event Player) != Hero(Soldier: 76) && Hero Of(Event Player) != Hero(Mercy));
				Start Holding Button(Event Player, Button(Ability 1));
				Wait(1.500 + 1 * (Hero Of(Event Player) == Hero(Soldier: 76)), Ignore Condition);
				Stop Holding Button(Event Player, Button(Ability 1));
			Else;
				Press Button(Event Player, Button(Ability 1));
			End;
			Event Player.IllIlIllIIIIlIIllIllIllIlI[2] = 0;
			Event Player.llIlIlIllIIllIlllIlIIlIllI = Total Time Elapsed + Event Player.IIlIlIlIIlIIIllIllIlIIllll;
		Else If(Event Player.IlIIllIlllllIlIIlIlIlllllI == 3);
			If(Array Contains(Array(Hero(Mei), Hero(Moira), Hero(Reaper), Hero(Symmetra)), Hero Of(Event Player)));
				Start Holding Button(Event Player, Button(Ability 2));
				Wait(0.100, Ignore Condition);
				Press Button(Event Player, Hero Of(Event Player) == Hero(Moira) && !Array Contains(All Players(Team 1),
					Event Player.lllIIlllIIlIIlllIIIIlllIlI) ? Button(Secondary Fire) : Button(Primary Fire));
				Wait(0.100, Ignore Condition);
				Stop Holding Button(Event Player, Button(Ability 2));
			Else;
				Press Button(Event Player, Button(Ability 2));
				Event Player.IllIlIllIIIIlIIllIllIllIlI[3] = 0;
				Event Player.IlllIIlllIlllIIlIlIIIIllIl = Total Time Elapsed + Event Player.IIlIlIlIIlIIIllIllIlIIllll;
			End;
		Else If(Event Player.IlIIllIlllllIlIIlIlIlllllI == 4);
			Press Button(Event Player, Button(Ultimate));
			If(Event Player.IIlIlIlIIlIIIllIllIlIIllll > 0);
				Wait(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Ignore Condition);
				Press Button(Event Player, Button(Primary Fire));
			End;
			Event Player.IIIllIIIlIlIlIlIlIllIIIlIl = Total Time Elapsed + (Hero Of(Event Player) == Hero(D.Va)) * 120 + (Hero Of(Event Player)
				== Hero(Echo)) * 60 + (Hero Of(Event Player) == Hero(Winston)) * 120;
		End;
		Event Player.lIIlIIIIIIIlIIlIIlIIIlllIl = Event Player.IlIIllIlllllIlIIlIlIlllllI;
		Event Player.llllllIllIIlllllIlIIlIIllI = Total Time Elapsed + 0.250 + (Hero Of(Event Player) == Hero(Widowmaker)
			&& !Event Player.IlIIllIlllllIlIIlIlIlllllI) * 0.500 + Round To Integer(Event Player.IIIlIlIIlIIlIIIlllllIIIlIl % 100 * 0.100,
			Down);
	}
}

rule("lIIlIllIIIIIllIlIIIllIIIII")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.lIIIIllIIIIIlIIIIllllIlIlI == True;
		Event Player.lIIIIllIIIIIlIIIIllllIlIlI <= Total Time Elapsed;
	}

	actions
	{
		Abort If(!Health(Event Player));
		Event Player.lIIIIllIIIIIlIIIIllllIlIlI = Total Time Elapsed + 0.250;
		Skip If(Event Player.lIIIIIllIlIIlIlIIIlIlIIlII >= 7, 13);
		Skip((Event Player.lIIIIIllIlIIlIlIIIlIlIIlII - 1) * 2);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = First Of(Sorted Array(Filtered Array(All Living Players(Team 2),
			!Current Array Element.llllllIlIIlIIllIIlllIlIIII && Is In Line of Sight(Eye Position(Event Player),
			Current Array Element + Up, Barriers Do Not Block LOS)), Distance Between(Current Array Element, Event Player)));
		Skip(9);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = First Of(Sorted Array(Filtered Array(Remove From Array(All Living Players(Team 1),
			Event Player), Is In Line of Sight(Eye Position(Event Player), Current Array Element + Up, Barriers Do Not Block LOS)),
			Distance Between(Current Array Element, Event Player)));
		Skip(7);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = First Of(Sorted Array(Filtered Array(Remove From Array(All Living Players(Team 1),
			Event Player), Health(Current Array Element) < Max Health(Current Array Element) * 0.990 && Is In Line of Sight(Eye Position(
			Event Player), Current Array Element + Up, Barriers Do Not Block LOS)), Health(Current Array Element)));
		Skip(5);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = First Of(Sorted Array(Filtered Array(All Living Players(Team 2),
			!Current Array Element.llllllIlIIlIIllIIlllIlIIII), Distance Between(Current Array Element,
			Event Player.lIlIlIIlIIIllIIIlIIlIllIIl) - 100 * Is In Line of Sight(Eye Position(Event Player), Current Array Element + Up,
			Barriers Do Not Block LOS)));
		Skip(3);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = First Of(Sorted Array(Filtered Array(Remove From Array(All Living Players(All Teams),
			Event Player), ((Team Of(Current Array Element) == Team 2 && !Current Array Element.llllllIlIIlIIllIIlllIlIIII) || (Team Of(
			Current Array Element) == Team 1 && Health(Current Array Element) < Max Health(Current Array Element) * 0.990))
			&& Is In Line of Sight(Eye Position(Event Player), Current Array Element + Up, Barriers Do Not Block LOS)), Distance Between(
			Current Array Element, Event Player) * 0.040 + Health(Current Array Element) / Max Health(Current Array Element)));
		Skip(1);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = First Of(Sorted Array(Filtered Array(Remove From Array(All Players(Team 1),
			Event Player), Is In Line of Sight(Eye Position(Event Player), Current Array Element + Up, Barriers Do Not Block LOS)), Health(
			Current Array Element)));
		Skip If(Array Contains(All Players(All Teams), Event Player.lllIIlllIIlIIlllIIIIlllIlI), 1);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = Event Player + Event Player.IlIlIIIlIIllIIIIllIlIIllll * 100;
		Abort If(Event Player.llIIllllIIlIIIIIIIlIlIlllI <= 0);
		If(!Event Player.IlIIllIlllllIlIIlIlIlllllI && Distance Between(Event Player, Event Player.lllIIlllIIlIIlllIIIIlllIlI)
			>= Event Player.llIIllllIIlIIIIIIIlIlIlllI && Array Contains(All Players(All Teams), Event Player.lllIIlllIIlIIlllIIIIlllIlI));
			If(!Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI);
				Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI = True;
				Start Holding Button(Event Player, Button(Secondary Fire));
			End;
			Abort;
		End;
		Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI = False;
		Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("lllIlIIIllIllIlllIIIllIlII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IIIlIlIllIlllIllllIlIllIll == True;
		Event Player.llllllIIIlllIlIlIlIIIIIlll <= Total Time Elapsed;
		Global.IllIlIllIllIllIIlIIIIllIIl <= Total Time Elapsed;
	}

	actions
	{
		Event Player.llllllIIIlllIlIlIlIIIIIlll = Total Time Elapsed + 3000;
		Event Player.lIIlIllIIIIllIlIIIlIIlIIII += 1;
		Abort If(Event Player.lIIlIllIIIIllIlIIIlIIlIIII < 2);
		If(Event Player.lIllIlllIlllIIlIIlllllIllI && !((Event Player.lIIlIllIIIIllIlIIIlIIlIIII - 1)
			% Event Player.lIllIlllIlllIIlIIlllllIllI) && Event Player.IlIllIlIlIlllIIlIllllllllI <= Total Time Elapsed);
			Call Subroutine(lllIlllllIlIIIllIlIlIIIlIl);
			Small Message(Event Player, Custom String("Autosave code created"));
			Wait(3, Ignore Condition);
		End;
		Abort If((Event Player.lIIlIllIIIIllIlIIIlIIlIIII - 1) % 6);
		Small Message(Event Player, Custom String("You have been playing for {0} hour(s).", 0.500 * (
			Event Player.lIIlIllIIIIllIlIIIlIIlIIII - 1)));
		Wait(3, Ignore Condition);
		Small Message(Event Player, Custom String("Please remember to save your progress regularly"));
		Wait(3, Ignore Condition);
		Small Message(Event Player, Custom String("and take a break when you need one."));
	}
}

rule("lllllIIlIlllllIllIIlIIIlII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.llIllIIIlIllllIIlIlIIIlllI == True;
		Is Dead(Event Player) == True;
	}

	actions
	{
		Call Subroutine(lllIllllIllIIlIllIIIIIIllI);
		If(Event Player.IIIIlIIIIllllIlllIIIlllIIl != 5 || Event Player.lIIIlIlIIIIIIllllIlIlIlllI > Total Time Elapsed);
			Event Player.IIllIIlllllllIlIIllIIIIIll = 0;
			Event Player.IIIllIIllIIIIllIlIlIIIIIII = 0;
			Event Player.llIllIlIllIIlIlIIlIIlIIIll = Custom String("");
			Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
			Abort;
		End;
		Abort If((Global.IIIlIlllIlIllIIllllllIIIIl && Y Component Of(Position Of(Event Player)) <= Global.IIIlIlllIlIllIIllllllIIIIl) || (
			!Global.IIIlIlllIlIllIIllllllIIIIl && Y Component Of(Position Of(Event Player)) <= X Component Of(Position Of(Event Player))
			* 0.050 + Z Component Of(Position Of(Event Player)) * -0.060 - 4));
		Event Player.lIIIlIlIIIIIIllllIlIlIlllI = Total Time Elapsed + 600 - 60 * Event Player.IIlIIllIIIllIllllIIIIlIIll;
		Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
		Resurrect(Event Player);
		Event Player.IIIIIlIlIlIllIlllllIIllIll = Position Of(Event Player) + Up;
		Play Effect(All Players(Team 2), Buff Impact Sound, Null, Event Player.IIIIIlIlIlIllIlllllIIllIll, 100);
		Set Status(Event Player, Null, Invincible, 1 + Event Player.IIlIIllIIIllIllllIIIIlIIll * 0.800);
		Event Player.IIllIlIIIIIIllIIIllIlIllII[2] = Total Time Elapsed + 0.100;
		Abort If(!Global.IlllIlllllIIllIlIlIIlIllll[6]);
		Play Effect(All Players(Team 2), Good Explosion, Color(Yellow), Event Player.IIIIIlIlIlIllIlllllIIllIll, True);
	}
}

rule("lllIlIlIIIllIIlIIIIllllIIl")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IIllIIlIIllIIlIIlIlllIIllI == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Big Message(Event Player, Custom String("Super Novice!", Event Player));
	}
}

rule("llllllIlllIlIIIlIllllllIlI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IIllIlIIIIIIllIIIllIlIllII[2] == True;
		Event Player.IIllIlIIIIIIllIIIllIlIllII[2] <= Total Time Elapsed;
	}

	actions
	{
		Event Player.IIllIlIIIIIIllIIIllIlIllII[2] = False;
		Heal(Event Player, Null, Global.IIlllIIIIIllIlIllIlIlllIII);
		Set Ammo(Event Player, 0, Event Player.IIllIlIIIIIIllIIIllIlIllII[0] * (1 + 3 * (Hero Of(Event Player) == Hero(Kiriko))));
		Set Ammo(Event Player, 1, Event Player.IIllIlIIIIIIllIIIllIlIllII[1]);
	}
}

rule("llIIlIlIIIIlIlIllllIIlIIlI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Is Duplicating(Event Player) == True;
	}

	actions
	{
		Event Player.IIIIllIIlIllIlIlIllIlIIIIl = True;
		Call Subroutine(lIllIIIIIIllllIIlllIllllIl);
		Call Subroutine(lIllIIlIIIlIllllIlIlIIIlIl);
		Set Healing Dealt(Event Player, Event Player.lllIlllIllIIIlIIIIlllllIIl ? 0 : Event Player.IIlllllIIlIIlIIIIIIIIlIlII[1]);
		Event Player.IIllIlIIIIIIllIIIllIlIllII[2] = Total Time Elapsed + 0.100;
	}
}

rule("IIIlIlIlIIIIlllllIlIIIlIII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IIIIllIIlIllIlIlIllIlIIIIl == True;
		(Event Player.IIIllIlIIIIlIlllIlllIlIIlI != Hero(Echo) || !Is Duplicating(Event Player)) == True;
	}

	actions
	{
		Event Player.IIIIllIIlIllIlIlIllIlIIIIl = False;
		Start Forcing Player To Be Hero(Event Player, Hero(Tracer));
		Start Forcing Player To Be Hero(Event Player, Event Player.IIIllIlIIIIlIlllIlllIlIIlI);
		Call Subroutine(lIllIIIIIIllllIIlllIllllIl);
		Call Subroutine(lIllIIlIIIlIllllIlIlIIIlIl);
		Set Healing Dealt(Event Player, Event Player.lllIlllIllIIIlIIIIlllllIIl ? 0 : Event Player.IIlllllIIlIIlIIIIIIIIlIlII[1]);
		Event Player.IIllIlIIIIIIllIIIllIlIllII[2] = Total Time Elapsed + 0.100;
	}
}

rule("IlIIIIIIIllIlllllIlIIIlIll")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Abort If(!Is In Alternate Form(Event Player));
		Event Player.llllIIlIIllIllIIlllllIllll = True;
		Set Ultimate Ability Enabled(Event Player, True);
		Abort If(Team Of(Event Player) == Team 2);
		Set Player Health(Event Player, Max Health(Event Player) / 3);
	}
}

rule("llIIllIlIlIlIIIIIIIllllIIl")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.llllIIlIIllIllIIlllllIllll == True;
		(Hero Of(Event Player) != Hero(D.Va) || !Is In Alternate Form(Event Player)) == True;
	}

	actions
	{
		Event Player.llllIIlIIllIllIIlllllIllll = False;
		Set Ultimate Ability Enabled(Event Player,
			Event Player.llllIIlIlllllllIIllIlIllII ? True : Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 5] == True || Event Player.IIllIIlIIllIIlIIlIlllIIllI);
	}
}

rule("lIllIIlIllIIIIlllIIIIIllIl")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Event Player.lllIlllIllIIIlIIIIlllllIIl = 2;
		Abort If(Global.IllIIlIllllIIIllIlllIIlIIl != 2);
		Set Damage Dealt(Event Player, 0);
		Set Healing Dealt(Event Player, 0);
	}
}

rule("IIIllIIllIllIIIllllllIlllI")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.IIIIlIIlIIlIlIIllIIlIIIIII == True;
		Event Player.IIIIlIIlIIlIlIIllIIlIIIIII < Global.IIIIllIlIIlIIIlIIllIllIIlI;
	}

	actions
	{
		Event Player.IIIIlIIlIIlIlIIllIIlIIIIII = Global.IIIIllIlIIlIIIlIIllIllIIlI;
		Abort If(!Health(Event Player));
		Abort If(Distance Between(Event Player, Global.IIIllIIlllIlllllllllIlIllI)
			> 12 + Global.IIIllIIlllIlllllllllIlIllI.IIIllIIllIIIIllIlIlIIIIIII * 3 || !Is In Line of Sight(Position Of(Event Player) + Up,
			Position Of(Global.IIIllIIlllIlllllllllIlIllI) + Up, Barriers Do Not Block LOS));
		Damage(Event Player, Null, (255.690 + 28.410 * Round To Integer(Global.IIIllIIlllIlllllllllIlIllI.IIIllIIllIIIIllIlIlIIIIIII,
			Down)) * (1 + Global.IIIllIIlllIlllllllllIlIllI.IIIllIIllIIIIllIlIlIIIIIII % 1));
		Event Player.IIIllIIllIIIIllIlIlIIIIIII = Max(Event Player.IIIllIIllIIIIllIlIlIIIIIII,
			Global.IIIllIIlllIlllllllllIlIllI.IIIllIIllIIIIllIlIlIIIIIII);
		Modify Player Variable(Global.IIIllIIlllIlllllllllIlIllI, IlllIIlilllIilIIIIIIlIlIil, Remove From Array By Value, 0);
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, Count Of(Global.IIIllIIlllIlllllllllIlIllI.IlllIIlilllIilIIIIIIlIlIil), 1);
			If(Array Contains(All Players(Team 2),
				Global.IIIllIIlllIlllllllllIlIllI.IlllIIlilllIilIIIIIIlIlIil[Global.lIIlllIllllIlIIIIlIllIIIlI]));
				Global.IIIllIIlllIlllllllllIlIllI.IlllIIlilllIilIIIIIIlIlIil[Global.lIIlllIllllIlIIIIlIllIIIlI].lllIlIIllIIllIIIIlllIIllII[Slot Of(
					Event Player)] = True;
			End;
		End;
	}
}

rule("llIIllIIIlIllIIlIIIlIIIlII")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.IlllIllIlIlllIlIlIIlIllIlI == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Global.IlllIllIIIlIIlIIIIlIlIIIIl[Event Player.IIlIIIIIIllIIlIlIIIlllllIl][0];
		Call Subroutine(IlIllIIIlIIIIIlIIlIlIIlIIl);
	}
}

rule("IIIllIIlIlIllIlIIIIlllIlII")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Call Subroutine(IIIlIllIIIIllIIlllIIlIlIll);
		Wait(60, Ignore Condition);
		Loop;
	}
}

rule("llIllIIlIlIllIIllllIlIIlll")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.lllllIIIllIIIllIlIIllIllII == True;
		Total Time Elapsed > Global.lllllIIIllIIIllIlIIllIllII;
	}

	actions
	{
		If(!(Global.lllllIIIllIIIllIlIIllIllII % 1));
			Global.lllllIIIllIIIllIlIIllIllII = Global.lllllIIIllIIIllIlIIllIllII + 600.500;
			Set Match Time(600);
			Call Subroutine(IIIlIllIIIIllIIlllIIlIlIll);
			Enable Game Mode HUD(All Players(Team 2));
			Create HUD Text(All Players(Team 2), Custom String("Game will end soon"), Null, Null, Top, -1, Color(Red), Color(Red), Color(Red),
				Visible To, Default Visibility);
			Big Message(All Players(Team 2), Custom String("Game will end in 10 minutes"));
			Abort;
		End;
		Declare Team Victory(Team 2);
	}
}

rule("IIlIIlIIIlIIIlllIIIIIIllIl")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll == True;
		Event Player.IllIlllllIIIlIllIllllllIII <= Total Time Elapsed;
	}

	actions
	{
		Event Player.lIlIlllIllIlIIIllllIllIlll[0] = Event Player.lIlIlllIllIlIIIllllIllIlll[1];
		Event Player.lIlIlllIllIlIIIllllIllIlll[2] = Event Player.lIlIlllIllIlIIIllllIllIlll[3];
		Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] = Event Player.lIlIlIIIlllIIIIlIIlIlllllI[1] ? Event Player.lIlIlIIIlllIIIIlIIlIlllllI[1] : 1;
		Event Player.lIlIlIIIlllIIIIlIIlIlllllI[1] = False;
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Event Player.lIlIIlIIlIllIIIIIlIlIIIIll;
		Skip(2 * (Global.IlllllIIlIIllIlIlIIIlIlIlI - 1));
		Call Subroutine(lIlIlIIllIIlllIlllllllllll);
		Skip(13);
		Call Subroutine(llIlIIIlllllIllIlIIIlllIIl);
		Skip(11);
		Call Subroutine(IIIIlIllIlIIIlIlllllIIIllI);
		Skip(9);
		Call Subroutine(IllllIIllIllllIIIIIIllIlII);
		Skip(7);
		Call Subroutine(IIlIllIIllIlIIIIlIIIIllIll);
		Skip(5);
		Call Subroutine(llIIlIlIIIIIllIIlIllIIIlII);
		Skip(3);
		Call Subroutine(IllIIIIllIlIIIIIlIlIlIlIll);
		Skip(1);
		Call Subroutine(lIIIlllIlIIllIlllllllIlllI);
		Loop If(Event Player.lIlIIlIIlIllIIIIIlIlIIIIll && Event Player.IllIlllllIIIlIllIllllllIII <= Total Time Elapsed);
	}
}

rule("IIIIIIIIlIlllIIIlIIIlIIllI")
{
	event
	{
		Subroutine;
		IlllllIlIllllIIlllIllllllI;
	}

	actions
	{
		If(Event Player.llIIIIIIllIIlIIlIlIIIIllII >= Event Player.llIIlllIIIIllIIllIIIIIllII);
			Global.lIIlllIllllIlIIIIlIllIIIlI[1] = Event Player.IIIlIlIllIlllIllllIlIllIll;
			Global.lIIlllIllllIlIIIIlIllIIIlI[0] = 0;
			While(Event Player.llIIIIIIllIIlIIlIlIIIIllII >= Event Player.llIIlllIIIIllIIllIIIIIllII);
				Event Player.llIIIIIIllIIlIIlIlIIIIllII -= Event Player.llIIlllIIIIllIIllIIIIIllII;
				Event Player.IIIlIlIllIlllIllllIlIllIll = Min(120, Event Player.IIIlIlIllIlllIllllIlIllIll + 1);
				Event Player.llIIlllIIIIllIIllIIIIIllII = Event Player.IIIlIlIllIlllIllllIlIllIll ^ 2 * 10 * (1 + (
					Event Player.llllIIlIlllllllIIllIlIllII == True) * (Event Player.IIIlIlIllIlllIllllIlIllIll % 100));
				Global.lIIlllIllllIlIIIIlIllIIIlI[0] += 1;
				If(Event Player.IIIlIlIllIlllIllllIlIllIll == 100);
					Event Player.llIIIIIIllIIlIIlIlIIIIllII *= 0.100;
					Event Player.llllIIlIlllllllIIllIlIllII = 1;
					Event Player.IIIlIllIlIIllIlIlllllIlIll = Empty Array;
					Call Subroutine(IIlIIIlllIIIllIlllIllllIII);
				End;
			End;
			If(Event Player == Host Player);
				Global.lllllIIlIlllIIllIIlIIlllII[0] += Global.lIIlllIllllIlIIIIlIllIIIlI[0] * (
					Global.lllllIIlIlllIIllIIlIIlllII[2] == True && Global.lllllIIlIlllIIllIIlIIlllII[0] < 120);
				Global.lllllIIlIlllIIllIIlIIlllII[1] += Global.lIIlllIllllIlIIIIlIllIIIlI[0] * (
					Global.lllllIIlIlllIIllIIlIIlllII[3] == True && Global.lllllIIlIlllIIllIIlIIlllII[1] < 120);
				Global.lllllIIlIlllIIllIIlIIlllII[5] = Max(Global.lllllIIlIlllIIllIIlIIlllII[0], 1);
			End;
			If(Global.lIIlllIllllIlIIIIlIllIIIlI[1] < 7 && Event Player.IIIlIlIllIlllIllllIlIllIll > 6);
				For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, Event Player.lIlIIlIlIlIIIlIlllllIlIIII + 1, 1);
					If(
						Global.lIIlllIllllIlIIIIlIllIIIlI * 19 != Event Player.lllllIIlllIlllllIIlIIlllII && !Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI * 19 + 1]);
						Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI * 19 + 17] = 100 * (
							Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI * 19 + 17] >= 100);
					End;
				End;
				If(Event Player.lIIIIIIlIIllllIllIlIIllIlI != Empty Array);
					For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, Count Of(Event Player.lIIIIIIlIIllllIllIlIIllIlI) / 19, 1);
						If(!Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.lIIlllIllllIlIIIIlIllIIIlI * 19 + 1]);
							Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.lIIlllIllllIlIIIIlIllIIIlI * 19 + 17] = 100 * (
								Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.lIIlllIllllIlIIIIlIllIIIlI * 19 + 17] >= 100);
						End;
					End;
				End;
				For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 3, 1);
					If(
						Event Player.llIIIlllIIIlllllIIllIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] % 10 == 2 && Event Player.llIlIlIllIIllIlllIlIIlIllI[Global.lIIlllIllllIlIIIIlIllIIIlI]);
						Event Player.lIIIIllIIIIIlIIIIllllIlIlI[Global.lIIlllIllllIlIIIIlIllIIIlI] = Global.lIllIIlIlIIIIIlIIIlIlIlllI;
						Event Player.llIlIlIllIIllIlllIlIIlIllI[Global.lIIlllIllllIlIIIIlIllIIIlI] = 0;
						Destroy Effect(Event Player.IIIlIlIIlllIIlIIlllIIIIlII[Global.lIIlllIllllIlIIIIlIllIIIlI]);
					End;
				End;
				Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
			End;
			Small Message(Event Player, Custom String("Level {0}", Event Player.IIIlIlIllIlllIllllIlIllIll));
			If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] >= 2);
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Reached level {0}!", Event Player.IIIlIlIllIlllIllllIlIllIll);
				Call Subroutine(llIlllIllIIllllIIIIIllIlII);
			End;
			Play Effect(All Players(Team 2), Ring Explosion Sound, Null, Event Player, 100);
			If(Global.IlllIlllllIIllIlIlIIlIllll[5]);
				Play Effect(All Players(Team 2), Ring Explosion, Color(White), Position Of(Event Player) + Up, 5);
			End;
			Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
			Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
		End;
		If(Event Player.IIIlIlIllIlllIllllIlIllIll > 119);
			Event Player.llIIIIIIllIIlIIlIlIIIIllII = False;
		End;
		Event Player.lllIIIIIIIlllIIlIIIlllIIIl = Event Player.llIIIIIIllIIlIIlIlIIIIllII / Event Player.llIIlllIIIIllIIllIIIIIllII * 100;
	}
}

rule("IIIlIllIlllIIlIIllllIllllI")
{
	event
	{
		Subroutine;
		llIllIllIllIIIlIlIlIIlIlII;
	}

	actions
	{
		Abort If(Random Real(0, 1) > Global.lIIlIIIIllIIIIIlIlIIIlIIll);
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 1 + Event Player.lIIllIIIlIlIlIllIIIlIllIII * 0.001 + (Global.llIlIIlIlIlIllIllllIllIllI >= 3)
			* (0.500 + 6.684 * Event Player.lIllIlIIlllIllIlIlllllIIII ^ 3 / 8000);
		If(Random Real(0, 10000)
			<= Global.lIIIIIllllIlIIIIlIIIlIIIll + Global.IIIllIIlllIlllllllllIlIllI.lIlIlIIlIIIllIIIlIIlIllIIl * 3333.333);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = 9;
		Else If(Event Player.llllIIlIlllllllIIllIlIllII && !Random Integer(0, 2499 - Global.llIlIIlIlIlIllIllllIllIllI * 750));
			Global.IlllllIIlIIllIlIlIIIlIlIlI = 5.300;
		Else If(Global.llIlIIlIlIlIllIllllIllIllI <= 1 && Random Real(0, 1000) <= (
				Event Player.IIlIIIIllllIllIIlIIIIlIlll || Event Player.IIIlIlIllIlllIllllIlIllIll > 59 || Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] % 100 <= 25 ? 6 : 33.333)
				* (1 + 3 * Global.llIlIIlIlIlIllIllllIllIllI));
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Random Value In Array(Array(4.100, 4.200, 4.200));
		Else;
			Global.IlllllIIlIIllIlIlIIIlIlIlI = False;
			For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 3, 1);
				If(Random Real(0, 1000) > Round To Integer(Global.lIIIIIllllIlIIIIlIIIlIIIll * Array(300 + 700 * Global.llIlIIlIlIlIllIllllIllIllI,
					250 + (Global.llIlIIlIlIlIllIllllIllIllI >= 2) * 750, 200 + Global.llIlIIlIlIlIllIllllIllIllI * 10 + (
					Global.llIlIIlIlIlIllIllllIllIllI >= 2) * 780)[Global.lIIlllIllllIlIIIIlIllIIIlI], To Nearest));
					Break;
				End;
				Global.IlllllIIlIIllIlIlIIIlIlIlI += 1;
			End;
			If(Global.IlllllIIlIIllIlIlIIIlIlIlI >= 3);
				Call Subroutine(llIlIlllIIIIIlIIllIlIIIIlI);
				Global.IlllllIIlIIllIlIlIIIlIlIlI += 1 * (
					Global.IlllllIIlIIllIlIlIIIlIlIlI == 6 && Event Player.lIllIlIIlllIllIlIlllllIIII >= 20 && Random Integer(0, 23)
					< Round To Integer(Global.lIIIIIllllIlIIIIlIIIlIIIll, Down));
			End;
			If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 2 && (
				Event Player.lIllIlIIlllIllIlIlllllIIII > 2 || Event Player.IIIlIlIllIlllIllllIlIllIll >= 7));
				Global.IlllllIIlIIllIlIlIIIlIlIlI = 1 * (Global.llIlIIlIlIlIllIllllIllIllI == True);
			End;
		End;
		Abort If(!Global.IlllllIIlIIllIlIlIIIlIlIlI);
		Abort If(Event Player.lIIIlIIIlllllIIllIllIIIIll >= 3 && Global.IlllllIIlIIllIlIlIIIlIlIlI < First Of(Sorted Array(
			Event Player.llIIIlllIIIlllllIIllIIIIIl, Current Array Element)));
		Global.IlIIlIIIlllIIlIllIIIIIllIl = Event Player.lIllIlIIlllIllIlIlllllIIII;
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 1);
			Global.IlIIlIIIlllIIlIllIIIIIllIl = Round To Integer((Event Player.lIllIlIIlllIllIlIlllllIIII + 2.500) * (
				Global.llIlIIlIlIlIllIllllIllIllI + 1) * Random Real(0.125, 0.375) * (1 + Global.IllIIlIllIlIIIllIIlIIlllIl), Up);
		End;
		Global.IIIIlllIIIIlIIIlIIIIllllIl = Global.IlIIIIIlllIlIlIIlllIIlllll + Global.lllIllIlIlllIIIIlIIlIIllII;
		If(Event Player.lIIIlIIIlllllIIllIllIIIIll >= 3);
			Global.IIIlIlllIllllIlllllllIIlII = First Of(Sorted Array(Array Slice(Global.llIlIlIllIIllIlIlllIIlllIl, 0, 3),
				Event Player.llIlIlIllIIllIlllIlIIlIllI[Current Array Element] + Event Player.llIIIlllIIIlllllIIllIIIIIl[Current Array Element] * 90));
			Destroy Effect(Event Player.IIIlIlIIlllIIlIIlllIIIIlII[Global.IIIlIlllIllllIlllllllIIlII]);
		Else;
			Event Player.lIIIlIIIlllllIIllIllIIIIll += 1;
			Global.IIIlIlllIllllIlllllllIIlII = Index Of Array Value(Event Player.lIIIIllIIIIIlIIIIllllIlIlI,
				Global.lIllIIlIlIIIIIlIIIlIlIlllI);
		End;
		Call Subroutine(lIlIlIIIIllllIlIIIIIIlllIl);
		Event Player.IIIlIlIIlllIIlIIlllIIIIlII[Global.IIIlIlllIllllIlllllllIIlII] = Last Created Entity;
		Call Subroutine(llIlIIlIlIllIIIIlllIIIlIlI);
		Call Subroutine(lIIIllIlIlIIllIlIIlIlIIlIl);
		Event Player.lIIIIllIIIIIlIIIIllllIlIlI[Global.IIIlIlllIllllIlllllllIIlII] = Global.IlIIIIIlllIlIlIIlllIIlllll;
		Event Player.IlIIllIlllllIlIIlIlIlllllI[Global.IIIlIlllIllllIlllllllIIlII] = Global.IlIIlIIIlllIIlIllIIIIIllIl;
		Event Player.llIIIlllIIIlllllIIllIIIIIl[Global.IIIlIlllIllllIlllllllIIlII] = Global.IlllllIIlIIllIlIlIIIlIlIlI;
		Event Player.llIlIlIllIIllIlllIlIIlIllI[Global.IIIlIlllIllllIlllllllIIlII] = Total Time Elapsed + 90;
		Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI = First Of(Sorted Array(Remove From Array(Event Player.llIlIlIllIIllIlllIlIIlIllI, 0),
			Current Array Element));
		Abort If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4]);
		Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
	}
}

rule("IIIIlIIIlllIIllIIIIlIIIlIl")
{
	event
	{
		Subroutine;
		IIIIlIIlIllIlllIIIIlIlllII;
	}

	actions
	{
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		Event Player.lIIIIlIlIIlIIlIllllllIIllI = False;
		If(!Event Player.lIlIIlIlIlIIIlIlllllIlIIII);
			Small Message(Event Player, Custom String("No items to sell in inventory"));
			Abort;
		End;
		Global.lIIlllIllllIlIIIIlIllIIIlI = Event Player.IlIllIIlllllllllIIIIllllll;
		Event Player.lIllIIlIllllIlIIIllIIllIlI = Round To Integer(Event Player.lIIlIIIIIIIlIIlIIlIIIlllIl * 0.125, Up) * (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 17] < 100);
		Event Player.lIlIlIIIIllIlllIIIIIlIlIll = Global.lIIlIllllllIlllIlIIlIIllll[Event Player.lIIIIIllIlIIlIlIIIlIlIIlII];
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Event Player.lllIlllIIllIlIIIlllIIlIllI;
		Small Message(Event Player, Custom String("Sold {0} {1} for {2} gold", Event Player.lIlIlIIIIllIlllIIIIIlIlIll, Hero Icon String(
			Event Player.llIlIIllIIIIIIIIlIlIlIIlII), Event Player.lIllIIlIllllIlIIIllIIllIlI));
		Event Player.IlIIllllIlllIllIIIllIlIlll = Min(Event Player.IlIIllllIlllIllIIIllIlIlll + Event Player.lIllIIlIllllIlIIIllIIllIlI,
			Global.IIlllIIIIIllIlIllIlIlllIII);
		Event Player.lIlIIlIlIlIIIlIlllllIlIIII -= 1;
		Modify Player Variable(Event Player, lIIIIIIlIIllllIllIlIIllIlI, Append To Array, Array Slice(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll, Global.lIIlllIllllIlIIIIlIllIIIlI, 19));
		If(Count Of(Event Player.lIIIIIIlIIllllIllIlIIllIlI) > 38);
			Event Player.lIIIIIIlIIllllIllIlIIllIlI = Array Slice(Event Player.lIIIIIIlIIllllIllIlIIllIlI, 19, Count Of(
				Event Player.lIIIIIIlIIllllIllIlIIllIlI) - 19);
		End;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll = Append To Array(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, 0,
			Global.lIIlllIllllIlIIIIlIllIIIlI), Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll,
			Global.lIIlllIllllIlIIIIlIllIIIlI + 19, 19 * (Event Player.lIlIIlIlIlIIIlIlllllIlIIII + 1)
			- Global.lIIlllIllllIlIIIIlIllIIIlI));
		Event Player.lllllIIlllIlllllIIlIIlllII -= (Event Player.lllllIIlllIlllllIIlIIlllII >= Global.lIIlllIllllIlIIIIlIllIIIlI) * 19;
		If(Event Player.IlIlIIIlIIllIIIIllIlIIllll > Event Player.lIlIIlIlIlIIIlIlllllIlIIII);
			Event Player.IlIlIIIlIIllIIIIllIlIIllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII;
		End;
		Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
	}
}

rule("IIlIllIIllllIIIIlIIllllIlI")
{
	event
	{
		Subroutine;
		lIIlllIIlIIlIlIIllIllIIIIl;
	}

	actions
	{
		Event Player.llIIllllIIlIIIIIIIlIlIlllI = Empty Array;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Global.lIIlIllllllIlllIlIIlIIllll[Global.IlllllIIlIIllIlIlIIIlIlIlI - 1];
		Global.llIlIIlIlIlIllIllllIllIllI = Empty Array;
		Global.IIIIlllIIIIlIIIlIIIIllllIl = Array Slice(Global.llIlIlIllIIllIlIlllIIlllIl, 0, 4);
		For Global Variable(lIIIIIllllIlIIIIlIIIlIIIll, 2, 6, 1);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIIIIllllIlIIIIlIIIlIIIll + Global.lIIlllIllllIlIIIIlIllIIIlI] = 0;
		End;
		If(Event Player.llllIIlIlllllllIIllIlIllII);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 5] = 2 + Event Player.llllIIlIlllllllIIllIlIllII;
		Else;
			For Global Variable(lIIIIIllllIlIIIIlIIIlIIIll, 1, Global.IlllllIIlIIllIlIlIIIlIlIlI, 1);
				If(Count Of(Global.IIIIlllIIIIlIIIlIIIIllllIl));
					Global.IIIlIlllIllllIlllllllIIlII = Random Value In Array(Global.IIIIlllIIIIlIIIlIIIIllllIl);
					Modify Global Variable(IIIIlllIIIIlIIIlIIIIllllIl, Remove From Array By Value, Global.IIIlIlllIllllIlllllllIIlII);
					Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.IIIlIlllIllllIlllllllIIlII + 2] = 1;
				End;
			End;
		End;
		Global.llIlIIlIlIlIllIllllIllIllI[4] = Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII * (50 - Absolute Value(
			6 - Global.IlllllIIlIIllIlIlIIIlIlIlI) * 10), Down);
		Global.llIlIIlIlIlIllIllllIllIllI[5] = Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII * (
			Global.IlllllIIlIIllIlIlIIIlIlIlI >= 6 ? 50 : 25 + Global.IlllllIIlIIllIlIlIIIlIlIlI * 5), Down);
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI >= 3);
			Global.llIlIIlIlIlIllIllllIllIllI[6] = Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII * (
				Global.IlllllIIlIIllIlIlIIIlIlIlI > 6 ? 6 : (Global.IlllllIIlIIllIlIlIIIlIlIlI - 3) * 3), Down);
			Global.llIlIIlIlIlIllIllllIllIllI[7] = Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII * (
				Global.IlllllIIlIIllIlIlIIIlIlIlI >= 6 ? 9 : (Global.IlllllIIlIIllIlIlIIIlIlIlI - 2) * 3), Down);
		End;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI] = Event Player.lIIllllIlIIIllIIllllIIIlll;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 1] = Global.IlllllIIlIIllIlIlIIIlIlIlI - 1;
		For Global Variable(lIIIIIllllIlIIIIlIIIlIIIll, 6, 11, 1);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.lIIIIIllllIlIIIIlIIIlIIIll] = Min(
				Random Integer(Global.llIlIIlIlIlIllIllllIllIllI[4], Global.llIlIIlIlIlIllIllllIllIllI[5]), 50);
		End;
		For Global Variable(lIIIIIllllIlIIIIlIIIlIIIll, 11, 14, 1);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.lIIIIIllllIlIIIIlIIIlIIIll] = (
				Global.IlllllIIlIIllIlIlIIIlIlIlI >= Global.lIIIIIllllIlIIIIlIIIlIIIll - 8) * Random Integer(1, 6);
		End;
		For Global Variable(lIIIIIllllIlIIIIlIIIlIIIll, 14, 17, 1);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.lIIIIIllllIlIIIIlIIIlIIIll] = Random Integer(
				Global.llIlIIlIlIlIllIllllIllIllI[6], Global.llIlIIlIlIlIllIllllIllIllI[7]);
		End;
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 1);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 17] = 26;
		Else If(Global.IlllllIIlIIllIlIlIIIlIlIlI >= 4);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 17] = Random Integer(1, 25) * (Random Integer(0, 9)
				>= (Global.IlllllIIlIIllIlIlIIIlIlIlI < 6) * (9 - (Global.IlllllIIlIIllIlIlIIIlIlIlI - 4) * 4));
			If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 6);
				For Global Variable(lIIIIIllllIlIIIIlIIIlIIIll, 11, 14, 1);
					Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.lIIIIIllllIlIIIIlIIIlIIIll] = 7;
					Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.lIIIIIllllIlIIIIlIIIlIIIll + 3] = 9;
				End;
			Else If(Global.IlllllIIlIIllIlIlIIIlIlIlI >= 7);
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 13] = 7;
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 16] = 9;
			End;
		End;
		Call Subroutine(lIllIlIlIllIIIIIlIlllIllIl);
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI >= 5);
			Global.lIIlIlIlllllIllIIllIlllIIl += 1;
			Start Rule(lIIlIllllIIlIlIIIIIIlIIlII, Restart Rule);
		End;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] = Event Player.lIllIIlIllllIlIIIllIIllIlI;
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI < 8);
			Event Player.lIllIIlIllllIlIIIllIIllIlI = Custom String("Item Power {0}", Event Player.lIllIIlIllllIlIIIllIIllIlI);
		End;
		Call Subroutine(lllIlllIlIlIllIlIllIIlllIl);
		If(Global.lIIlllIllllIlIIIIlIllIIIlI != Event Player.lllllIIlllIlllllIIlIIlllII);
			Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
		End;
		If(Event Player.lIlllllllllIllllIIIIlllIlI == 5);
			Call Subroutine(llIIIllllIlIllIlIIIlIlIIIl);
		End;
	}
}

rule("lIIIlIIlllIllIllllIlIllllI")
{
	event
	{
		Subroutine;
		lIIlllIIlIlllIlIIIIIIIIIII;
	}

	actions
	{
		If(Event Player.lIlIIlIlIlIIIlIlllllIlIIII >= 5);
			Small Message(Event Player, Custom String("Inventory full"));
			Abort;
		End;
		Event Player.lIllIIlIllllIlIIIllIIllIlI = 18 + Round To Integer(Event Player.llIlIIIlIlIIlIIIllllIlllII * 1.500, Up);
		Event Player.IIllIIllIIIIIlIlIIllIllllI = 1;
		If(Event Player.IlIIllllIlllIllIIIllIlIlll < Event Player.lIllIIlIllllIlIIIllIIllIlI);
			Small Message(Event Player, Custom String("Not enough gold to gamble (cost: {0})", Event Player.lIllIIlIllllIlIIIllIIllIlI));
		Else If(Event Player.IlllIlIIIIIlIlllIIIIlIllll < 1);
			Call Subroutine(IlllIIIIlIIlIIIIllllllllIl);
		Else;
			Event Player.IlIIllllIlllIllIIIllIlIlll -= Event Player.lIllIIlIllllIlIIIllIIllIlI;
			Call Subroutine(IIlllllIllIIlIIIIIlllIlIIl);
			Call Subroutine(IIIllIlIIllIllllIIIlllIlIl);
		End;
	}
}

rule("llIlIIIIlIIIIIIllIllIlIIll")
{
	event
	{
		Subroutine;
		IllIlIlIIIlIIIlIlIlIlIlIll;
	}

	actions
	{
		If(Event Player.IIllIIlIIllIIlIIlIlllIIllI);
			Small Message(Event Player, Custom String("Super Novice items cannot be imbued"));
			Abort;
		End;
		If(
			!Event Player.IIlIIIIllllIllIIlIIIIlIlll && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] % 100 > 25);
			Small Message(Event Player, Custom String(
				"Future Super Novice items cannot be imbued (Unequip to turn into upgradable common item)"));
			Abort;
		End;
		Global.llIlIIlIlIlIllIllllIllIllI[7] = Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII * (
			Global.IlllllIIlIIllIlIlIIIlIlIlI >= 6 ? 9 : (Global.IlllllIIlIIllIlIlIIIlIlIlI - 2) * 3), Down);
		Global.lIIlllIllllIlIIIIlIllIIIlI = Event Player.lllllIIlllIlllllIIlIIlllII;
		Global.IIIIlllIIIIlIIIlIIIIllllIl = Is True For Any(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll,
			Global.lIIlllIllllIlIIIIlIllIIIlI + 6, 5), Current Array Element < Min(50, Event Player.IIIlIlIllIlllIllllIlIllIll));
		Global.lIIIIIllllIlIIIIlIIIlIIIll = Is True For Any(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll,
			Global.lIIlllIllllIlIIIIlIllIIIlI + 14, 2 + 1 * (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 13] == True)),
			Current Array Element < Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII * 9, Down));
		If(Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 4 && !Global.IIIIlllIIIIlIIIlIIIIllllIl && !Global.lIIIIIllllIlIIIIlIIIlIIIll);
			If(Event Player.IIIlIlIllIlllIllllIlIllIll >= 60);
				Small Message(Event Player, Custom String("Item cannot be imbued anymore"));
				Abort;
			End;
			Big Message(Event Player, Custom String("Item cannot be imbued anymore\r\n(Current Stat Limit: {0}\r\nCurrent SA Rank Limit: {1})",
				Min(50, Event Player.IIIlIlIllIlllIllllIlIllIll), Round To Integer(Event Player.lIllIIIIlIIlllIllIllIIIlII * 9, Down)));
			Abort;
		End;
		Call Subroutine(IlIIlllIllIIllIIIIlIlIllll);
		If(Event Player.IlIIllllIlllIllIIIllIlIlll < Event Player.lIlIlIIIIllIlllIIIIIlIlIll);
			Small Message(Event Player, Custom String("Not enough gold to imbue (cost: {0})", Event Player.lIlIlIIIIllIlllIIIIIlIlIll));
			Abort;
		End;
		If(Event Player.IlllIlIIIIIlIlllIIIIlIllll < Event Player.IIllIIllIIIIIlIlIIllIllllI);
			Call Subroutine(IlllIIIIlIIlIIIIllllllllIl);
			Abort;
		End;
		Call Subroutine(IIIllIlIIllIllllIIIlllIlIl);
		Event Player.IlIIllllIlllIllIIIllIlIlll -= Event Player.lIlIlIIIIllIlllIIIIIlIlIll;
		Event Player.IIllIIlIIllIIlIIlIlllIIllI = False;
		Event Player.IIIlIllIlIIllIlIlllllIlIll = Empty Array;
		Big Message(Event Player, Custom String("Item imbued"));
		If(Event Player.IIlIIIIllllIllIIlIIIIlIlll < 4);
			Event Player.lIIllllIlIIIllIIllllIIIlll = Hero Of(Event Player);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Event Player.IIlIlIlIIlIIIllIllIlIIllll[1 + Global.lIIlllIllllIlIIIIlIllIIIlI] + 2;
			Call Subroutine(lIIlllIIlIIlIlIIllIllIIIIl);
			Call Subroutine(IIlIIIlllIIIllIlllIllllIII);
			Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
			Call Subroutine(lllIllIlIIllllIlIlIlllllll);
			Call Subroutine(IIIlIIllllIlIlIlIlIlIlIIlI);
			Set Ability Charge(Event Player, Button(Ability 1), 0);
			Set Ability Charge(Event Player, Button(Ability 2), 0);
			Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
			Abort;
		End;
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Empty Array;
		If(Global.IIIIlllIIIIlIIIlIIIIllllIl);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Array(1, 1, 1);
		End;
		If(Global.lIIIIIllllIlIIIIlIIIlIIIll);
			Modify Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, Append To Array, 0);
		End;
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Random Value In Array(Global.IlllllIIlIIllIlIlIIIlIlIlI);
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Random Value In Array(Filtered Array(Array(6, 7, 8, 9, 10),
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Current Array Element] < 50 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Current Array Element] < Event Player.IIIlIlIllIlllIllllIlIllIll));
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll = Global.IIlIlllIlIIIIllIIlIlIlIlll[5][Global.IlllllIIlIIllIlIlIIIlIlIlI - 6];
			Small Message(Event Player, Custom String("Gained +1 {0}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll));
			If(Event Player.IIlIIIIllllIllIIlIIIIlIlll < 7);
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 18] += 10 + 10 * (
					Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 5);
			End;
		Else;
			Global.IlllllIIlIIllIlIlIIIlIlIlI = Random Value In Array(Filtered Array(Array(14, 15, 16),
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Current Array Element] < Round To Integer(
				Event Player.lIllIIIIlIIlllIllIllIIIlII * 9, Down)
				&& Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Current Array Element - 3] > 0));
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll = Global.IIlIlllIlIIIIllIIlIlIlIlll[6][Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.IlllllIIlIIllIlIlIIIlIlIlI - 3] - 1];
			Small Message(Event Player, Custom String("Gained +1 rank in {0}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll));
			If(Event Player.IIlIIIIllllIllIIlIIIIlIlll < 7);
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 18] += 40 + (
					Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 5) * 40;
			End;
		End;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.IlllllIIlIIllIlIlIIIlIlIlI] += 1;
		Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
		Call Subroutine(lllIllIlIIllllIlIlIlllllll);
		Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Imbue: +1 {0}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll);
		Call Subroutine(llIlllIllIIllllIIIIIllIlII);
	}
}

rule("lIlIlIIllllllllIIllIllIIII")
{
	event
	{
		Subroutine;
		lIIIIlIllIIIIlIIIIllIIlIlI;
	}

	actions
	{
		Global.lIlIlIIlIIIIlIllIIllllllll = Event Player.lllllIIlllIlllllIIlIIlllII;
		Event Player.IIlIIIIllllIllIIlIIIIlIlll = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 1];
		If(
			!Event Player.IIlIIIIllllIllIIlIIIIlIlll && Event Player.IIIlIlIllIlllIllllIlIllIll >= 60 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100 >= 26 && !Event Player.IIllIIlIIllIIlIIlIlllIIllI);
			Event Player.IIllIIlIIllIIlIIlIlllIIllI = True;
			If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 18] < 2000);
				Global.IlllllIIlIIllIlIlIIIlIlIlI = Event Player.IIlIIIIllllIllIIlIIIIlIlll + 1;
				Global.lIIlllIllllIlIIIIlIllIIIlI = Global.lIlIlIIlIIIIlIllIIllllllll;
				Call Subroutine(lIllIlIlIllIIIIIlIlllIllIl);
				Global.lIlIlIIlIIIIlIllIIllllllll = Event Player.lllllIIlllIlllllIIlIIlllII;
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] += 100;
			End;
		End;
		Event Player.IlIIlIIlIIlIIIIlIlIllllllI[0] = Global.IIlIlllIlIIIIllIIlIlIlIlll[0][Event Player.IIlIIIIllllIllIIlIIIIlIlll + 1 * (
			Event Player.IIllIIlIIllIIlIIlIlllIIllI == False) + -3 * (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100 >= 31 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100 <= 62)
			];
		Event Player.IIIllIlIIIIlIlllIlllIlIIlI = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll];
		If(!Is Duplicating(Event Player));
			Start Forcing Player To Be Hero(Event Player, Event Player.IIIllIlIIIIlIlllIlllIlIIlI);
		End;
		If(!Event Player.IIllIIlIIllIIlIIlIlllIIllI && !Event Player.llllIIlIlllllllIIllIlIllII);
			If(Array Contains(Array(Hero(Mei), Hero(Moira), Hero(Kiriko), Hero(Lifeweaver)), Event Player.IIIllIlIIIIlIlllIlllIlIIlI)
				&& Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 2] % 2 == False);
				Set Primary Fire Enabled(Event Player, False);
				Set Secondary Fire Enabled(Event Player, True);
			Else;
				Set Primary Fire Enabled(Event Player, True);
				Set Secondary Fire Enabled(Event Player,
					Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 2] % 2 == True);
			End;
			Set Ability 1 Enabled(Event Player, Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 3] == True);
			Set Ability 2 Enabled(Event Player, Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 4] == True);
			If(Hero Of(Event Player) != Hero(D.Va) || !Is In Alternate Form(Event Player));
				Set Ultimate Ability Enabled(Event Player, Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 5] == True);
			End;
		Else;
			Set Primary Fire Enabled(Event Player, True);
			Set Secondary Fire Enabled(Event Player, True);
			Set Ability 1 Enabled(Event Player, True);
			Set Ability 2 Enabled(Event Player, True);
			Set Ultimate Ability Enabled(Event Player, True);
		End;
		Event Player.llIlIIIlIlIIlIIIllllIlllII = Min(Event Player.IIIlIlIllIlllIllllIlIllIll, 60);
		Global.IIIllIIIlllIllIIlIIIllllII = Event Player.IIlIIllIIIllIllllIIIIlIIll;
		Call Subroutine(lIIIIllIIlIllIlllllIlllIII);
		Event Player.llllllIllIIlllllIlIIlIIllI = Global.IlIllIIIlIIIIIIllIIIIIIIIl;
		Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[0] = False;
		Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1] = 1;
		If(Event Player.IIlIIIIllllIllIIlIIIIlIlll == 7);
			If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] % 100 >= 30);
				Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1] = 2.500;
			Else;
				Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[0] = True;
			End;
		End;
		Event Player.IlIlIlIlIIIlIIllIIlllllIIl[0] = 1 - (Event Player.IIIlIlIllIlllIllllIlIllIll <= 59) * (
			0.600 - 0.010 * Event Player.llIlIIIlIlIIlIIIllllIlllII) * (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 13] >= 7 && Event Player.IIlIIIIllllIllIIlIIIIlIlll < 5);
		Call Subroutine(IlllIIlIllIlIIIIIlIIIllIII);
		Call Subroutine(lIIlIIIllllllIlIIllIlIlllI);
		Set Max Health(Event Player, (
			80 + Event Player.IIIlIlIllIlllIllllIlIllIll + Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 8])
			* (1 + Event Player.IIllIIlIIllIIlIIlIlllIIllI * 0.500 + 0.125 * (Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 7)
			+ 0.250 * Event Player.IIlIIllIIIllIllllIIIIlIIll + 0.004 * Event Player.llllllIllIIlllllIlIIlIIllI[3]) * (1 + (0.150 * (
			Event Player.llllllIllIIlllllIlIIlIIllI[0] == 9) + 0.150 * (Event Player.llllllIllIIlllllIlIIlIIllI[7] == 3))
			* Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1]));
		Set Healing Received(Event Player, (
			80 + Event Player.IIIlIlIllIlllIllllIlIllIll + Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 8])
			* (1 + 0.150 * (Event Player.llllllIllIIlllllIlIIlIIllI[7] == 1) * Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1]));
		Call Subroutine(llIIlllllIlIIIIIIIllIIIlII);
		Call Subroutine(lIllIIIIIIllllIIlllIllllIl);
		Event Player.IIIlIlIllIIIlIIllllIIllIII = 1 - Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 10] * 0.005 - 0.250 * (
			Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 5 && Event Player.IIlIIIIllllIllIIlIIIIlIlll <= 6);
		Call Subroutine(lIllIIlIIIlIllllIlIlIIIlIl);
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 18];
		Event Player.lIlIIllIlllIIlIIlIlIIlIlIl = Custom String("{0} {1}{2}", Hero Icon String(Event Player.IIIllIlIIIIlIlllIlllIlIIlI),
			Event Player.IllIlIllIIIIlIIllIllIllIlI, Custom String("{0}{1}{2}",
			!Event Player.IIlIIIIllllIllIIlIIIIlIlll && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] % 100 >= 26 && Event Player.IIIlIlIllIlllIllllIlIllIll <= 59 ? Custom String(
			"*") : Custom String(""), Global.lIlIIIlIlIIllIIIIllIlIlIlI[Event Player.IIIIlIIIIllllIlllIIIlllIIl],
			Global.llllIIlIlllIIlllllIIIlIlll[Event Player.IIlIIllIIIllIllllIIIIlIIll]));
		Event Player.IIllIlIIIIIIllIIIllIlIllII[2] = Total Time Elapsed + 0.100;
	}
}

rule("lllIIlIlIlIIllIIlIlIIIllII")
{
	event
	{
		Subroutine;
		IlllIIlIllIlIIIIIlIIIllIII;
	}

	actions
	{
		Event Player.IIlllllIIlIIlIIIIIIIIlIlII[3] = 1 + (0.050 * (Event Player.llllllIllIIlllllIlIIlIIllI[0] == 5) + 0.050 * (
			Event Player.llllllIllIIlllllIlIIlIIllI[7] == 2)) * Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1];
		Event Player.IIlllllIIlIIlIIIIIIIIlIlII[0] = (84.264 + 5.786 * (
			Event Player.IIIlIlIllIlllIllllIlIllIll + Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 6]))
			* (1 + Event Player.IIllIIlIIllIIlIIlIlllIIllI * 2.250 + (Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 5) * Array(0.500, 0.750,
			0.250)[Event Player.IIlIIIIllllIllIIlIIIIlIlll - 5] * (1 + 1 * (
			Event Player.IIlIIIIllllIllIIlIIIIlIlll == 7 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] % 100 >= 30))
			+ (0.500 + 0.150 * Event Player.IIllIIlIIllIIlIIlIlllIIllI)
			* Event Player.IIlIIllIIIllIllllIIIIlIIll + !Event Player.IIllIIlIIllIIlIIlIlllIIllI * 0.005 * Event Player.IIIlIlIllIlllIllllIlIllIll)
			* Event Player.IIlllllIIlIIlIIIIIIIIlIlII[3] * 0.010;
	}
}

rule("IlIlIlIlIllllIIlIIIlllllIl")
{
	event
	{
		Subroutine;
		lIllIIlIIIlIllllIlIlIIIlIl;
	}

	actions
	{
		Event Player.IIlllllIIlIIlIIIIIIIIlIlII[1] = (50 + 25 * Event Player.IIllIIlIIllIIlIIlIlllIIllI + 6.250 * (
			Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 7) + 12.500 * Event Player.IIlIIllIIIllIllllIIIIlIIll) * (1 + 0.150 * (
			Event Player.llllllIllIIlllllIlIIlIIllI[7] == 1) * Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1]) * (Hero Of(Event Player)
			== Hero(Reaper) || Hero Being Duplicated(Event Player) == Hero(Reaper) ? 100 / Event Player.IIlllllIIlIIlIIIIIIIIlIlII[0] : 1);
	}
}

rule("IlIIlIlIlIllIlllIIlllIllIl")
{
	event
	{
		Subroutine;
		lIIlIIIllllllIlIIllIlIlllI;
	}

	actions
	{
		Set Damage Received(Event Player, 600 - 5 * (
			Event Player.llIlIIIlIlIIlIIIllllIlllII / 1.200 + Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 7]));
	}
}

rule("IIllIIlllIIlIllllIlIIIlIII")
{
	event
	{
		Subroutine;
		llIIlllllIlIIIIIIIllIIIlII;
	}

	actions
	{
		Set Move Speed(Event Player, (
			80 + 0.333 * Event Player.IIIlIlIllIlllIllllIlIllIll + Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 9])
			* (1 + 0.050 * (Event Player.llllllIllIIlllllIlIIlIIllI[0] == 3) * Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1]));
	}
}

rule("lIllIllIIIlllllllIIIllIlll")
{
	event
	{
		Subroutine;
		llIlIIllIIllIIllllIlIIlIlI;
	}

	actions
	{
		Set Move Speed(Event Player, Event Player.IllIlIIlIIlIlIlIllIllllllI * (1 - Event Player.lllllIIlllIlllllIIlIIlllII[3]));
	}
}

rule("IIIlllIllIIlIllIllIlIlIlII")
{
	event
	{
		Subroutine;
		IllIIllIIIIIllIIIIllIIIlII;
	}

	actions
	{
		If(Event Player.lIlIIlIlIlIIIlIlllllIlIIII);
			If(Event Player.IlIlIIIlIIllIIIIllIlIIllll > Event Player.lIlIIlIlIlIIIlIlllllIlIIII);
				Event Player.IlIlIIIlIIllIIIIllIlIIllll = 1;
			End;
			Event Player.IlIllIIlllllllllIIIIllllll = (Event Player.IlIlIIIlIIllIIIIllIlIIllll - 1) * 19;
			Event Player.IlIllIIlllllllllIIIIllllll += (Event Player.IlIllIIlllllllllIIIIllllll >= Event Player.lllllIIlllIlllllIIlIIlllII)
				* 19;
			Event Player.IlIllIIlllllllllIIIIllllll = Event Player.IlIllIIlllllllllIIIIllllll * (
				Event Player.IlIllIIlllllllllIIIIllllll <= Event Player.lIlIIlIlIlIIIlIlllllIlIIII * 19);
			Event Player.lIIIIIllIlIIlIlIIIlIlIIlII = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 1];
			Event Player.lIIlIIlIllIIllIIlIllIllIIl = Global.llllIIlIlllIIlllllIIIlIlll[Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 2] * (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 5] >= 3)];
			Event Player.IlIIIIIlIIIllllIllIlIIIlll = Global.lIlIIIlIlIIllIIIIllIlIlIlI[(
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 4] + 1) * (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 5] >= 3 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[1 + Event Player.IlIllIIlllllllllIIIIllllll] == 6)
				];
			Event Player.lllIlllIIllIlIIIlllIIlIllI = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll];
			Event Player.lIIlIIIIIIIlIIlIIlIIIlllIl = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 18];
			Event Player.IIIIIlllIIIlllIIIIIIIIIIII = Custom String("{0} {1}{2}", Hero Icon String(Event Player.lllIlllIIllIlIIIlllIIlIllI),
				Event Player.lIIlIIIIIIIlIIlIIlIIIlllIl, Custom String("{0}{1}{2}",
				!Event Player.lIIIIIllIlIIlIlIIIlIlIIlII && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 17] % 100 >= 26 && Event Player.IIIlIlIllIlllIllllIlIllIll <= 59 ? Custom String(
				"*") : Custom String(""), Event Player.IlIIIIIlIIIllllIllIlIIIlll, Event Player.lIIlIIlIllIIllIIlIllIllIIl));
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[1] = Global.IIlIlllIlIIIIllIIlIlIlIlll[0][Event Player.lIIIIIllIlIIlIlIIIlIlIIlII + 1 * (
				Event Player.lIIIIIllIlIIlIlIIIlIlIIlII == True || Event Player.lIIlIIIIIIIlIIlIIlIIIlllIl < 1000) + -3 * (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 17] % 100 >= 31 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 17] % 100 <= 62)
				];
			Abort;
		End;
		Event Player.lllllIIlllIlllllIIlIIlllII = 0;
		Event Player.IIIIIlllIIIlllIIIIIIIIIIII = Custom String("Empty");
		Event Player.IlIIlIIlIIlIIIIlIlIllllllI[1] = Color(White);
	}
}

rule("lIIIIIIllIIIIllIlllIIlllII")
{
	event
	{
		Subroutine;
		lllllIIIllIlIIIlIlIllllllI;
	}

	actions
	{
		Event Player.IIIIIIlllllllIlIIIIIlllIlI[1] = Custom String("{0}{1}",
			Event Player.llllllIllIIlllllIlIIlIIllI[6] && Event Player.IIIIIIlllllllIlIIIIIlllIlI[0] <= Total Time Elapsed ? Custom String(
			"{0} ", Icon String(Spiral)) : Custom String(""),
			Event Player.IIIIlIIIIllllIlllIIIlllIIl == 5 && Event Player.lIIIlIlIIIIIIllllIlIlIlllI <= Total Time Elapsed ? Custom String(
			"{0} ", Ability Icon String(Hero(Baptiste), Button(Ability 2))) : Custom String(""));
	}
}

rule("IIllIIIIlIllIIIlIlllIlIlIl")
{
	event
	{
		Subroutine;
		lllIlllllIlIIIllIlIlIIIlIl;
	}

	actions
	{
		Global.IlIIlIIIlllIIlIllIIIIIllIl = Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Event Player.lllllIIlllIlllllIIlIIlllII,
			19);
		Global.IllIlIllIllIllIIlIIIIllIIl = Total Time Elapsed + 2;
		Global.IIIlllllIIIllllllIIllIlIIl = Total Time Elapsed + 5;
		Event Player.IlIllIlIlIlllIIlIllllllllI = Total Time Elapsed + 2 * Count Of(All Players(Team 2));
		If(Event Player.IlIIlllllIIlIIllIIlllIIIll);
			Global.IIIIlllIIIIlIIIlIIIIllllIl = 0;
		Else;
			Global.IIIIlllIIIIlIIIlIIIIllllIl = Event Player.IlIIllllIlllIllIIIllIlIlll;
			For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, Event Player.lIlIIlIlIlIIIlIlllllIlIIII + 1, 1);
				If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI * 19 + 17] < 100);
					Global.IIIIlllIIIIlIIIlIIIIllllIl += Round To Integer(
						Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI * 19 + 18] * 0.125, Up);
				End;
			End;
			Global.IIIIlllIIIIlIIIlIIIIllllIl = Min(Global.IIIIlllIIIIlIIIlIIIIllllIl, Global.IIlllIIIIIllIlIllIlIlllIII);
			Event Player.IIllIIllIIIIIlIlIIllIllllI = Event Player.IlllIlIIIIIlIlllIIIIlIllll;
			Call Subroutine(IIIllIlIIllIllllIIIlllIlIl);
		End;
		Global.lllIIllllIlIIlllIlIIIIlIIl[40] = 93 - Index Of Array Value(All Heroes, Hero Of(Event Player));
		Global.lIIlllIllllIlIIIIlIllIIIlI = 40;
		Global.llIlIIlIlIlIllIllllIllIllI = 6;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[41] = 19 - (Global.lllIIllllIlIIlllIlIIIIlIIl[6] + Global.lllIIllllIlIIlllIlIIIIlIIl[7])
			+ Global.IlIIlIIIlllIIlIllIIIIIllIl[9];
		Global.lIIlllIllllIlIIIIlIllIIIlI = 41;
		Global.llIlIIlIlIlIllIllllIllIllI = 2;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[42] = 7 + Global.lllIIllllIlIIlllIlIIIIlIIl[6] + Global.lllIIllllIlIIlllIlIIIIlIIl[7] + Global.lllIIllllIlIIlllIlIIIIlIIl[2] + Global.lllIIllllIlIIlllIlIIIIlIIl[3] + Global.IlIIlIIIlllIIlIllIIIIIllIl[7];
		Global.lIIlllIllllIlIIIIlIllIIIlI = 42;
		Global.llIlIIlIlIlIllIllllIllIllI = 14;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[43] = 99 - (
			Global.lllIIllllIlIIlllIlIIIIlIIl[14] + Global.lllIIllllIlIIlllIlIIIIlIIl[15] + Global.IlIIlIIIlllIIlIllIIIIIllIl[6]);
		Global.lIIlllIllllIlIIIIlIllIIIlI = 43;
		Global.llIlIIlIlIlIllIllllIllIllI = 0;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[10] = (6 + Round To Integer(Global.IIIIlllIIIIlIIIlIIIIllllIl * 0.001, Down)) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[11] = (7 + Global.IIIIlllIIIIlIIIlIIIIllllIl % 10) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[16] = (3 + Round To Integer(Global.IIIIlllIIIIlIIIlIIIIllllIl * 0.010, Down) % 10) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[19] = (1 + Round To Integer(Global.IIIIlllIIIIlIIIlIIIIllllIl * 0.100, Down) % 10) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[44] = 5 + Global.lllIIllllIlIIlllIlIIIIlIIl[0] + Global.lllIIllllIlIIlllIlIIIIlIIl[1] + Global.IlIIlIIIlllIIlIllIIIIIllIl[10];
		Global.lIIlllIllllIlIIIIlIllIIIlI = 44;
		Global.llIlIIlIlIlIllIllllIllIllI = 22;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[45] = 96 - (
			Global.lllIIllllIlIIlllIlIIIIlIIl[22] + Global.lllIIllllIlIIlllIlIIIIlIIl[23] + Global.IlIIlIIIlllIIlIllIIIIIllIl[8]);
		Global.lIIlllIllllIlIIIIlIllIIIlI = 45;
		Global.llIlIIlIlIlIllIllllIllIllI = 4;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[8] = (
			Global.lllIIllllIlIIlllIlIIIIlIIl[1] + Global.lllIIllllIlIIlllIlIIIIlIIl[3] + Global.IlIIlIIIlllIIlIllIIIIIllIl[1]) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[9] = (Event Player.IIlIllllllIIlIIIllllIIllII + Global.lllIIllllIlIIlllIlIIIIlIIl[0]) % 10;
		If(Event Player.llllIIlIlllllllIIllIlIllII);
			Global.lllIIllllIlIIlllIlIIIIlIIl[18] = (9 + Global.lllIIllllIlIIlllIlIIIIlIIl[8] + Event Player.llllIIlIlllllllIIllIlIllII + 2)
				% 10;
			Global.lllIIllllIlIIlllIlIIIIlIIl[17] = (6 + Global.lllIIllllIlIIlllIlIIIIlIIl[11] + Event Player.IIlIIllIIIllIllllIIIIlIIll) % 10;
			Global.lllIIllllIlIIlllIlIIIIlIIl[20] = (2 + Global.lllIIllllIlIIlllIlIIIIlIIl[14] + Event Player.IllIIIIlIlIIlIIllIllIIIlll) % 10;
			Global.lllIIllllIlIIlllIlIIIIlIIl[21] = (8 + Global.lllIIllllIlIIlllIlIIIIlIIl[15] + Global.IlIIlIIIlllIIlIllIIIIIllIl[4]) % 10;
		Else;
			Global.lllIIllllIlIIlllIlIIIIlIIl[18] = (9 + Global.lllIIllllIlIIlllIlIIIIlIIl[8] + (Global.IlIIlIIIlllIIlIllIIIIIllIl[5] == True)
				* 1) % 10;
			Global.lllIIllllIlIIlllIlIIIIlIIl[17] = (6 + Global.lllIIllllIlIIlllIlIIIIlIIl[11] + Global.IlIIlIIIlllIIlIllIIIIIllIl[2]) % 10;
			Global.lllIIllllIlIIlllIlIIIIlIIl[20] = (2 + Global.lllIIllllIlIIlllIlIIIIlIIl[14] + Global.IlIIlIIIlllIIlIllIIIIIllIl[3]) % 10;
			Global.lllIIllllIlIIlllIlIIIIlIIl[21] = (8 + Global.lllIIllllIlIIlllIlIIIIlIIl[15] + Global.IlIIlIIIlllIIlIllIIIIIllIl[4]) % 10;
		End;
		Global.lllIIllllIlIIlllIlIIIIlIIl[24] = (Global.lllIIllllIlIIlllIlIIIIlIIl[20] * 4 + Global.IlIIlIIIlllIIlIllIIIIIllIl[11]) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[25] = (Global.lllIIllllIlIIlllIlIIIIlIIl[21] * 2 + Global.IlIIlIIIlllIIlIllIIIIIllIl[14]) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[46] = 97 - (
			Global.lllIIllllIlIIlllIlIIIIlIIl[24] + Global.lllIIllllIlIIlllIlIIIIlIIl[25] + Global.lllIIllllIlIIlllIlIIIIlIIl[18] + Global.IlIIlIIIlllIIlIllIIIIIllIl[17] % 100);
		Global.lIIlllIllllIlIIIIlIllIIIlI = 46;
		Global.llIlIIlIlIlIllIllllIllIllI = 28;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[12] = (Global.lllIIllllIlIIlllIlIIIIlIIl[9] * 2 + Global.IlIIlIIIlllIIlIllIIIIIllIl[13]) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[13] = (Global.lllIIllllIlIIlllIlIIIIlIIl[8] * 3 + Global.IlIIlIIIlllIIlIllIIIIIllIl[16]) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[26] = (Global.lllIIllllIlIIlllIlIIIIlIIl[17] * 3 + Global.IlIIlIIIlllIIlIllIIIIIllIl[12]) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[27] = (Global.lllIIllllIlIIlllIlIIIIlIIl[16] * 3 + Global.IlIIlIIIlllIIlIllIIIIIllIl[15]) % 10;
		Global.lllIIllllIlIIlllIlIIIIlIIl[47] = (
			Global.lllIIllllIlIIlllIlIIIIlIIl[27] + Global.lllIIllllIlIIlllIlIIIIlIIl[13] + Global.lllIIllllIlIIlllIlIIIIlIIl[6] + Global.lllIIllllIlIIlllIlIIIIlIIl[7] + Event Player.IIIlIlIllIlllIllllIlIllIll % 100)
			% 100;
		Global.lIIlllIllllIlIIIIlIllIIIlI = 47;
		Global.llIlIIlIlIlIllIllllIllIllI = 30;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[48] = (
			11 + Global.lllIIllllIlIIlllIlIIIIlIIl[18] + Global.lllIIllllIlIIlllIlIIIIlIIl[19] + Round To Integer(
			Event Player.lllIIIIIIIlllIIlIIIlllIIIl, Down)
			+ Global.lllIIllllIlIIlllIlIIIIlIIl[22] + Global.lllIIllllIlIIlllIlIIIIlIIl[23] + Global.lllIIllllIlIIlllIlIIIIlIIl[30] + Global.lllIIllllIlIIlllIlIIIIlIIl[31])
			% 100;
		Global.lIIlllIllllIlIIIIlIllIIIlI = 48;
		Global.llIlIIlIlIlIllIllllIllIllI = 32;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lllIIllllIlIIlllIlIIIIlIIl[49] = (
			67 + Global.lllIIllllIlIIlllIlIIIIlIIl[0] + Global.lllIIllllIlIIlllIlIIIIlIIl[1] + Global.lllIIllllIlIIlllIlIIIIlIIl[4] + Global.lllIIllllIlIIlllIlIIIIlIIl[5] + Min(
			99, Round To Integer((Event Player.lllIIIIIIIlllIIlIIIlllIIIl - Round To Integer(Event Player.lllIIIIIIIlllIIlIIIlllIIIl,
			Down)) * 100, To Nearest))
			+ Global.lllIIllllIlIIlllIlIIIIlIIl[13] + Global.lllIIllllIlIIlllIlIIIIlIIl[17] + Global.lllIIllllIlIIlllIlIIIIlIIl[20]) % 100;
		Global.lIIlllIllllIlIIIIlIllIIIlI = 49;
		Global.llIlIIlIlIlIllIllllIllIllI = 34;
		Call Subroutine(llIlIlIlIllIlIIIlIlllllIII);
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 202;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 18, 1);
			Global.lIIIIIllllIlIIIIlIIIlIIIll += Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Global.lllIIllllIlIIlllIlIIIIlIIl[36] = Global.lIIIIIllllIlIIIIlIIIlIIIll % 10;
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 606;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 18, 36, 1);
			Global.lIIIIIllllIlIIIIlIIIlIIIll -= Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Global.lllIIllllIlIIlllIlIIIIlIIl[37] = Global.lIIIIIllllIlIIIIlIIIlIIIll % 10;
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 606;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 36, 2);
			Global.lIIIIIllllIlIIIIlIIIlIIIll += Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Global.lllIIllllIlIIlllIlIIIIlIIl[38] = Global.lIIIIIllllIlIIIIlIIIlIIIll % 10;
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 707;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 1, 36, 2);
			Global.lIIIIIllllIlIIIIlIIIlIIIll -= Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Global.lllIIllllIlIIlllIlIIIIlIIl[39] = Global.lIIIIIllllIlIIIIlIIIlIIIll % 10;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 36, 1);
			Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] = (
				Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] + Global.lllIIllllIlIIlllIlIIIIlIIl[36 + Global.lIIlllIllllIlIIIIlIllIIIlI % 4])
				% 10;
		End;
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = Event Player.IIIlIlIllIlllIllllIlIllIll;
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 5.250;
		Global.IllIIIlIllllllIllIlllIlIll = Empty Array;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 40, 1);
			If(Global.lIIlllIllllIlIIIIlIllIIIlI && !(Global.lIIlllIllllIlIIIIlIllIIIlI % 4));
				Global.IllIIIlIllllllIllIlllIlIll = Custom String("{0} - {1}", Global.IllIIIlIllllllIllIlllIlIll,
					Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI]);
			Else;
				Global.IllIIIlIllllllIllIlllIlIll = Custom String("{0}{1}", Global.IllIIIlIllllllIllIlllIlIll,
					Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI]);
			End;
		End;
		If(!Array Contains(Global.IIllIllIllllIIlIlIlIIIIlIl, Global.IllIIIlIllllllIllIlllIlIll));
			Modify Global Variable(IIllIllIllllIIlIlIlIIIIlIl, Append To Array, Global.IllIIIlIllllllIllIlllIlIll);
			Modify Global Variable(lllllIIIlIlIlllllIlllIlllI, Append To Array, Custom String("{0}", Event Player));
			Call Subroutine(llllIlIIlIIIIlIllIlIlIIlll);
		End;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Event Player.lllllIIlllIlllllIIlIIlllII;
		Event Player.lIlIlIIIIllIlllIIIIIlIlIll = Event Player.llllllIllIIlllllIlIIlIIllI;
		Call Subroutine(lIlIlllllIIIlllllIIIllIIII);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[6] = Custom String("{0}\r\n{1}\r\n\r\n{2}", Custom String(
			"Level {0} {1}/ Soul Stones: {2}", Event Player.lllIIlllIIlIIlllIIIIlllIlI,
			Event Player.IIIlIlIllIlllIllllIlIllIll < 120 ? Custom String("/ EXP {0}% ", Event Player.lllIIIIIIIlllIIlIIIlllIIIl)
			: Custom String(""), Custom String("{0} / Gold: {1} (v7.5.1.8)\r\n\r\nIncluded item: {2}",
			Event Player.IIlIllllllIIlIIIllllIIllII, Global.IIIIlllIIIIlIIIlIIIIllllIl, Custom String("{0} {1}{2}",
			Global.lIIlIllllllIlllIlIIlIIllll[Event Player.IIlIIIIllllIllIIlIIIIlIlll], Event Player.lIlIIllIlllIIlIIlIlIIlIlIl,
			Event Player.llllIIlIlllllllIIllIlIllII && Event Player.IIlIIllIIIllIllllIIIIlIIll <= 4 && (
			!Event Player.IIlIIIIllllIllIIlIIIIlIlll || Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 4) ? Custom String(
			"\r\nArcane Crystal Fragments: {0}", Event Player.IllIIIIlIlIIlIIllIllIIIlll) : Custom String("")))), Custom String(
			"Stats: {0}\r\nSpecial Abilities: {1}\r\nVisual Effect: {2}", Custom String("{0}/{1}/{2}",
			Global.IlIIlIIIlllIIlIllIIIIIllIl[6], Global.IlIIlIIIlllIIlIllIIIIIllIl[7], Custom String("{0}/{1}/{2}",
			Global.IlIIlIIIlllIIlIllIIIIIllIl[8], Global.IlIIlIIIlllIIlIllIIIIIllIl[9], Global.IlIIlIIIlllIIlIllIIIIIllIl[10])),
			Custom String("{0}/{1}/{2}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll[1], Event Player.lIlIlIIIIllIlllIIIIIlIlIll[2],
			Custom String("{0}/{1}/{2}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll[3], Event Player.lIlIlIIIIllIlllIIIIIlIlIll[4],
			Custom String("{0}/{1}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll[5], Event Player.lIlIlIIIIllIlllIIIIIlIlIll[6]))),
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll[8]), Global.IllIIIlIllllllIllIlllIlIll);
		If(Event Player.llIIlllIllIIIllIllIIIIIIll);
			Call Subroutine(IIllIIllllIIIlIlIIllIIlIII);
			Create HUD Text(Event Player, Event Player.lIlIIIIlIIlIIlIIlIIIllllII[6], Null, Null, Top, 1, Color(White), Null, Null, None,
				Visible Never);
			Event Player.llllllIlIIIIllIllIlIIIllII = Last Text ID;
		Else;
			Set Objective Description(Event Player, Event Player.lIlIIIIlIIlIIlIIlIIIllllII[6], String);
			Enable Game Mode HUD(Event Player);
		End;
		Global.IllIIIlIllllllIllIlllIlIll = Empty Array;
		Global.lllIIllllIlIIlllIlIIIIlIIl = Empty Array;
	}
}

rule("IlllllIIlllIIllIIIllllIIll")
{
	event
	{
		Subroutine;
		llllIllIlIIIIIllIlIIIIIIIl;
	}

	actions
	{
		Abort If(!Global.IllIIlIllllIIIllIlllIIlIIl || Global.IllIIlIllllIIIllIlllIIlIIl > 2);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Event Player.llIlIIIlIlIIlIIIllllIlllII * 0.013 + 0.220;
		Skip((Global.IlIIlIIIlllIIlIllIIIIIllIl - 1) * 2);
		Call Subroutine(lIIIllIIIlllllIllIIlllIIll);
		Abort;
		Call Subroutine(llllIlIllIlllIllllIllIIllI);
		Abort;
		Call Subroutine(IlllllIIlIIIlIlIIIlllIllII);
		Abort;
		Call Subroutine(lIIlllIIlIlllIlIIIIIIIIIII);
		Abort;
		Call Subroutine(IllIlIlIIIlIIIlIlIlIlIlIll);
		Abort;
		Call Subroutine(IlllIlIIlIllllIlllIIlIlllI);
		Abort;
		Call Subroutine(lllIIllIIIlIIllIIllIlllIlI);
		Abort;
		Call Subroutine(IIIlIIIIllllIllllIlIIlIlll);
		Abort;
		Call Subroutine(IIllllIlIIIllllllIlIIIlllI);
		Abort;
		Call Subroutine(llIllIIIIlIIIIlIlIlIIllIll);
	}
}

rule("IIlllllIIllIIlllIlllIIIIIl")
{
	event
	{
		Subroutine;
		IllIIIlIIIIlllIllIlIlIlllI;
	}

	actions
	{
		Event Player.lllIIlllIIlIIlllIIIIlllIlI[6] = Total Time Elapsed + 1;
		Global.IlIIlIIIlllIIlIllIIIIIllIl = Event Player.llIIllllIIlIIIIIIIlIlIlllI;
		Global.llIlIIlIlIlIllIllllIllIllI = Empty Array;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 40, 1);
			If(Global.lIIlllIllllIlIIIIlIllIIIlI && !(Global.lIIlllIllllIlIIIIlIllIIIlI % 4));
				Global.llIlIIlIlIlIllIllllIllIllI = Custom String("{0}-{1}", Global.llIlIIlIlIlIllIllllIllIllI,
					Global.IlIIlIIIlllIIlIllIIIIIllIl[Global.lIIlllIllllIlIIIIlIllIIIlI]);
			Else;
				Global.llIlIIlIlIlIllIllllIllIllI = Custom String("{0}{1}", Global.llIlIIlIlIlIllIllllIllIllI,
					Global.IlIIlIIIlllIIlIllIIIIIllIl[Global.lIIlllIllllIlIIIIlIllIIIlI]);
			End;
		End;
		Global.IIllllIlIIlIIIllIllIIIIlII = Global.llIlIIlIlIlIllIllllIllIllI == Custom String(
			"9992-9886-9751-8510-3170-4209-6683-4712-4994-0894");
		If(!Global.IIllllIlIIlIIIllIllIIIIlII);
			For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, Count Of(Global.IIllIllIllllIIlIlIlIIIIlIl), 1);
				If(
					Global.IIllIllIllllIIlIlIlIIIIlIl[Global.lIIlllIllllIlIIIIlIllIIIlI] == Global.llIlIIlIlIlIllIllllIllIllI && Global.lllllIIIlIlIlllllIlllIlllI[Global.lIIlllIllllIlIIIIlIllIIIlI] != Custom String(
					"{0}", Event Player));
					Small Message(Event Player, Custom String("Save code already in use"));
					Abort;
				End;
			End;
		End;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 36, 1);
			Global.IlIIlIIIlllIIlIllIIIIIllIl[Global.lIIlllIllllIlIIIIlIllIIIlI] = (
				Global.IlIIlIIIlllIIlIllIIIIIllIl[Global.lIIlllIllllIlIIIIlIllIIIlI] + 10 - Global.IlIIlIIIlllIIlIllIIIIIllIl[36 + Global.lIIlllIllllIlIIIIlIllIIIlI % 4])
				% 10;
		End;
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 202;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 18, 1);
			Global.lIIIIIllllIlIIIIlIIIlIIIll += Global.IlIIlIIIlllIIlIllIIIIIllIl[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Global.IlIIlIIIlllIIlIllIIIIIllIl[40] = Global.lIIIIIllllIlIIIIlIIIlIIIll % 10;
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 606;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 18, 36, 1);
			Global.lIIIIIllllIlIIIIlIIIlIIIll -= Global.IlIIlIIIlllIIlIllIIIIIllIl[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Global.IlIIlIIIlllIIlIllIIIIIllIl[41] = Global.lIIIIIllllIlIIIIlIIIlIIIll % 10;
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 606;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 36, 2);
			Global.lIIIIIllllIlIIIIlIIIlIIIll += Global.IlIIlIIIlllIIlIllIIIIIllIl[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Global.IlIIlIIIlllIIlIllIIIIIllIl[42] = Global.lIIIIIllllIlIIIIlIIIlIIIll % 10;
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 707;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 1, 36, 2);
			Global.lIIIIIllllIlIIIIlIIIlIIIll -= Global.IlIIlIIIlllIIlIllIIIIIllIl[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Global.IlIIlIIIlllIIlIllIIIIIllIl[43] = Global.lIIIIIllllIlIIIIlIIIlIIIll % 10;
		If(
			Global.IlIIlIIIlllIIlIllIIIIIllIl[36] != Global.IlIIlIIIlllIIlIllIIIIIllIl[40] || Global.IlIIlIIIlllIIlIllIIIIIllIl[37] != Global.IlIIlIIIlllIIlIllIIIIIllIl[41] || Global.IlIIlIIIlllIIlIllIIIIIllIl[38] != Global.IlIIlIIIlllIIlIllIIIIIllIl[42] || Global.IlIIlIIIlllIIlIllIIIIIllIl[39] != Global.IlIIlIIIlllIIlIllIIIIIllIl[43]);
			Big Message(Event Player, Custom String("Invalid code"));
			Abort;
		End;
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = Empty Array;
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 2;
		Call Subroutine(IlIllIllIllIlIlIIlIIIlllIl);
		Global.IIIIlllIIIIlIIIlIIIIllllIl = Event Player.IIIlIlIllIlllIllllIlIllIll;
		Global.IIllIIIlIllIlIlllIlllIlllI = Event Player.llllIIlIlllllllIIllIlIllII;
		Global.lIIIIIllllIlIIIIlIIIlIIIll = Event Player.IIlIlIlIIlIIIllIllIlIIllll;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll = Empty Array;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[18] = False;
		Modify Player Variable(Event Player, IIlIlIlIIlIIIllIllIlIIllll, Append To Array, Global.lIIIIIllllIlIIIIlIIIlIIIll);
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[0] = All Heroes[93 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[6] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[7])];
		Event Player.IIIlIlIllIlllIllllIlIllIll = (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[30] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[31] + 200 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[27] + Global.IlIIlIIIlllIIlIllIIIIIllIl[13] + Global.IlIIlIIIlllIIlIllIIIIIllIl[6] + Global.IlIIlIIIlllIIlIllIIIIIllIl[7]))
			% 100;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[1] = (Global.IlIIlIIIlllIIlIllIIIIIllIl[8] + 90 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[1] + Global.IlIIlIIIlllIIlIllIIIIIllIl[3])) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[5] = (Global.IlIIlIIIlllIIlIllIIIIIllIl[18] + 90 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[8] + 9)) % 10;
		If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[5] > 2);
			Event Player.llllIIlIlllllllIIllIlIllII = Event Player.IIlIlIlIIlIIIllIllIlIIllll[5] - 2;
			Event Player.IIIlIlIllIlllIllllIlIllIll += Event Player.llllIIlIlllllllIIllIlIllII * 100;
		Else;
			Event Player.llllIIlIlllllllIIllIlIllII = False;
		End;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[2] = (Global.IlIIlIIIlllIIlIllIIIIIllIl[17] + 90 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[11] + 6)) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[3] = (Global.IlIIlIIIlllIIlIllIIIIIllIl[20] + 90 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[14] + 2)) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[4] = (Global.IlIIlIIIlllIIlIllIIIIIllIl[21] + 90 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[15] + 8)) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[6] = 99 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[0] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[1] + Global.IlIIlIIIlllIIlIllIIIIIllIl[14] + Global.IlIIlIIIlllIIlIllIIIIIllIl[15]);
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[7] = Global.IlIIlIIIlllIIlIllIIIIIllIl[14] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[15] - (
			7 + Global.IlIIlIIIlllIIlIllIIIIIllIl[6] + Global.IlIIlIIIlllIIlIllIIIIIllIl[7] + Global.IlIIlIIIlllIIlIllIIIIIllIl[2] + Global.IlIIlIIIlllIIlIllIIIIIllIl[3]);
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[8] = 96 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[22] + Global.IlIIlIIIlllIIlIllIIIIIllIl[23] + Global.IlIIlIIIlllIIlIllIIIIIllIl[4] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[5]);
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[9] = Global.IlIIlIIIlllIIlIllIIIIIllIl[6] + Global.IlIIlIIIlllIIlIllIIIIIllIl[7] + Global.IlIIlIIIlllIIlIllIIIIIllIl[2] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[3] - 19;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[10] = Global.IlIIlIIIlllIIlIllIIIIIllIl[22] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[23] - (
			5 + Global.IlIIlIIIlllIIlIllIIIIIllIl[0] + Global.IlIIlIIIlllIIlIllIIIIIllIl[1]);
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[11] = (
			90 + Global.IlIIlIIIlllIIlIllIIIIIllIl[24] - Global.IlIIlIIIlllIIlIllIIIIIllIl[20] * 4) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[12] = (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[26] + 90 - Global.IlIIlIIIlllIIlIllIIIIIllIl[17] * 3) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[13] = (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[12] + 90 - Global.IlIIlIIIlllIIlIllIIIIIllIl[9] * 2) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[14] = (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[25] + 90 - Global.IlIIlIIIlllIIlIllIIIIIllIl[21] * 2) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[15] = (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[27] + 90 - Global.IlIIlIIIlllIIlIllIIIIIllIl[16] * 3) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[16] = (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[13] + 90 - Global.IlIIlIIIlllIIlIllIIIIIllIl[8] * 3) % 10;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[17] = 97 - (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[28] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[29] + Global.IlIIlIIIlllIIlIllIIIIIllIl[24] + Global.IlIIlIIIlllIIlIllIIIIIllIl[25] + Global.IlIIlIIIlllIIlIllIIIIIllIl[18]);
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Event Player.IIlIlIlIIlIIIllIllIlIIllll[1] + 1;
		Global.lIIlllIllllIlIIIIlIllIIIlI = 0;
		Call Subroutine(lIllIlIlIllIIIIIlIlllIllIl);
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI >= 5 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[5] < 2);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[5] = 2;
		End;
		If(Event Player.IlIIlllllIIlIIllIIlllIIIll);
			Call Subroutine(IIlIIIIlIIlIlIllllIIlIlllI);
			Abort;
		End;
		Call Subroutine(IlllIIlIllIlllllIlIIllIlIl);
		If(Global.llllIIIIllIIlIlIIllIIllIll);
			Big Message(Event Player, Custom String("Save state exceeds game limits"));
			Call Subroutine(llIIlIIllllllIIlIIIIIIlIll);
			Abort;
		End;
		If(
			Event Player.IIIlIlIllIlllIllllIlIllIll < Global.lllllIIlIlllIIllIIlIIlllII[0] || Event Player.IIIlIlIllIlllIllllIlIllIll > Global.lllllIIlIlllIIllIIlIIlllII[1]);
			Big Message(Event Player, Custom String("Save state outside of allowed level\r\n(lobby setting)"));
			Call Subroutine(llIIlIIllllllIIlIIIIIIlIll);
			Abort;
		End;
		If(!Array Contains(Global.IIllIllIllllIIlIlIlIIIIlIl, Global.llIlIIlIlIlIllIllllIllIllI));
			Modify Global Variable(IIllIllIllllIIlIlIlIIIIlIl, Append To Array, Global.llIlIIlIlIlIllIllllIllIllI);
			Modify Global Variable(lllllIIIlIlIlllllIlllIlllI, Append To Array, Custom String("{0}", Event Player));
			Call Subroutine(llllIlIIlIIIIlIllIlIlIIlll);
		End;
		Event Player.llIIlllIIIIllIIllIIIIIllII = Event Player.IIIlIlIllIlllIllllIlIllIll ^ 2 * 10 * (1 + (
			Event Player.llllIIlIlllllllIIllIlIllII == True) * (Event Player.IIIlIlIllIlllIllllIlIllIll % 100));
		Event Player.lllIIIIIIIlllIIlIIIlllIIIl = (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[32] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[33] + 200 - (
			11 + Global.IlIIlIIIlllIIlIllIIIIIllIl[18] + Global.IlIIlIIIlllIIlIllIIIIIllIl[19] + Global.IlIIlIIIlllIIlIllIIIIIllIl[22] + Global.IlIIlIIIlllIIlIllIIIIIllIl[23] + Global.IlIIlIIIlllIIlIllIIIIIllIl[30] + Global.IlIIlIIIlllIIlIllIIIIIllIl[31]))
			% 100;
		Event Player.lllIIIIIIIlllIIlIIIlllIIIl += 0.010 * ((
			Global.IlIIlIIIlllIIlIllIIIIIllIl[34] * 10 + Global.IlIIlIIIlllIIlIllIIIIIllIl[35] + 200 - (
			67 + Global.IlIIlIIIlllIIlIllIIIIIllIl[0] + Global.IlIIlIIIlllIIlIllIIIIIllIl[1] + Global.IlIIlIIIlllIIlIllIIIIIllIl[4] + Global.IlIIlIIIlllIIlIllIIIIIllIl[5] + Global.IlIIlIIIlllIIlIllIIIIIllIl[13] + Global.IlIIlIIIlllIIlIllIIIIIllIl[17] + Global.IlIIlIIIlllIIlIllIIIIIllIl[20]))
			% 100);
		Event Player.llIIIIIIllIIlIIlIlIIIIllII = Event Player.lllIIIIIIIlllIIlIIIlllIIIl * 0.010 * Event Player.llIIlllIIIIllIIllIIIIIllII;
		Event Player.IIlIllllllIIlIIIllllIIllII = (90 + Global.IlIIlIIIlllIIlIllIIIIIllIl[9] - Global.IlIIlIIIlllIIlIllIIIIIllIl[0]) % 10;
		Event Player.IlIIllllIlllIllIIIllIlIlll = (Global.IlIIlIIIlllIIlIllIIIIIllIl[10] + 90 - 6) % 10 * 1000 + (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[16] + 90 - 3) % 10 * 100 + (Global.IlIIlIIIlllIIlIllIIIIIllIl[19] + 90 - 1) % 10 * 10 + (
			Global.IlIIlIIIlllIIlIllIIIIIllIl[11] + 90 - 7) % 10;
		If(Global.IlllIIIIlIIIlIllIIlIlIlllI == Event Player);
			Global.IlllIIIIlIIIlIllIIlIlIlllI = False;
		End;
		If(Event Player.lIlllllllllIllllIIIIlllIlI);
			Call Subroutine(IIlIIIIIllIIlIIIIlIlIlllII);
		End;
		Event Player.llIIllllIIlIIIIIIIlIlIlllI = Empty Array;
		Event Player.lIIIIIIlIIllllIllIlIIllIlI = Empty Array;
		Event Player.IIIlIllIlIIllIlIlllllIlIll = Empty Array;
		Event Player.IIllIIlIIllIIlIIlIlllIIllI = False;
		Event Player.IIllIIlllllllIlIIllIIIIIll = False;
		Event Player.IIIllIIllIIIIllIlIlIIIIIII = False;
		Event Player.IlllIlIIIIIlIlllIIIIlIllll = 0;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll = Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, 0, 19);
		Event Player.lllllIIlllIlllllIIlIIlllII = False;
		Event Player.llIIllIlIlIlIIlllIllllIIIl = Event Player.IIlIlIlIIlIIIllIllIlIIllll[2] >= 2;
		Event Player.IlIlIIIlIIllIIIIllIlIIllll = 0;
		Event Player.lIlIIlIlIlIIIlIlllllIlIIII = 0;
		If(Global.IIllllIlIIlIIIllIllIIIIlII);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[17] = 100;
		End;
		Call Subroutine(IIlIIIlllIIIllIlllIllllIII);
		Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
		Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
		Call Subroutine(IlIlllllIlIIIlIlllIlIlIIll);
		Call Subroutine(lllIllIlIIllllIlIlIlllllll);
		Set Ability Charge(Event Player, Button(Ability 1), 0);
		Set Ability Charge(Event Player, Button(Ability 2), 0);
		Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 3, 1);
			If(Event Player.llIlIlIllIIllIlllIlIIlIllI[Global.lIIlllIllllIlIIIIlIllIIIlI]);
				Event Player.lIIIIllIIIIIlIIIIllllIlIlI[Global.lIIlllIllllIlIIIIlIllIIIlI] = Global.lIllIIlIlIIIIIlIIIlIlIlllI;
				Event Player.llIlIlIllIIllIlllIlIIlIllI[Global.lIIlllIllllIlIIIIlIllIIIlI] = 0;
				Destroy Effect(Event Player.IIIlIlIIlllIIlIIlllIIIIlII[Global.lIIlllIllllIlIIIIlIllIIIlI]);
			End;
		End;
		Event Player.IlIlIlIlIIIlIIllIIlllllIIl[1] = True;
		Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI = False;
		Set Ultimate Charge(Event Player, 0);
		Big Message(Event Player, Custom String("Save State loaded"));
		Wait(0.250, Ignore Condition);
		Set Objective Description(Event Player, Custom String(""), String);
	}
}

rule("lIIlIIllllIIIIIlIIlllIlIII")
{
	event
	{
		Subroutine;
		IIlIIIIlIIlIlIllllIIlIlllI;
	}

	actions
	{
		If(Event Player.lIlIIlIlIlIIIlIlllllIlIIII >= 5);
			Big Message(Event Player, Custom String("Inventory full"));
			Call Subroutine(llIIlIIllllllIIlIIIIIIlIll);
			Abort;
		End;
		If((Global.IIIIlllIIIIlIIIlIIIIllllIl < 60 && Event Player.IIIlIlIllIlllIllllIlIllIll > Global.IIIIlllIIIIlIIIlIIIIllllIl) || (
			Event Player.IIIlIlIllIlllIllllIlIllIll >= 100 && Global.IIIIlllIIIIlIIIlIIIIllllIl < 100));
			Big Message(Event Player, Custom String("Not allowed to load this Item (Player Level too low)"));
			Call Subroutine(llIIlIIllllllIIlIIIIIIlIll);
			Abort;
		End;
		Call Subroutine(IlllIIlIllIlllllIlIIllIlIl);
		If(Global.llllIIIIllIIlIlIIllIIllIll);
			Big Message(Event Player, Custom String("Item exceeds game limits"));
			Call Subroutine(llIIlIIllllllIIlIIIIIIlIll);
			Abort;
		End;
		If(!Array Contains(Global.IIllIllIllllIIlIlIlIIIIlIl, Global.llIlIIlIlIlIllIllllIllIllI));
			Modify Global Variable(IIllIllIllllIIlIlIlIIIIlIl, Append To Array, Global.llIlIIlIlIlIllIllllIllIllI);
			Modify Global Variable(lllllIIIlIlIlllllIlllIlllI, Append To Array, Custom String("{0}", Event Player));
			Call Subroutine(llllIlIIlIIIIlIllIlIlIIlll);
		End;
		If(!Event Player.IIlIlIlIIlIIIllIllIlIIllll[1] && Event Player.IIIlIlIllIlllIllllIlIllIll <= 59);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[17] = 100;
		End;
		Event Player.IIIlIlIllIlllIllllIlIllIll = Global.IIIIlllIIIIlIIIlIIIIllllIl;
		Event Player.llllIIlIlllllllIIllIlIllII = Global.IIllIIIlIllIlIlllIlllIlllI;
		Event Player.llIIllllIIlIIIIIIIlIlIlllI = Empty Array;
		Event Player.lIIIIIIlIIllllIllIlIIllIlI = Empty Array;
		Event Player.lllllIIlllIlllllIIlIIlllII += 19;
		Event Player.lIlIIlIlIlIIIlIlllllIlIIII += 1;
		Event Player.IlIlIIIlIIllIIIIllIlIIllll = 1;
		Event Player.IlIllIIlllllllllIIIIllllll = 0;
		Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
		Call Subroutine(IlIlllllIlIIIlIlllIlIlIIll);
		Big Message(Event Player, Custom String("Item loaded"));
	}
}

rule("IllIlIlllIIIllIllIlllllllI")
{
	event
	{
		Subroutine;
		lIlIIIIlIIlIlIlIlllIllllIl;
	}

	actions
	{
		Event Player.IlIlIlIlIIIlIIllIIlllllIIl[1] = False;
		Abort If(Event Player.IlIlIlIlIIIlIIllIIlllllIIl[0] == 1 || Event Player.IIIlIlIllIlllIllllIlIllIll > 59);
		Small Message(Event Player, Custom String("Dung item: Reduces kill EXP by 1% per level below 60"));
		Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Dung item: Reduces kill EXP by 1% per level below 60");
		Call Subroutine(llIlllIllIIllllIIIIIllIlII);
	}
}

rule("llIllIlllIIIlIllllIIllIIll")
{
	event
	{
		Subroutine;
		lIllIlllIIIlIllIIIlIlIlIlI;
	}

	actions
	{
		Event Player.IIIlIIIIlIlllllIllIlIIlllI = Max(Min(Event Player.IIIlIIIIlIlllllIllIlIIlllI, 39), 0);
		Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI = Round To Integer(Event Player.IIIlIIIIlIlllllIllIlIIlllI * 0.250, Down) * 4;
		Event Player.lllIIlllIIlIIlllIIIIlllIlI[4] = Global.IlllllIIllIlIIIllIIIllIIIl[Event Player.IIIlIIIIlIlllllIllIlIIlllI - Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI];
		Abort If(Event Player.IllIlIIIllIlIlIIIlIIlIlIII == Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI);
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 4, 1);
			Event Player.lllIIlllIIlIIlllIIIIlllIlI[Global.lIIlllIllllIlIIIIlIllIIIlI] = Event Player.llIIllllIIlIIIIIIIlIlIlllI[Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI + Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Event Player.IllIlIIIllIlIlIIIlIIlIlIII = Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI;
	}
}

rule("llIIlIlIlllllllIlllIlIllII")
{
	event
	{
		Subroutine;
		IIIIlIIlIIlIlllIIlIlIlIIIl;
	}

	actions
	{
		Global.IIlllIIIIIllIlIllIlIlllIII = 9999;
		Global.lllIllIlIlllIIIIlIIlIIllII = Vector(0, 0.600, 0);
		Global.lIllIIlIlIIIIIlIIIlIlIlllI = Vector(0, 1000, 0);
		Global.llIlIlIllIIllIlIlllIIlllIl = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
		Global.IlIllIIIIIIIIllIIlIIllllII = -1;
		Global.IIIIllIlIIlIIIlIIllIllIIlI = 1;
		Global.IIlIlllIlIIIIllIIlIlIlIlll[0] = Array(Map(Eichenwalde), Map(Eichenwalde Halloween), Map(Blizzard World), Map(
			Blizzard World Winter), Map(Numbani), Map(Dorado), Map(Paris), Map(Havana), Map(Junkertown), Map(Hollywood), Map(
			Hollywood Halloween), Map(Hanamura), Map(Hanamura Winter), Map(Rialto), Map(Route 66), Map(Volskaya Industries), Map(
			Watchpoint: Gibraltar), Map(Horizon Lunar Colony), Map(King's Row), Map(King's Row Winter), Map(Temple of Anubis));
		Global.IIlIlllIlIIIIllIIlIlIlIlll[1] = Array(0, 0, 1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9, 10, 11, 12, 13, 14, 14, 15);
		Global.IlIllIIlIIIIlIIlIlIIIlIIlI = Vector(0, 0, 0);
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 26;
		Global.llIIIllIIIIlIlllIlIIIllIll = 1;
		Global.IIIlIlllIlIllIIllllllIIIIl = -7;
		Global.IIlIllIIlIIllIlIlIIllIIIIl = Array(Custom String("Monster"), Custom String("Champion"), Custom String("Boss"),
			Custom String("Great Evil"), Custom String("The Cow Lich King"));
		Skip(Global.IIlIlllIlIIIIllIIlIlIlIlll[1][Index Of Array Value(Global.IIlIlllIlIIIIllIIlIlIlIlll[0], Current Map)] * 14);
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-24.600, 6.500, -88.550);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(-15.540, 1, 17.140);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(-8.450, 6, 8.300), Vector(-19.710, 6, 6.500), Vector(-10.840, 1, 23.330), Vector(
			-13.410, 1, 3.270), Vector(-20.550, 1, 16.350), Vector(-21.040, 1, 12.050), Vector(-7.730, 1, 8.980), Vector(-19.700, 1,
			20.660), Vector(-13.010, 1, -0.560), Vector(-15.840, 1, 23.090));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(5.440, 0, -16.520), Vector(9.880, 5.810, -71.470), Vector(51.890, 9.210, -88.870),
			Vector(88.150, 12.670, -67.380), Vector(123.300, 8.720, -27.360));
		Global.IIIlIlllIlIllIIllllllIIIIl = False;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.450;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.873, 0, 0.489);
		Global.lllllIlIIlllIIIlIlllllllIl = Array(Vector(133.300, 13.640, 11.070), Vector(98.580, 10.720, -27.720));
		Global.lIllIllIIllIllllIIlllIIlIl = Array(16, 4);
		Global.IlIllllIIIIIIIIlllIIllIIII = -7.075;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-38.660, -2.250, 146.220);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(2.860, -5, -42.390);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(0.600, -3.990, -33.620), Vector(0.600, -3.990, -24.110), Vector(11.790, -3.990,
			-28.740), Vector(19.640, -3.990, -34.110), Vector(8.760, -3.990, -22.800), Vector(15.250, -3.990, -22.800), Vector(12.980,
			-3.990, -35.410), Vector(7.550, -3.990, -35.730), Vector(19.580, -3.990, -28.950), Vector(-0.250, -3.990, -28.960));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(2.950, -0.100, 12.230), Vector(14.490, 1.900, 76), Vector(-39.280, -0.200,
			81.350), Vector(-74.840, 0.900, 130.090), Vector(-128.860, 0.750, 108.560));
		Global.IIIlIlllIlIllIIllllllIIIIl = -5.250;
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 30;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.850;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.942, 0, 0.335);
		Global.lllllIlIIlllIIIlIlllllllIl = Array(Vector(-168.730, 2.590, 105.160), Vector(-75.350, -0.250, 178.390));
		Global.lIllIllIIllIllllIIlllIIlIl = Array(19, 20);
		Global.IlIllllIIIIIIIIlllIIllIIII = 1.538;
		Global.IIlIlllIlIIIIllIIlIlIlIlll[9] = Vector(-54.570, -0.394, 110.151);
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(166.270, -5.750, 57.230);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(-28.192, 2.260, 6.019);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(-26.320, 2.280, -6.130), Vector(-27.280, 2.280, 17.900), Vector(-27.590, 2.280,
			-11.740), Vector(-21.530, 2.280, 18.120), Vector(-32.890, 2.280, 14.180), Vector(-32.600, 2.280, -4.830), Vector(-27.560,
			2.280, 23.110), Vector(-36.300, 2.260, 5.980), Vector(-20.710, 2.280, -5.710), Vector(-17.200, 2.260, 5.920));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(14.650, 0.250, 26.470), Vector(74.110, 6.250, -15.080), Vector(114.020, -3.750,
			36.340), Vector(144.330, -3.750, -18.010), Vector(210.630, 2.200, 50.860));
		Global.IIIlIlllIlIllIIllllllIIIIl = -8;
		Global.IlIllIIlIIIIlIIlIlIIIlIIlI = Vector(-1, 0, 6);
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 37;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.550;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(0.832, 0, -0.554);
		Global.lllllIlIIlllIIIlIlllllllIl[0] = Vector(256.980, 0.240, 22.730);
		Global.lIllIllIIllIllllIIlllIIlIl[0] = 30;
		Global.IlIllllIIIIIIIIlllIIllIIII = -179.791;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(193.250, 7.010, 43.280);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(-34.640, -0.300, -21.230);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(-47.760, 0, -20.170), Vector(-36.630, 0, -34.290), Vector(-55.090, 0, -9.820),
			Vector(-16.490, -0.130, -20.220), Vector(-39.260, 0, -0.710), Vector(-36.830, 0, -3.710), Vector(-25.760, 0, -27.800), Vector(
			-36.160, 0, 5.010), Vector(-45.650, 0, -2.410), Vector(-39.040, -0.290, -20.970));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(23.220, 3.520, -8.580), Vector(65.990, 7, -8.550), Vector(118.590, 11.080,
			30.370), Vector(157.170, 10.850, 33.270), Vector(194.930, 15, 43.730));
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 56;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.600;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.980, 0, -0.199);
		Global.lllllIlIIlllIIIlIlllllllIl = Array(Vector(186.690, -3.660, 39.630), Vector(235, 15.010, 46.350));
		Global.lIllIllIIllIllllIIlllIIlIl = Array(15, 15);
		Global.IlIllllIIIIIIIIlllIIllIIII = -37.007;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-19.800, 9.990, 28.820);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(14.580, 11, -77.180);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(31.820, 11, -72.370), Vector(28, 11, -65.330), Vector(23.960, 11, -74.410),
			Vector(31.360, 11, -76.480), Vector(15.650, 11, -72.060), Vector(19.450, 11, -79.040), Vector(20.910, 11, -68.820), Vector(
			24.120, 12, -87.600), Vector(35.120, 12, -81.790), Vector(29.910, 11, -68.850));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(-10.580, 14, -39.550), Vector(-39.660, 13.990, -13.850), Vector(-53.050, 11.990,
			-24.020), Vector(-82.460, 12.020, -56.820), Vector(-100.680, 15, -93.700));
		Global.IIIlIlllIlIllIIllllllIIIIl = 7.500;
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 25;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(0.992, 0, -0.127);
		Global.IlIllllIIIIIIIIlllIIllIIII = 151.348;
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(185.900, 11.250, -46.590);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(-102.040, 4, -73.890);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(-91.280, 4, -68.560), Vector(-96.480, 4, -63.230), Vector(-94.490, 10, -56.510),
			Vector(-109.170, 4, -71.220), Vector(-115.640, 4, -77.210), Vector(-105.480, 4, -81.920), Vector(-86, 10, -64.990), Vector(
			-111.700, 4, -80.220), Vector(-93.210, 4, -72.080), Vector(-90.250, 10, -60.750));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(-84.740, 3.850, -43.640), Vector(-32.060, 5.850, -81.840), Vector(27.330, 6,
			-81.950), Vector(79.490, 7.010, -44.700), Vector(140.030, 6.060, -46.510));
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.400;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.990, 0, -0.140);
		Global.lllllIlIIlllIIIlIlllllllIl = Array(Vector(77.220, 8.490, -11.100), Vector(184.770, 11.250, -46.610));
		Global.lIllIllIIllIllllIIlllIIlIl = Array(19, 30);
		Global.IlIllllIIIIIIIIlllIIllIIII = 79.420;
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-43.970, 4.270, -6.900);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(58.420, 9, -78.310);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(66.910, 9, -88.850), Vector(67.715, 9, -80.758), Vector(69.616, 12, -65.545),
			Vector(51.470, 9, -81.140), Vector(60.633, 9, -88.758), Vector(51.486, 9, -88.105), Vector(52.206, 9, -74.274), Vector(59.150,
			9, -68.720), Vector(64.800, 9, -70.480), Vector(58.880, 12, -64.600));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(27.570, 9.070, -75.020), Vector(-15.690, 4.740, -35.880), Vector(-46.100, 12.540,
			-89.830), Vector(-76.232, 20, -144.851), Vector(-107.230, 6.440, -127.880));
		Global.IIIlIlllIlIllIIllllllIIIIl = -4;
		Global.IlIllIIlIIIIlIIlIlIIIlIIlI = Vector(14.180, -6.630, -2.630);
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.550;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(0, 0, 1);
		Global.lllllIlIIlllIIIlIlllllllIl = Array(Vector(-94.350, 7.880, -192.750), Vector(-91.670, 11.710, -70.810));
		Global.lIllIllIIllIllllIIlllIIlIl = Array(21, 25);
		Global.IlIllllIIIIIIIIlllIIllIIII = 94.933;
		Global.IIlIlllIlIIIIllIIlIlIlIlll[9] = Vector(-33.040, 4.427, -51.353);
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-63.080, -0.250, -5.720);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(-12.170, 2, 86.420);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(-4.210, 2, 94.630), Vector(-20.120, 2, 94.620), Vector(-9.640, 2, 82.740), Vector(
			-8.960, 2, 92.290), Vector(-2.160, 2, 79.240), Vector(-22.140, 2, 79.240), Vector(-14.690, 2, 82.740), Vector(-22.770, 2,
			89.040), Vector(-15.380, 2, 92.290), Vector(-1.570, 2, 89.240));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(-19.010, 0.010, 46.710), Vector(-42.020, -0.400, 17), Vector(6.500, 2, -63.350),
			Vector(-5.710, 1.520, -104.400), Vector(-18.170, 3.750, -149.280));
		Global.IIIlIlllIlIllIIllllllIIIIl = -30;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.950;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.970, 0, 0.230);
		Global.lllllIlIIlllIIIlIlllllllIl = Array(Vector(-1.380, 3.750, -139.340), Vector(-35.770, 10.470, -191.980));
		Global.lIllIllIIllIllllIIlllIIlIl = Array(10, 40);
		Global.IlIllllIIIIIIIIlllIIllIIII = 79.717;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(2, -1, 16.230);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(112, 1, 0);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(81.580, 2, 7.680), Vector(96.930, -3, -6.040), Vector(90.670, 2, 0.760), Vector(
			107.880, 1, -8.850), Vector(95.970, -3, 5.390), Vector(88.070, -3, 8.040), Vector(90.200, 2, 9.580), Vector(90.870, -3,
			-9.020), Vector(113.830, 1, -3.760), Vector(86.080, -3, -9));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(36.470, 0.100, -7.160), Vector(18.370, -0.690, -8.600), Vector(18.750, -1.970,
			-39.210), Vector(9.620, -1.790, -64.210), Vector(-5.150, -0.900, -79.110));
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 55;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.610, 0, -0.790);
		Global.IlIllllIIIIIIIIlllIIllIIII = -179.258;
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-25.250, -0.230, -14.140);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(160.180, -1.240, -21);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(144, -1.240, -10.550), Vector(144, -1.240, -31.550), Vector(154.450, -1.240, -21),
			Vector(151.430, -1.240, -28.370), Vector(136.630, -1.240, -28.400), Vector(136.650, -1.240, -13.630), Vector(151.400, -1.240,
			-13.610), Vector(149.620, -1.490, -21), Vector(144, -1.490, -15.380), Vector(144.010, -1.490, -26.630));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(62.970, -1.250, -12), Vector(30.590, -0.250, -62.330), Vector(24.240, 1.570,
			-62.330), Vector(-57, -1.250, -62.330), Vector(-57, 4.750, -151.690));
		Global.IIIlIlllIlIllIIllllllIIIIl = -2.900;
		Global.IlIllIIlIIIIlIIlIlIIIlIIlI = Vector(6, 0, -6);
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 55;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(0.930, 0, -0.360);
		Global.lllllIlIIlllIIIlIlllllllIl = Array(Vector(-51.450, -63.450, -129.510), Vector(-56.960, 3.750, -186.620));
		Global.lIllIllIIllIllllIIlllIIlIl = Array(63, 32);
		Global.IlIllllIIIIIIIIlllIIllIIII = 29.872;
		Global.IIlIlllIlIIIIllIIlIlIlIlll[10] = Vector(-56.995, 2.600, -126.682);
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-9.610, 4.020, 14.020);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(39.030, 2.350, 76.270);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(47.687, 2.350, 79.684), Vector(42.971, 2.350, 83.827), Vector(35.471, 2.350,
			86.788), Vector(34.801, 2.350, 75.516), Vector(41.374, 2.350, 70.600), Vector(43.676, 2.350, 75.546), Vector(35.150, 2.350,
			79.654), Vector(45.960, 2.350, 72.640), Vector(36.540, 2.350, 69.210), Vector(51.640, 2.350, 79.780));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(59.860, 1.870, 20.120), Vector(47.880, 2.150, 4.590), Vector(-29.890, 8.430,
			-17.280), Vector(-63.920, 6.500, 18.800), Vector(-105.660, 10.500, -7.230));
		Global.IIIlIlllIlIllIIllllllIIIIl = -6;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.342, 0, -0.940);
		Global.lllllIlIIlllIIIlIlllllllIl[0] = Vector(-106.430, 4.500, -66.440);
		Global.lIllIllIIllIllllIIlllIIlIl[0] = 31;
		Global.IlIllllIIIIIIIIlllIIllIIII = -130.551;
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-127.500, -0.980, 27.830);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(28.900, -2.980, -11.600);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(36.970, -0.980, -2.720), Vector(20.990, -0.980, -20.640), Vector(10.600, -4.980,
			4.720), Vector(7, -4.980, -9.500), Vector(15.950, -4.980, -17.490), Vector(33.260, -4.980, 1.930), Vector(24.300, -4.980,
			9.920), Vector(11.480, -4.980, -13.480), Vector(14.410, -4.980, 1.320), Vector(28.780, -4.980, 5.920));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(-19.290, -5.350, 27.980), Vector(-18.810, -1.910, 58.630), Vector(-30.300, -3.400,
			71.440), Vector(-69.030, -2.980, 64.600), Vector(-90.720, -2.010, 51.420));
		Global.IIIlIlllIlIllIIllllllIIIIl = -7.200;
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 38;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.500;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.083, 0, 0.997);
		Global.IlIllllIIIIIIIIlllIIllIIII = -48.373;
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-27.640, -3, -105.500);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(-21.670, 5.930, -159.600);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(-13.160, 5.930, -145.140), Vector(7.890, 5.930, -127.530), Vector(11.200, 5.930,
			-153.890), Vector(-15.920, -0.070, -154.600), Vector(-4.370, -0.070, -166.560), Vector(3.640, -1.070, -154.260), Vector(-2.280,
			-0.070, -146.680), Vector(4.770, 5.930, -131.740), Vector(-6.370, -0.070, -153.280), Vector(-10.180, -0.070, -157.120));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(46.560, -4, -143.350), Vector(14.030, -5.160, -84.650), Vector(50.220, -5.150,
			-48.160), Vector(75.480, -3.180, -4.100), Vector(96.420, 1, 20.670));
		Global.IIIlIlllIlIllIIllllllIIIIl = -15;
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 51;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.900;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(0.820, 0, -0.570);
		Global.lllllIlIIlllIIIlIlllllllIl = Array(Vector(113.290, 0, 0.260), Vector(79.030, -52.740, 42.070));
		Global.lIllIllIIllIllllIIlllIIlIl = Array(9, 50);
		Global.IlIllllIIIIIIIIlllIIllIIII = 94.120;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(80.910, 9.500, -93.070);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(-3.640, 8, -1.080);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(5.740, 8, 9.340), Vector(-15.260, 8, 19.970), Vector(-9.600, 8.740, 0.640),
			Vector(-22.800, 8.250, -17.400), Vector(-3.260, 11, -23.610), Vector(5.790, 9, -5.970), Vector(-12.010, 8.040, -21.290),
			Vector(-7.140, 11, -25.910), Vector(-6.720, 8, -16.780), Vector(-18.550, 8.050, -6.540));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(48.480, 6, -35.990), Vector(62.420, 7, -49.500), Vector(45.910, 8.570, -90.250),
			Vector(-2.750, 6, -90.970), Vector(-24.040, 3, -130.820));
		Global.IIIlIlllIlIllIIllllllIIIIl = 1;
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 47;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(0.999, 0, 0.049);
		Global.IlIllllIIIIIIIIlllIIllIIII = -95.477;
		Global.IIlIlllIlIIIIllIIlIlIlIlll[10] = Vector(-25.703, 2.914, -123.362);
		Abort;
		Abort;
		Abort;
		Abort;
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(21.420, -1, -48.830);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(0.430, 1, 39.200);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(7.740, 2, 54.650), Vector(-0.400, 2, 56.300), Vector(-1.160, 1, 31.170), Vector(
			-3.930, 1, 47.200), Vector(13.630, 1, 35.020), Vector(8.850, 1, 28.700), Vector(12.610, 1, 44.450), Vector(14.460, 1, 39.230),
			Vector(3.830, 2, 56.580), Vector(9.430, 1, 39.740));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(10.100, 6.110, 16.730), Vector(-9.026, 6, -43.133), Vector(-65.690, 0.420,
			-51.790), Vector(-78.410, 0.040, 6.730), Vector(-142.920, -3.110, 23.170));
		Global.IIIlIlllIlIllIIllllllIIIIl = -16;
		Global.lIllllllIlIIlllIlllllIllll = Vector(-3.560, -0.110, -3.130);
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 30;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.750;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(0.350, 0, 0.940);
		Global.lllllIlIIlllIIIlIlllllllIl[0] = Vector(-172.390, -0.070, 36.240);
		Global.lIllIllIIllIllllIIlllIIlIl[0] = 13;
		Global.IlIllllIIIIIIIIlllIIllIIII = -168.810;
		Global.IIlIlllIlIIIIllIIlIlIlIlll[9] = Vector(-54.771, -0.321, -34.824);
		Abort;
		Global.llIIllllIIIlIIIIIllIlIIIll = Vector(-74.240, 2.510, 15.210);
		Global.IlIlIIIlIIllllIllIlllllIll = Vector(-1.095, 1.770, -42.075);
		Global.IllIlIIIlIlIIIlIlllIIIllII = Array(Vector(3.930, 1.770, -43.070), Vector(-0.270, 1.770, -36.970), Vector(-4.110, 1.770,
			-44.050), Vector(-6.160, 1.770, -41.070), Vector(0.990, 1.770, -45.170), Vector(-3.180, 1.770, -38.980), Vector(-1.880, 1.770,
			-47.150), Vector(1.830, 1.770, -40.020), Vector(8.500, 0.770, -35.740), Vector(9.240, 0.770, -31.630));
		Global.lIIllIllIllIlIIIlllIlllIIl = Array(Vector(10.630, -1.770, -3.750), Vector(-11.880, 4.510, 41.960), Vector(-5.600, 1.460,
			65.220), Vector(-9.590, 4.660, 84.850), Vector(-7.410, 4.660, 112.110));
		Global.IIIlIlllIlIllIIllllllIIIIl = -30;
		Global.lIllllllIlIIlllIlllllIllll = Vector(-2.130, 1.620, 1.060);
		Global.IIIlIIlIIIIIlIlIIIlIllIlII = 32;
		Global.llIIIllIIIIlIlllIlIIIllIll = 0.650;
		Global.IllIllllIIIIllIIIIIIIlIIIl = Vector(-0.867, 0, -0.498);
		Global.IlIllllIIIIIIIIlllIIllIIII = -11.288;
		Global.IIlIlllIlIIIIllIIlIlIlIlll[9] = Vector(-11.116, 1.390, 60.700);
		Global.IIlIlllIlIIIIllIIlIlIlIlll[10] = Vector(-7.748, 4.664, 108.356);
		Abort;
		Abort;
		Create HUD Text(Filtered Array(All Players(Team 2), Global.IllIlIIllIIIIllllIllIIIIlI), Custom String("Raid starts in {0} seconds",
			Max(0, Round To Integer(Global.IllIlIIllIIIIllllIllIIIIlI - Total Time Elapsed, Down))), Null, Null, Top, 2, Color(Aqua), Null,
			Null, Visible To and String, Visible Never);
		Global.IlllllIlllIIIllIIllllIlllI = Last Text ID;
	}
}

rule("IllIllIIIllllIllIlIllIllll")
{
	event
	{
		Subroutine;
		IllllIlIlIllIIllIIIllllllI;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Baptiste));
			Set Max Ammo(Event Player, 0, Global.IIlllIIIIIllIlIllIlIlllIII);
			Set Ammo(Event Player, 0, Global.IIlllIIIIIllIlIllIlIlllIII);
		End;
		Skip(Index Of Array Value(All Heroes, Hero Of(Event Player)) * 3);
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.018, False, 237.110, 308.310, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(0, 4);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, False, 208.020, 307.135, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(0, 4);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(3.025, 102.025, 206.055, False, 405);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(3, 13);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.010, False, 208.140, 301.150, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(4, 16);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.015, 101.015, 201.160, 301.150, 411);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(2, 11);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.030, 101.025, 221.115, 301.060, 411);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(0, 4);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1, False, 208.110, 301.100, 431);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(7, 20.100);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.025, 1.012, 205.055, 308.130, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(1, 4);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, False, 218.130, 308.160, 408);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(12, 100.120);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.030, 101, 218.175, False, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(4, 24);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.025, 101.010, 208.105, 308.250, 401.006);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(5, 11);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, 101.027, 203.035, 301.035, 403);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(5, 24);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.008, 101.015, 201.090, 321.105, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(2, 7);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, 101.020, 211.080, 337.115, 421);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(0, 10);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.025, 101, 207.070, 301.110, 401.030);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(2, 13);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.030, 101, 201.085, 308.110, 411);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(2, 10);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.025, 101, 207.105, 303.105, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(3, 9);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.028, 101, 208.050, 307.160, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(5, 22);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, 101, 205.050, 308.145, 405);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(2, 7);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, 101.015, 208.080, 301.095, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(2, 8);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.030, 101.030, 247.165, 305.125, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(2, 8);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.015, 101.015, 238.130, 308.070, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(4, 10);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, 101.016, 201.095, 301.100, 401.030);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(0, 3);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(5, False, 201.280, 305.110, 402);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(3, 30.130);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.035, 101, 207.170, 308.095, 401.045);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(5, 25);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, 101.020, 201.050, 303.060, 405);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(2, 4);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(3.020, 101.015, 208.075, 305.105, 405.065);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(4, 11);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.034, 101.018, False, 307.160, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(3, 15);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.011, 101, 208.110, 311.170, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(4, 19);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1, False, 201.110, 301.130, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(3, 22.140);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.015, 101, 208.105, 301.110, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(3, 19);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.013, 103.020, 207.160, 303.260, 405.003);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(5, 20);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(3.024, 101.018, 203.080, 303.150, 403);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(5, 22);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.017, 101, 207.200, 321.100, 451);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(0, 4);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1, 101, 207.150, 301.110, 401.025);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(4, 13);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.020, 107.015, 208.170, 301.135, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(5, 12);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(3.011, 101.016, 208.130, 303.165, 403.003);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(7, 27);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.015, 101.015, 221.105, 305.160, 401);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(1, 14);
		Abort;
		Event Player.IllIlIllIIIIlIIllIllIllIlI = Array(1.013, 103.015, 202.085, 303.110, 401.015);
		Event Player.lIllIIIIlIIlllIllIllIIIlII = Array(6, 12);
	}
}

rule("lIIlIlIlIlllIlllIllIllIIII")
{
	event
	{
		Subroutine;
		lllIIllIIIlIIllIIllIlllIlI;
	}

	actions
	{
		Global.IIIlIlllIllllIlllllllIIlII = Event Player.lllllIIlllIlllllIIlIIlllII;
		If(Event Player.lIlIlllIllIlIIIllllIllIlll[0]);
			If(Event Player.IIIlIllIlIIllIlIlllllIlIll == Empty Array);
				Small Message(Event Player, Custom String("Item cannot be rolled back"));
			Else;
				Big Message(Event Player, Custom String("Item rolled back"));
				If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] >= 2);
					Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Item rolled back!");
					Call Subroutine(llIlllIllIIllllIIIIIllIlII);
				End;
				For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 19, 1);
					Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + Global.lIIlllIllllIlIIIIlIllIIIlI] = Event Player.IIIlIllIlIIllIlIlllllIlIll[Global.lIIlllIllllIlIIIIlIllIIIlI];
				End;
				Event Player.IIIlIllIlIIllIlIlllllIlIll = Empty Array;
				Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
				Call Subroutine(lllIllIlIIllllIlIlIlllllll);
				Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
			End;
			Abort;
		End;
		If(Is True For All(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Global.IIIlIlllIllllIlllllllIIlII + 7, 4),
			Current Array Element == Event Player.IIlIlIlIIlIIIllIllIlIIllll[6 + Global.IIIlIlllIllllIlllllllIIlII]) && (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + 6] == 50 || !Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + 6])
			&& (
			Event Player.llllIIlIlllllllIIllIlIllII || Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 4 || !Event Player.IIlIIIIllllIllIIlIIIIlIlll)
			&& Is True For All(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, 11 + Global.IIIlIlllIllllIlllllllIIlII, 3),
			!Current Array Element || Current Array Element >= 7));
			Small Message(Event Player, Custom String("No stats to reroll"));
			Abort;
		End;
		Call Subroutine(IIIlIlllIlIIIlIlllIllIIllI);
		Event Player.IIllIIllIIIIIlIlIIllIllllI = Event Player.IIllIIllIllllllllIIlIIIIll;
		If(Event Player.IlIIllllIlllIllIIIllIlIlll < Event Player.lIllIIlIllllIlIIIllIIllIlI);
			Small Message(Event Player, Custom String("Not enough gold to reroll (cost: {0})", Event Player.lIllIIlIllllIlIIIllIIllIlI));
			Abort;
		End;
		If(Event Player.IlllIlIIIIIlIlllIIIIlIllll < Event Player.IIllIIllIIIIIlIlIIllIllllI);
			Call Subroutine(IlllIIIIlIIlIIIIllllllllIl);
			Abort;
		End;
		Call Subroutine(IIIllIlIIllIllllIIIlllIlIl);
		Event Player.IlIIllllIlllIllIIIllIlIlll -= Event Player.lIllIIlIllllIlIIIllIIllIlI;
		Event Player.IIIlIllIlIIllIlIlllllIlIll = Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Global.IIIlIlllIllllIlllllllIIlII,
			19);
		If(Event Player.llllIIlIlllllllIIllIlIllII);
			Global.lIIlllIllllIlIIIIlIllIIIlI = Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Global.IIIlIlllIllllIlllllllIIlII + 2, 4);
		Else;
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + 2] = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + 2] % 2;
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + 5] = (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + 5] == True) * 1;
			Global.lIIlllIllllIlIIIIlIllIIIlI = Randomized Array(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll,
				Global.IIIlIlllIllllIlllllllIIlII + 2, 4));
		End;
		Global.IIIIlllIIIIlIIIlIIIIllllIl = 0;
		For Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, 6, 11, 1);
			Global.IIIIlllIIIIlIIIlIIIIllllIl += Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + Global.IlllllIIlIIllIlIlIIIlIlIlI];
		End;
		If(Global.IIIIlllIIIIlIIIlIIIIllllIl >= 250);
			Global.llIlIIlIlIlIllIllllIllIllI = Array(50, 50, 50, 50, 50);
		Else;
			Global.llIlIIlIlIlIllIllllIllIllI = Array(0, 0, 0, 0, 0);
			For Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, 0, 67, 1);
				Global.lIIIIIllllIlIIIIlIIIlIIIll = Random Value In Array(Filtered Array(Array Slice(Global.llIlIlIllIIllIlIlllIIlllIl, 0, 5),
					Global.llIlIIlIlIlIllIllllIllIllI[Current Array Element] < 50));
				Global.lIlIlIIlIIIIlIllIIllllllll = Round To Integer(Global.IIIIlllIIIIlIIIlIIIIllllIl * 0.050, Up);
				Global.llIlIIlIlIlIllIllllIllIllI[Global.lIIIIIllllIlIIIIlIIIlIIIll] += Global.lIlIlIIlIIIIlIllIIllllllll;
				Global.IIIIlllIIIIlIIIlIIIIllllIl -= Global.lIlIlIIlIIIIlIllIIllllllll;
				If(Global.llIlIIlIlIlIllIllllIllIllI[Global.lIIIIIllllIlIIIIlIIIlIIIll] > 50);
					Global.IIIIlllIIIIlIIIlIIIIllllIl += Global.llIlIIlIlIlIllIllllIllIllI[Global.lIIIIIllllIlIIIIlIIIlIIIll] - 50;
					Global.llIlIIlIlIlIllIllllIllIllI[Global.lIIIIIllllIlIIIIlIIIlIIIll] = 50;
				End;
				If(Global.IIIIlllIIIIlIIIlIIIIllllIl <= 0);
					Break;
				End;
			End;
		End;
		Modify Global Variable(lIIlllIllllIlIIIIlIllIIIlI, Append To Array, Global.llIlIIlIlIlIllIllllIllIllI);
		Big Message(Event Player, Custom String("Item rerolled"));
		If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] >= 2);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Item rerolled!");
			Call Subroutine(llIlllIllIIllllIIIIIllIlII);
		End;
		For Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, 0, 9, 1);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[2 + Global.IIIlIlllIllllIlllllllIIlII + Global.IlllllIIlIIllIlIlIIIlIlIlI] = Global.lIIlllIllllIlIIIIlIllIIIlI[Global.IlllllIIlIIllIlIlIIIlIlIlI];
		End;
		If(!Event Player.llllIIlIlllllllIIllIlIllII);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + 2] += Event Player.llIIllIlIlIlIIlllIllllIIIl * 2;
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIIlIlllIllllIlllllllIIlII + 5] *= 2;
		End;
		For Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, Global.IIIlIlllIllllIlllllllIIlII + 11, Global.IIIlIlllIllllIlllllllIIlII + 14, 1);
			If(
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IlllllIIlIIllIlIlIIIlIlIlI] && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IlllllIIlIIllIlIlIIIlIlIlI] < 7);
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IlllllIIlIIllIlIlIIIlIlIlI] = Random Integer(1, 6);
			End;
		End;
		Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
		Call Subroutine(lllIllIlIIllllIlIlIlllllll);
		Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
		Event Player.lIlIlllIllIlIIIllllIllIlll[4] = True;
		Call Subroutine(IIlIllIIllIlIIIIlIIIIllIll);
	}
}

rule("IllIllIIllIIIlllIIIIllIIlI")
{
	event
	{
		Subroutine;
		lIIIllIlIlIIllIlIIlIlIIlIl;
	}

	actions
	{
		Abort If(!Global.IlllIlllllIIllIlIlIIlIllll[3]);
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI % 1);
			Play Effect(Event Player, Good Explosion, Array(Color(Lime Green), Color(Turquoise), Color(Blue))
				[Global.IlllllIIlIIllIlIlIIIlIlIlI % 1 * 10 - 1], Global.IIIIlllIIIIlIIIlIIIIllllIl, 1);
			Abort;
		End;
		Play Effect(Event Player, Good Explosion, Array(Color(Yellow), Color(White), Color(Green), Color(Blue), Color(Purple), Color(
			Orange), Color(Red), Color(Aqua), Color(Orange))[Global.IlllllIIlIIllIlIlIIIlIlIlI - 1], Global.IIIIlllIIIIlIIIlIIIIllllIl, 1);
	}
}

rule("lIIIllIIlIllIIIIllIlIIlIIl")
{
	event
	{
		Subroutine;
		lIllIlIlIllIIIIIlIlllIllIl;
	}

	actions
	{
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 8);
			If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 17] % 100 < 30);
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 18] = Array(Custom String("Hellslayer"), Custom String(
					"Baranar's Star"), Custom String("Guardian Angel"), Custom String("Jalal's Mane"), Custom String("The Cranium Basher"),
					Custom String("Tyrael's Might"), Custom String("Windforce"), Custom String("Arreat's Face"), Custom String("Ghostflame"),
					Custom String("Arkaine's Valor"), Custom String("The Oculus"), Custom String("Que-Hegan's Wisdom"), Custom String(
					"Gore Rider"), Custom String("The Minotaur"), Custom String("Ribcracker"), Custom String("Rattlecage"), Custom String(
					"Thunderstroke"), Custom String("Azurewrath"), Custom String("Blade of Ali Baba"), Custom String("Spire of Honor"),
					Custom String("Frostburn"), Custom String("Nightsmoke"), Custom String("The Gladiator's Bane"), Custom String("Wizardspike"),
					Custom String("The Ward"), Custom String("Herald of Zakarum"), Custom String("Nightwing's Veil"), Custom String("Toothrow"),
					Custom String("Buriza-Do Kyanon"), Custom String("Stormspire"), Custom String("Harlequin Crest"), Custom String(
					"Vampire Gaze"))[Index Of Array Value(All Heroes, Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI])];
			Else;
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 18] = Array(Custom String("The Ultimate Weapon"),
					Custom String("Lightsaber"), Custom String("Soul Crusher"), Custom String("Dragon Slayer"), Custom String("Yawarakai-Te"),
					Custom String("Blade Of the Immortal"), Custom String("Arm Cannon"), Custom String("Progressive Knife"), Custom String(
					"Juuchi Yosamu"), Custom String("Blood Scythe"), Custom String("Thunderfury, Blessed Blade of the Windseeker"), Custom String(
					"Master Sword"), Custom String("Galatine"), Custom String("Q Weapon"), Custom String("Sulfuras, Hand of Ragnaros"),
					Custom String("Mega Buster"), Custom String("Excalibur"), Custom String("Laevateinn"), Custom String("Swiss Army Knife"),
					Custom String("Aiglos"), Custom String("Tell's Crossbow"), Custom String("Hero's Bow"), Custom String("Ashbringer"),
					Custom String("Spear Of Longinus"), Custom String("Phaser"), Custom String("Bovine Bardiche"), Custom String(
					"Ice Queen's Tiara"), Custom String("Sword of Damascus"), Custom String("Frostmourne"), Custom String("Ghost"), Custom String(
					"Shadow"), Custom String("Spirit"))
					[Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 17] % 100 - 31];
			End;
			Event Player.lIllIIlIllllIlIIIllIIllIlI = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 18];
			Abort;
		End;
		If(
			Event Player.IIIlIlIllIlllIllllIlIllIll >= 100 || Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 5] > 2 || (
			Global.IlllllIIlIIllIlIlIIIlIlIlI == 1 && Event Player.IIIlIlIllIlllIllllIlIllIll >= 60 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 17] % 100 >= 26)
			|| Global.IlllllIIlIIllIlIlIIIlIlIlI >= 5);
			Global.lIlIlIIlIIIIlIllIIllllllll = 2000;
		Else;
			Global.lIlIlIIlIIIIlIllIIllllllll = (Global.IlllllIIlIIllIlIlIIIlIlIlI - 1) * 500;
		End;
		For Global Variable(IIIlIlllIllllIlllllllIIlII, 11, 14, 1);
			Global.lIlIlIIlIIIIlIllIIllllllll += (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.IIIlIlllIllllIlllllllIIlII + 3] + 1) * (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.IIIlIlllIllllIlllllllIIlII] == True) * 80;
		End;
		For Global Variable(IIIlIlllIllllIlllllllIIlII, 6, 11, 1);
			Global.lIlIlIIlIIIIlIllIIllllllll += Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.IIIlIlllIllllIlllllllIIlII] * 20;
		End;
		If(
			Global.IlllllIIlIIllIlIlIIIlIlIlI == 1 && Event Player.IIIlIlIllIlllIllllIlIllIll >= 60 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 17] % 100 >= 26);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[18 + Global.lIIlllIllllIlIIIIlIllIIIlI] = Global.lIlIlIIlIIIIlIllIIllllllll + 3000 + (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 13] >= 7) * (-2400 + (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[13 + Global.lIIlllIllllIlIIIIlIllIIIlI] - 6) * 10000) + (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 13] && Event Player.IIlIlIlIIlIIIllIllIlIIllll[13 + Global.lIIlllIllllIlIIIIlIllIIIlI] <= 6)
				* 87599;
		Else;
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 18] = Round To Integer(Array(0.010, 0.025, 0.050,
				0.150, 0.500, 1, 1)[Global.IlllllIIlIIllIlIlIIIlIlIlI - 1] * (Global.lIlIlIIlIIIIlIllIIllllllll + (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 17] % 100 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 17] % 100 != 26)
				* 599), To Nearest) + 5 * (Global.IlllllIIlIIllIlIlIIIlIlIlI <= 1);
		End;
		Event Player.lIllIIlIllllIlIIIllIIllIlI = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + 18];
	}
}

rule("IlIIllIlIllIllIlllIIIIllll")
{
	event
	{
		Subroutine;
		lIlIlIIIIllllIlIIIIIIlllIl;
	}

	actions
	{
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI % 1);
			Global.lIIlllIllllIlIIIIlIllIIIlI = Global.IlllllIIlIIllIlIlIIIlIlIlI % 1 * 10 - 1;
			Skip(Round To Integer(Global.lIIlllIllllIlIIIIlIllIIIlI / 2, Down) * 2);
			Create Effect(Event Player, Sphere, Array(Color(Lime Green), Color(Aqua))[Global.lIIlllIllllIlIIIIlIllIIIlI],
				Global.IIIIlllIIIIlIIIlIIIIllllIl, 0.300, None);
			Abort;
			Create Effect(Event Player, Orb, Color(Blue), Global.IIIIlllIIIIlIIIlIIIIllllIl, 0.300, None);
			Abort;
		End;
		Skip(Round To Integer(Global.IlllllIIlIIllIlIlIIIlIlIlI / 8, Down) * 2);
		Create Effect(Event Player, Sphere, Array(Color(Yellow), Color(White), Color(Green), Color(Blue), Color(Purple), Color(Orange),
			Color(Red))[Global.IlllllIIlIIllIlIlIIIlIlIlI - 1], Global.IIIIlllIIIIlIIIlIIIIllllIl, 0.300, None);
		Abort;
		Create Effect(Event Player, Orb, Array(Color(Aqua), Color(Orange))[Global.IlllllIIlIIllIlIlIIIlIlIlI - 8],
			Global.IIIIlllIIIIlIIIlIIIIllllIl, 0.300, None);
	}
}

rule("llIllIIIIlIIlIllIIlIlllIII")
{
	event
	{
		Subroutine;
		llIlIIlIlIllIIIIlllIIIlIlI;
	}

	actions
	{
		Skip(7 * (Global.IlllllIIlIIllIlIlIIIlIlIlI != 7) - 4 * (Global.IlllllIIlIIllIlIlIIIlIlIlI == 5.300));
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Primal Drop!");
		Big Message(Event Player, Custom String("Primal Drop!"));
		Skip(2);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Arcane Crystal Fragment Drop!");
		Big Message(Event Player, Custom String("Arcane Crystal Fragment Drop!"));
		Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
		Call Subroutine(llIlllIllIIllllIIIIIllIlII);
	}
}

rule("llIIIlIIIllIlIllllIIlIIlll")
{
	event
	{
		Subroutine;
		IIIlIlllIlIIIlIlllIllIIllI;
	}

	actions
	{
		If(
			!Event Player.IIlIIIIllllIllIIlIIIIlIlll && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 11] && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 11] <= 6);
			Event Player.lIllIIlIllllIlIIIllIIllIlI = 3000;
			Event Player.IIllIIllIllllllllIIlIIIIll = 3;
			Abort;
		End;
		Event Player.lIllIIlIllllIlIIIllIIllIlI = Round To Integer(Array(2.500, 12.500, 87.500, 200, 750, 750, 1500, 1500)
			[Event Player.IIlIIIIllllIllIIlIIIIlIlll] * (1 + Event Player.llIlIIIlIlIIlIIIllllIlllII * 0.020 / 1.200), To Nearest);
		Event Player.IIllIIllIllllllllIIlIIIIll = Max(1, Round To Integer(Event Player.IIlIIIIllllIllIIlIIIIlIlll * 0.300, Up));
	}
}

rule("IlIIlIllIIlIlIIIIIlIlIIllI")
{
	event
	{
		Subroutine;
		IlIIlllIllIIllIIIIlIlIllll;
	}

	actions
	{
		Event Player.IIllIIllIIIIIlIlIIllIllllI = Array(1, 2, 3, 4, 2, 2, 2, 2)[Event Player.IIlIIIIllllIllIIlIIIIlIlll];
		If(Event Player.IIlIIIIllllIllIIlIIIIlIlll < 4);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll = Round To Integer(71.016 * 4 ^ Event Player.IIlIIIIllllIllIIlIIIIlIlll * (
				0.500 + Event Player.llIlIIIlIlIIlIIIllllIlllII * 0.010), To Nearest);
			Abort;
		End;
		Event Player.lIlIlIIIIllIlllIIIIIlIlIll = 0;
		For Global Variable(IIllIIIlIllIlIlllIlllIlllI, 6, 11, 1);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll += 1 * Max(0,
				50 - Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIllIIIlIllIlIlllIlllIlllI + Event Player.lllllIIlllIlllllIIlIIlllII]);
		End;
		For Global Variable(IIllIIIlIllIlIlllIlllIlllI, Event Player.lllllIIlllIlllllIIlIIlllII + 11,
			Event Player.lllllIIlllIlllllIIlIIlllII + 14, 1);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll += 1 * (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIllIIIlIllIlIlllIlllIlllI] < 7 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIllIIIlIllIlIlllIlllIlllI] > 0)
				* Max(0, 9 - Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.IIllIIIlIllIlIlllIlllIlllI + 3]);
		End;
		End;
		If(!Event Player.lIlIlIIIIllIlllIIIIIlIlIll);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll = 0;
			Abort;
		End;
		If(Event Player.lIlIlIIIIllIlllIIIIIlIlIll > 50);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll = 200;
			Abort;
		End;
		Event Player.lIlIlIIIIllIlllIIIIIlIlIll = 200 + Round To Integer((51 - Event Player.lIlIlIIIIllIlllIIIIIlIlIll) ^ 3 / 10000, Up)
			* 100;
	}
}

rule("IIlIlllllIlIIIllllIlIIIIII")
{
	event
	{
		Subroutine;
		llIIIlIIIIllIlIllIIllllIlI;
	}

	actions
	{
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Event Player.IIlIIIIllllIllIIlIIIIlIlll + 1;
		Global.llIlIIlIlIlIllIllllIllIllI = Random Integer(0, 9);
		Global.llIlIIlIlIlIllIllllIllIllI = 1 + 1 * (Global.llIlIIlIlIlIllIllllIllIllI >= 6) + 3 * (
			Global.llIlIIlIlIlIllIllllIllIllI >= 9);
		Event Player.lIIllllIlIIIllIIllllIIIlll = Random Integer(6, 10);
		Event Player.lIlIlIIIIllIlllIIIIIlIlIll = Array(Custom String("Sol"), Custom String("Nef"), Custom String("Io"), Custom String(
			"Shael"), Custom String("El"), Custom String("Fal"), Custom String("Pul"), Custom String("Dol"), Custom String("Ko"),
			Custom String("Gul"), Custom String("Ohm"), Custom String("Ber"), Custom String("Jah"), Custom String("Cham"), Custom String(
			"Vex"))[(Round To Integer(Global.llIlIIlIlIlIllIllllIllIllI * 0.550, Up) - 1)
			* 5 + Event Player.lIIllllIlIIIllIIllllIIIlll - 6];
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Global.llIlIIlIlIlIllIllllIllIllI;
		Event Player.lIlIlllIIlIlllIIIIllIIlIlI = Global.IIlIlllIlIIIIllIIlIlIlIlll[5][Event Player.lIIllllIlIIIllIIllllIIIlll - 6];
		Big Message(Event Player, Custom String("{0} Rune: +{1} {2}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll,
			Event Player.llIlIIllIIIIIIIIlIlIlIIlII, Event Player.lIlIlllIIlIlllIIIIllIIlIlI));
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] = False;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("{0} Rune: ", Event Player.lIlIlIIIIllIlllIIIIIlIlIll);
		If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] >= 2);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("{0} Rune: +{1} {2}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll,
				Event Player.llIlIIllIIIIIIIIlIlIlIIlII, Event Player.lIlIlllIIlIlllIIIIllIIlIlI);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] = True;
		End;
		If(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + Event Player.lIIllllIlIIIllIIllllIIIlll] < 50);
			Event Player.IIIlIllIlIIllIlIlllllIlIll = Empty Array;
		End;
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + Event Player.lIIllllIlIIIllIIllllIIIlll] += Global.llIlIIlIlIlIllIllllIllIllI;
		If(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + Event Player.lIIllllIlIIIllIIllllIIIlll] > 50);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5] = (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + Event Player.lIIllllIlIIIllIIllllIIIlll] - 50)
				* (0.050 * (Event Player.llIlIIIlIlIIlIIIllllIlllII / 3 + 1) ^ 2 + (Event Player.llIlIIIlIlIIlIIIllllIlllII / 3 + 1) * 0.950);
			Event Player.llIIIIIIllIIlIIlIlIIIIllII += Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5] * (1 - (
				Event Player.llllIIlIlllllllIIllIlIllII == True) * 0.900);
			If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] == 1);
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("{0}{1} EXP (+0%)", Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3],
					Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5]);
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] = True;
			Else;
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("{0} / {1} EXP (+0%)", Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3],
					Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5]);
			End;
		End;
		If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4]);
			Call Subroutine(llIlllIllIIllllIIIIIllIlII);
		End;
		If(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + Event Player.lIIllllIlIIIllIIllllIIIlll] > 50);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + Event Player.lIIllllIlIIIllIIllllIIIlll] = 50;
			Call Subroutine(IlllllIlIllllIIlllIllllllI);
		End;
		Global.lIIlllIllllIlIIIIlIllIIIlI = Event Player.lllllIIlllIlllllIIlIIlllII;
		Call Subroutine(lIllIlIlIllIIIIIlIlllIllIl);
		Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
	}
}

rule("lIllIIIlllIlIIIIlIIllIlIlI")
{
	event
	{
		Subroutine;
		lIIlIlIIlIlIIllIllIIlIIIlI;
	}

	actions
	{
		Create HUD Text(All Players(Team 2), Custom String(
			"Calibration failed!\r\nPlease try again with default settings.\r\nYou may deselect maps to play on a specific map."), Null,
			Null, Top, -2, Color(Red), Null, Null, Visible To, Default Visibility);
		Global.IllIIlIllllIIIllIlllIIlIIl = 4;
	}
}

rule("lllIIlllIlIlIlIlIlIIlllIlI")
{
	event
	{
		Subroutine;
		lIIllllIIIlIlIIIIllIIIIIll;
	}

	actions
	{
		Global.IlllllIIlIIllIlIlIIIlIlIlI = Event Player.llIIIlllIIIlllllIIllIIIIIl[Global.lIIIIIllllIlIIIIlIIIlIIIll] % 10;
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI >= 2 && !(Global.IlllllIIlIIllIlIlIIIlIlIlI % 1)
			&& Event Player.lIlIIlIlIlIIIlIlllllIlIIII >= 5);
			Small Message(Event Player, Custom String("Inventory full"));
			Abort;
		End;
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 5.300);
			If(Event Player.llllIIlIlllllllIIllIlIllII && Event Player.IIlIIllIIIllIllllIIIIlIIll < 5 && (
				Event Player.IIllIIlIIllIIlIIlIlllIIllI || Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 4));
				If(Event Player.IllIIIIlIlIIlIIllIllIIIlll < 9);
					Event Player.IllIIIIlIlIIlIIllIllIIIlll += 1;
					Big Message(Event Player, Custom String("Infused item with Arcane Crystal Fragment ({0}/9)",
						Event Player.IllIIIIlIlIIlIIllIllIIIlll));
					Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 3] = Event Player.IllIIIIlIlIIlIIllIllIIIlll;
					If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] >= 2);
						Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Infused item with Arcane Crystal Fragment ({0}/9)",
							Event Player.IllIIIIlIlIIlIIllIllIIIlll);
						Call Subroutine(llIlllIllIIllllIIIIIllIlII);
					End;
				Else;
					Small Message(Event Player, Custom String("Item cannot be infused with more Arcane Crystals Fragments"));
					Abort;
				End;
			Else;
				Small Message(Event Player, Event Player.IIlIIllIIIllIllllIIIIlIIll >= 5 ? Custom String(
					"Item has reached maximum enchantment level") : Custom String("Item does not meet requirements"));
				Abort;
			End;
		End;
		Global.IIIIlllIIIIlIIIlIIIIllllIl += Global.lllIllIlIlllIIIIlIIlIIllII;
		Call Subroutine(lIIIllIlIlIIllIlIIlIlIIlIl);
		Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 75);
		Destroy Effect(Event Player.IIIlIlIIlllIIlIIlllIIIIlII[Global.lIIIIIllllIlIIIIlIIIlIIIll]);
		Event Player.lIIIlIIIlllllIIllIllIIIIll -= 1;
		Event Player.lIIIIllIIIIIlIIIIllllIlIlI[Global.lIIIIIllllIlIIIIlIIIlIIIll] = Global.lIllIIlIlIIIIIlIIIlIlIlllI;
		Event Player.llIlIlIllIIllIlllIlIIlIllI[Global.lIIIIIllllIlIIIIlIIIlIIIll] = 0;
		Event Player.lIIIIIlIlIllIlIIIIIlIlIIlI = First Of(Sorted Array(Remove From Array(Event Player.llIlIlIllIIllIlllIlIIlIllI, 0),
			Current Array Element));
		If(!Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4]);
			Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
		End;
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 1);
			Event Player.lIIllllIlIIIllIIllllIIIlll = Event Player.IlIIllIlllllIlIIlIlIlllllI[Global.lIIIIIllllIlIIIIlIIIlIIIll];
			Event Player.IlIIllllIlllIllIIIllIlIlll = Min(Event Player.IlIIllllIlllIllIIIllIlIlll + Event Player.lIIllllIlIIIllIIllllIIIlll,
				Global.IIlllIIIIIllIlIllIlIlllIII);
			Small Message(Event Player, Custom String("Picked up {0} gold", Event Player.lIIllllIlIIIllIIllllIIIlll));
			If(Event Player.lIlllllllllIllllIIIIlllIlI == 4);
				Call Subroutine(llIIIllllIlIllIlIIIlIlIIIl);
			End;
			Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Picked up {0} gold", Event Player.lIIllllIlIIIllIIllllIIIlll);
			Call Subroutine(llIlllIllIIllllIIIIIllIlII);
			Abort;
		End;
		If(!(Global.IlllllIIlIIllIlIlIIIlIlIlI % 1));
			Global.IlllllIIlIIllIlIlIIIlIlIlI -= 1;
			Event Player.lIIllllIlIIIllIIllllIIIlll = Random Value In Array(All Heroes);
			Event Player.lIllIIIIlIIlllIllIllIIIlII = 0.220 + 0.013 * Event Player.IlIIllIlllllIlIIlIlIlllllI[Global.lIIIIIllllIlIIIIlIIIlIIIll] * 3;
			Event Player.lIlIIlIlIlIIIlIlllllIlIIII += 1;
			Event Player.IlIllIIlllllllllIIIIllllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII * 19;
			Global.lIIlllIllllIlIIIIlIllIIIlI = Event Player.IlIllIIlllllllllIIIIllllll;
			Event Player.IlIlIIIlIIllIIIIllIlIIllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII;
			Call Subroutine(lIIlllIIlIIlIlIIllIllIIIIl);
			Abort;
		End;
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 4.200);
			Call Subroutine(llIIIlIIIIllIlIllIIllllIlI);
			Abort;
		End;
		If(Global.IlllllIIlIIllIlIlIIIlIlIlI == 4.100);
			Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
			Global.llIlIIlIlIlIllIllllIllIllI = Random Integer(0, 9);
			Global.llIlIIlIlIlIllIllllIllIllI = 2 + (Global.llIlIIlIlIlIllIllllIllIllI >= 6) * 3 + (Global.llIlIIlIlIlIllIllllIllIllI >= 9)
				* 5;
			Event Player.IIIllIIllIIIIllIlIlIIIIIII = Max(Event Player.IIIllIIllIIIIllIlIlIIIIIII + Global.llIlIIlIlIlIllIllllIllIllI * 60,
				Total Time Elapsed + Global.llIlIIlIlIlIllIllllIllIllI * 60);
			Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Global.llIlIIlIlIlIllIllllIllIllI;
			Big Message(Event Player, Custom String("Lucky Charm - Experience & Magic Find Bonus: {0} Minutes",
				Event Player.llIlIIllIIIIIIIIlIlIlIIlII));
			Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Lucky Charm: +{0} seconds",
				60 * Event Player.llIlIIllIIIIIIIIlIlIlIIlII);
			Call Subroutine(llIlllIllIIllllIIIIIllIlII);
			Abort;
		End;
	}
}

rule("llllIlIllIllIlllIIIIIlllIl")
{
	event
	{
		Subroutine;
		lIlIIlIllllllIIllllllIIIIl;
	}

	actions
	{
		Skip((Event Player.lIlllllllllIllllIIIIlllIlI - 6) * 2);
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 50);
		Skip(3);
		Play Effect(Event Player, Explosion Sound, Null, Event Player, 50);
		Skip(1);
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 50);
		If(Global.IlllIlllllIIllIlIlIIlIllll[3]);
			Play Effect(Event Player, Good Pickup Effect, Array(Color(Sky Blue), Color(Red), Color(Green))
				[Event Player.lIlllllllllIllllIIIIlllIlI - 6], Event Player.IIIllIIlIlIIIlllllllIIIlIl + Vector(0, 1, 0) * Array(0, 2.500,
				1.500)[Event Player.lIlllllllllIllllIIIIlllIlI - 6], True);
		End;
		If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] >= 2);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("{0} ({1}/{2})", Array(Custom String("Crystals charged with Moonlight"),
				Custom String("Demonic Portals closed"), Custom String("Corruption Tumors destroyed"))
				[Event Player.lIlllllllllIllllIIIIlllIlI - 6], Event Player.IIIIlllIllIIIllIllIlIlIlll + 1,
				Event Player.IllllIIlllllIIllIIllIlIlIl);
			Call Subroutine(llIlllIllIIllllIIIIIllIlII);
		End;
		Call Subroutine(llIIIllllIlIllIlIIIlIlIIIl);
		If(Event Player.IIIIlllIllIIIllIllIlIlIlll < Event Player.IllllIIlllllIIllIIllIlIlIl);
			Call Subroutine(IIIlIlllIIIIIllIlIllIIlIII);
		Else;
			Event Player.IIIllIIlIlIIIlllllllIIIlIl = Global.lIllIIlIlIIIIIlIIIlIlIlllI;
			Destroy Effect(Event Player.IlIlIlIIIlIIlIIlIlIlIIllll);
		End;
		Abort If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4] > 1);
		Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
	}
}

rule("IlIIlIllIIllllllllIlIlIllI")
{
	event
	{
		Subroutine;
		IIlllllIllIIlIIIIIlllIlIIl;
	}

	actions
	{
		Global.lIIIIIllllIlIIIIlIIIlIIIll = 1 + Event Player.lIIllIIIlIlIlIllIIIlIllIII * 0.001;
		Global.llIlIIlIlIlIllIllllIllIllI = 1;
		If(Random Real(0, 10000) <= Global.lIIIIIllllIlIIIIlIIIlIIIll);
			Global.IlllllIIlIIllIlIlIIIlIlIlI = 8;
		Else;
			Global.IlllllIIlIIllIlIlIIIlIlIlI = 2;
			Call Subroutine(llIlIlllIIIIIlIIllIlIIIIlI);
			Global.IlllllIIlIIllIlIlIIIlIlIlI += 1 * (
				Global.IlllllIIlIIllIlIlIIIlIlIlI == 5 && Event Player.IIIlIlIllIlllIllllIlIllIll > 59 && Random Integer(0, 23)
				< Round To Integer(Global.lIIIIIllllIlIIIIlIIIlIIIll, Down));
		End;
		Event Player.lIIllllIlIIIllIIllllIIIlll = Random Value In Array(All Heroes);
		Event Player.lIlIIlIlIlIIIlIlllllIlIIII += 1;
		Event Player.IlIllIIlllllllllIIIIllllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII * 19;
		Global.lIIlllIllllIlIIIIlIllIIIlI = Event Player.IlIllIIlllllllllIIIIllllll;
		Event Player.IlIlIIIlIIllIIIIllIlIIllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII;
		Call Subroutine(lIIlllIIlIIlIlIIllIllIIIIl);
	}
}

rule("llIlIllIIIIlIIIlIIlllIIlIl")
{
	event
	{
		Subroutine;
		llIlIlllIIIIIlIIllIlIIIIlI;
	}

	actions
	{
		Global.IlIIlIIIlllIIlIllIIIIIllIl = Global.lIIIIIllllIlIIIIlIIIlIIIll * Array(200, 210, 265, 275, 285)
			[Global.llIlIIlIlIlIllIllllIllIllI];
		For Global Variable(IIIIlllIIIIlIIIlIIIIllllIl, 0, 3, 1);
			If(Random Real(0, 1000) > Global.IlIIlIIIlllIIlIllIIIIIllIl);
				Break;
			End;
			Global.IlllllIIlIIllIlIlIIIlIlIlI += 1;
		End;
	}
}

rule("IIIIlllIlIlIIlIIIlIIIIlIlI")
{
	event
	{
		Subroutine;
		lIIlIllllIIlIlIIIIIIlIIlII;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Abort If(Global.lIlIIlIIlIlIIlIlllllIlIIII.lllIlIIllIIllIIIIlllIIllII >= 3 || Global.lIIlIlIlllllIllIIllIlllIIl <= 0);
		Small Message(All Players(Team 2), Global.lIIlIlIlllllIllIIllIlllIIl > 1 ? Custom String("{0} Stones of Jordan sold to merchants",
			Global.lIIlIlIlllllIllIIllIlllIIl) : Custom String("1 Stone of Jordan sold to merchants", Global.lIIlIlIlllllIllIIllIlllIIl));
	}
}

rule("IlIIIIIlIlIlIIllIIlIIIlIll")
{
	event
	{
		Subroutine;
		IlIllIIIIIlIlIIllIIIlllIll;
	}

	actions
	{
		Event Player.lIIIIlIlIIlIIlIllllllIIllI = Total Time Elapsed + (Is Dead(Event Player) ? 1.500 : (
			Event Player.lllIlIIllIIllIIIIlllIIllII ^ 2 + 1) * 20);
	}
}

rule("IlIIlIIIlllIIIlllIIIIIllII")
{
	event
	{
		Subroutine;
		lIIlIIlIlllIIlllIlIllIllIl;
	}

	actions
	{
		Abort If(!Global.IlllIlllllIIllIlIlIIlIllll[4]);
		Play Effect(All Players(Team 2), Good Pickup Effect, Color(White), Position Of(Event Player) + Up, True);
	}
}

rule("lllllIlIlIIllllIllIIIlIIlI")
{
	event
	{
		Subroutine;
		lllIlllIIIlIllllIIIIIIlIlI;
	}

	actions
	{
		Play Effect(All Players(Team 2), Buff Explosion Sound, Null, Event Player, 50);
	}
}

rule("IlllIllIIIIlIlIlIllllIllII")
{
	event
	{
		Subroutine;
		llIIlIllIllIIIIlIlllIlIlll;
	}

	actions
	{
		Abort If(Global.IllIIlIllllIIIllIlllIIlIIl > 2);
		Global.IllIIlIllllIIIllIlllIIlIIl = 3;
		Global.IIlIlllIlIIIIllIIlIlIlIlll = Array Slice(Global.IIlIlllIlIIIIllIIlIlIlIlll, 0, 7);
		Destroy Dummy Bot(Team 2, Slot Of(Global.IIIllIIlllIlllllllllIlIllI));
		Destroy Dummy Bot(Team 1, Slot Of(Event Player));
	}
}

rule("llIllllIlIIIllIIIllIllIIIl")
{
	event
	{
		Subroutine;
		IlllIlIIIIIllllIlllllIlllI;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 16000);
		Set Status(Global.IIIllIIlllIlllllllllIlIllI, Null, Unkillable, 16000);
		Start Facing(Event Player, Global.IIlIllIIllIIlIllIIIIIIIIlI * -1, 1080, To World, None);
		Start Facing(Global.IIIllIIlllIlllllllllIlIllI, Global.IllIllllIIIIllIIIIIIIlIIIl * -1, 1080, To World, None);
		Wait(0.500, Ignore Condition);
		Start Throttle In Direction(Event Player, Global.IIlIllIIllIIlIllIIIIIIIIlI, 1, To World, Replace existing throttle, None);
		Start Throttle In Direction(Global.IIIllIIlllIlllllllllIlIllI, Global.IllIllllIIIIllIIIIIIIlIIIl, 1, To World,
			Replace existing throttle, None);
		Start Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Global.IIIllIIlllIlllllllllIlIllI, Button(Primary Fire));
		Wait(0.250, Ignore Condition);
		Global.IIlIlllIlIIIIllIIlIlIlIlll[7] = Array(250, 150, 200, 200, 250, 450, 200, 400, 175, 300, 200, 225, 200, 550, 225, 200, 325,
			200, 200, 500, 250, 200, 300, 200, 400, 200, 200, 550, 200, 200, 200, 200, 200, 300, 400, 300, 225, 500, 200);
		Global.IIlIlllIlIIIIllIIlIlIlIlll[8] = Array(8, 40, 25, False, 18, False, 6, 100, 35, 25, 100, 25, 30, 6, 6, 5, 100, 30, 20, False,
			120, 60, 4, 15, False, False, False, 80, 45, 12, 12, 36, False, 8, False, 100, False, False, 16);
		Global.IIlIlllIlIIIIllIIlIlIlIlll[11] = Array(4.950, 5.400, 4.950, 3.465, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950,
			5.400, 4.950, 4.950, 4.950, 4.950, 4.950, 6.188, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950,
			4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.950, 4.210, 4.950);
		Global.IIlIlllIlIIIIllIIlIlIlIlll[12] = Array(False, False, False, False, 21.430, 30, False, 30, False, 30, False, False, False,
			False, False, False, False, False, False, 30, False, False, False, False, 30, 21.430, False, False, False, False, False, False,
			False, False, False, 30, False, 30);
		Global.IIlIlllIlIIIIllIIlIlIlIlll[13] = Array(5, 16, 16, 20, 18, 17, 19, 17, 22, 16, 20, 19, 20, 16, 20, 20, 18, 19, 19, 18, 20,
			21, 18, 19, 17, 15, 18, 19, 19, 19, 20, 19, 19, 17, 18, 17, 20, 17, 19);
		While(Event Player.IIIllIlIIIIlIlllIlllIlIIlI < Count Of(All Heroes));
			Start Forcing Player To Be Hero(Event Player, All Heroes[Event Player.IIIllIlIIIIlIlllIlllIlIIlI]);
			Start Forcing Player To Be Hero(Global.IIIllIIlllIlllllllllIlIllI, All Heroes[Event Player.IIIllIlIIIIlIlllIlllIlIIlI]);
			Set Weapon(Global.IIIllIIlllIlllllllllIlIllI, 1 + 1 * (Hero Of(Event Player) == Hero(Mercy)));
			Teleport(Event Player, Global.IIlIlllIlIIIIllIIlIlIlIlll[10]);
			Teleport(Global.IIIllIIlllIlllllllllIlIllI, Global.IIlIlllIlIIIIllIIlIlIlIlll[9]);
			Wait(0.250, Ignore Condition);
			If(Max Health(Event Player) != Global.IIlIlllIlIIIIllIIlIlIlIlll[7][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] || Max Health(
				Global.IIIllIIlllIlllllllllIlIllI) != Global.IIlIlllIlIIIIllIIlIlIlIlll[7][Event Player.IIIllIlIIIIlIlllIlllIlIIlI]);
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			If(Max Ammo(Event Player, 0) != Global.IIlIlllIlIIIIllIIlIlIlIlll[8][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] || Max Ammo(
				Global.IIIllIIlllIlllllllllIlIllI, 0) != Global.IIlIlllIlIIIIllIIlIlIlIlll[8][Event Player.IIIllIlIIIIlIlllIlllIlIIlI]);
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			Damage(Event Player, Null, 100);
			Damage(Global.IIIllIIlllIlllllllllIlIllI, Null, 100);
			If(Absolute Value(Max Health(Event Player) - Health(Event Player)
				- 100 + Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI]) > 0.010 || Absolute Value(Max Health(
				Global.IIIllIIlllIlllllllllIlIllI) - Health(Global.IIIllIIlllIlllllllllIlIllI)
				- 100 + Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI]) > 0.010);
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			Heal(Event Player, Null, 90);
			Heal(Global.IIIllIIlllIlllllllllIlIllI, Null, 90);
			If(Absolute Value(Max Health(Event Player) - Health(Event Player) - 10 + (
				Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] == True) * 10) > 0.010 || Absolute Value(
				Max Health(Global.IIIllIIlllIlllllllllIlIllI) - Health(Global.IIIllIIlllIlllllllllIlIllI) - 10 + (
				Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] == True) * 10) > 0.010);
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			If(!Event Player.IIIllIlIIIIlIlllIlllIlIIlI);
				Set Healing Dealt(Event Player, 0);
				Set Healing Dealt(Global.IIIllIIlllIlllllllllIlIllI, 0);
			End;
			Damage(Event Player, Global.IIIllIIlllIlllllllllIlIllI, 100);
			Damage(Global.IIIllIIlllIlllllllllIlIllI, Event Player, 100);
			If(Absolute Value(Max Health(Event Player) - Health(Event Player) - 110 + (
				Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] == True) * (
				Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] + 10)) > 0.010 || Absolute Value(Max Health(
				Global.IIIllIIlllIlllllllllIlIllI) - Health(Global.IIIllIIlllIlllllllllIlIllI) - 110 + (
				Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] == True) * (
				Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] + 10)) > 0.010);
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			If(!Event Player.IIIllIlIIIIlIlllIlllIlIIlI);
				Set Healing Dealt(Event Player, 100);
				Set Healing Dealt(Global.IIIllIIlllIlllllllllIlIllI, 100);
			End;
			Heal(Event Player, Event Player, 95);
			Heal(Global.IIIllIIlllIlllllllllIlIllI, Global.IIIllIIlllIlllllllllIlIllI, 95);
			If(Absolute Value(Max Health(Event Player) - Health(Event Player) - 15 + (
				Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] == True) * 15) > 0.010 || Absolute Value(
				Max Health(Global.IIIllIIlllIlllllllllIlIllI) - Health(Global.IIIllIIlllIlllllllllIlIllI) - 15 + (
				Global.IIlIlllIlIIIIllIIlIlIlIlll[12][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] == True) * 15) > 0.010);
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			If(Absolute Value(Horizontal Speed Of(Global.IIIllIIlllIlllllllllIlIllI)
				- Global.IIlIlllIlIIIIllIIlIlIlIlll[11][Event Player.IIIllIlIIIIlIlllIlllIlIIlI]) > 0.010 || Absolute Value(
				Horizontal Speed Of(Event Player) - Global.IIlIlllIlIIIIllIIlIlIlIlll[11][Event Player.IIIllIlIIIIlIlllIlllIlIIlI]) > 0.010);
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			Wait(0.250, Ignore Condition);
			If(
				Event Player.IIIllIlIIIIlIlllIlllIlIIlI != 24 && Global.IIlIlllIlIIIIllIIlIlIlIlll[8][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] && Ammo(
				Global.IIIllIIlllIlllllllllIlIllI, 0) >= Max Ammo(Global.IIIllIIlllIlllllllllIlIllI, 0));
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			If(Ultimate Charge Percent(Event Player)
				!= Global.IIlIlllIlIIIIllIIlIlIlIlll[13][Event Player.IIIllIlIIIIlIlllIlllIlIIlI] || Ultimate Charge Percent(
				Global.IIIllIIlllIlllllllllIlIllI) != Global.IIlIlllIlIIIIllIIlIlIlIlll[13][Event Player.IIIllIlIIIIlIlllIlllIlIIlI]);
				Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
				Abort;
			End;
			Event Player.IIIllIlIIIIlIlllIlllIlIIlI += 1;
		End;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 18, 1);
			Damage(Global.IIIllIIlllIlllllllllIlIllI, Event Player, 50);
			Damage(Event Player, Global.IIIllIIlllIlllllllllIlIllI, 50);
			Heal(Event Player, Global.IIIllIIlllIlllllllllIlIllI, 50);
			Heal(Global.IIIllIIlllIlllllllllIlIllI, Event Player, 50);
		End;
		Wait(5, Ignore Condition);
		If(Ultimate Charge Percent(Event Player) != 57 || Ultimate Charge Percent(Global.IIIllIIlllIlllllllllIlIllI) != 57);
			Call Subroutine(llIIlIllIllIIIIlIlllIlIlll);
			Abort;
		End;
		If(Global.IllIIlIllllIIIllIlllIIlIIl < 2);
			Global.IllIIlIllllIIIllIlllIIlIIl = 2;
		End;
		Global.IIlIlllIlIIIIllIIlIlIlIlll = Array Slice(Global.IIlIlllIlIIIIllIIlIlIlIlll, 0, 7);
		Destroy Dummy Bot(Team 2, Slot Of(Global.IIIllIIlllIlllllllllIlIllI));
		Destroy Dummy Bot(Team 1, Slot Of(Event Player));
	}
}

rule("lllIIIlIllIIIIllIllIIlIIll")
{
	event
	{
		Subroutine;
		lIIllIllllIlIIIlllIIllIllI;
	}

	actions
	{
		If(!Global.IIlIlllIlIIIIllIIlIlIlIlll[9]);
			Global.IIlIlllIlIIIIllIIlIlIlIlll[9] = Global.lIIllIllIllIlIIIlllIlllIIl[2];
		End;
		If(!Global.IIlIlllIlIIIIllIIlIlIlIlll[10]);
			Global.IIlIlllIlIIIIllIIlIlIlIlll[10] = Global.lIIllIllIllIlIIIlllIlllIIl[4];
		End;
		Create Dummy Bot(Hero(Reaper), Team 2, 6, Global.IIlIlllIlIIIIllIIlIlIlIlll[9], Global.IllIllllIIIIllIIIIIIIlIIIl * -1);
		Create Dummy Bot(Hero(Reaper), Team 1, -1, Global.IIlIlllIlIIIIllIIlIlIlIlll[10], Global.IIlIllIIllIIlIllIIIIIIIIlI * -1);
		Wait Until(Global.IllIIlIllllIIIllIlllIIlIIl > 1, 16000);
		Start Damage Modification(All Players(Team 1), All Players(Team 1), False, Receivers and Damagers);
	}
}

rule("IIIIIlIIIIIllllIIllIlIIlIl")
{
	event
	{
		Subroutine;
		IlIllIllIllIlIlIIlIIIlllIl;
	}

	actions
	{
		Clear Status(Event Player, Invincible);
		Clear Status(Event Player, Rooted);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Interact));
		Allow Button(Event Player, Button(Crouch));
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Reload));
		If(Event Player.IlllIllIlIlllIlIlIIlIllIlI == 2);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll = False;
			Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		End;
		Event Player.IlllIllIlIlllIlIlIIlIllIlI = 0;
		Event Player.lIlIIlllIIIlIllllIllIIlIlI = Null;
		Call Subroutine(lIlllIlIIIllllIIllIlIlIIIl);
	}
}

rule("IlIIlIllllIlIlIllIlIlIlllI")
{
	event
	{
		Subroutine;
		IlIllIIIlllIIIllIIlllllllI;
	}

	actions
	{
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 3;
		Call Subroutine(IlIIlllIllIIllIIIIlIlIllll);
		Event Player.lIlIlIIIIllIlllIIIIIlIlIll = (Event Player.IIlIIIIllllIllIIlIIIIlIlll || !(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] % 100))
			&& Event Player.lIlIlIIIIllIlllIIIIIlIlIll ? Custom String("{0} Gold ({1} Favor)", Event Player.lIlIlIIIIllIlllIIIIIlIlIll,
			Event Player.IIllIIllIIIIIlIlIIllIllllI) : Custom String("Not available");
		Call Subroutine(IIIlIlllIlIIIlIlllIllIIllI);
		Big Message(Event Player, Custom String("Quest: {0} Gold\r\nSoul Stone: {1} Gold (1 Favor)\r\n{2}", 27 + Round To Integer(
			Event Player.llIlIIIlIlIIlIIIllllIlllII * 2.250, Up), 36 + Event Player.llIlIIIlIlIIlIIIllllIlllII * 3, Custom String(
			"Gamble: {0} Gold (1 Favor)\r\nImbue: {1}\r\nReroll: {2}", 18 + Round To Integer(
			Event Player.llIlIIIlIlIIlIIIllllIlllII * 1.500, Up), Event Player.lIlIlIIIIllIlllIIIIIlIlIll, Custom String(
			"{0} Gold ({1} Favor)", Event Player.lIllIIlIllllIlIIIllIIllIlI, Event Player.IIllIIllIllllllllIIlIIIIll))));
	}
}

rule("lIIIIIlIllllIIIlIlllIlIllI")
{
	event
	{
		Subroutine;
		IlIlllllIlIIIlIlllIlIlIIll;
	}

	actions
	{
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 4;
		Event Player.IlIllIlIlIlllIIlIllllllllI = Total Time Elapsed + 2 * Count Of(All Players(Team 2));
		Global.IIIlllllIIIllllllIIllIlIIl = Total Time Elapsed + 5;
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
	}
}

rule("lllIIIIlIIIllIllIIlIllllll")
{
	event
	{
		Subroutine;
		llIIlIIllllllIIlIIIIIIlIll;
	}

	actions
	{
		Event Player.IIlIlIlIIlIIIllIllIlIIllll = Global.lIIIIIllllIlIIIIlIIIlIIIll;
		Event Player.IIIlIlIllIlllIllllIlIllIll = Global.IIIIlllIIIIlIIIlIIIIllllIl;
		Event Player.llllIIlIlllllllIIllIlIllII = Global.IIllIIIlIllIlIlllIlllIlllI;
	}
}

rule("IIlllIIlIlIIllIIIIIIIlllIl")
{
	event
	{
		Subroutine;
		llIlIlIlIllIlIIIlIlllllIII;
	}

	actions
	{
		Global.lllIIllllIlIIlllIlIIIIlIIl[Global.llIlIIlIlIlIllIllllIllIllI] = Round To Integer(
			Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] * 0.100, Down);
		Global.lllIIllllIlIIlllIlIIIIlIIl[Global.llIlIIlIlIlIllIllllIllIllI + 1] = Global.lllIIllllIlIIlllIlIIIIlIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] % 10;
	}
}

rule("llllIllIIlIIIIIIIlIIlIllII")
{
	event
	{
		Subroutine;
		IlllIIIIlIIlIIIIllllllllIl;
	}

	actions
	{
		Small Message(Event Player, Custom String("Not enough Horadric Favor (required: {0})", Event Player.IIllIIllIIIIIlIlIIllIllllI));
	}
}

rule("IlIIlIlIIIIIlllllllIlIIIII")
{
	event
	{
		Subroutine;
		IIIllIlIIllIllllIIIlllIlIl;
	}

	actions
	{
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
		Event Player.IlllIlIIIIIlIlllIIIIlIllll -= Event Player.IIllIIllIIIIIlIlIIllIllllI;
	}
}

rule("IllIlllIIIIllIIllIllIIIIIl")
{
	event
	{
		Subroutine;
		IllllllIlIlIIIlIlIIIlIIlII;
	}

	actions
	{
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 1;
	}
}

rule("lIllIllllllllIlIllIllIlIlI")
{
	event
	{
		Subroutine;
		llIIlIIIIIIIllIlllIIIIlIII;
	}

	actions
	{
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 1.500;
	}
}

rule("llIlllIIlIIlIllIIIIlIIIiIl")
{
	event
	{
		Subroutine;
		llIlIIIlIIlIIIIIllIlIIllIl;
	}

	actions
	{
		Teleport(Event Player, Event Player.IIIIIlIlIlIllIlllllIIllIll);
		Abort If(!Global.IlllIlllllIIllIlIlIIlIllll[4]);
		Play Effect(All Players(Team 2), Good Pickup Effect, Color(White), Event Player.IIIIIlIlIlIllIlllllIIllIll, True);
	}
}

rule("lIilIIIIIIIllIiIlIlIIllIlI")
{
	event
	{
		Subroutine;
		IIlIIIlllIIIllIlllIllllIII;
	}

	actions
	{
		If(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 5] < 3 && Event Player.llllIIlIlllllllIIllIlIllII == True);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[5 + Event Player.lllllIIlllIlllllIIlIIlllII] = Event Player.llllIIlIlllllllIIllIlIllII + 2;
			For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 2, 5, 1);
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Event Player.lllllIIlllIlllllIIlIIlllII] = 0;
			End;
		End;
		Event Player.IIlIIllIIIllIllllIIIIlIIll = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 2] * (
			Event Player.llllIIlIlllllllIIllIlIllII == True);
		Event Player.IllIIIIlIlIIlIIllIllIIIlll = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 3] * (
			Event Player.llllIIlIlllllllIIllIlIllII == True);
		Event Player.IIIIlIIIIllllIlllIIIlllIIl = (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 4] + 1) * (
			Event Player.llllIIlIlllllllIIllIlIllII && Event Player.IIlIlIlIIlIIIllIllIlIIllll[1 + Event Player.lllllIIlllIlllllIIlIIlllII] == 6);
	}
}

rule("IlllIlIIIlIiIlIllIIliIIlll")
{
	event
	{
		Subroutine;
		IlllIIlIllIlllllIlIIllIlIl;
	}

	actions
	{
		Global.llllIIIIllIIlIlIIllIIllIll = Is True For Any(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, 6, 5),
			Current Array Element > 50)
			|| !Event Player.IIlIlIlIIlIIIllIllIlIIllll[0] || Event Player.IIlIlIlIIlIIIllIllIlIIllll[1] > 7 || Event Player.IIlIlIlIIlIIIllIllIlIIllll[17] >= 63 || (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[1] != 7 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[17] > 29) || (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[1] >= 6 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[13] != 7) || (
			!Event Player.IIlIlIlIIlIIIllIllIlIIllll[1] && ((Event Player.IIlIlIlIIlIIIllIllIlIIllll[13] == 9 && Is True For Any(
			Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, 11, 2), Current Array Element && Current Array Element < 7)) || (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[13] == 8 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[12] && Event Player.IIlIlIlIIlIIIllIllIlIIllll[12] < 7)))
			|| (Event Player.IIlIlIlIIlIIIllIllIlIIllll[1] == 6 && Event Player.IIIlIlIllIlllIllllIlIllIll <= 99) || (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[5] >= 3 && (
			Event Player.IIIlIlIllIlllIllllIlIllIll >= 121 || Event Player.IIlIlIlIIlIIIllIllIlIIllll[2] >= 6 || Event Player.IIlIlIlIIlIIIllIllIlIIllll[4] >= 5));
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[17] += 100;
	}
}

rule("lIIIIIIlIiIllIIIIIlIllIili")
{
	event
	{
		Subroutine;
		lllIllIlIIllllIlIlIlllllll;
	}

	actions
	{
		Global.lIlIlIIlIIIIlIllIIllllllll = 0;
		Global.llllIIIIllIIlIlIIllIIllIll = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 13];
		If(Event Player.IIllIIlIIllIIlIIlIlllIIllI);
			If(Global.llllIIIIllIIlIlIIllIIllIll == 9 || (
				Global.llllIIIIllIIlIlIIllIIllIll >= 7 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 11] < 7));
				Global.lIlIlIIlIIIIlIllIIllllllll = 1;
			Else If(Is True For All(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Event Player.lllllIIlllIlllllIIlIIlllII + 11, 3),
					Current Array Element && Current Array Element <= 6) && Is True For All(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll,
					Event Player.lllllIIlllIlllllIIlIIlllII + 14, 3), Current Array Element == 9));
				Global.lIlIlIIlIIIIlIllIIllllllll = 2;
			End;
		Else If(Event Player.IIlIIIIllllIllIIlIIIIlIlll == 4);
			If(Is True For All(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Event Player.lllllIIlllIlllllIIlIIlllII + 12, 2),
				Current Array Element && Current Array Element <= 6 && Current Array Element == Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 11])
				&& Is True For All(Array Slice(Event Player.IIlIlIlIIlIIIllIllIlIIllll, Event Player.lllllIIlllIlllllIIlIIlllII + 14, 3),
				Current Array Element == 9));
				Global.lIlIlIIlIIIIlIllIIllllllll = 3;
			End;
		Else If(Event Player.IIlIIIIllllIllIIlIIIIlIlll == 5 && Global.llllIIIIllIIlIlIIllIIllIll == 9);
			Global.lIlIlIIlIIIIlIllIIllllllll = 4;
		Else If(Event Player.IIlIIIIllllIllIIlIIIIlIlll >= 6);
			Global.lIlIlIIlIIIIlIllIIllllllll = Event Player.IIlIIIIllllIllIIlIIIIlIlll - 1 + (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] % 100 >= 30) * 1;
		End;
		Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[0] = Round To Integer(Global.lIlIlIIlIIIIlIllIIllllllll, To Nearest);
		Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[1] = Global.IIlIlllIlIIIIllIIlIlIlIlll[1][Event Player.llIIIIIIIlIIIIlIlIIIIlIllI[0]];
	}
}

rule("lIIlIiIllIlilIlIIlilIIllIl")
{
	event
	{
		Subroutine;
		IIIlIIIIllllIllllIlIIlIlll;
	}

	actions
	{
		If(Event Player.lIIIIIIlIIllllIllIlIIllIlI == Empty Array);
			Small Message(Event Player, Custom String("No item to buy back"));
			Abort;
		End;
		Global.IIllllIlIIlIIIllIllIIIIlII = Count Of(Event Player.lIIIIIIlIIllllIllIlIIllIlI) - 19;
		Event Player.lIllIIlIllllIlIIIllIIllIlI = Round To Integer(
			Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.IIllllIlIIlIIIllIllIIIIlII + 18] * 0.125, Up) * (
			Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.IIllllIlIIlIIIllIllIIIIlII + 17] < 100);
		If(Event Player.IlIIllllIlllIllIIIllIlIlll < Event Player.lIllIIlIllllIlIIIllIIllIlI);
			Small Message(Event Player, Custom String("Not enough gold to buy back item (cost: {0})",
				Event Player.lIllIIlIllllIlIIIllIIllIlI));
			Abort;
		End;
		Event Player.IlIIllllIlllIllIIIllIlIlll -= Event Player.lIllIIlIllllIlIIIllIIllIlI;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Global.lIIlIllllllIlllIlIIlIIllll[Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.IIllllIlIIlIIIllIllIIIIlII + 1]];
		Event Player.lIIllllIlIIIllIIllllIIIlll = Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.IIllllIlIIlIIIllIllIIIIlII];
		Event Player.lIllIIlIllllIlIIIllIIllIlI = Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.IIllllIlIIlIIIllIllIIIIlII + 18];
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] = Event Player.lIllIIlIllllIlIIIllIIllIlI;
		If(Event Player.lIIIIIIlIIllllIllIlIIllIlI[Global.IIllllIlIIlIIIllIllIIIIlII + 1] < 7);
			Event Player.lIllIIlIllllIlIIIllIIllIlI = Custom String("Item Power {0}", Event Player.lIllIIlIllllIlIIIllIIllIlI);
		End;
		Event Player.lIlIIlIlIlIIIlIlllllIlIIII += 1;
		Event Player.IlIllIIlllllllllIIIIllllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII * 19;
		Global.lIIlllIllllIlIIIIlIllIIIlI = Event Player.IlIllIIlllllllllIIIIllllll;
		Event Player.IlIlIIIlIIllIIIIllIlIIllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII;
		Modify Player Variable(Event Player, IIlIlIlIIlIIIllIllIlIIllll, Append To Array, Array Slice(
			Event Player.lIIIIIIlIIllllIllIlIIllIlI, Global.IIllllIlIIlIIIllIllIIIIlII, 19));
		Event Player.lIIIIIIlIIllllIllIlIIllIlI = Array Slice(Event Player.lIIIIIIlIIllllIllIlIIllIlI, 0,
			Global.IIllllIlIIlIIIllIllIIIIlII);
		Call Subroutine(lllIlllIlIlIllIlIllIIlllIl);
		Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
	}
}

rule("IIlIIllIIlIIIlIIlIlIIIlIlI")
{
	event
	{
		Subroutine;
		llIIIllllIlIllIlIIIlIlIIIl;
	}

	actions
	{
		Abort If(Event Player.IIIIlllIllIIIllIllIlIlIlll >= Event Player.IllllIIlllllIIllIIllIlIlIl);
		If(Event Player.lIlllllllllIllllIIIIlllIlI == 4);
			Event Player.IIIIlllIllIIIllIllIlIlIlll = Min(Event Player.IIIIlllIllIIIllIllIlIlIlll + Event Player.lIIllllIlIIIllIIllllIIIlll,
				Event Player.IllllIIlllllIIllIIllIlIlIl);
		Else;
			Event Player.IIIIlllIllIIIllIllIlIlIlll += 1;
		End;
		If(Event Player.IIIIlllIllIIIllIllIlIlIlll < Event Player.IllllIIlllllIIllIIllIlIlIl);
			Event Player.IIlllIlIIIlIlIlIlIIIIIllII[1] = Custom String("{0} {1}/{2}", Event Player.IIlllIlIIIlIlIlIlIIIIIllII[0],
				Event Player.IIIIlllIllIIIllIllIlIlIlll, Event Player.IllllIIlllllIIllIIllIlIlIl);
			Abort;
		End;
		If(Event Player.IlIIIlIIlIIIIlIlIlIlIIlIll <= 42);
			Event Player.IlIIIlIIlIIIIlIlIlIlIIlIll = 43;
			Call Subroutine(llIIIIlllIIIIIllllllIllllI);
			Event Player.IlIIIIIlllIlIIlIlIlllIlllI = Global.IlIlIIIlIIllllIllIlllllIll;
		End;
		Big Message(Event Player, Custom String("Quest complete"));
		Event Player.IIlllIlIIIlIlIlIlIIIIIllII[1] = Custom String("Quest complete");
		Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Quest completed!");
		Call Subroutine(llIlllIllIIllllIIIIIllIlII);
	}
}

rule("llIlIIlIlIIIllIllllIlIIlll")
{
	event
	{
		Subroutine;
		IIIlIlllIIIIIllIlIllIIlIII;
	}

	actions
	{
		Event Player.IIIllIIlIlIIIlllllllIIIlIl = Nearest Walkable Position(Random Value In Array(Global.lIIllIllIllIlIIIlllIlllIIl)
			+ Vector(Random Integer(-17, 17), Random Integer(-15, 15), Random Integer(-17, 17)));
		Event Player.IlIIIllIIlIIllllIlIIllllIl = 18;
	}
}

rule("llIllIllIIIlllllIIIlllIIIl")
{
	event
	{
		Subroutine;
		IIlIIIIIllIIlIIIIlIlIlllII;
	}

	actions
	{
		If(
			Event Player.lIlllllllllIllllIIIIlllIlI >= 6 && Event Player.IIIIlllIllIIIllIllIlIlIlll < Event Player.IllllIIlllllIIllIIllIlIlIl);
			Destroy Effect(Event Player.IlIlIlIIIlIIlIIlIlIlIIllll);
			If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4] < 2);
				Event Player.lIlllllllllIllllIIIIlllIlI = False;
				Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
			End;
		End;
		Destroy HUD Text(Event Player.lIIllIlIlllIIllIlIIllllIIl);
		Event Player.lIlllllllllIllllIIIIlllIlI = False;
	}
}

rule("llllllllllllIIllIIIIllIlll")
{
	event
	{
		Subroutine;
		IIllllIlIIIllllllIlIIIlllI;
	}

	actions
	{
		If(Event Player.lIlIlllIllIlIIIllllIllIlll[0]);
			If(Event Player.lIlllllllllIllllIIIIlllIlI);
				Big Message(Event Player, Custom String("Quest abandoned"));
				Call Subroutine(IIlIIIIIllIIlIIIIlIlIlllII);
			End;
			Abort;
		End;
		If(Event Player.lIlllllllllIllllIIIIlllIlI);
			If(Event Player.IIIIlllIllIIIllIllIlIlIlll < Event Player.IllllIIlllllIIllIIllIlIlIl);
				Small Message(Event Player, Custom String("Quest not complete yet"));
				Abort;
			End;
			If(Event Player.lIlIIlIlIlIIIlIlllllIlIIII >= 5);
				Small Message(Event Player, Custom String("Inventory full"));
				Abort;
			End;
			Big Message(Event Player, Custom String("Quest turned in"));
			Play Effect(Event Player, Ring Explosion Sound, Null, Event Player, 75);
			Call Subroutine(IIlIIIIIllIIlIIIIlIlIlllII);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8] = 2.500 * (1 + (Event Player.IIIIlIIIIllllIlllIIIlllIIl == 4) * (
				0.500 + 0.100 * Event Player.IIlIIllIIIllIllllIIIIlIIll));
			Event Player.IlllIlIIIIIlIlllIIIIlIllll = Min(Event Player.IlllIlIIIIIlIlllIIIIlIllll + Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8],
				40);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] = 1 + Event Player.IIIlIlIIlIIlIIIlllllIIIlIl * 0.010;
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5] = 12.500 * (0.050 * (Event Player.IIIlIlIllIlllIllllIlIllIll * 0.333 + 1) ^ 2 + (
				Event Player.IIIlIlIllIlllIllllIlIllIll * 0.333 + 1) * 0.950) * Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4];
			Event Player.llIIIIIIllIIlIIlIlIIIIllII += Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5] * (1 - (
				Event Player.llllIIlIlllllllIIllIlIllII == True) * 0.900);
			If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2]);
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Quest Reward: {0} EXP (+{1}%) / {2} HF",
					Event Player.lIlIIIIlIIlIIlIIlIIIllllII[5], Round To Integer(100 * (Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4] - 1),
					To Nearest), Event Player.lIlIIIIlIIlIIlIIlIIIllllII[8]);
				Call Subroutine(llIlllIllIIllllIIIIIllIlII);
			End;
			Call Subroutine(IlllllIlIllllIIlllIllllllI);
			Call Subroutine(IIlllllIllIIlIIIIIlllIlIIl);
			Abort;
		End;
		Event Player.lIllIIlIllllIlIIIllIIllIlI = 27 + Round To Integer(Event Player.llIlIIIlIlIIlIIIllllIlllII * 2.250, Up);
		If(Event Player.IlIIllllIlllIllIIIllIlIlll < Event Player.lIllIIlIllllIlIIIllIIllIlI);
			Small Message(Event Player, Custom String("Not enough gold (cost: {0})", Event Player.lIllIIlIllllIlIIIllIIllIlI));
			Abort;
		End;
		Event Player.IlIIllllIlllIllIIIllIlIlll -= Event Player.lIllIIlIllllIlIIIllIIllIlI;
		Event Player.IIIIlllIllIIIllIllIlIlIlll = 0;
		If(!Random Integer(0, 5) && Event Player.llIIlIIIIlIllIIIIIlIIlIIll != 1 && ((
			Event Player.IIlIllllllIIlIIIllllIIllII && Event Player.IlllIlIIIIIlIlllIIIIlIllll >= 1) || (
			Event Player.IlllIlIIIIIlIlllIIIIlIllll >= 2 && Event Player.IlIIllllIlllIllIIIllIlIlll >= 36 + Event Player.llIlIIIlIlIIlIIIllllIlllII * 3)));
			Event Player.lIlllllllllIllllIIIIlllIlI = 1;
		Else;
			Event Player.lIlllllllllIllllIIIIlllIlI = Random Value In Array(Remove From Array(Array(2, 3, 4, 5, 6, 7, 8),
				Event Player.llIIlIIIIlIllIIIIIlIIlIIll));
		End;
		Event Player.llIIlIIIIlIllIIIIIlIIlIIll = Event Player.lIlllllllllIllllIIIIlllIlI;
		Global.IIIIlllIIIIlIIIlIIIIllllIl = 3 + Round To Integer(Event Player.llIlIIIlIlIIlIIIllllIlllII * 0.017, To Nearest);
		Event Player.IllllIIlllllIIllIIllIlIlIl = Array(1, 4 + Round To Integer(Event Player.llIlIIIlIlIIlIIIllllIlllII * 0.600,
			To Nearest), 40, Round To Integer((Event Player.llIlIIIlIlIIlIIIllllIlllII * 0.083 + 0.625) * (
			18 + 0.687 * Event Player.llIlIIIlIlIIlIIIllllIlllII), Up), 2 + Round To Integer(
			Event Player.llIlIIIlIlIIlIIIllllIlllII * 0.033, To Nearest), Global.IIIIlllIIIIlIIIlIIIIllllIl,
			Global.IIIIlllIIIIlIIIlIIIIllllIl, Global.IIIIlllIIIIlIIIlIIIIllllIl)[Event Player.lIlllllllllIllllIIIIlllIlI - 1];
		Event Player.IIlllIlIIIlIlIlIlIIIIIllII[0] = Array(Custom String("Kill {0}", Global.IIlIllIIlIIllIlIlIIllIIIIl[2]), Custom String(
			"Kill {0}s", Global.IIlIllIIlIIllIlIlIIllIIIIl[1]), Custom String("Kill enemies"), Custom String("Pick up gold"),
			Custom String("Obtain equippable items"), Custom String("Charge Crystal with Moonlight"), Custom String(
			"Close Demonic Portals"), Custom String("Destroy Corruption Tumors"))[Event Player.lIlllllllllIllllIIIIlllIlI - 1];
		Event Player.IIlllIlIIIlIlIlIlIIIIIllII[1] = Custom String("{0} {1}/{2}", Event Player.IIlllIlIIIlIlIlIlIIIIIllII[0],
			Event Player.IIIIlllIllIIIllIllIlIlIlll, Event Player.IllllIIlllllIIllIIllIlIlIl);
		Create HUD Text(Event Player, Null, Null, Event Player.IIlllIlIIIlIlIlIlIIIIIllII[1], Top, -2, Null, Null, Color(Aqua), String,
			Visible Never);
		Event Player.lIIllIlIlllIIllIlIIllllIIl = Last Text ID;
		Big Message(Event Player, Array(Custom String("Quest started - Kill {0} {1}", Event Player.IllllIIlllllIIllIIllIlIlIl,
			Global.IIlIllIIlIIllIlIlIIllIIIIl[2]), Custom String("Quest started - Kill {0} {1}s", Event Player.IllllIIlllllIIllIIllIlIlIl,
			Global.IIlIllIIlIIllIlIlIIllIIIIl[1]), Custom String("Quest started - Kill {0} enemies",
			Event Player.IllllIIlllllIIllIIllIlIlIl), Custom String("Quest started - Pick up {0} gold",
			Event Player.IllllIIlllllIIllIIllIlIlIl), Custom String("Quest started - Obtain {0} equippable items",
			Event Player.IllllIIlllllIIllIIllIlIlIl), Custom String("Quest started - Charge {0} Crystals with Moonlight",
			Event Player.IllllIIlllllIIllIIllIlIlIl), Custom String("Quest started - Close {0} Demonic Portals",
			Event Player.IllllIIlllllIIllIIllIlIlIl), Custom String("Quest started - Destroy {0} Corruption Tumors",
			Event Player.IllllIIlllllIIllIIllIlIlIl))[Event Player.lIlllllllllIllllIIIIlllIlI - 1]);
		Abort If(Event Player.lIlllllllllIllllIIIIlllIlI < 6);
		Call Subroutine(IIIlIlllIIIIIllIlIllIIlIII);
		Skip((Event Player.lIlllllllllIllllIIIIlllIlI - 6) * 2);
		Create Effect(Event Player, Light Shaft, Color(Sky Blue), Event Player.IIIllIIlIlIIIlllllllIIIlIl + Down, 1, Position and Radius);
		Skip(3);
		Create Effect(Event Player, Good Aura, Color(Red), Event Player.IIIllIIlIlIIIlllllllIIIlIl + Up * 2.500, 1.750,
			Position and Radius);
		Skip(1);
		Create Effect(Event Player, Bad Aura, Color(Green), Event Player.IIIllIIlIlIIIlllllllIIIlIl + Up * 1.500, 1.250,
			Position and Radius);
		Event Player.IlIlIlIIIlIIlIIlIlIlIIllll = Last Created Entity;
		Abort If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4] >= 2);
		Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
	}
}

rule("llllIlIlIIIlIllllIIIlIIlll")
{
	event
	{
		Subroutine;
		llIllIlIIIllIIlIlIlllIIllI;
	}

	actions
	{
		If(Event Player.llllllIllIIlllllIlIIlIIllI[4] && (!Is Using Ultimate(Event Player) || Is Duplicating(Event Player)));
			If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[10]);
				Play Effect(Event Player, Bad Explosion, Color(Blue), Position Of(Global.lIIlllIllllIlIIIIlIllIIIlI) + Up, 1);
			End;
			Set Ultimate Charge(Event Player, Min(Ultimate Charge Percent(Event Player)
				+ 3 + Event Player.llllllIllIIlllllIlIIlIIllI[4] * Event Player.IIlllllIIlIIlIIIIIIIIlIlII[2] * (1 + 5 * Is Duplicating(
				Event Player)), 100));
		End;
		Abort If(!Global.IlllIlllllIIllIlIlIIlIllll[1]);
		Global.IlIIlIIIlllIIlIllIIIIIllIl = Event Player.llllllIllIIlllllIlIIlIIllI[0];
		Event Player.llllllIllIIlllllIlIIlIIllI[8] = Event Player.llllllIllIIlllllIlIIlIIllI[7];
		If(Event Player.IIllIIlIIllIIlIIlIlllIIllI);
			Global.IlIIlIIIlllIIlIllIIIIIllIl = Random Integer(1, 10);
			Event Player.llllllIllIIlllllIlIIlIIllI[8] = Random Integer(1, 3);
		End;
		Abort If(!Global.IlIIlIIIlllIIlIllIIIIIllIl);
		Skip((Event Player.llllllIllIIlllllIlIIlIIllI[8] - 1) * 2);
		Play Effect(Filtered Array(All Players(Team 2), Current Array Element.lIlIIIIlIIlIIlIIlIIIllllII[11]), Good Pickup Effect,
			Global.IIlIlllIlIIIIllIIlIlIlIlll[4][Global.IlIIlIIIlllIIlIllIIIIIllIl - 1], Position Of(Global.lIIlllIllllIlIIIIlIllIIIlI),
			True);
		Abort;
		Play Effect(Filtered Array(All Players(Team 2), Current Array Element.lIlIIIIlIIlIIlIIlIIIllllII[11]), Bad Pickup Effect,
			Global.IIlIlllIlIIIIllIIlIlIlIlll[4][Global.IlIIlIIIlllIIlIllIIIIIllIl - 1], Position Of(Global.lIIlllIllllIlIIIIlIllIIIlI),
			True);
		Abort;
		Play Effect(Filtered Array(All Players(Team 2), Current Array Element.lIlIIIIlIIlIIlIIlIIIllllII[11]), Ring Explosion,
			Global.IIlIlllIlIIIIllIIlIlIlIlll[4][Global.IlIIlIIIlllIIlIllIIIIIllIl - 1], Position Of(Global.lIIlllIllllIlIIIIlIllIIIlI)
			+ Up, 4);
	}
}

rule("IIlIIlIlIlIIIIIlllIlIlllll")
{
	event
	{
		Subroutine;
		lIIlllIlIIlIIIllIllllIlllI;
	}

	actions
	{
		If(Event Player.lIIIlIIllIIIlllllIIIIllIlI < 0);
			Event Player.lIIIlIIllIIIlllllIIIIllIlI = 41;
		End;
		Skip(Event Player.lIIIlIIllIIIlllllIIIIllIlI * 2);
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("Welcome to Loot Quest!");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("This is a regular map, recommended for player level 1-60.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"If you are new to the game mode, consider trying the tutorial:\r\nShare Code - CTHE4");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("Or read the following instructions:");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("Greetings, Adventurer!");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"I will teach you everything you need to know\r\nabout fighting the Great Evils that are\r\nhaunting these lands.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"To grow stronger, you must earn experience\r\nby defeating evil creatures.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("Along the way, you will find gold and\r\npowerful equipment.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("Press *Crouch* to pick up gold or an item\r\nleft behind by a monster.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("You can also press *Crouch* to use any of\r\nthe stations in town.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"See your currently equipped item on the\r\nleft side and items in your inventory on the\r\nright side of your screen.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"You can carry up to five items in your\r\ninventory. Press *Melee* to select the\r\nnext one if you have more than one.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"To equip the selected inventory item, use\r\n*Communicate: Acknowledge or Yes*.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"You can also sell the selected inventory\r\nitem for gold by pressing *Interact*.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("(Alternatively you can sell items with\r\n*Crouch + Melee*.)");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"(To change selling method, press *Interact* or *Melee*\r\nwhile standing inside the white station in town.)");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"When fighting enemies, use *Communicate:\r\nNeed healing or Fall back* to cast a\r\ntown portal spell and return to town.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Items determine which hero you are and\r\ngrant bonuses to your base stats:\r\n'Attack, Defense, Health, Speed, Sustain'");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"An item's power value is an indicator of its\r\noverall value and rarity.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"The quality (color) of an item determines\r\nhow many default abilities you have\r\naccess to.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"High quality items can even grant you\r\none or more powerful special abilities.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"*Communicate: Ultimate status or Ready* will\r\nshow you the base stat bonuses and special\r\nabilities of your equipped item.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"*Communicate: Thanks or You are Welcome*\r\nwill inform you about the prices of all\r\nservices you can use in town.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("Most services cost both gold and\r\nHoradric Favor to use.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"You can slowly earn Horadric Favor by\r\ndefeating enemies within your level range.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"It will also grant you a temporary bonus\r\n to your experience gain and Magic Find.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Magic Find increases your chance to find\r\ngold and high quality equippable items.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Do not fight enemies that are too far above\r\nor below your level, or there will be\r\ndiminished returns for your endeavors.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"(The penalty sets in with a difference\r\nof 7 levels, it reaches full strength\r\nwith a difference of 16 levels.)");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"To save your progress, use the green station\r\nin town and keep an image of your save code.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Inventory items and Horadric Favor\r\ncannot be saved, but your equipped item\r\nwill be included in the code.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"To load your progress from a save code,\r\nuse the white station in town, and enter\r\nall 40 digits correctly.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Hold *Reload* while using the white station\r\nto load only the item of a save code\r\nand keep your current progress.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"You cannot load items from a save state\r\nthat is higher than your current level.");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Now I can only wish you good luck,\r\nadventurer, for Great Evils await you...");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("But greater is the power of the true heroes!");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"You can find the latest Loot Quest news\r\nand the full game mode manual on:");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String("https://lootquest.shivtr.com");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Share Codes - 1/4 (Lv 1-60):\r\n\r\nTutorial - CTHE4\r\nRegular Maps - 4QV99\r\nAdventure Maps - JSTPC\r\nFishing and Herbalism - BGM95");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Share Codes - 2/4 (Lv 60+):\r\n\r\nSecret Cow Level - HH3XY\r\nArreat Summit - CATCH\r\nElite Maps - XPCRY\r\nSecret Bazaar - AHMNA");
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Share Codes - 3/4 (Lv 85+):\r\n\r\nUnstable Core - HYPVE\r\nFrozen Factory - VTMND\r\nStarship Assault - T3RAS\r\n{0}",
			Custom String("Grail Castle - 0FHER\r\nFinal Raid - TTHNG"));
		Abort;
		Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Custom String(
			"Share Codes - 4/4 (Tool):\r\n\r\nConversion Tool - EGHGE\r\n\r\n(Converts save codes from v3.2 - v5.1.2\r\nto the current version.)");
		Abort;
		Event Player.lIIIlIIllIIIlllllIIIIllIlI = 0;
		Call Subroutine(IlIllIllIllIlIlIIlIIIlllIl);
	}
}

rule("lIIIIlIlIlIIIlllIIlIlIIlll")
{
	event
	{
		Subroutine;
		IlIlIllIIlIlIlllIIIIIIIlII;
	}

	actions
	{
		Event Player.IIllIIllIllllllllIIlIIIIll = Array(Global.IllIlIIIlIlIIIlIlllIIIllII[2], Global.IlIlIIIlIIllllIllIlllllIll)
			[Event Player.IlllIllIlIlllIlIlIIlIllIlI - 1];
		Event Player.IllIlllllIIIlIllIllllllIII = 16000;
		Set Status(Event Player, Null, Invincible, 16000);
		Set Status(Event Player, Null, Rooted, 16000);
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Interact));
		Disallow Button(Event Player, Button(Crouch));
		Disallow Button(Event Player, Button(Melee));
		Disallow Button(Event Player, Button(Reload));
	}
}

rule("lIllIIlIIlIIlIlllIlIlllIll")
{
	event
	{
		Subroutine;
		llllIlIIlIIIIlIllIlIlIIlll;
	}

	actions
	{
		Abort If(Count Of(Global.IIllIllIllllIIlIlIlIIIIlIl) <= 16);
		Modify Global Variable(IIllIllIllllIIlIlIlIIIIlIl, Remove From Array By Index, 0);
		Modify Global Variable(lllllIIIlIlIlllllIlllIlllI, Remove From Array By Index, 0);
	}
}

rule("IIllllIIlIllIIIIlllIIIIIll")
{
	event
	{
		Subroutine;
		IIIlIIllllIlIlIlIlIlIlIIlI;
	}

	actions
	{
		Abort If(Event Player.llllIIlIlllllllIIllIlIllII || !Event Player.llIIllIlIlIlIIlllIllllIIIl);
		Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 2] = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 2] % 2 + 2;
	}
}

rule("llIIIlllIIIlIIlIllIlIlIIIl")
{
	event
	{
		Subroutine;
		lIllIIIIIIllllIIlllIllllIl;
	}

	actions
	{
		If(Is Duplicating(Event Player));
			Global.IIllllIlIIlIIIllIllIIIIlII = Hero Being Duplicated(Event Player);
		Else;
			Global.IIllllIlIIlIIIllIllIIIIlII = Event Player.IIIllIlIIIIlIlllIlllIlIIlI;
		End;
		Event Player.lIIlIlllIIlllIIlIlIlIIllll = Array(0.480, 0.340, 0.390, 0.460, 0.520, 0.630, 0.520, 0.880, 0.400, 0.640, 0.410, 0.530,
			0.480, 0.800, 0.530, 0.580, 0.610, 0.510, 0.510, 0.870, 0.570, 0.490, 0.610, 0.540, 0.700, 0.660, 0.550, 0.830, 0.550, 0.620,
			0.620, 0.660)[Index Of Array Value(All Heroes, Global.IIllllIlIIlIIIllIllIIIIlII)];
		Event Player.IIlllllIIlIIlIIIIIIIIlIlII[2] = Array(0.439, 0.731, 0.506, 0.548, 0.430, 0.598, 0.439, 0.598, 0.598, 0.399, 0.548,
			0.399, 0.477, 0.411, 0.548, 0.479, 0.439, 0.399, 0.313, 0.598, 0.572, 0.658, 0.548, 0.439, 0.548, 0.329, 0.329, 0.598, 0.411,
			0.409, 0.399, 0.470)[Index Of Array Value(All Heroes, Global.IIllllIlIIlIIIllIllIIIIlII)];
		Set Knockback Dealt(Event Player, 100 * (Global.IIllllIlIIlIIIllIllIIIIlII != Hero(Reinhardt)));
		Event Player.IIllIlIIIIIIllIIIllIlIllII[0] = Round To Integer(Array(8, 40, 25, False, 18, False, 6, 100, 35, 25, 100, 25, 30, 6, 6,
			5, 100, 30, 20, False, 150, 60, 4, 15, 50, False, False, 80, 45, 12, 12, 45, 5, 8, False, 100, 20, False, 16)
			[Index Of Array Value(All Heroes, Global.IIllllIlIIlIIIllIllIIIIlII)] * (
			1 + 0.010 * Event Player.IIIlIlIllIlllIllllIlIllIll + 0.040 * Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 10]),
			Up);
		Event Player.IIllIlIIIIIIllIIIllIlIllII[1] = Round To Integer(Array(False, 13, 15, False, False, False, 70)[Index Of Array Value(
			All Heroes, Global.IIllllIlIIlIIIllIllIIIIlII) - 30] * (
			1 + 0.010 * Event Player.IIIlIlIllIlllIllllIlIllIll + 0.040 * Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 10]),
			Up);
		Set Max Ammo(Event Player, 0, Event Player.IIllIlIIIIIIllIIIllIlIllII[0]);
		Set Max Ammo(Event Player, 1, Event Player.IIllIlIIIIIIllIIIllIlIllII[1]);
	}
}

rule("lIlIIIllllIIllIlIllIllIIlI")
{
	event
	{
		Subroutine;
		lIIIIllIIlIllIlllllIlllIII;
	}

	actions
	{
		Global.IlIllIIIlIIIIIIllIIIIIIIIl = Empty Array;
		Global.IIllIIIlIllIlIlllIlllIlllI[0] = 0;
		If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 1] != 5);
			For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, Global.lIlIlIIlIIIIlIllIIllllllll + 11, Global.lIlIlIIlIIIIlIllIIllllllll + 14, 1);
				Global.IIIlIlllIllllIlllllllIIlII = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI];
				If(Global.IIIlIlllIllllIlllllllIIlII && Global.IIIlIlllIllllIlllllllIIlII < 7);
					Global.lIIIIIllllIlIIIIlIIIlIIIll = Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.IIIlIlllIllllIlllllllIIlII];
					Global.IIllIIIlIllIlIlllIlllIlllI[1] = Global.lIIIIIllllIlIIIIlIIIlIIIll == True && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 1] == 4;
					Global.IIllIIIlIllIlIlllIlllIlllI[0] += 1 * (Global.IIllIIIlIllIlIlllIlllIlllI[1] == True);
					Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.IIIlIlllIllllIlllllllIIlII] = (
						Global.lIIIIIllllIlIIIIlIIIlIIIll + Event Player.IIlIlIlIIlIIIllIllIlIIllll[3 + Global.lIIlllIllllIlIIIIlIllIIIlI] + 1) * (
						1 + 1 * (Global.IIllIIIlIllIlIlllIlllIlllI[1] == True));
				End;
			End;
		End;
		Global.IIIlIlllIllllIlllllllIIlII = False;
		If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 13] >= 7);
			Global.IIIlIlllIllllIlllllllIIlII = Round To Integer((
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 1] + 1) * 0.834, To Nearest) * (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 13] - 6);
			If(
				Event Player.IIIlIlIllIlllIllllIlIllIll >= 60 && !Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 1] && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100 >= 26);
				Global.IIIlIlllIllllIlllllllIIlII += Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 13] - 7;
			End;
		End;
		Global.IIllIIIlIllIlIlllIlllIlllI[2] = 0.500 * (
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 1] == 5);
		Global.IIllIIIlIllIlIlllIlllIlllI[0] = (Global.IIllIIIlIllIlIlllIlllIlllI[0] == True) * Round To Integer(0.834 * (
			3 - Global.IIllIIIlIllIlIlllIlllIlllI[0]) * (Global.IIIllIIIlllIllIIlIIIllllII + 1), To Nearest);
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 1, 7, 1);
			Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] += Global.IIIlIlllIllllIlllllllIIlII;
			Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] *= 1 + 0.100 * Global.IIIllIIIlllIllIIlIIIllllII + Global.IIllIIIlIllIlIlllIlllIlllI[2];
			If(Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] % 1 > 0.001);
				Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] = Round To Integer(
					Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI], Up);
				Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] += !Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] * Global.IIllIIIlIllIlIlllIlllIlllI[0];
			Else;
				Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] = Round To Integer(
					Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI], To Nearest);
				Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] += !Global.IlIllIIIlIIIIIIllIIIIIIIIl[Global.lIIlllIllllIlIIIIlIllIIIlI] * Global.IIllIIIlIllIlIlllIlllIlllI[0];
			End;
		End;
		Global.IlIllIIIlIIIIIIllIIIIIIIIl[0] = Array(0, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 0, 10,
			10, 10)[Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100 % 30];
		If(
			!Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 1] && Event Player.IIIlIlIllIlllIllllIlIllIll >= 60 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100);
			Global.IlIllIIIlIIIIIIllIIIIIIIIl[0] = 0;
		End;
		Global.IlIllIIIlIIIIIIllIIIIIIIIl[7] = (Array(0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 0,
			1, 2)[Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100 % 30] + 1) * (
			Global.IlIllIIIlIIIIIIllIIIIIIIIl[0] == True);
		Abort If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100 < 60);
		Global.IlIllIIIlIIIIIIllIIIIIIIIl[0] = 11;
		Global.IlIllIIIlIIIIIIllIIIIIIIIl[7] = Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 17] % 100 - 59;
	}
}

rule("IIlIIlIlllIlIIlllIllIIllll")
{
	event
	{
		Subroutine;
		lIlIlllllIIIlllllIIIllIIII;
	}

	actions
	{
		If(Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 17] % 100 == 56);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll[8] = Custom String("Moo");
			Abort;
		End;
		If(
			!Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 1] && Event Player.IIIlIlIllIlllIllllIlIllIll >= 60 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 17] % 100 >= 26);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll[8] = Custom String("Everchanging");
			Abort;
		End;
		If(Event Player.lIlIlIIIIllIlllIIIIIlIlIll[0]);
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll[8] = Custom String("{0} {1}", Array(Custom String("White"), Custom String("Yellow"),
				Custom String("Green"), Custom String("Purple"), Custom String("Red"), Custom String("Blue"), Custom String("Aqua"),
				Custom String("Lime Green"), Custom String("Orange"), Custom String("Sky Blue"), Custom String("Black"))
				[Event Player.lIlIlIIIIllIlllIIIIIlIlIll[0] - 1], Array(Custom String("Mist"), Custom String("Cuts"), Custom String("Ring"))
				[Event Player.lIlIlIIIIllIlllIIIIIlIlIll[7] - 1]);
			Abort;
		End;
		Event Player.lIlIlIIIIllIlllIIIIIlIlIll[8] = Custom String("None");
	}
}

rule("llIIllIllIlIllllIIlllIllll")
{
	event
	{
		Subroutine;
		IIllllIlIllIllIlIlIIlIllII;
	}

	actions
	{
		Abort If(!Global.IlllIlllllIIllIlIlIIlIllll[10] || Event Player.lllIlIIllIIllIIIIlllIIllII < 3);
		Create Progress Bar HUD Text(All Players(Team 2), 100 * Health(Event Player) / Max Health(Event Player), Null, Top, -3,
			Custom Color(127, 0, 0, 255), Null, Visible To and Values, Default Visibility);
		Event Player.lIlllllllIlIlIlIIIIIlllIII = Last Text ID;
	}
}

rule("IIlllllIllllIIIIlIlIllIlII")
{
	event
	{
		Subroutine;
		llllIlIllIIIlIIIlllIIlIIIl;
	}

	actions
	{
		Event Player.llIIllllIIlIIIIIIIlIlIlllI[Event Player.IIIlIIIIlIlllllIllIlIIlllI] = (
			Event Player.llIIllllIIlIIIIIIIlIlIlllI[Event Player.IIIlIIIIlIlllllIllIlIIlllI] + 10) % 10;
		Event Player.lllIIlllIIlIIlllIIIIlllIlI[Event Player.IIIlIIIIlIlllllIllIlIIlllI - Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI] = Event Player.llIIllllIIlIIIIIIIlIlIlllI[Event Player.IIIlIIIIlIlllllIllIlIIlllI];
	}
}

rule("llIlIIIIlIlllIIllIIlIlIllI")
{
	event
	{
		Subroutine;
		IlllllllIIlllllllllllIlIlI;
	}

	actions
	{
		Event Player.IlIIlIIIIIllIlIlIlIIIlIIIl[Slot Of(Victim)] = Total Time Elapsed + 0.250;
		If(!Victim.llllllIlIIlIIllIIlllIlIIII);
			Victim.lIIIIlIlIIlIIlIllllllIIllI = Total Time Elapsed + (Victim.lllIlIIllIIllIIIIlllIIllII ^ 2 + 1) * 20;
			Event Player.lllIlIIllIIllIIIIlllIIllII[Slot Of(Victim)] = True;
			If(Event Player.IIIIlIIIIllllIlllIIIlllIIl == 1);
				If(!Array Contains(Victim.IlllIIlilllIilIIIIIIlIlIil, Event Player));
					Modify Player Variable(Victim, IlllIIlilllIilIIIIIIlIlIil, Append To Array, Event Player);
				End;
				If(Victim.IIIllIIllIIIIllIlIlIIIIIII <= Event Player.IIlIIllIIIllIllllIIIIlIIll + Event Player.IIlllllIIlIIlIIIIIIIIlIlII[3]);
					Victim.IIIllIIllIIIIllIlIlIIIIIII = Event Player.IIlIIllIIIllIllllIIIIlIIll + Event Player.IIlllllIIlIIlIIIIIIIIlIlII[3];
				End;
			End;
		End;
		If(Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[0] && Random Integer(0, 9) < 7);
			Damage(Victim, Null, Health(Victim) * (0.650 + 0.050 * Event Player.IIlIIllIIIllIllllIIIIlIIll)
				* Global.llIIIllIllIlllIlllIIIlllll[Victim.lllIlIIllIIllIIIIlllIIllII] * Victim.IIIIIIIIlIIlIIIIIIIllIIIII / Global.IIIlIIIlIIllIIlllIlIIllIll);
		End;
		Abort If(Event Player.IllIlIllIlllIlIlIIIIIlllll > Total Time Elapsed);
		Event Player.IllIlIllIlllIlIlIIIIIlllll = Total Time Elapsed + 2;
		Call Subroutine(IlIIIIIlIllIIllIlIIlIlIIII);
	}
}

rule("IllIIlIIIIIIIIllIllllIIlII")
{
	event
	{
		Subroutine;
		IlIIIIIlIllIIllIlIIlIlIIII;
	}

	actions
	{
		Call Subroutine(lllIllllIllIIlIllIIIIIIllI);
		If(Random Integer(0, 24 + 55 * (Event Player.llllllIllIIlllllIlIIlIIllI[0] == 11))
			< 4 * Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1]);
			If(Event Player.llllllIllIIlllllIlIIlIIllI[0] == 10);
				Set Status(Victim, Null, Frozen, 1.500);
			Else If(Event Player.llllllIllIIlllllIlIIlIIllI[0] == 4);
				Set Status(Victim, Null, Hacked, 3);
			Else If(Event Player.llllllIllIIlllllIlIIlIIllI[0] == 11);
				Damage(Victim, Null, 100000000);
			End;
		End;
		If(Event Player.llllllIllIIlllllIlIIlIIllI[1]);
			If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[10]);
				Play Effect(Event Player, Bad Explosion, Color(Purple), Event Was Critical Hit ? Eye Position(Victim) : Position Of(Victim) + Up,
					0.500 + 1.350 * Event Was Critical Hit);
			End;
			Damage(Victim, Null, 1.421 * Event Player.llllllIllIIlllllIlIIlIIllI[1] * Event Player.IIlllllIIlIIlIIIIIIIIlIlII[3] * (
				0.950 + Event Was Critical Hit * 0.300));
		End;
		If(Event Player.llllllIllIIlllllIlIIlIIllI[2]);
			If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[10]);
				Set Status(Victim, Null, Burning, 2);
			End;
			Start Damage Over Time(Victim, Null, 2,
				0.711 * Event Player.llllllIllIIlllllIlIIlIIllI[2] * Event Player.IIlllllIIlIIlIIIIIIIIlIlII[3]);
		End;
		If(Event Player.llllllIllIIlllllIlIIlIIllI[3]);
			If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[10]);
				Play Effect(Event Player, Bad Explosion, Color(Red), Position Of(Victim) + Up, 1);
			End;
			Heal(Event Player, Null, 0.100 * Max Health(Event Player) * 0.016 * Event Player.llllllIllIIlllllIlIIlIIllI[3]);
		End;
		If(Event Player.llllllIllIIlllllIlIIlIIllI[5]);
			If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[10]);
				Play Effect(Event Player, Bad Explosion, Color(Green), Position Of(Victim), 1);
			End;
			Modify Player Variable At Index(Victim, lllllIIlllIlllllIIlIIlllII, 1, Append To Array, 0.900 - (
				150 - Event Player.llllllIllIIlllllIlIIlIIllI[5]) ^ 2 / 37500);
			Modify Player Variable At Index(Victim, lllllIIlllIlllllIIlIIlllII, 2, Append To Array,
				Total Time Elapsed + 2 + 0.020 * Event Player.llllllIllIIlllllIlIIlIIllI[5]);
			If(!Victim.lllllIIlllIlllllIIlIIlllII);
				Victim.lllllIIlllIlllllIIlIIlllII[0] = True;
			End;
		End;
		Global.lIIlllIllllIlIIIIlIllIIIlI = Victim;
		Call Subroutine(llIllIlIIIllIIlIlIlllIIllI);
	}
}

rule("IIlIllIIlIIIlIlIIlllIIIIIl")
{
	event
	{
		Subroutine;
		IIlllIIlllIllllllIIIIIIlII;
	}

	actions
	{
		Abort If(!Is Using Ultimate(Event Player) || (Hero Of(Event Player) != Hero(Sigma) && Hero Being Duplicated(Event Player) != Hero(
			Sigma) && Event Direction != 0));
		Wait(0.200, Ignore Condition);
		Event Player.lIIIllIIllIIIllIlIIllIlIll = True;
		End;
	}
}

rule("llIIllIlIlllIIIIIIIlllIlII")
{
	event
	{
		Subroutine;
		llIIlIllIllIlIIIIlIlIIIlII;
	}

	actions
	{
		Event Player.IllIIIlIlllIllIlIIllIllIII = !Event Player.IllIIIlIlllIllIlIIllIllIII;
		Small Message(Event Player, Event Player.IllIIIlIlllIllIlIIllIllIII ? Custom String("You now sell items with Crouch + Melee")
			: Custom String("You now sell items with Interact (default)"));
	}
}

rule("IlIIlIIIlIIIllIllIIIIIlIIl")
{
	event
	{
		Subroutine;
		lllIllllIllIIlIllIIIIIIllI;
	}

	actions
	{
		Event Player.llIllIIIlIllllIIlIlIIIlllI = Total Time Elapsed + 3;
		Stop All Heal Over Time(Event Player);
		Event Player.IIlllllIIIIlllIIIlllIllIlI = Total Time Elapsed;
	}
}

rule("IllllllIIIIIIIlIlllllIIIlI")
{
	event
	{
		Subroutine;
		llIlllIllIIllllIIIIIllIlII;
	}

	actions
	{
		Global.IIllllIlIIlIIIllIllIIIIlII = 0;
		While(String Length(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[0]) + String Length(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3])
			+ 2 - Global.IIllllIlIIlIIIllIllIIIIlII > 507);
			Global.IIllllIlIIlIIIllIllIIIIlII += Event Player.lIlIIIIlIIlIIlIIlIIIllllII[1];
			Modify Player Variable At Index(Event Player, lIlIIIIlIIlIIlIIlIIIllllII, 1, Remove From Array By Index, 0);
			Modify Player Variable At Index(Event Player, lIlIIIIlIIlIIlIIlIIIllllII, 13, Remove From Array By Index, 0);
		End;
		Modify Player Variable At Index(Event Player, lIlIIIIlIIlIIlIIlIIIllllII, 1, Append To Array, String Length(
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3]) + 2);
		Modify Player Variable At Index(Event Player, lIlIIIIlIIlIIlIIlIIIllllII, 13, Append To Array,
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3]);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[0] = Custom String(" ");
		For Global Variable(IIllllIlIIlIIIllIllIIIIlII, 0, Count Of(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[1]), 1);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[0] = Custom String("{0}\r\n{1}", Event Player.lIlIIIIlIIlIIlIIlIIIllllII[0],
				Event Player.lIlIIIIlIIlIIlIIlIIIllllII[13][Global.IIllllIlIIlIIIllIllIIIIlII]);
		End;
	}
}

rule("lIIIIlIIIlIIlllIllllIIIIIl")
{
	event
	{
		Subroutine;
		lIIIllIIIlllllIllIIlllIIll;
	}

	actions
	{
		If(Global.IllIIlIllllIIIllIlllIIlIIl <= 1);
			Small Message(Event Player, Custom String("Calibrating - please wait a few seconds"));
			Abort;
		End;
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		Event Player.lllIlllIllIIIlIIIIlllllIIl = False;
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
		Global.IIIIlllIIIIlIIIlIIIIllllIl = Global.lIIllIllIllIlIIIlllIlllIIl[2 * Global.IlIIlIIIlllIIlIllIIIIIllIl + 1];
		Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
		Event Player.IIIIIlIlIlIllIlllllIIllIll = Nearest Walkable Position(
			Global.IIIIlllIIIIlIIIlIIIIllllIl + Global.IlIllIIlIIIIlIIlIlIIIlIIlI);
		Call Subroutine(llIlIIIlIIlIIIIIllIlIIllIl);
		Call Subroutine(lllIlllIIIlIllllIIIIIIlIlI);
	}
}

rule("lIlllllIllIllIlIllIIllIlll")
{
	event
	{
		Subroutine;
		llllIlIllIlllIllllIllIIllI;
	}

	actions
	{
		Event Player.IlIIlllllIIlIIllIIlllIIIll = Event Player.lIlIlllIllIlIIIllllIllIlll[0];
		Event Player.IlllIllIlIlllIlIlIIlIllIlI = 1;
		Call Subroutine(IlIlIllIIlIlIlllIIIIIIIlII);
		Set Facing(Event Player, Direction From Angles(
			Global.IlIllllIIIIIIIIlllIIllIIII + 0.412 * Event Player.IIlIllllIllIIllIlIIlIIlIll[0],
			-4.636 * Event Player.IIlIllllIllIIllIlIIlIIlIll[0]), To World);
		Event Player.IIIlIIIIlIlllllIllIlIIlllI = False;
		Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI = False;
		Event Player.lIlIIlllIIIlIllllIllIIlIlI = Event Player;
		For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 4, 1);
			Event Player.lllIIlllIIlIIlllIIIIlllIlI[Global.lIIlllIllllIlIIIIlIllIIIlI] = Event Player.llIIllllIIlIIIIIIIlIlIlllI[Global.lIIlllIllllIlIIIIlIllIIIlI];
		End;
		Event Player.IllIlIIIllIlIlIIIlIIlIlIII = False;
		Event Player.lllIIlllIIlIIlllIIIIlllIlI[4] = Custom String("^___");
		Event Player.lllIIlllIIlIIlllIIIIlllIlI[5] = Event Player.IlIIlllllIIlIIllIIlllIIIll ? Custom String("Load item only")
			: Custom String("Load full save state");
		If(Event Player.llIIlllIllIIIllIllIIIIIIll);
			Call Subroutine(IIllIIllllIIIlIlIIllIIlIII);
			Create HUD Text(Event Player, Custom String("{0}{1}{2}", Event Player.lllIIlllIIlIIlllIIIIlllIlI[0],
				Event Player.lllIIlllIIlIIlllIIIIlllIlI[1], Custom String("{0}{1}\r\n{2}", Event Player.lllIIlllIIlIIlllIIIIlllIlI[2],
				Event Player.lllIIlllIIlIIlllIIIIlllIlI[3], Event Player.lllIIlllIIlIIlllIIIIlllIlI[4])), Null, Custom String(
				"{0}\r\nBlock {1}/10", Event Player.lllIIlllIIlIIlllIIIIlllIlI[5], Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI * 0.250 + 1), Top,
				1, Event Player.IlIIlllllIIlIIllIIlllIIIll ? Color(Aqua) : Color(White), Null, Event Player.IlIIlllllIIlIIllIIlllIIIll ? Color(
				Aqua) : Color(White), String, Visible Never);
			Event Player.llllllIlIIIIllIllIlIIIllII = Last Text ID;
			Abort;
		End;
		Set Objective Description(Event Player, Custom String("{0}\r\n\r\nBlock {1}/10\r\n{2}", Event Player.lllIIlllIIlIIlllIIIIlllIlI[5],
			Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI * 0.250 + 1, Custom String("{0}{1}{2}", Event Player.lllIIlllIIlIIlllIIIIlllIlI[0],
			Event Player.lllIIlllIIlIIlllIIIIlllIlI[1], Custom String("{0}{1}\r\n{2}", Event Player.lllIIlllIIlIIlllIIIIlllIlI[2],
			Event Player.lllIIlllIIlIIlllIIIIlllIlI[3], Event Player.lllIIlllIIlIIlllIIIIlllIlI[4]))), String);
		Enable Game Mode HUD(Event Player);
	}
}

rule("lllllIIlIlllIIlIlIlllIllIl")
{
	event
	{
		Subroutine;
		IlllllIIlIIIlIlIIIlllIllII;
	}

	actions
	{
		If(Event Player.IIlIllllllIIlIIIllllIIllII >= 9);
			Small Message(Event Player, Custom String("Cannot carry more Soul Stones"));
			Abort;
		End;
		Event Player.lIllIIlIllllIlIIIllIIllIlI = 36 + Round To Integer(Event Player.llIlIIIlIlIIlIIIllllIlllII * 3, Up);
		Event Player.IIllIIllIIIIIlIlIIllIllllI = 1;
		If(Event Player.IlIIllllIlllIllIIIllIlIlll < Event Player.lIllIIlIllllIlIIIllIIllIlI);
			Small Message(Event Player, Custom String("Not enough gold (cost: {0})", Event Player.lIllIIlIllllIlIIIllIIllIlI));
			Abort;
		End;
		If(Event Player.IlllIlIIIIIlIlllIIIIlIllll < 1);
			Call Subroutine(IlllIIIIlIIlIIIIllllllllIl);
			Abort;
		End;
		Call Subroutine(IIIllIlIIllIllllIIIlllIlIl);
		Event Player.IlIIllllIlllIllIIIllIlIlll -= Event Player.lIllIIlIllllIlIIIllIIllIlI;
		Small Message(Event Player, Custom String("Purchased 1 Soul Stone (use with Group Up)"));
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		Event Player.IIlIllllllIIlIIIllllIIllII += 1;
		Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Purchased 1 Soul Stone");
		Call Subroutine(llIlllIllIIllllIIIIIllIlII);
	}
}

rule("IllllIIIIIIlIllIllIIllIIIl")
{
	event
	{
		Subroutine;
		IlllIlIIlIllllIlllIIlIlllI;
	}

	actions
	{
		If(Event Player.IlIllIlIlIlllIIlIllllllllI > Total Time Elapsed);
			Event Player.IllIlIIlIIlIlIlIllIllllllI = Total Time Elapsed;
			Small Message(Event Player, Custom String("Wait {0} second(s) to get another code", Round To Integer(
				Event Player.IlIllIlIlIlllIIlIllllllllI - Event Player.IllIlIIlIIlIlIlIllIllllllI, Up)));
			Abort;
		End;
		If(Global.IllIlIllIllIllIIlIIIIllIIl > Total Time Elapsed);
			Small Message(Event Player, Custom String("Another code was just created, please wait a few seconds"));
			Abort;
		End;
		Event Player.IlIIlllllIIlIIllIIlllIIIll = Event Player.lIlIlllIllIlIIIllllIllIlll[0];
		Call Subroutine(lllIlllllIlIIIllIlIlIIIlIl);
	}
}

rule("IllllIllIllIIlllIIlIIIIlll")
{
	event
	{
		Subroutine;
		llIllIIIIlIIIIlIlIlIIllIll;
	}

	actions
	{
		Call Subroutine(IlIlIllIIlIlIlllIIIIIIIlII);
		Event Player.IlllIllIlIlllIlIlIIlIllIlI = 2;
		Call Subroutine(lIIlllIlIIlIIIllIllllIlllI);
		If(Event Player.llIIlllIllIIIllIllIIIIIIll);
			Call Subroutine(IIllIIllllIIIlIlIIllIIlIII);
			Create HUD Text(Event Player, Custom String(" \r\n{0}\r\n", Event Player.llIlIIllIIIIIIIIlIlIlIIlII), Null, Custom String(
				"Instructions - Page {0}/42\r\n{1}", Event Player.lIIIlIIllIIIlllllIIIIllIlI + 1,
				Event Player.IIlIIIIIIllIIlIlIIIlllllIl ? Custom String(
				"Next: Crouch / Ability 2\r\nBack: Ability 1\r\nCancel: Secondary Fire") : Custom String(
				"Next: Ability 2\r\nBack: Ability 1\r\nCancel: Ultimate")), Top, 1, Color(Aqua), Null, Color(Aqua), String, Visible Never);
			Event Player.llllllIlIIIIllIllIlIIIllII = Last Text ID;
			Abort;
		End;
		Set Objective Description(Event Player, Custom String("Instructions - Page {0}/42\r\n\r\n{1}\r\n\r\n{2}",
			Event Player.lIIIlIIllIIIlllllIIIIllIlI + 1, Event Player.llIlIIllIIIIIIIIlIlIlIIlII,
			Event Player.IIlIIIIIIllIIlIlIIIlllllIl ? Custom String("Next: Crouch or Ability 2 / Back: Ability 1 / Cancel: Secondary Fire")
			: Custom String("Next: Ability 2 / Back: Ability 1 / Cancel: Ultimate")), String);
		Enable Game Mode HUD(Event Player);
	}
}

rule("lIllIIlIlllIIllIIlllIIlIll")
{
	event
	{
		Subroutine;
		lIlllIlIIIllllIIllIlIlIIIl;
	}

	actions
	{
		If(Event Player.llIIlllIllIIIllIllIIIIIIll);
			Call Subroutine(IIllIIllllIIIlIlIIllIIlIII);
			Abort;
		End;
		Set Objective Description(Event Player, Custom String(""), String);
		Abort If(Global.lllllIIIllIIIllIlIIllIllII % 1);
		Disable Game Mode HUD(Event Player);
	}
}

rule("IIlIlIIllIlIIllIIIIIIIIIll")
{
	event
	{
		Subroutine;
		IIllIIllllIIIlIlIIllIIlIII;
	}

	actions
	{
		Abort If(!Event Player.llllllIlIIIIllIllIlIIIllII);
		Destroy HUD Text(Event Player.llllllIlIIIIllIllIlIIIllII);
		Event Player.llllllIlIIIIllIllIlIIIllII = False;
	}
}

rule("llIIIIIIIIIlllllllIllllIlI")
{
	event
	{
		Subroutine;
		lIIlllIlllIIllIllllllIllII;
	}

	actions
	{
		Abort If(!Global.IllIIlIllllIIIllIlllIIlIIl || Global.IllIIlIllllIIIllIlllIIlIIl > 2);
		Abort If(!Global.IllIIlIllllIIIllIlllIIlIIl || Global.IllIIlIllllIIIllIlllIIlIIl > 2);
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		Skip((Global.IlIIlIIIlllIIlIllIIIIIllIl - 1) * 2);
		Abort;
		Abort;
		Call Subroutine(llIIlIllIllIlIIIIlIlIIIlII);
		Abort;
		Call Subroutine(lllIIlllllIlllIllllIllIIll);
		Abort;
		Call Subroutine(IIIIIIlIIIlIIIIIIIIlIIIlIl);
		Abort;
		Call Subroutine(IllIIIIllIIllIIllIlIlIIlll);
		Abort;
		Call Subroutine(IIIlIIlIIIlIIllIlllIlIllII);
		Abort;
		Call Subroutine(IlllIlIlIlllIIlIllIlllllll);
		Abort;
		Call Subroutine(IllIlIlIllIlIlIllIlllIlIIl);
		Abort;
		Call Subroutine(lIIlllIIlllllIIlIIlIIIIIlI);
		Abort;
		Call Subroutine(IllllIIIlllIlIIlIlIlllIllI);
	}
}

rule("llllIlIIlIlIIlIIIIIlllIlII")
{
	event
	{
		Subroutine;
		IIIlIIlIIIlIIllIlllIlIllII;
	}

	actions
	{
		If(Global.IlIllllIllllllIIlIIlIllIII >= 6);
			Small Message(Event Player, Custom String("Autosave disabled (lobby settings)"));
			Abort;
		End;
		Event Player.lIllIlllIlllIIlIIlllllIllI += 1 - 7 * (Event Player.lIllIlllIlllIIlIIlllllIllI >= 6);
		If(Event Player.lIllIlllIlllIIlIIlllllIllI);
			Event Player.lIllIlllIlllIIlIIlllllIllI = Max(Event Player.lIllIlllIlllIIlIIlllllIllI, Global.IlIllllIllllllIIlIIlIllIII + 1);
		End;
		If(Event Player.lIllIlllIlllIIlIIlllllIllI);
			Small Message(Event Player, Custom String("Autosave enabled (every {0} minutes)", Array(0, 5, 10, 15, 20, 25, 30)
				[Event Player.lIllIlllIlllIIlIIlllllIllI]));
			Abort;
		End;
		Small Message(Event Player, Custom String("Autosave disabled (default)"));
	}
}

rule("lIIIIIIllllIllllIlIllIllIl")
{
	event
	{
		Subroutine;
		lIIlllIIlllllIIlIIlIIIIIlI;
	}

	actions
	{
		If(Global.IlllIlllllIIllIlIlIIlIllll[9]);
			Small Message(Event Player, Custom String("Text log disabled (lobby settings)"));
			Abort;
		End;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] += 1 - 3 * (Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] >= 2);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[7] = Array(Null, Color(White), Color(White))[Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2]];
		Small Message(Event Player, Array(Custom String("Text log - disabled (default)"), Custom String("Text log - EXP only"),
			Custom String("Text log - full log"))[Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2]]);
	}
}

rule("IIIIIIllIIlIlIIIIIIIIlIlII")
{
	event
	{
		Subroutine;
		IIIIIIlIIIlIIIIIIIIlIIIlIl;
	}

	actions
	{
		Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4] += 1 - 3 * (Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4] >= 2);
		Small Message(Event Player, Array(Custom String("Position Indicator - Loot and Quest Objectives (default)"), Custom String(
			"Position Indicator - Quest Objectives only"), Custom String("Position indicator - Off"))
			[Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4]]);
		If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4] >= 2);
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2] = Null;
			Abort;
		End;
		Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
	}
}

rule("IllIIIlIlIllIIlIllIIlIIIll")
{
	event
	{
		Subroutine;
		IllllIIIlllIlIIlIlIlllIllI;
	}

	actions
	{
		If(Workshop Setting Combo(Custom String("General"), Custom String("Traditional code display (large font)"), 0, Array(Custom String(
			"Allowed"), Custom String("Disabled")), 4));
			Small Message(Event Player, Custom String("Traditional Code Display disabled (lobby settings)"));
			Abort;
		End;
		Call Subroutine(lIlllIlIIIllllIIllIlIlIIIl);
		Event Player.llIIlllIllIIIllIllIIIIIIll = !Event Player.llIIlllIllIIIllIllIIIIIIll;
		If(Event Player.llIIlllIllIIIllIllIIIIIIll);
			Small Message(Event Player, Custom String("Traditional Code Display - Large Font"));
			Abort;
		End;
		Small Message(Event Player, Custom String("New Code Display - Small Font"));
	}
}

rule("IllIlIllIlIlIllllIlIlIIlll")
{
	event
	{
		Subroutine;
		lllIlllIlIlIllIlIllIIlllIl;
	}

	actions
	{
		Small Message(Event Player, Custom String("Obtained {0} {1} - {2}", Event Player.llIlIIllIIIIIIIIlIlIlIIlII, Hero Icon String(
			Event Player.lIIllllIlIIIllIIllllIIIlll), Event Player.lIllIIlIllllIlIIIllIIllIlI));
		Abort If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[2] < 2);
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Obtained {0} {1} ({2})", Event Player.llIlIIllIIIIIIIIlIlIlIIlII,
			Event Player.lIIllllIlIIIllIIllllIIIlll, Event Player.lIlIIIIlIIlIIlIIlIIIllllII[4]);
		Call Subroutine(llIlllIllIIllllIIIIIllIlII);
	}
}

rule("IllIIIIllIIlllIIIIIIIlllII")
{
	event
	{
		Subroutine;
		IIlIIlllIIIIIlIIIIllIIIIIl;
	}

	actions
	{
		Abort If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4] >= 2);
		If(Event Player.IlIIlIIlIIlIIIIlIlIllllllI[4] == 1);
			If(
				Event Player.lIlllllllllIllllIIIIlllIlI >= 6 && Event Player.IIIIlllIllIIIllIllIlIlIlll < Event Player.IllllIIlllllIIllIIllIlIlIl);
				Event Player.IlIIlIIlIIlIIIIlIlIllllllI[3] = Event Player.IIIllIIlIlIIIlllllllIIIlIl;
				Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2] = Color(Gray);
			Else;
				Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2] = Null;
			End;
			Abort;
		End;
		If(
			Event Player.lIlllllllllIllllIIIIlllIlI >= 6 && Event Player.IIIIlllIllIIIllIllIlIlIlll < Event Player.IllllIIlllllIIllIIllIlIlIl);
			Global.IIIlIlllIllllIlllllllIIlII = Append To Array(Event Player.lIIIIllIIIIIlIIIIllllIlIlI,
				Event Player.IIIllIIlIlIIIlllllllIIIlIl);
		Else;
			Global.IIIlIlllIllllIlllllllIIlII = Event Player.lIIIIllIIIIIlIIIIllllIlIlI;
		End;
		Event Player.IlIIlIIlIIlIIIIlIlIllllllI[3] = First Of(Sorted Array(Remove From Array(Global.IIIlIlllIllllIlllllllIIlII,
			Global.lIllIIlIlIIIIIlIIIlIlIlllI), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(
			Event Player), Current Array Element + Global.lllIllIlIlllIIIIlIIlIIllII))));
		If(
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[3] && Event Player.IlIIlIIlIIlIIIIlIlIllllllI[3] == Event Player.IIIllIIlIlIIIlllllllIIIlIl);
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2] = Color(Gray);
			Abort;
		End;
		If(!Event Player.IlIIlIIlIIlIIIIlIlIllllllI[3]);
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2] = Null;
			Abort;
		End;
		Global.IIIlIlllIllllIlllllllIIlII = Event Player.llIIIlllIIIlllllIIllIIIIIl[Index Of Array Value(
			Event Player.lIIIIllIIIIIlIIIIllllIlIlI, Event Player.IlIIlIIlIIlIIIIlIlIllllllI[3])] % 10;
		If(Global.IIIlIlllIllllIlllllllIIlII % 1);
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2] = Array(Color(Lime Green), Color(Turquoise), Custom Color(0, 0, 255, 255))
				[Global.IIIlIlllIllllIlllllllIIlII % 1 * 10 - 1];
			Abort;
		End;
		If(Global.IIIlIlllIllllIlllllllIIlII <= 1);
			Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2] = Color(Yellow);
			Abort;
		End;
		Event Player.IlIIlIIlIIlIIIIlIlIllllllI[2] = Global.IIlIlllIlIIIIllIIlIlIlIlll[0][Global.IIIlIlllIllllIlllllllIIlII - 1];
	}
}

rule("IlIlIlIlllllIIIIllllllIlIl")
{
	event
	{
		Subroutine;
		IllIlIlIllIlIlIllIlllIlIIl;
	}

	actions
	{
		If(Event Player != Host Player);
			Small Message(Event Player, Custom String("Only the host can change match duration."));
			Call Subroutine(llIIlIIIIIIIllIlllIIIIlIII);
			Abort;
		End;
		Abort If(Global.IIIlIlIIIIllIlllllIIIIllIl[1] && Global.IIIlIlIIIIllIlllllIIIIllIl[1] != 2);
		Abort If(Global.lllllIIIllIIIllIlIIllIllII % 1);
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed - 0.100;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Is Button Held(Event Player, Button(Jump)) && !(Global.lllllIIIllIIIllIlIIllIllII % 1));
				Global.lllllIIIllIIIllIlIIllIllII = Round To Integer(Total Time Elapsed + 1, Up);
				Abort;
			Else;
				If(Global.lllllIIIllIIIllIlIIllIllII >= Total Time Elapsed + 660);
					Global.lllllIIIllIIIllIlIIllIllII -= 600;
				End;
			End;
		Else;
			Global.lllllIIIllIIIllIlIIllIllII = Min(Global.lllllIIIllIIIllIlIIllIllII + 600, 15600);
		End;
		Global.IIIlIlIIIIllIlllllIIIIllIl[0] = Total Time Elapsed + 2;
		Global.IIIlIlIIIIllIlllllIIIIllIl[1] = 2;
	}
}

rule("IIlllIIIIlIIlIIIIIllIIIIlI")
{
	event
	{
		Subroutine;
		lllIIlllllIlllIllllIllIIll;
	}

	actions
	{
		If(Event Player != Host Player);
			Small Message(Event Player, Custom String("Only the host can change enemy levels."));
			Call Subroutine(llIIlIIIIIIIllIlllIIIIlIII);
			Abort;
		End;
		Abort If(Global.IIIlIlIIIIllIlllllIIIIllIl[1] && Global.IIIlIlIIIIllIlllllIIIIllIl[1] != 1);
		If(Global.IlllIIIIlIIIlIllIIlIlIlllI);
			Small Message(Event Player, Custom String("Cannot change Enemy Levels while boss is summoned/up"));
			Call Subroutine(llIIlIIIIIIIllIlllIIIIlIII);
			Abort;
		End;
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed - 0.100;
		If(Is Button Held(Event Player, Button(Jump)));
			Global.IIIllIIIlIIllIIIIlIllllllI = !Global.IIIllIIIlIIllIIIIlIllllllI;
			Global.IlIIIIllIllIllllIlIlIllllI[3] = !Global.IIIllIIIlIIllIIIIlIllllllI;
		Else If(Global.IIIllIIIlIIllIIIIlIllllllI);
			Global.IlIIIIllIllIllllIlIlIllllI[1] = Min(Max(Global.IlIIIIllIllIllllIlIlIllllI[1] + 1 - 2 * Is Button Held(Event Player, Button(
				Ultimate)), 0), 20);
		Else;
			Global.IlIIIIllIllIllllIlIlIllllI[0] = Min(Max(Global.IlIIIIllIllIllllIlIlIllllI[0] + 1 - 2 * Is Button Held(Event Player, Button(
				Ultimate)), -5), 5);
		End;
		Global.IIIlIlIIIIllIlllllIIIIllIl[0] = Total Time Elapsed + 2;
		Global.IIIlIlIIIIllIlllllIIIIllIl[1] = 1;
	}
}

rule("lllIIllIIIIlllIIIIlIlllllI")
{
	event
	{
		Subroutine;
		IlllIlIlIlllIIlIllIlllllll;
	}

	actions
	{
		If(Event Player != Host Player);
			Small Message(Event Player, Custom String("Only the host can change enemy health/exp."));
			Call Subroutine(llIIlIIIIIIIllIlllIIIIlIII);
			Abort;
		End;
		Abort If(Global.IIIlIlIIIIllIlllllIIIIllIl[1] && Global.IIIlIlIIIIllIlllllIIIIllIl[1] != 3);
		If(Global.IlllIIIIlIIIlIllIIlIlIlllI);
			Small Message(Event Player, Custom String("Cannot change enemy health/EXP while boss is summoned."));
			Call Subroutine(llIIlIIIIIIIllIlllIIIIlIII);
			Abort;
		End;
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed - 0.100;
		Global.IIIlIIIlIIllIIlllIlIIllIll = Min(Max(Global.IIIlIIIlIIllIIlllIlIIllIll + 0.100 - 0.200 * Is Button Held(Event Player,
			Button(Ultimate)), 1), 2);
		Global.IIIlIlIIIIllIlllllIIIIllIl[0] = Total Time Elapsed + 2;
		Global.IIIlIlIIIIllIlllllIIIIllIl[1] = 3;
	}
}

rule("lllIIIIlIIlIlllIIIlIllIlII")
{
	event
	{
		Subroutine;
		IllIIIIllIIllIIllIlIlIIlll;
	}

	actions
	{
		If(!Global.IlllIlllllIIllIlIlIIlIllll[0] && !Global.IlllIlllllIIllIlIlIIlIllll[1]);
			Small Message(Event Player, Custom String("On hit ability and visual effects disabled (lobby settings)"));
			Abort;
		End;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] += 1;
		If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] > 3);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] = 0;
		End;
		If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] == 0);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] += 2 * !Global.IlllIlllllIIllIlIlIIlIllll[0] + 1 * !Global.IlllIlllllIIllIlIlIIlIllll[1];
		Else If(Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] == 2);
			Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9] += 1 * !Global.IlllIlllllIIllIlIlIIlIllll[1];
		End;
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[10] = Array(True, True, False, False)[Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9]];
		Event Player.lIlIIIIlIIlIIlIIlIIIllllII[11] = Array(True, False, True, False)[Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9]];
		Skip(2 * Event Player.lIlIIIIlIIlIIlIIlIIIllllII[9]);
		Small Message(Event Player, Custom String("On hit effects: show all"));
		Abort;
		Small Message(Event Player, Custom String("On hit effects: show ability / hide visual"));
		Abort;
		Small Message(Event Player, Custom String("On hit effects: show visual / hide ability"));
		Abort;
		Small Message(Event Player, Custom String("On hit effects: hide all"));
	}
}

rule("IllIIIllIlIlIllIIIIlIIIlIl")
{
	event
	{
		Subroutine;
		IIIlIllIIIIllIIlllIIlIlIll;
	}

	actions
	{
		Global.lllIIIIllIIlIIllIlIIllllII = Round To Integer((Global.lllllIIIllIIIllIlIIllIllII + 600 * !(
			Global.lllllIIIllIIIllIlIIllIllII % 1) - Total Time Elapsed) / 60, To Nearest);
		Global.lllIIIIllIIlIIllIlIIllllII = Custom String("{0}h {1}{2}min", Round To Integer(Global.lllIIIIllIIlIIllIlIIllllII / 60, Down),
			Global.lllIIIIllIIlIIllIlIIllllII % 60 < 10 ? 0 : Custom String(""), Global.lllIIIIllIIlIIllIlIIllllII % 60);
	}
}

rule("lIIllIIllllIIIllIIlllIlIII")
{
	event
	{
		Subroutine;
		lIIIIlIllllIIIlIIllllIllll;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = Event Player.IllIlllllIIIlIllIllllllIII <= Total Time Elapsed + 1.500;
	}
}

rule("IIIIIIlIIIIllllIIIlIlIIlll")
{
	event
	{
		Subroutine;
		lIlIlIIllIIlllIlllllllllll;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = False;
		If(Is In Spawn Room(Event Player));
			Call Subroutine(IlIllIIIlllIIIllIIlllllllI);
			Abort;
		End;
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		If(Event Player.llIllIIIlIllllIIlIlIIIlllI > Total Time Elapsed);
			Small Message(Event Player, Custom String("Cannot use Town Portal in combat"));
			Abort;
		End;
		Call Subroutine(lIIlIIlIlllIIlllIlIllIllIl);
		Event Player.IIIIIlIlIlIllIlllllIIllIll = Global.IlIlIIIlIIllllIllIlllllIll;
		Call Subroutine(llIlIIIlIIlIIIIIllIlIIllIl);
		Call Subroutine(lllIlllIIIlIllllIIIIIIlIlI);
		Event Player.lllIlllIllIIIlIIIIlllllIIl = 2;
	}
}

rule("llIIlIllIlIlllIlIllIllIlIl")
{
	event
	{
		Subroutine;
		llIlIIIlllllIllIlIIIlllIIl;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = False;
		Call Subroutine(IlIllIIIlllIIIllIIlllllllI);
	}
}

rule("lIllIllIllllIlIlIIIIIIlIIl")
{
	event
	{
		Subroutine;
		IIIIlIllIlIIIlIlllllIIIllI;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = False;
		Call Subroutine(llIIlIIIIIIIllIlllIIIIlIII);
		Event Player.IIllIIllIIIIIlIlIIllIllllI = 1;
		If(Is In Spawn Room(Event Player));
			Small Message(Event Player, Custom String("Cannot use Soul Stone in town"));
			Abort;
		End;
		If(Event Player.IlllIlIIIIIlIlllIIIIlIllll < 1);
			Call Subroutine(IlllIIIIlIIlIIIIllllllllIl);
			Abort;
		End;
		Global.IlllIIIIlIIIlIllIIlIlIlllI = Event Player;
		Event Player.IIlIllllllIIlIIIllllIIllII -= 1;
		Small Message(All Players(Team 2), Custom String("{0} is summoning a boss", Event Player));
		Call Subroutine(IIIllIlIIllIllllIIIlllIlIl);
	}
}

rule("lIlIIllllIIlIlllIllIllllIl")
{
	event
	{
		Subroutine;
		IllllIIllIllllIIIIIIllIlII;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = False;
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		If(Is Duplicating(Event Player));
			Small Message(Event Player, Custom String("Cannot equip item while Duplicate is active"));
			Abort;
		End;
		If(!Event Player.lIlIIlIlIlIIIlIlllllIlIIII);
			Small Message(Event Player, Custom String("No item to equip in inventory"));
			Abort;
		End;
		If(Event Player.llIllIIIlIllllIIlIlIIIlllI > Total Time Elapsed || Health(Event Player) < Round To Integer(Max Health(Event Player)
			* 0.950, Down));
			Small Message(Event Player, Custom String("Cannot equip item when injured or in combat"));
			Abort;
		End;
		Global.IIIlllllIIIllllllIIllIlIIl = Total Time Elapsed + 2;
		Event Player.IIllIIlIIllIIlIIlIlllIIllI = False;
		Event Player.IIIlIllIlIIllIlIlllllIlIll = Empty Array;
		If(!Event Player.IIlIIIIllllIllIIlIIIIlIlll && Event Player.IIIlIlIllIlllIllllIlIllIll <= 59);
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] = 100 * (
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.lllllIIlllIlllllIIlIIlllII + 17] >= 100);
		End;
		Event Player.IIIllIIIlIlIlIlIlIllIIIlIl = Event Player.lllllIIlllIlllllIIlIIlllII;
		Event Player.lllllIIlllIlllllIIlIIlllII = Event Player.IlIllIIlllllllllIIIIllllll;
		Event Player.IlIllIIlllllllllIIIIllllll = Event Player.IIIllIIIlIlIlIlIlIllIIIlIl;
		Event Player.IlIlIIIlIIllIIIIllIlIIllll = Event Player.IlIllIIlllllllllIIIIllllll / 19 + 1 * (
			Event Player.lllllIIlllIlllllIIlIIlllII >= Event Player.IlIllIIlllllllllIIIIllllll);
		Call Subroutine(IIlIIIlllIIIllIlllIllllIII);
		Call Subroutine(lIIIIlIllIIIIlIIIIllIIlIlI);
		Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
		Call Subroutine(lllIllIlIIllllIlIlIlllllll);
		Call Subroutine(IIIlIIllllIlIlIlIlIlIlIIlI);
		Set Ability Charge(Event Player, Button(Ability 1), 0);
		Set Ability Charge(Event Player, Button(Ability 2), 0);
		Event Player.IllIlIlIIlIIIIIIIIlIlIlIlI = Total Time Elapsed + 0.250;
		Call Subroutine(lllllIIIllIlIIIlIlIllllllI);
		Call Subroutine(IIlIIlllIIIIIlIIIIllIIIIIl);
		Event Player.IlIlIlIlIIIlIIllIIlllllIIl[1] = True;
	}
}

rule("IIlIlIllIllllllllIlIlIlIlI")
{
	event
	{
		Subroutine;
		IIlIllIIllIlIIIIlIIIIllIll;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = False;
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 6;
		Global.lIlIlIIlIIIIlIllIIllllllll = Event Player.IlIllIIlllllllllIIIIllllll;
		If(Is Button Held(Event Player, Button(Crouch)) && !Event Player.lIlIlllIllIlIIIllllIllIlll[4]);
			If(!Event Player.lIlIIlIlIlIIIlIlllllIlIIII);
				Call Subroutine(llIIlIIIIIIIllIlllIIIIlIII);
				Small Message(Event Player, Custom String("No item in inventory"));
				Abort;
			Else;
				Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Global.lIlIlIIlIIIIlIllIIllllllll;
				Event Player.IIllIIllIllllllllIIlIIIIll = Custom String("Inventory:");
				If(Event Player.llllIIlIlllllllIIllIlIllII && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 5] < 3);
					Event Player.IIlIlIlIIlIIIllIllIlIIllll[5 + Global.lIlIlIIlIIIIlIllIIllllllll] = Event Player.llllIIlIlllllllIIllIlIllII + 2;
					For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 2, 5, 1);
						Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIIlllIllllIlIIIIlIllIIIlI + Global.lIlIlIIlIIIIlIllIIllllllll] = 0;
					End;
				End;
				Global.IIIllIIIlllIllIIlIIIllllII = Round To Integer((Event Player.llllIIlIlllllllIIllIlIllII == True)
					* Event Player.IIlIlIlIIlIIIllIllIlIIllll[Global.lIlIlIIlIIIIlIllIIllllllll + 2], Down);
				Call Subroutine(lIIIIllIIlIllIlllllIlllIII);
				Event Player.lIlIlIIIIllIlllIIIIIlIlIll = Global.IlIllIIIlIIIIIIllIIIIIIIIl;
			End;
		Else;
			Event Player.lIlIlllIllIlIIIllllIllIlll[4] = 0;
			Event Player.llIlIIllIIIIIIIIlIlIlIIlII = Event Player.lllllIIlllIlllllIIlIIlllII;
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll = Event Player.llllllIllIIlllllIlIIlIIllI;
			Event Player.IIllIIllIllllllllIIlIIIIll = Custom String("Equipped:");
		End;
		Event Player.lIllIIlIllllIlIIIllIIllIlI = Event Player.llllIIlIlllllllIIllIlIllII && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 2] < 5 && (
			!Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 1] || Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 1] >= 4)
			? Custom String("Arcane Crystal Fragments: {0}",
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 3]) : Custom String("");
		Big Message(Event Player, Custom String("{0}\r\nAttack: {1}\r\nDefense: {2}", Event Player.IIllIIllIllllllllIIlIIIIll,
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 6], Custom String(
			"{0}\r\nHealth: {1}\r\nSpeed: {2}", Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 7],
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 8], Custom String(
			"{0}\r\nSustain: {1}\r\n{2}", Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 9],
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.llIlIIllIIIIIIIIlIlIlIIlII + 10],
			Event Player.lIllIIlIllllIlIIIllIIllIlI))));
		Wait(3, Ignore Condition);
		Call Subroutine(lIlIlllllIIIlllllIIIllIIII);
		Big Message(Event Player, Custom String("Crit: {0}\r\nBurning: {1}\r\n{2}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll[1],
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll[2], Custom String("Lifesteal: {0}\r\nUlt Charge: {1}\r\n{2}",
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll[3], Event Player.lIlIlIIIIllIlllIIIIIlIlIll[4], Custom String(
			"Root: {0}\r\nTeleport: {1}\r\nVisual Effect: {2}", Event Player.lIlIlIIIIllIlllIIIIIlIlIll[5],
			Event Player.lIlIlIIIIllIlllIIIIIlIlIll[6], Event Player.lIlIlIIIIllIlllIIIIIlIlIll[8]))));
		Wait(3, Ignore Condition);
	}
}

rule("IlllllIlIlIIlIlllllIlIllIl")
{
	event
	{
		Subroutine;
		llIIlIlIIIIIllIIlIllIIIlII;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = False;
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 0.250;
		Call Subroutine(lIIIIIIllIIllIlIIIlIlIlIll);
		If(Distance Between(Event Player, Global.IIIIlllIIIIlIIIlIIIIllllIl) <= 2.500 + 15 * (
			Event Player.llllllIllIIlllllIlIIlIIllI[0] == 2) * !(
			Event Player.llIIIlllIIIlllllIIllIIIIIl[Global.lIIIIIllllIlIIIIlIIIlIIIll] % 1) * Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1]);
			Skip If(
				Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] && Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] != Global.IIIIlllIIIIlIIIlIIIIllllIl,
				2);
			Call Subroutine(lIIllllIIIlIlIIIIllIIIIIll);
			Abort;
		End;
		If(
			Event Player.lIlllllllllIllllIIIIlllIlI >= 6 && Event Player.IIIIlllIllIIIllIllIlIlIlll < Event Player.IllllIIlllllIIllIIllIlIlIl && Distance Between(
			Event Player, Event Player.IIIllIIlIlIIIlllllllIIIlIl) <= 1.750 + 1 * (Event Player.lIlllllllllIllllIIIIlllIlI >= 7));
			Call Subroutine(lIlIIlIllllllIIllllllIIIIl);
			Abort;
		End;
		Abort If(Is Duplicating(Event Player) || Distance Between(Event Player, Global.IlIlIIIlIIllllIllIlllllIll)
			> Global.IIIlIIlIIIIIlIlIIIlIllIlII);
		Call Subroutine(lIlIllllIllllIIIllllIIIIlI);
		Abort If(Distance Between(Event Player, Global.IIIlIlllIllllIlllllllIIlII) > 1.750);
		Abort If(
			Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] && Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] != Global.IIIlIlllIllllIlllllllIIlII);
		Global.IlIIlIIIlllIIlIllIIIIIllIl = Index Of Array Value(Global.IllIlIIIlIlIIIlIlllIIIllII, Global.IIIlIlllIllllIlllllllIIlII);
		Call Subroutine(llIIlIIIIIIIllIlllIIIIlIII);
		Call Subroutine(llllIllIlIIIIIllIlIIIIIIIl);
	}
}

rule("llIIlIlIIlIIIlIlIlllllIIII")
{
	event
	{
		Subroutine;
		lIIIIIIllIIllIlIIIlIlIlIll;
	}

	actions
	{
		Global.IIIIlllIIIIlIIIlIIIIllllIl = First Of(Sorted Array(Event Player.lIIIIllIIIIIlIIIIllllIlIlI, Distance Between(
			Current Array Element, Position Of(Event Player))));
		Global.lIIIIIllllIlIIIIlIIIlIIIll = Index Of Array Value(Event Player.lIIIIllIIIIIlIIIIllllIlIlI,
			Global.IIIIlllIIIIlIIIlIIIIllllIl);
		Abort If(Event Player.llllllIllIIlllllIlIIlIIllI[0] != 2 || Distance Between(Global.IIIIlllIIIIlIIIlIIIIllllIl, Event Player)
			<= 2.500);
		Global.lIIIIIllllIlIIIIlIIIlIIIll = First Of(Sorted Array(Array Slice(Global.llIlIlIllIIllIlIlllIIlllIl, 0, 3), Distance Between(
			Event Player.lIIIIllIIIIIlIIIIllllIlIlI[Current Array Element], Event Player) - 15 * !(
			Event Player.llIIIlllIIIlllllIIllIIIIIl[Current Array Element] % 1) * Event Player.IIIIIIIIlIIlIIIIIIIllIIIII[1]));
		Global.IIIIlllIIIIlIIIlIIIIllllIl = Event Player.lIIIIllIIIIIlIIIIllllIlIlI[Global.lIIIIIllllIlIIIIlIIIlIIIll];
		End;
	}
}

rule("IIIIIlIIIllIIlIlllIIIllIlI")
{
	event
	{
		Subroutine;
		lIlIllllIllllIIIllllIIIIlI;
	}

	actions
	{
		Global.IIIlIlllIllllIlllllllIIlII = First Of(Sorted Array(Global.IllIlIIIlIlIIIlIlllIIIllII, Distance Between(
			Current Array Element, Event Player)));
	}
}

rule("IlIIlIllllIllIllIllIlllIII")
{
	event
	{
		Subroutine;
		IllIIIIllIlIIIIIlIlIlIlIll;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = False;
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 0.250;
		Call Subroutine(lIlIllllllllIIIIllIlIlIIlI);
		Abort If(Global.llllIIIIllIIlIlIIllIIllIll);
		Abort If(Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] && Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] != 1);
		Abort If(Event Player.IllIIIlIlllIllIlIIllIllIII);
		Call Subroutine(IIIIlIIlIllIlllIIIIlIlllII);
	}
}

rule("IlllllIIllIIIIIIIlIllIIlll")
{
	event
	{
		Subroutine;
		lIIIlllIlIIllIlllllllIlllI;
	}

	actions
	{
		Event Player.lIlIIlIIlIllIIIIIlIlIIIIll = False;
		Call Subroutine(lIlIllllllllIIIIllIlIlIIlI);
		Abort If(Global.llllIIIIllIIlIlIIllIIllIll);
		Abort If(Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] && Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] != 1);
		If(Event Player.lIlIlllIllIlIIIllllIllIlll[2] && Event Player.IllIIIlIlllIllIlIIllIllIII);
			Call Subroutine(IIIIlIIlIllIlllIIIIlIlllII);
			Abort;
		End;
		Abort If(!Event Player.lIlIIlIlIlIIIlIlllllIlIIII);
		If(!Event Player.lIlIlllIllIlIIIllllIllIlll[0]);
			If(Event Player.lIlIIlIlIlIIIlIlllllIlIIII >= 2);
				Event Player.IlIlIIIlIIllIIIIllIlIIllll += 1;
				Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
				Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 0.500;
			End;
			Abort;
		End;
		Event Player.IllIlllllIIIlIllIllllllIII = Total Time Elapsed + 0.250;
		Abort If(!Event Player.IIIlIlIllIlllIllllIlIllIll);
		Global.IIIlIlllIllllIlllllllIIlII = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 1.500, All Players(Team 2), Event Player, False) + Vector(0, -1.250, 0);
		Event Player.IIIIlIIlIIlIlIIllIIlIIIIII = First Of(Sorted Array(Filtered Array(Remove From Array(All Players(Team 2),
			Event Player), Current Array Element.IIIlIlIllIlllIllllIlIllIll && Distance Between(Current Array Element,
			Global.IIIlIlllIllllIlllllllIIlII) <= 1.250), Distance Between(Current Array Element, Global.IIIlIlllIllllIlllllllIIlII)));
		Abort If(!Array Contains(All Players(Team 2), Event Player.IIIIlIIlIIlIlIIllIIlIIIIII));
		Event Player.IIllIIllIIIIIlIlIIllIllllI = Event Player.lIIIIIllIlIIlIlIIIlIlIIlII;
		If(
			!Event Player.lIIIIIllIlIIlIlIIIlIlIIlII && Event Player.IIIlIlIllIlllIllllIlIllIll > 59 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 17] % 100 > 25);
			Small Message(Event Player, Custom String("Item cannot be gifted (Super Novice)"));
			Abort;
		End;
		If(Event Player.lIIIIIllIlIIlIlIIIlIlIIlII >= 5);
			Small Message(Event Player, Custom String("Item cannot be gifted ({0})",
				Global.lIIlIllllllIlllIlIIlIIllll[Event Player.lIIIIIllIlIIlIlIIIlIlIIlII]));
			Abort;
		End;
		If(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 5] > 2 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 2]);
			Small Message(Event Player, Custom String("Item cannot be gifted (enchanted)"));
			Abort;
		End;
		If(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 5] > 2 && Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 3]);
			Small Message(Event Player, Custom String("Item cannot be gifted (infused with Arcane Crystal Fragment)"));
			Abort;
		End;
		If(Event Player.IIIlIlIllIlllIllllIlIllIll > 99 && Event Player.IIIIlIIlIIlIlIIllIIlIIIIII.IIIlIlIllIlllIllllIlIllIll <= 99);
			Small Message(Event Player, Custom String("Recipient needs to be level 100+"));
			Abort;
		End;
		If(Event Player.IIIIlIIlIIlIlIIllIIlIIIIII.llIlIIIlIlIIlIIIllllIlllII < Event Player.llIlIIIlIlIIlIIIllllIlllII - 15);
			Small Message(Event Player, Custom String("Recipient's level is too low"));
			Abort;
		End;
		If(Event Player.IlllIlIIIIIlIlllIIIIlIllll < Event Player.IIllIIllIIIIIlIlIIllIllllI);
			Call Subroutine(IlllIIIIlIIlIIIIllllllllIl);
			Abort;
		End;
		If(Event Player.IIIIlIIlIIlIlIIllIIlIIIIII.lIlIIlIlIlIIIlIlllllIlIIII >= 5);
			Small Message(Event Player, Custom String("{0}'s Inventory is full", Event Player.IIIIlIIlIIlIlIIllIIlIIIIII));
			Abort;
		End;
		If(Event Player.IIIIlIIlIIlIlIIllIIlIIIIII.IllIlllllIIIlIllIllllllIII > Total Time Elapsed);
			Small Message(Event Player, Custom String("Player is not ready"));
			Abort;
		End;
		Call Subroutine(IIIllIlIIllIllllIIIlllIlIl);
		If(!Event Player.lIIIIIllIlIIlIlIIIlIlIIlII);
			For Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, 11, 17, 1);
				Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + Global.IlllllIIlIIllIlIlIIIlIlIlI] = 0;
			End;
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 17] = 100;
		Else;
			Event Player.IIlIlIlIIlIIIllIllIlIIllll[Event Player.IlIllIIlllllllllIIIIllllll + 17] += 100;
		End;
		Event Player.lIlIIlIlIlIIIlIlllllIlIIII -= 1;
		Modify Player Variable(Event Player.IIIIlIIlIIlIlIIllIIlIIIIII, IIlIlIlIIlIIIllIllIlIIllll, Append To Array, Array Slice(
			Event Player.IIlIlIlIIlIIIllIllIlIIllll, Event Player.IlIllIIlllllllllIIIIllllll, 19));
		Global.lIIlllIllllIlIIIIlIllIIIlI = Event Player.IlIllIIlllllllllIIIIllllll;
		For Global Variable(IlllllIIlIIllIlIlIIIlIlIlI, 0, 19, 1);
			Modify Player Variable(Event Player, IIlIlIlIIlIIIllIllIlIIllll, Remove From Array By Index, Global.lIIlllIllllIlIIIIlIllIIIlI);
		End;
		Event Player.lllllIIlllIlllllIIlIIlllII -= (Event Player.lllllIIlllIlllllIIlIIlllII >= Event Player.IlIllIIlllllllllIIIIllllll)
			* 19;
		If(Event Player.IlIlIIIlIIllIIIIllIlIIllll > Event Player.lIlIIlIlIlIIIlIlllllIlIIII);
			Event Player.IlIlIIIlIIllIIIIllIlIIllll = Event Player.lIlIIlIlIlIIIlIlllllIlIIII;
		End;
		Call Subroutine(IllIIllIIIIIllIIIIllIIIlII);
		Small Message(Event Player, Custom String("Item gifted to {0}", Event Player.IIIIlIIlIIlIlIIllIIlIIIIII));
		Event Player.IIIIlIIlIIlIlIIllIIlIIIIII.lIlIIIIlIIlIIlIIlIIIllllII[3] = Custom String("Obtained a gift from {0}", Event Player);
		Event Player.IIIIlIIlIIlIlIIllIIlIIIIII.lllIlIlIlIIIIlIIllIIlIIIIl = True;
	}
}

rule("llIIIllIIllIIlllllIlIllIIl")
{
	event
	{
		Subroutine;
		lIlIllllllllIIIIllIlIlIIlI;
	}

	actions
	{
		Global.llllIIIIllIIlIlIIllIIllIll = False;
		If(Distance Between(Event Player, Global.IlIlIIIlIIllllIllIlllllIll) <= Global.IIIlIIlIIIIIlIlIIIlIllIlII && !Is Duplicating(
			Event Player));
			Global.IIIlIlllIllllIlllllllIIlII = First Of(Sorted Array(Array Slice(Global.IllIlIIIlIlIIIlIlllIIIllII, 2, 9), Distance Between(
				Current Array Element, Event Player)));
			If(Distance Between(Event Player, Global.IIIlIlllIllllIlllllllIIlII) <= 1.750);
				Skip If(
					Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] && Event Player.lIlIlIIIlllIIIIlIIlIlllllI[0] != Global.IIIlIlllIllllIlllllllIIlII,
					2);
				Global.IlIIlIIIlllIIlIllIIIIIllIl = Index Of Array Value(Global.IllIlIIIlIlIIIlIlllIIIllII, Global.IIIlIlllIllllIlllllllIIlII);
				Call Subroutine(lIIlllIlllIIllIllllllIllII);
				Global.llllIIIIllIIlIlIIllIIllIll = True;
				Abort;
			End;
		End;
	}
}

rule("IIIIlIIlllIllIIlllIIIIIlll")
{
	event
	{
		Subroutine;
		IlIllIIIlIIIIIlIIlIlIIlIIl;
	}

	actions
	{
		Abort If(!Global.IlllllIIlIIllIlIlIIIlIlIlI);
		Skip(2 * (Global.IlllllIIlIIllIlIlIIIlIlIlI - 1));
		Call Subroutine(IIIIlllllIIIlllIIlllIllllI);
		Abort;
		Call Subroutine(IllIIIIIllIlllllIlIllIlllI);
		Abort;
		Call Subroutine(IIlIIIIIIllIlIlllIllIIIlll);
		Abort;
		Call Subroutine(lllIIIlIlIllIIIlIIIIIlIIIl);
		Abort;
		Call Subroutine(IIlIIllIlIllIIIlllIlllllll);
		Abort;
		Call Subroutine(IlIlIlIIIIIlllllllllIlllIl);
		Abort;
		Call Subroutine(llIIlIIlIllIIlIllIIlIlIIII);
		Abort;
		Call Subroutine(lllIIIIIIllIlIIlIIlIIIIIII);
		Abort;
		Call Subroutine(lllllllIIIIIIIllIIllllIIlI);
	}
}

rule("lIIlIlIlIllIIlIIIIIlIllIlI")
{
	event
	{
		Subroutine;
		IIIIlllllIIIlllIIlllIllllI;
	}

	actions
	{
		Abort If(Event Player.IlllIllIlIlllIlIlIIlIllIlI != 1);
		Event Player.lIlIlllIIlIlllIIIIllIIlIlI = First Of(Filtered Array(Event Player.IIlIllllIllIIllIlIIlIIlIll[1], Is In View Angle(
			Event Player, Current Array Element, 2.400)));
		If(Event Player.lIlIlllIIlIlllIIIIllIIlIlI);
			Event Player.lIlIlllIIlIlllIIIIllIIlIlI = Index Of Array Value(Event Player.IIlIllllIllIIllIlIIlIIlIll[1],
				Event Player.lIlIlllIIlIlllIIIIllIIlIlI) + 1;
			If(Event Player.lIlIlllIIlIlllIIIIllIIlIlI <= 10);
				If(Event Player.IIllIlllIllIIIllIIIlllIIII > Total Time Elapsed);
					Event Player.IIIlIIIIlIlllllIllIlIIlllI += 1;
					Call Subroutine(lIllIlllIIIlIllIIIlIlIlIlI);
				End;
				Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 10);
				Event Player.llIIllllIIlIIIIIIIlIlIlllI[Event Player.IIIlIIIIlIlllllIllIlIIlllI] = Event Player.lIlIlllIIlIlllIIIIllIIlIlI;
				Call Subroutine(llllIlIllIIIlIIIlllIIlIIIl);
				Event Player.IIllIlllIllIIIllIIIlllIIII = Total Time Elapsed + 0.305;
				Wait(0.050, Restart When True);
				Event Player.lIlIlIIlIIIllIIIlIIlIllIIl = Total Time Elapsed + 0.050;
				Wait(0.250, Restart When True);
				Event Player.IIIlIIIIlIlllllIllIlIIlllI += 1;
			Else;
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 10);
				Event Player.IIIlIIIIlIlllllIllIlIIlllI += (2 * Event Player.lIlIlllIIlIlllIIIIllIIlIlI - 23) * (1 + 3 * Is Button Held(
					Event Player, Button(Jump)));
			End;
			Call Subroutine(lIllIlllIIIlIllIIIlIlIlIlI);
			Abort;
		End;
		Event Player.lIlIlllIIlIlllIIIIllIIlIlI = False;
		Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 10);
	}
}

rule("lIIIIIlIlIIllllIlIllIllIIl")
{
	event
	{
		Subroutine;
		IllIIIIIllIlllllIlIllIlllI;
	}

	actions
	{
		Abort If(Event Player.IlllIllIlIlllIlIlIIlIllIlI != 1);
		Event Player.llIIllllIIlIIIIIIIlIlIlllI[Event Player.IIIlIIIIlIlllllIllIlIIlllI] += 1 + 1 * Is Button Held(Event Player, Button(
			Jump));
		Call Subroutine(llllIlIllIIIlIIIlllIIlIIIl);
	}
}

rule("IIlllIIIIIllIIlllIlIlIlIIl")
{
	event
	{
		Subroutine;
		IIlIIIIIIllIlIlllIllIIIlll;
	}

	actions
	{
		Abort If(Event Player.IlllIllIlIlllIlIlIIlIllIlI != 1);
		Event Player.llIIllllIIlIIIIIIIlIlIlllI[Event Player.IIIlIIIIlIlllllIllIlIIlllI] -= 1 + 1 * Is Button Held(Event Player, Button(
			Jump));
		Call Subroutine(llllIlIllIIIlIIIlllIIlIIIl);
	}
}

rule("llIlIIlllIIIIIIllIIIlIIIII")
{
	event
	{
		Subroutine;
		lllIIIlIlIllIIIlIIIIIlIIIl;
	}

	actions
	{
		If(Event Player.IlllIllIlIlllIlIlIIlIllIlI == 2);
			Event Player.lIIIlIIllIIIlllllIIIIllIlI += 1;
			Call Subroutine(lIIlllIlIIlIIIllIllllIlllI);
			Abort;
		End;
		Event Player.IIIlIIIIlIlllllIllIlIIlllI += 1 + 3 * Is Button Held(Event Player, Button(Jump));
		Call Subroutine(lIllIlllIIIlIllIIIlIlIlIlI);
	}
}

rule("llIllIIIllIIlIllllllIllIlI")
{
	event
	{
		Subroutine;
		IIlIIllIlIllIIIlllIlllllll;
	}

	actions
	{
		If(Event Player.IlllIllIlIlllIlIlIIlIllIlI == 2);
			Event Player.lIIIlIIllIIIlllllIIIIllIlI -= 1;
			Call Subroutine(lIIlllIlIIlIIIllIllllIlllI);
			Abort;
		End;
		Event Player.IIIlIIIIlIlllllIllIlIIlllI -= 1 + 3 * Is Button Held(Event Player, Button(Jump));
		Call Subroutine(lIllIlllIIIlIllIIIlIlIlIlI);
	}
}

rule("lIllIllllIllllIIlIIIlIIlll")
{
	event
	{
		Subroutine;
		IlIlIlIIIIIlllllllllIlllIl;
	}

	actions
	{
		Abort If(Event Player.IlllIllIlIlllIlIlIIlIllIlI != 1);
		Abort If(Event Player.lllIIlllIIlIIlllIIIIlllIlI[6] > Total Time Elapsed);
		Call Subroutine(IllIIIlIIIIlllIllIlIlIlllI);
	}
}

rule("IIlllIIIllllIlIlIIlIlIlIII")
{
	event
	{
		Subroutine;
		llIIlIIlIllIIlIllIIlIlIIII;
	}

	actions
	{
		If(Event Player.IlllIllIlIlllIlIlIIlIllIlI == 2);
			Call Subroutine(IlIllIllIllIlIlIIlIIIlllIl);
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Reload)));
			Event Player.llIIllllIIlIIIIIIIlIlIlllI = Empty Array;
			For Global Variable(lIIlllIllllIlIIIIlIllIIIlI, 0, 4, 1);
				Event Player.lllIIlllIIlIIlllIIIIlllIlI[Global.lIIlllIllllIlIIIIlIllIIIlI] = 0;
			End;
			Event Player.lllIIlllIIlIIlllIIIIlllIlI[4] = Custom String("^___");
			Event Player.IIIlIIIIlIlllllIllIlIIlllI = False;
			Event Player.lIlIIIIIIlIIlIlIlIIlIIIIlI = False;
			Abort;
		End;
		Call Subroutine(IlIllIllIllIlIlIIlIIIlllIl);
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		Event Player.lllIIlllIIlIIlllIIIIlllIlI = Empty Array;
	}
}

rule("llIlIIIIIIIIlIlllIllllIlII")
{
	event
	{
		Subroutine;
		lllIIIIIIllIlIIlIIlIIIIIII;
	}

	actions
	{
		Abort If(Event Player.IlllIllIlIlllIlIlIIlIllIlI != 1);
		Event Player.IIlIllllIllIIllIlIIlIIlIll[0] = Absolute Value(Angle Difference(Global.IlIllllIIIIIIIIlllIIllIIII,
			Horizontal Angle From Direction(Facing Direction Of(Event Player)))) / 9.388;
		Call Subroutine(IIIlIlllllIlIlllIIIllIIllI);
		Small Message(Event Player, Custom String("Field of View Adjusted"));
		Wait(1, Ignore Condition);
	}
}

rule("IIIlIIlIllIIIlIlIIIIllIIII")
{
	event
	{
		Subroutine;
		lllllllIIIIIIIllIIllllIIlI;
	}

	actions
	{
		Abort If(!Is Button Held(Event Player, Button(Reload)));
		Event Player.IIlIIIIIIllIIlIlIIIlllllIl = 1 * !Event Player.IIlIIIIIIllIIlIlIIIlllllIl;
		Call Subroutine(IllllllIlIlIIIlIlIIIlIIlII);
		If(Event Player.IIlIIIIIIllIIlIlIIIlllllIl);
			Small Message(Event Player, Custom String("Control Scheme: Legacy"));
		Else;
			Small Message(Event Player, Custom String("Control Scheme: Gamepad"));
		End;
		Wait(1, Ignore Condition);
	}
}

rule("IllIIllIIlIlIlIIllllIllllI")
{
	event
	{
		Subroutine;
		IIIlIlllllIlIlllIIIllIIllI;
	}

	actions
	{
		Event Player.IIlIllllIllIIllIlIIlIIlIll[1] = Mapped Array(Array(Vector(5.345, -9.893, 0), Vector(0.412, -9.893, 0), Vector(-4.515,
			-9.893, 0), Vector(5.345, -4.636, 0), Vector(0.412, -4.636, 0), Vector(-4.515, -4.636, 0), Vector(5.345, 0.769, 0), Vector(
			0.412, 0.769, 0), Vector(-4.515, 0.769, 0), Vector(-9.388, 0.769, 0), Vector(-9.179, -9.893, 0), Vector(-9.091, -4.636, 0)),
			Global.llIlIIIlllIlIllllllllllIII + Direction From Angles(Global.IlIllllIIIIIIIIlllIIllIIII + X Component Of(
			Current Array Element) * Event Player.IIlIllllIllIIllIlIIlIIlIll[0], Y Component Of(Current Array Element)
			* Event Player.IIlIllllIllIIllIlIIlIIlIll[0]) * 1000);
	}
}
