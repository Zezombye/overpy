settings
{
	main
	{
		Description: "What if you could play Junkenstein's Revenge from the villains' POV?\r\n\r\nPlay as the mad Dr.​ Junkenstein, his fearsome Monster, the grim Reaper and the wicked Witch as you slaughter your way into the castle of Adlersbrunn to kill the ***** once and for all!\r\n\r\nA unique PvE experience with custom dialogue, cutscenes, enemies, upgrades and more! Get your revenge and claim your victory!\r\n\r\nV1.5.19 - Check out my YouTube & Discord! >>bit.ly/therister<<"
		Mode Name: "Junkenstein's Victory V1.5.19"
	}

	lobby
	{
		Map Rotation: Paused
		Max Team 1 Players: 0
		Max Team 2 Players: 4
		Return To Lobby: After A Game
		Swap Teams After Match: No
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Eichenwalde Halloween 0
			}
		}

		General
		{
			Game Mode Start: Immediately
			Respawn Time Scalar: 20%
		}
	}

	heroes
	{
		Team 1
		{
			Ability Cooldown Time: 0%
			No Ammunition Requirement: On

			Ashe
			{
				Dynamite Fuse Time Scalar: 20%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 200%
				Barrier Shield Recharge Rate: 500%
				Health: 360%
				Shield Bash Knockback Scalar: 300%
			}

			Cassidy
			{
				Health: 500%
			}

			Genji
			{
				Health: 500%
				Infinite Ultimate Duration: Enabled
				Spawn With Ultimate Ready: Enabled
			}

			Lúcio
			{
				Ultimate Generation - Passive Sound Barrier: 150%
			}

			Torbjörn
			{
				Health: 80%
				Infinite Ultimate Duration: Enabled
			}
		}

		Team 2
		{
			Ultimate Generation: 50%

			Torbjörn
			{
				Health: 80%
			}

			enabled heroes
			{
				Junkrat
				Mercy
				Reaper
				Roadhog
			}
		}
	}

	extensions
	{
		Beam Effects
		Buff and Debuff Sounds
		Buff Status Effects
		Debuff Status Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: _objectVariable_0
		1: _objectVariable_1
		2: _objectVariable_2
		3: _classIndexes
		4: _extendedGlobalCollection
		5: _tempNodes
		6: _tempSegments
		7: _tempAttributes
		8: map
		9: compressBakeMatcher
		10: compressedNodes
		11: compressBakeResult
		12: compressCurrentNodeArray
		13: compressBakeNodeLoop
		14: compressBakeStringLoop
		15: compressMapper
		16: bake
		17: newline
		18: main_dialogue
		19: main_speaker
		20: i_vocal
		21: i2_vocal
		22: euros_total
		23: is_dialoguing
		24: ana_start_nana
		26: active_dialogue_list
		27: line_number
		28: letter_scroll
		29: dialogue_bot
		30: t2_heroes_array
		31: t2_names_array
		32: t2_hero_colours
		33: vocalisation
		34: respawn_enemy
		35: difficulty
		36: spawn_corners
		37: spawn_line
		38: phase
		39: objective
		40: obj_color_r
		41: obj_color_g
		42: obj_color_b
		43: skip_cutscene_pos
		44: dialogue_priority
		45: spawn_doors
		46: i3
		47: enemy_spawn
		48: scripted_spawns
		49: objective_pos
		50: first_kill
		51: boundary_corners
		52: boundary_line
		53: boundary_effects
		54: objective_value
		56: boundary_corners_2
		57: boundary_line_2
		58: return_cam
		59: boss
		60: objective_complete
		61: defeat
		62: last_player_to_die
		64: merchant
		65: shop_open
		66: shop_campos
		67: shop_left
		69: enemy_ID_sequence
		70: subtitle_speed
		71: potions_price
		72: i4
		73: no_hud
		74: fullwidth_spaces
		75: dragon_blood_qty
		76: enemy_spawn_2
		77: dragon_blood_spawn
		78: dragon_blood_hint_icon
		79: zomnic_spawns
		80: dragon_blood_actual_spawn
		81: dragon_blood_effects
		82: mercy_drop
		83: dragon_blood_cache
		84: last_collected_blood
		85: numbers
		86: cowboy_tp_array
		87: boundary_effects_2
		88: i5
		89: pentagram_pos
		90: pentagram_radius
		91: pentagram_angle
		92: pentagram_effects
		93: summoner
		94: door
		95: summoner_effects
		96: summoner_chars
		97: hint
		98: door_health
		99: summoner_power
		100: door_color
		101: summoner_color
		102: door_explosion
		103: obj_cache
		104: spawn_door_effects
		105: shop_angle
		106: i6
		107: ana_spawn_fix
		108: i7
		109: water_you_doin
		110: door_explosion_victims
		111: real_total
		112: mercy
		113: roar
		114: junkrat
		115: reaper
		116: faq_bot
		117: cowboy_name
		118: name_colors_2
		119: sombra_egg
		120: skull_effect
		121: wait
		122: pathmapReference
		123: all_nodes
		124: lol2
		125: lol3
		126: lol4
		127: mystery_door

	player:
		1: pathfinderCurrent
		3: parentArray
		4: destination
		6: egg
		7: target
		8: start_pathfind
		9: enemy_ID
		10: strafe
		11: is_downed
		12: immune_effect
		13: took_knockback
		14: rein_throttle_mag
		15: bot_jump
		16: grillager_activate
		17: grillager_victims
		18: damage_dealt
		19: damage_received
		20: i
		21: euros
		22: i2
		23: in_boundary
		24: boss_ID
		25: cutscene_cam_pos
		26: cutscene_cam_lookat
		27: cutscene_cam_speedup
		28: pre_init
		29: zomnic
		30: avoid_enviro
		31: attack
		32: boss_target_location
		33: turn_rate
		34: has_status
		35: no_jump
		36: boss_target_location_2
		37: throttle_mag
		38: boss_pet
		39: death_timer
		40: revive_timer
		41: shop
		42: potions
		43: killer
		45: effects
		46: max_health
		47: max_ammo
		48: random
		49: burner
		50: no_dialogue
		51: is_shopping_text_ID
		52: shop_selection
		53: safeguard_fix
		54: in_spawn
		55: blood_collected
		56: blood_cache
		57: mine_cache
		58: potions_max
		59: pos_cache
		60: tping
		61: trail
		62: trail_cache
		63: late_join_check
		64: exploding
		65: zomnic_top
		66: zomnic_dest
		67: dead_summoner
		68: extra_lives_used
		69: ana_target_friends
		70: boss_effects
		71: gas_radius
		72: gas_pos
		73: poisoned
		74: speed_boosted
		75: speed
		76: speed_effect
		77: blind
		78: nano
		79: nano_effect
		80: blind_radius
		81: poison_effect
		82: bright
		83: scrolls_equip
		84: scrolls_random
		85: real
		86: heal_target
		87: electrify
		88: electrify_effect
		89: roar_effect
		90: ammo_cache
		91: create_scroll
		92: faraday_effect
		93: death_mark
		95: scythe_swing
		96: damage_target
		97: ubercharge_target
		98: ubercharge_effect
		100: hex
		101: grasp_effect
		102: is_grasping
		103: scythe_angle
		104: scythe_length
		105: broomsticked
		106: piss_ending
		107: sombra_sound
		108: falloff_pos
		109: falloff
		110: falloff_effect
		111: rezzing_players
		112: button_damageboost
		113: button_rez
		114: boss_phase
		115: no_pickup
}

subroutines
{
	0: InitialGlobal_2
	1: InitialGlobal_3
	2: InitialGlobal_4
	3: main_dialogue
	4: pathfind_init
	5: pond
	6: obj_color
	7: egg
	8: cowboy_tp
	9: mercy_drop_blood
	12: shop_ui_setup
	13: genji_pet_strike
	14: spawn_enemies
	15: delete_bound_effects
	16: boss_zoomin
	17: phase_11_spawn
}

rule("global init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Global.subtitle_speed = Workshop Setting Real(Custom String("General"), Custom String("Subtitle speed"), 4, 1, 10, 1);
		Global.difficulty = Workshop Setting Combo(Custom String("General"), Custom String("Difficulty"), 3, Array(Custom String(
			"Cinematic "), Custom String("Dead Easy "), Custom String("Para-Normal "), Custom String("Terrifying! "), Custom String(
			"JUNKTASTICALLY NIGHTMARISH!!!")), 0) - 1;
		Global.newline = Custom String("\n");
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(" {0}{0}{1}{2}", Custom String("{0}{0}{0}{0}{0}{0}{0}{0}{0}",
			Global.newline), Global.newline, Global.objective_complete || Global.no_hud ? Custom String("{0}{0}{0}{0}", Global.newline)
			: Custom String(" ")), Top, True, Null, Null, Color(White), Visible To and String, Default Visibility);
		Wait(False, Ignore Condition);
		Global.t2_names_array = Array(Custom String("The Witch"), Custom String("Dr.​ Junkenstein"), Custom String(
			"Junkenstein's Monster"), Custom String("The Reaper"), Null, Custom String("The Swordsman"), Custom String("The Merchant"),
			Custom String("The Gunslinger"), Custom String("The Summoner"), Custom String("The Alchemist"), Null);
		Global.t2_heroes_array = Array(Hero(Mercy), Hero(Junkrat), Hero(Roadhog), Hero(Reaper), Hero(Reinhardt), Hero(Genji), Hero(Moira),
			Hero(Cassidy), Hero(Symmetra), Hero(Ana), Hero(Sombra));
		Global.t2_hero_colours = Array(Custom Color(246, 231, 100, 255), Custom Color(False, 255, 255, 255), Custom Color(92, 198, 86,
			255), Custom Color(173, False, False, 255), Color(White), Custom Color(100, 255, 100, 255), Custom Color(130, 40, 255, 255),
			Custom Color(255, 50, 50, 255), Custom Color(255, 119, False, 255), Custom Color(54, 114, 255, 255), Custom Color(169, 135,
			255, 255));
		Global.name_colors_2 = Array(Custom Color(255, 250, 204, 255), Custom Color(156, 255, 255, 255), Custom Color(162, 207, 159, 255),
			Custom Color(196, 84, 84, 255));
		Wait(False, Ignore Condition);
		For Global Variable(i5, 0, 3, True);
			Create Effect(All Players(All Teams), Cloud, Color(White), Vector(73.565, 11.500, -78.868), 7, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Cloud, Color(White), Vector(71.114, 11.500, -85.222), 7, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Cloud, Color(White), Vector(91.835, 9, -88.522), 7, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Cloud, Color(White), Vector(96.558, 9, -83.995), 7, Visible To Position and Radius);
			Global.spawn_corners = Array(Vector(False, False, -5.250), Vector(-24.090, False, -8.490));
			Wait(False, Ignore Condition);
		End;
		Global.spawn_line = Vector Towards(First Of(Global.spawn_corners), Last Of(Global.spawn_corners));
		Pause Match Time;
		Create HUD Text(Filtered Array(All Players(All Teams),
			!Global.objective_complete && !Global.no_hud && !Current Array Element.shop), Custom String(" {0}   OBJECTIVE: {1}   {0}",
			Global.newline, Global.objective), Null, Null, Top, False, Custom Color(Global.obj_color_r, Global.obj_color_g,
			Global.obj_color_b, 255), Null, Null, Visible To String and Color, Default Visibility);
		Global.objective = Custom String("Wait for players to assemble.");
		Start Rule(obj_color, Restart Rule);
		Create Effect(All Players(All Teams), Ring, Color(Aqua), Global.skip_cutscene_pos, 2, Visible To Position and Radius);
		Create In-World Text(Y Component Of(Global.skip_cutscene_pos) < 900 ? All Players(All Teams) : Empty Array, Custom String(
			"Group up here to skip the dialogue!"), Global.skip_cutscene_pos, 1.200, Do Not Clip, Visible To Position and String, Color(
			Aqua), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Green), Global.objective_pos, 4, Visible To Position and Radius);
		Create Icon(Filtered Array(All Players(All Teams), Y Component Of(Global.objective_pos) < 900 && !Current Array Element.shop),
			Global.objective_pos, Arrow: Down, Visible To and Position, Color(Green), True);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(" \n\n\n\n"), Left, False, Null, Null, Color(White), Visible To,
			Default Visibility);
		Global.boundary_corners = Array(Vector(12.600, 6, -118.814), Vector(42.805, 6, -44.411));
		Global.boundary_line = Vector Towards(First Of(Global.boundary_corners), Last Of(Global.boundary_corners));
		Create HUD Text(All Players(Team 2), Custom String("  Money: €{0}{1}  ", Local Player.euros,
			Local Player.real > False ? Custom String(" + R${0}", Local Player.real) : Custom String("")), Custom String(" "),
			Custom String(" "), Right, -0.490, Custom Color(150, 255, 175, 255), Color(White), Color(White), Visible To String and Color,
			Default Visibility);
		Global.shop_campos = Array(Vector(-23.327, 7.679, -91.651), Vector(-21.860, 7.679, -94.904));
		Global.shop_left = Normalize(Cross Product(Direction Towards(First Of(Global.shop_campos), Last Of(Global.shop_campos)), Down));
		Wait(False, Ignore Condition);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.shop), Custom String(" {0}   {1}   {0}",
			Global.newline, Custom String("Move - WASD, Select - {0}, Back - {1}, Exit - {2}", Input Binding String(Button(Primary Fire)),
			Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Jump)))), Null, Null, Top, False, Custom Color(
			Global.obj_color_g, Global.obj_color_r, Global.obj_color_b, 255), Null, Null, Visible To String and Color, Default Visibility);
		Global.potions_price = Array(50, 50, 40, 30, 50, 150, 100, 100, 150, 5);
		Create HUD Text(Global.no_hud ? All Players(All Teams) : Empty Array, Null, Null, Custom String(" {0}{0}{0}{0}{0}{0}{0}",
			Custom String("{0}{0}{0}{0}{0}{0}{0}", Global.newline)), Left, -10, Null, Null, Color(White), Visible To, Default Visibility);
		Create HUD Text(Global.no_hud ? All Players(All Teams) : Empty Array, Null, Null, Custom String(" {0}{0}{0}{0}{0}{0}{0}",
			Custom String("{0}{0}{0}{0}{0}{0}{0}", Global.newline)), Right, -10, Null, Null, Color(White), Visible To, Default Visibility);
		Global.fullwidth_spaces = Custom String(
			"                                                                                                                                ");
		Create HUD Text(All Players(All Teams), Null, Null, Global.main_dialogue ? Custom String("{0}{1}{2}", Array Contains(Array(Hero(
			Reinhardt), Hero(Sombra)), Global.main_speaker) ? Custom String("​") : Custom String("{0} {1}: ", Hero Icon String(
			Global.main_speaker), Global.t2_names_array[Index Of Array Value(Global.t2_heroes_array, Global.main_speaker)]), String Slice(
			String Replace(Global.main_dialogue, Custom String("Jersey McGee"), Global.cowboy_name), 0, Global.letter_scroll),
			String Slice(Global.fullwidth_spaces, 0, String Length(Global.main_dialogue) - Global.letter_scroll + True)) : Custom String(
			" "), Top, 2, Null, Null, Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Global.main_speaker)],
			Visible To String and Color, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.potions != Null), Null, Null, Custom String(
			" {0}{1} Potion effects:", Global.newline, Icon String(Poison 2)), Left, 20, Null, Null, Custom Color(213, 184, 255, 255),
			Visible To and String, Default Visibility);
		Wait(False, Ignore Condition);
		Create HUD Text(Filtered Array(All Players(All Teams), First Of(Current Array Element.potions) > False), Null, Null, Custom String(
			"+{0}% damage dealt", First Of(Local Player.potions) * 5), Left, 21, Null, Null, Color(Red), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.potions[True] > False), Null, Null, Custom String(
			"+{0}% healing dealt", Local Player.potions[True] * 5), Left, 22, Null, Null, Color(Yellow), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.potions[2] > False), Null, Null, Custom String(
			"+{0} max HP", Local Player.potions[2] * 20), Left, 23, Null, Null, Color(Green), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.potions[3] > False), Null, Null, Custom String(
			"+{0}% movement speed", Local Player.potions[3] * 5), Left, 24, Null, Null, Color(Aqua), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.potions[4] > False), Null, Null, Custom String(
			"+{0}% max ammo", Local Player.potions[4] * 20), Left, 25, Null, Null, Color(Blue), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.potions[5] > False), Null, Null, Custom String(
			"-{0} {1} on cooldowns", Local Player.potions[5], Local Player.potions[5] > True ? Custom String("seconds") : Custom String(
			"second")), Left, 26, Null, Null, Color(Purple), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.potions[6] > False), Null, Null, Custom String(
			"{0}% healing from damage", Local Player.potions[6] * 5), Left, 27, Null, Null, Color(Rose), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.potions[7] > False), Null, Null, Custom String(
			"{0}% chance to inflict burning", Local Player.potions[7] * 5), Left, 28, Null, Null, Color(Orange), Visible To and String,
			Default Visibility);
		Global.numbers = Array(1, 2, 3, 4, 5, 6, 7, 8, 9);
		Create HUD Text(Filtered Array(All Players(All Teams),
			Current Array Element.potions[8] - Current Array Element.extra_lives_used > False), Null, Null, Custom String("{0} extra {1}",
			Local Player.potions[8] - Local Player.extra_lives_used,
			Local Player.potions[8] - Local Player.extra_lives_used > True ? Custom String("lives") : Custom String("life")), Left, 29,
			Null, Null, Custom Color(112, 179, 134, 255), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("  JUNKENSTEIN'S VICTORY V1.5.19  "), Null, Custom String(" \n\n"), Right,
			-1, Color(Aqua), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("A Gamemode by Therister#1251"), Right, -0.900, Null, Null,
			Custom Color(148, 255, 248, 255), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("Check out my YouTube and Discord!"), Custom String(
			"  {0} bit.ly/therister", Icon String(Heart)), Right, -0.800, Color(White), Custom Color(174, 158, 255, 255), Custom Color(196,
			102, 255, 255), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("With support from Grandeur Hammers"), Custom String(
			" {0} bit.ly/grandeurhammers\n", Ability Icon String(Hero(Torbjörn), Button(Ability 2))), Right, -0.700, Color(White),
			Custom Color(255, 183, 120, 255), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(All Players(Team 2), Custom String("  Difficulty:{0}  ", String Split(Custom String(
			" Cinematic: Dead Easy: Para-Normal: Terrifying!: JUNKTASTICALLY NIGHTMARISH!!!"), Custom String(":"))[Global.difficulty + 1]),
			Custom String(" "), Custom String(" "), Right, -0.500, Array(Color(Green), Color(White), Color(Yellow), Color(Orange), Color(
			Red))[Global.difficulty + 1], Color(White), Color(White), Visible To String and Color, Default Visibility);
		Wait(False, Ignore Condition);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.scrolls_equip != Empty Array), Null, Null,
			Custom String(" {0}{1} Scroll effects:", Global.newline, Icon String(Spiral)), Left, 11, Null, Null, Custom Color(255, 248,
			176, 255), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.scrolls_equip, Null)), Null,
			String Split(Custom String("• Chaos Magic:• Junkenstein's Revenge:• Evil Stitched To Evil:• Reap What You Sow"), Custom String(
			":"))[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Array(Custom String(
			"Heal yourself for 50% damage your heal target takes and 50%\ndamage they deal. Your health regen is drastically reduced."),
			Custom String("When downed, repeatedly release Total Mayhem\nbombs at your corpse every second."), Custom String(
			"Every killing blow grants you +100 unrecoverable HP."), Custom String("Every killing blow refreshes\none of your cooldowns."))
			[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Left, 12, Color(White),
			Global.name_colors_2[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))],
			Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.scrolls_equip, 1)), Null, String Split(
			Custom String("• Mystic Transfusion:• Superconductive:• It's Alive!:• Marked For Death"), Custom String(":"))
			[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Array(Custom String(
			"Press ''{0}'' while healing a player to instantly heal\nthem for 100HP, sacrificing 60HP of your own.", Input Binding String(
			Button(Reload))), Custom String("When under 66.6% health, nearby enemies\ntake electric damage over time."), Custom String(
			"Become nanoboosted for 10 seconds whenever\nyou revive. Allies revive you twice as quickly."), Custom String(
			"Shoot an enemy to mark them, making them\nvisible through walls and take 1.25× damage.\n{0}", Custom String(
			"You can only mark one enemy at a time.")))[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Left, 13,
			Color(White), Global.name_colors_2[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))],
			Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.scrolls_equip, 2)), Null, String Split(
			Custom String("• Bewitching Grasp/• Discharged/• Recycling/• The Reaper's Scythe"), Custom String("/"))[Index Of Array Value(
			Global.t2_heroes_array, Hero Of(Local Player))], Array(Custom String(
			"Replaces Damage Boost with a beam that locks\nonto enemies and drains their health."), Custom String(
			"Every killing blow causes the victim to discharge\nelectricity, damaging nearby enemies and stunning them."), Custom String(
			"When crouching, deal 2× damage,\nbut every shot takes 100HP from you."), Custom String(
			"Gain 2× melee range and 2.5× melee damage."))[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Left, 14,
			Color(White), Global.name_colors_2[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))],
			Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.scrolls_equip, 3)), Null, String Split(
			Custom String("• Flying Broomstick/• Shocking Surprise/• Chain Reaction/• Vengeful Ghost"), Custom String("/"))
			[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Array(Custom String(
			"Guardian Angel now damages and\nknocks back enemies in your path."), Custom String(
			"Concussion Mine and Riptire now also\nelectrify enemies, stunning them."), Custom String(
			"Successfully landing a hook sets its cooldown to 1 second,\nhowever missing a hook sets its cooldown to 12 seconds."),
			Custom String("While in Wraith Form, nearby enemies\ntake damage over time."))[Index Of Array Value(Global.t2_heroes_array,
			Hero Of(Local Player))], Left, 15, Color(White), Global.name_colors_2[Index Of Array Value(Global.t2_heroes_array, Hero Of(
			Local Player))], Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))],
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.scrolls_equip, 4)), Null, String Split(
			Custom String("• Undying Servitude/• Faraday Trap/• Monstrous Roar/• Jumpscare"), Custom String("/"))[Index Of Array Value(
			Global.t2_heroes_array, Hero Of(Local Player))], Array(Custom String(
			"Replaces Resurrect. Casts a spell on a living teammate that\nmakes them invulnerable to all damage for 8 seconds."),
			Custom String(
			"When an enemy is caught in your Steel Trap, they start\nelectrifying nearby enemies, damaging and rooting them."),
			Custom String(
			"Replaces Take A Breather with a roar that heals you and\ngrants 60% damage reduction for 5 seconds. All enemies\n{0}",
			Custom String("immediately target you.")), Custom String(
			"Upon exiting Shadow Step, all nearby\nenemies become frozen in fear."))[Index Of Array Value(Global.t2_heroes_array, Hero Of(
			Local Player))], Left, 16, Color(White), Global.name_colors_2[Index Of Array Value(Global.t2_heroes_array, Hero Of(
			Local Player))], Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))],
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.scrolls_equip, 5)), Null, String Split(
			Custom String("• Hex Mania/• Zombardier/• Beware; For I Am Fearless/• Dance With The Reaper"), Custom String("/"))
			[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))], Array(Custom String(
			"Upon activating Valkyrie, all enemies in a 30 meter radius go\ninsane for 8 seconds, becoming hacked and confused."),
			Custom String("Upon activating Riptire, a zombardier is summoned\nthat fights for you for 20 seconds."), Custom String(
			"Whole Hog now deals zero knockback.\n2× movement speed while Whole Hog is active."), Custom String(
			"While using Death Blossom, you become\ninvincible and move 3× as fast."))[Index Of Array Value(Global.t2_heroes_array,
			Hero Of(Local Player))], Left, 17, Color(White), Global.name_colors_2[Index Of Array Value(Global.t2_heroes_array, Hero Of(
			Local Player))], Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))],
			Visible To and String, Default Visibility);
		Chase Global Variable At Rate(pentagram_angle, 9999800320.000, 120, None);
		Wait(0.100, Ignore Condition);
		Create Dummy Bot(Hero(Zenyatta), Team 2, 5, Vector(-12.940, True, -0.410), Vector(-0.160, False, 0.990));
		Global.faq_bot = Last Created Entity;
	}
}

rule("Initial Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global._classIndexes[1000] = Null;
		Global._extendedGlobalCollection[False] = Index Of Array Value(Global._classIndexes, Null);
		Global._classIndexes[First Of(Global._extendedGlobalCollection)] = 1;
		Global._tempNodes = Array(Vector(-0.609, 0.022, -9.436), Vector(-10.551, 0.350, -16.669), Vector(-29.310, -1.904, -14.720), Vector(
			-31.848, 1.960, -34.418), Vector(-8.674, 1.828, -27.266), Vector(-22.122, 1.967, -35.729), Vector(7.999, 0.889, -7.298),
			Vector(17.132, 4, -12.994), Vector(23.922, 6, -15.107), Vector(20.188, 9, -24.031), Vector(-0.408, 0.988, -19.034), Vector(
			9.218, 4, -19.923), Vector(15.074, 4.025, -21.503), Vector(27.784, 0.949, -10.904), Vector(11.849, 3.810, -27.775), Vector(
			-6.378, 1.999, -37.315), Vector(27.288, 5, -40.787), Vector(24.877, 3.915, -27.189), Vector(27.952, 4.015, -33.484), Vector(
			14.116, 3.887, -34.279), Vector(13.030, 4.260, -41.419), Vector(18.342, 4.838, -49.171), Vector(37.366, 9.498, -50.984),
			Vector(11.176, 4.597, -47.015), Vector(-1.813, 6, -48.089), Vector(-3.411, 7, -42.193), Vector(10.103, 9.734, -40.578), Vector(
			10.431, 5.989, -59.539), Vector(-0.615, 5.985, -57.289), Vector(-4.028, 6, -66.510), Vector(-9.485, 5, -54.366), Vector(-4.803,
			3.564, -85.748), Vector(3.479, 5.742, -80.250), Vector(6.188, 5.829, -69.444), Vector(-10.286, 3, -69.473), Vector(-1.713,
			6.521, -72.592), Vector(9.809, 5.875, -79.092), Vector(17.965, 5.853, -75.657), Vector(20.615, 4.845, -62.592), Vector(30.824,
			5, -54.271), Vector(11.920, 6.012, -89.040), Vector(5.028, 4.997, -97.245), Vector(16.875, 6.010, -90.384), Vector(19.370,
			9.011, -97.901), Vector(13.078, 11.012, -100.262), Vector(10.818, 11.012, -91.137), Vector(10.440, 11.012, -84.287), Vector(
			23.060, 11, -72.472), Vector(31.320, 11.500, -67.877), Vector(32.867, 4.812, -61.992), Vector(28.691, 6.026, -71.291), Vector(
			22.957, 6.026, -71.348), Vector(34.755, 5.250, -56.882), Vector(38.693, 5.250, -48.497), Vector(42.926, 5.237, -50.158),
			Vector(40.538, 5.221, -59.015), Vector(54.749, 6.722, -68.118), Vector(49.066, 5.802, -57.309), Vector(46.720, 5.571, -67.477),
			Vector(37.028, 6.030, -73.860), Vector(29.199, 8, -84.306), Vector(41.630, 7.455, -81.919), Vector(16.804, 11.012, -88.675),
			Vector(24.846, 9.666, -88.719), Vector(58.825, 11.702, -58.780), Vector(55.907, 11.723, -75.984), Vector(55.228, 11.513,
			-86.312), Vector(60.019, 11.135, -90.557), Vector(40.038, 10.723, -98.802), Vector(51.724, 10.067, -96.519), Vector(33.495,
			10.128, -94.131), Vector(47.144, 11.619, -85.141), Vector(49.760, 11.493, -75.664), Vector(67.743, 12.723, -71.416), Vector(
			59.608, 6.358, -80.405), Vector(53.775, 6.723, -104.848), Vector(33.307, 13.595, -85.170), Vector(36.085, 12.725, -106.026),
			Vector(53.384, 17.725, -110.047), Vector(58.540, 17.723, -104.745), Vector(60.436, 18.723, -93.517), Vector(61.074, 17.702,
			-85.580), Vector(54.028, 18.046, -80.398), Vector(67.591, 17.834, -69.342), Vector(54.788, 21.003, -65.417), Vector(66.343,
			15.897, -62.078), Vector(72.707, 12.695, -97.361), Vector(76.681, 10.687, -109.548), Vector(65.341, 7.650, -107.850), Vector(
			81.989, 12.683, -95.181), Vector(86.402, 12.674, -75.978), Vector(104.413, 12.729, -79.171), Vector(102.662, 9.576, -90.767),
			Vector(100.534, 12.723, -70.163), Vector(76.350, 12.660, -67.602), Vector(58.434, 4.725, -88.426), Vector(97.474, 18.415,
			-71.162), Vector(98.156, 16.815, -74.479), Vector(81.581, 21.153, -65.114), Vector(89.310, 20.795, -62.730), Vector(97.641,
			12.723, -57.310), Vector(79.167, 12.723, -55.265), Vector(80.711, 15.723, -38.875), Vector(86.096, 12.723, -43.476), Vector(
			86.601, 12.723, -34.959), Vector(90.735, 12.723, -56.135), Vector(93.139, 11.723, -48.714), Vector(85.101, 12.723, -46.704),
			Vector(97.600, 10.723, -43.190), Vector(90.301, 15.725, -19.041), Vector(99.121, 15.725, -20.901), Vector(109.951, 12.723,
			-23.933), Vector(106.003, 10.723, -40.486), Vector(105.162, 12.723, -49.333), Vector(107.246, 12.723, -56.811), Vector(124.513,
			10.723, -62.288), Vector(129.244, 8.723, -44.727), Vector(118.793, 8.719, -43.726), Vector(136.184, 11.723, -62.483), Vector(
			137.808, 11.723, -55.827), Vector(130.946, 11.723, -54.117), Vector(139.673, 11.723, -48.365), Vector(143.569, 11.723,
			-40.443), Vector(131.252, 14.736, -40.050), Vector(122.680, 8.720, -28.736), Vector(113.247, 14.723, -29.727), Vector(130.988,
			8.723, -36.809), Vector(113.591, 8.723, -31.002), Vector(130.415, 8.722, -26.045), Vector(118.527, 8.722, -22.631), Vector(
			131.959, 10.723, -17.417), Vector(112.951, 10.723, -19.400), Vector(133.553, 12.723, -9.748), Vector(128.497, 13.723, -7.765),
			Vector(126.150, 14.764, -16.688), Vector(139.638, 10.723, -25.083), Vector(114.910, 10.723, -14.259), Vector(120.263, 10.723,
			-14.159), Vector(122.493, 12.723, -7.061), Vector(110.431, 10.738, -5.908), Vector(120.173, 10.723, 1.409), Vector(138.444,
			10.723, -18.647), Vector(145.609, 10.738, -14.167), Vector(139.898, 10.723, -4.215), Vector(97.004, 10.723, -28.868), Vector(
			100.974, 10.732, -20.133), Vector(93.077, 12.723, -115.487), Vector(89.818, 12.723, -102.530), Vector(96.843, 12.723,
			-102.135), Vector(-12.691, 1.063, -6.665), Vector(-6.232, True, -1.271), Vector(-19.238, 1.042, -3.466), Vector(2.176, 5,
			-14.219), Vector(2.132, 6, 0.496), Vector(-2.941, 6, 0.202), Vector(-13.227, True, 4.966), Vector(-5.045, 3, 19.022), Vector(
			-14.967, True, 17.276), Vector(-22.746, True, 5.945), Vector(-26.512, 0.264, -4.156), Vector(-25.421, -2, -9.633), Vector(
			78.278, 13.116, -85.915), Vector(70.674, 13.313, -78.048), Vector(68.980, 13.072, -91.088), Vector(93.785, 8.993, -86.232),
			Vector(88.032, 12.649, -67.890));
		Call Subroutine(InitialGlobal_2);
	}
}

rule("Initial Global 2")
{
	event
	{
		Subroutine;
		InitialGlobal_2;
	}

	actions
	{
		Global._tempSegments = Array(Up, Vector(True, 2, Empty Array), Vector(2, 3, Empty Array), Vector(3, 5, Empty Array), Vector(5, 4,
			Empty Array), Vector(4, True, Empty Array), Vector(Empty Array, 6, Empty Array), Vector(6, 7, Empty Array), Vector(7, 8,
			Empty Array), Vector(8, 9, Empty Array), Vector(7, 12, Empty Array), Vector(12, 11, Empty Array), Vector(11, 10, Empty Array),
			Vector(10, Empty Array, Empty Array), Vector(6, 13, Empty Array), Vector(14, 12, Empty Array), Vector(14, 4, Empty Array),
			Vector(15, 4, Empty Array), Vector(13, 17, Empty Array), Vector(17, 18, Empty Array), Vector(18, 16, Empty Array), Vector(19,
			17, Empty Array), Vector(19, 14, Empty Array), Vector(19, 15, Empty Array), Vector(19, 18, Empty Array), Vector(14, 17,
			Empty Array), Vector(13, 8, Empty Array), Vector(9, 17, Empty Array), Vector(20, 19, Empty Array), Vector(20, 16, Empty Array),
			Vector(21, 23, Empty Array), Vector(21, 20, Empty Array), Vector(21, 16, Empty Array), Vector(21, 22, Empty Array), Vector(20,
			23, Empty Array), Vector(23, 24, Empty Array), Vector(24, 25, Empty Array), Vector(25, 26, Empty Array), Vector(26, 19,
			Empty Array), Vector(26, 23, Empty Array), Vector(28, 27, Empty Array), Vector(28, 23, Empty Array), Vector(28, 24,
			Empty Array), Vector(28, 30, Empty Array), Vector(28, 29, Empty Array), Vector(28, 33, Empty Array), Vector(30, 34,
			Empty Array), Vector(34, 31, Empty Array), Vector(31, 32, Empty Array), Vector(34, 29, Empty Array), Vector(29, 35,
			Empty Array), Vector(35, 32, Empty Array), Vector(32, 33, Empty Array), Vector(33, 27, Empty Array), Vector(21, 38,
			Empty Array), Vector(38, 27, Empty Array), Vector(27, 37, Empty Array), Vector(37, 36, Empty Array), Vector(36, 33,
			Empty Array), Vector(36, 32, Empty Array), Vector(38, 37, Empty Array), Vector(39, 21, Empty Array), Vector(39, 38,
			Empty Array), Vector(31, 41, Empty Array), Vector(41, 40, Empty Array), Vector(40, 36, Empty Array), Vector(40, 37,
			Empty Array), Vector(40, 42, Empty Array), Vector(42, 43, Empty Array), Vector(43, 44, Empty Array), Vector(44, 45,
			Empty Array), Vector(45, 46, Empty Array), Vector(46, 36, Empty Array), Vector(22, 48, Empty Array), Vector(48, 47,
			Empty Array), Vector(47, 37, Empty Array), Vector(38, 49, Empty Array), Vector(49, 50, Empty Array), Vector(50, 51,
			Empty Array), Vector(51, 37, Empty Array), Vector(49, 52, Empty Array), Vector(52, 53, Empty Array), Vector(53, 54,
			Empty Array), Vector(54, 55, Empty Array), Vector(55, 58, Empty Array), Vector(58, 57, Empty Array), Vector(52, 55,
			Empty Array), Vector(55, 57, Empty Array), Vector(58, 56, Empty Array), Vector(50, 59, Empty Array), Vector(59, 60,
			Empty Array), Vector(60, 61, Empty Array), Vector(61, 58, Empty Array), Vector(58, 59, Empty Array), Vector(59, 61,
			Empty Array), Vector(45, 62, Empty Array), Vector(62, 63, Empty Array), Vector(63, 60, Empty Array), Vector(60, 54,
			Empty Array), Vector(54, 64, Empty Array), Vector(64, 65, Empty Array), Vector(65, 66, Empty Array), Vector(61, 70,
			Empty Array), Vector(70, 68, Empty Array), Vector(68, 69, Empty Array), Vector(69, 67, Empty Array), Vector(67, 66,
			Empty Array), Vector(61, 69, Empty Array), Vector(69, 66, Empty Array), Vector(65, 72, Empty Array), Vector(72, 71,
			Empty Array), Vector(71, 66, Empty Array), Vector(71, 61, Empty Array), Vector(72, 58, Empty Array), Vector(65, 73,
			Empty Array), Vector(73, 56, Empty Array), Vector(74, 56, Empty Array), Vector(68, 75, Empty Array), Vector(76, 61,
			Empty Array), Vector(68, 77, Empty Array), Vector(77, 78, Empty Array), Vector(78, 79, Empty Array), Vector(79, 80,
			Empty Array), Vector(80, 81, Empty Array), Vector(81, 73, Empty Array), Vector(80, 69, Empty Array), Vector(81, 82,
			Empty Array), Vector(82, 72, Empty Array), Vector(82, 83, Empty Array), Vector(83, 84, Empty Array), Vector(84, 58,
			Empty Array), Vector(83, 85, Empty Array), Vector(85, 64, Empty Array), Vector(75, 88, Empty Array), Vector(88, 87,
			Empty Array), Vector(87, 86, Empty Array), Vector(86, 67, Empty Array), Vector(86, 69, Empty Array), Vector(86, 80,
			Empty Array), Vector(86, 89, Empty Array), Vector(89, 90, Empty Array), Vector(90, 93, Empty Array), Vector(93, 91,
			Empty Array), Vector(91, 92, Empty Array), Vector(91, 90, Empty Array), Vector(94, 73, Empty Array), Vector(94, 85,
			Empty Array), Vector(94, 90, Empty Array), Vector(74, 95, Empty Array), Vector(95, 75, Empty Array), Vector(97, 96,
			Empty Array), Vector(96, 90, Empty Array), Vector(97, 90, Empty Array), Vector(98, 94, Empty Array), Vector(99, 90,
			Empty Array), Vector(94, 101, Empty Array), Vector(100, 93, Empty Array), Vector(102, 101, Empty Array), Vector(105, 100,
			Empty Array), Vector(105, 101, Empty Array), Vector(105, 106, Empty Array), Vector(105, 99, Empty Array), Vector(106, 107,
			Empty Array), Vector(106, 108, Empty Array), Vector(107, 104, Empty Array), Vector(104, 108, Empty Array), Vector(102, 104,
			Empty Array), Vector(108, 112, Empty Array), Vector(112, 111, Empty Array), Vector(111, 110, Empty Array), Vector(110, 109,
			Empty Array), Vector(109, 104, Empty Array), Vector(108, 113, Empty Array), Vector(113, 114, Empty Array), Vector(114, 115,
			Empty Array), Vector(115, 116, Empty Array), Vector(116, 117, Empty Array), Vector(117, 112, Empty Array), Vector(113, 117,
			Empty Array), Vector(120, 119, Empty Array), Vector(119, 118, Empty Array), Vector(118, 115, Empty Array), Vector(116, 121,
			Empty Array), Vector(121, 119, Empty Array), Vector(121, 122, Empty Array), Vector(122, 123, Empty Array), Vector(124, 123,
			Empty Array), Vector(117, 124, Empty Array), Vector(125, 124, Empty Array), Vector(116, 126, Empty Array), Vector(126, 124,
			Empty Array), Vector(124, 127, Empty Array), Vector(127, 117, Empty Array), Vector(127, 131, Empty Array), Vector(130, 128,
			Empty Array), Vector(128, 124, Empty Array), Vector(124, 129, Empty Array), Vector(133, 132, Empty Array), Vector(132, 130,
			Empty Array), Vector(133, 134, Empty Array), Vector(134, 124, Empty Array), Vector(135, 122, Empty Array), Vector(135, 130,
			Empty Array), Vector(135, 128, Empty Array), Vector(137, 129, Empty Array), Vector(137, 136, Empty Array), Vector(137, 130,
			Empty Array), Vector(137, 138, Empty Array), Vector(138, 133, Empty Array), Vector(136, 131, Empty Array), Vector(140, 139,
			Empty Array), Vector(139, 136, Empty Array), Vector(143, 142, Empty Array), Vector(142, 141, Empty Array), Vector(141, 130,
			Empty Array), Vector(144, 108, Empty Array), Vector(144, 145, Empty Array), Vector(148, 147, Empty Array), Vector(147, 89,
			Empty Array), Vector(146, 87, Empty Array), Vector(Empty Array, 153, Empty Array), Vector(153, 154, Empty Array), Vector(154,
			156, Empty Array), Vector(156, 157, Empty Array), Vector(157, 155, Empty Array), Vector(155, 151, Empty Array), Vector(151,
			149, Empty Array), Vector(149, True, Empty Array), Vector(149, 150, Empty Array), Vector(150, 155, Empty Array), Vector(
			Empty Array, 152, Empty Array), Vector(153, 155, Empty Array), Vector(155, 158, Empty Array), Vector(158, 159, Empty Array),
			Vector(159, 160, Empty Array), Vector(160, 2, Empty Array), Vector(67, 163, Empty Array), Vector(163, 86, Empty Array), Vector(
			161, 89, Empty Array), Vector(161, 90, Empty Array), Vector(161, 162, Empty Array), Vector(161, 163, Empty Array), Vector(94,
			162, Empty Array), Vector(162, 163, Empty Array), Vector(164, 92, Empty Array), Vector(164, 89, Empty Array), Vector(90, 165,
			Empty Array), Vector(165, 94, Empty Array));
		Call Subroutine(InitialGlobal_3);
	}
}

rule("Initial Global 3")
{
	event
	{
		Subroutine;
		InitialGlobal_3;
	}

	actions
	{
		Global._tempAttributes = Array(Vector(13, 8, True), Vector(17, 9, True), Vector(23, 26, True), Vector(19, 26, True), Vector(34, 29,
			True), Vector(36, 46, True), Vector(37, 47, True), Vector(69, 66, True), Vector(61, 71, True), Vector(58, 72, True), Vector(61,
			76, True), Vector(69, 80, True), Vector(72, 82, True), Vector(58, 84, True), Vector(64, 85, True), Vector(86, 80, True),
			Vector(90, 97, True), Vector(90, 96, True), Vector(94, 98, True), Vector(90, 99, True), Vector(105, 99, True), Vector(104, 102,
			True), Vector(117, 113, True), Vector(124, 123, True), Vector(124, 125, True), Vector(127, 131, True), Vector(124, 134, True),
			Vector(128, 135, True), Vector(Empty Array, 152, True), Vector(Empty Array, 153, True), Vector(164, 89, True));
		Global._objectVariable_0[First Of(Global._extendedGlobalCollection)] = Global._tempNodes;
		Global._objectVariable_1[First Of(Global._extendedGlobalCollection)] = Global._tempSegments;
		Global._objectVariable_2[First Of(Global._extendedGlobalCollection)] = Global._tempAttributes;
		Global.map = First Of(Global._extendedGlobalCollection);
		Global.compressBakeMatcher = Custom String(
			"	 !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz|}~");
		Call Subroutine(InitialGlobal_4);
	}
}

rule("Initial Global 4")
{
	event
	{
		Subroutine;
		InitialGlobal_4;
	}

	actions
	{
		Global.compressedNodes = Array(Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¥¤¢¦§ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¥¤¢¦§ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¦§ªdHbd")), Array(Custom String(
			"		   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"			   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"	+  %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_  ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+  %)#!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+  %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+  %)#!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+  %)#!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+  %)#!*+*--/23)5+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!&+*--/23)*+6*69:9?<<7@@2C;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!&)--/23)*4+8*69:9?<<7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!&)--/23)*4+8*69:9?<<7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		   %& #!&)--/23)*4+8*69:9?<<7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+    %&#!&+)--/23)*4+8*69:9?<<7@@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		     %& #!&+)--/23)*4+8*69:9?<<7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		   ! %( #!%)+)$-/23)*4+8*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"		   # '& #!&+)$-/23)*4+8*69:9?<<7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"		+5  &!''$%$%%)*+.$-/23)*478*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"		+5  &&( %%$%%)*+)$-/23)*478*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"		+5  &&  %&$%&)+)--/23)*4+8*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"		   !'''( !%)+)$-/23)*4+8*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"		   !( %(%$%)*+)$-/23)*478*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5  &&( %))$%)*+)--/23)*478*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 *( %))$%**+*--/23)*478*69:9?<@7@@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+ +  %)#%*++*--/23)*4+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	,+  %)#%*+,*--/23)*4+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+5 &&( .))$%--*+--/03)*478*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 &&''.$)$%--*+.-/03)*478*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 &&( .))$%--*+/-/01)*478*69:9?<@7D@2C;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 &&( .))$%--*+/-0012*478*69:9?<@7DA2C;MLGKBBBL==IBITUJWMY?EH[P[¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 &&( .))$%--*+/-0112*478*6;A???@ADA2CFMLGKBBBL==IBITUJWMY?EH[P[¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 &&( .))$%--*+/-0122*47@76;A???@ADA2CFMLGKBBBL==IBITUJWMY?EH[P[¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 &&( .))$%--*+/-0123*47@76;A???@ADA2CFMLGKBBBL==IBITUJWMY?EH[P[¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	5+  %)#!*+*--/23)4+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	5+  %)#!*+*--/23)5+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+ +  %)#%*86+*--/23)*46769:9?<<7@@DA;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+5 *( %))$%*86+*--/23)*47769:9?<@7@@DA;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 *( %))$%*8*+*--/23)*47869:9?<@7@@2A;MLGKBBB?==IBITUJWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+ +  %)#%*86+*--/23)*49679:9?<<7@?DA;MFGKBBM?==eBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+ +  %)#%*86+*--/23)*4967::;?<<7;?DA;MFGKBBM?==eBITUVWMZ?EH[P`d`a`ZO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©dHbd")), Array(Custom String(
			"	+ +  %)#%*86+*--/2C)*4967:;;?<<?;?DA;MFGKBBM?==eBITUVWMZ?EH[P`d`a`ZO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©dHbd")), Array(Custom String(
			"	+ +  %)#%*86+*--/2C)*4967<;<?<<?@?DA;MFGKBBM?==eBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<??=?@?DAFMFGKBBM?==eBITUVNMY?dH^P`d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +  %)#%*86+*--/2C)*4967<;<>?>?@?DA;MFGKBBM?==eBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<????@?DAFMFGKBBM?==eBITUVWMY?XH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+5 *( %))$%*86+*--/2C)*47@769<???@@@DAFMLGKBBB?==IBITUJWMY?XH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 *( %))$%*86+*-012C2*47@76;A???@AADAFMLGKBBBL==IBITUJWMY?EH[P[¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;<???BBBDAFMLGKBBBLF=IBITUJWMW?EH[P[¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 *&( .))$%-86+/-012C2*47@76;A???@ADACFMLGKBBBL==IBITUJWMY?EH[P[¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 *( %))$%*86+/-012C2*47@76;A???@ADADFMLGKBBBL==IBITUJWMY?EH[P[¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+ +  %)#%*86+*--/2C)*4967:;E;N<<?;?DAEFGJHIMFF=IBITUVWMZXEH[]`d`a`ZO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©dHbd")), Array(Custom String(
			"	+ +( %))$%*86+*--12C)*49@7:;E;N?=?BJDAFFGJHIMFF=IBITUVWMWXEH[][d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7:;E;N?=BBJDAFGGJHIGFF=IBITUJWMWXEH[][¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?N?BBBJDAFGHJHIGFF=IBITUJUMW?EH[][¨`a`©P``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHb`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;<???BBBKDAFGJJIIBFFeIBIRSJUVW?EJ^P[¨`a`NP``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHb`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;<???BBBJDAFGJJJIGFFeIBITUJUVW?EJ[P[¨`a`NP``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHb`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;<???BBBKDAFMLJKIBLFeIBIRSJUMW?EJ^P[¨`a`NP``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHb`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7:;E;N?=BBJDAFMLGJHILF=IBITUVWMWXEH[][¨`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHbd")), Array(Custom String(
			"	+ +( %))$%*86+*--12C)*49@7:;E;N?=?BJDAFMFGJHIMF=IBITUVWMWXEH[][d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFGJHBMF=eBITUVNVZ?dª[P`d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?O?=?@?DAFMFGPIIM?=eBIRUVNMY?d]^P`d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;<?O?=BBKDAFGJJPIIBF=eBIRSJUVW?d]^P[_`a`NP``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªª[b`")), Array(Custom String(
			""),
			Custom String("")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;<???BBBKDAFGJJRIIBFFeIBRSJUVW?EJ^P[¨`a`NP``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªHb`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;<?N?BBBKDAFNJJRIIBFVeIBSSTUVWXXJ^P[d`a`NP``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªdHbd")), Array(Custom String(
			"	+5 +( %))$%*86+*--12C2*49@7<;<?N?=BBKDAFNJJRIIMFV=IBSTTUVWXXJ^P[d`a`NP``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©dHbd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFGRIIMFV=IBSTUUVWXXª[P`d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFGRHIMFV=IBSTUVVWXXª[P`d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFGRHIMFV=IBSTUVWWXXª[P`d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBSTUVWXXXª[]`d`a`ZO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBSTUVWXYXª[]`d`a`ZO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVWXZXª[]`d`a`ZO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?N?BBBJDAFGH[J[IGFVe^BITU[UVWXd[][_`a`©P``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªª[b`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?O?BBBJDAFGH[P[IGFVe^BITU[UVWXd]][_`a`©P``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªª[b`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;<?O?=BBKDAFGH[PIIGFVe^BIRU[UVW?d]^[_`a`©P``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªª[b`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?N?BBBJDAFGH[J[IGFd=^BITU[UVZXd_[]_`a``P``d`cdkqjoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§_¨[b`")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNHªJHIGFd=^BITU[NVZXd_[]``a``O``d`cdkqjoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§`¨¨b`")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNHªJHIGFd=^BITU[NVZXd_[]«aaa`O``d`cokqjoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§`¨¨b`")), Array(Custom String(
			"	+5 +( %))$%*86+*--12C2*49@7<;<?N?=BBJDAFNH[J[IGFd=^BITU[UVZXd_[]«aba`P``d`cokqjoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§_¨[b`")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNHªJHIGFd=^BITU[NVZXd_[]`cca`O``docokqjoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§`¨¨b`")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`d`a`O``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?O?=?@?DAFMJJPIIM?=eeBIRSJNMY?d]^P[d`a`N``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d[bd")), Array(Custom String(
			"f"),
			Custom String("")), Array(Custom String(
			"g"),
			Custom String("")), Array(Custom String(
			""),
			Custom String("")), Array(Custom String(
			""),
			Custom String("")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHIMFd=eBITUVNVZXd_[]`ccajkO``dookqjoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§`d¨b`")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`dcajkO``dookqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`dcajkO``doolqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			""),
			Custom String("")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`dcajkO``doolnpqnnnstrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``doookqoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonqpppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonqpqpnsvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`dcajkO``doolnspqnnsturwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`dcajkO``doolnsprnvtturwz|v~~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonsprpvtuurwz|v~~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuvrwz|v~~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpwnuvrwx|vy}~~|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpwnuvrxxyvy}~~|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpwnuv|xyyzy}~~z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wzz~~zz|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz|~~z|z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpwnuv|xy}z}~~z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv|xy}z~~~z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv|xy}z~~z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||y}z~~z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||y}z~~z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||y}z~~z|"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			""),
			Custom String("")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wzz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz|~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||w}~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~z"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpvtuv||wz~~"),
			Custom String("r]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpnuvrrwx|vy~z|z|"),
			Custom String("]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHBMFd=eBITUVNVZXdª[]`ccajkO``dooonrprpnuvrrwx|vy~z|z|"),
			Custom String("]_ ¡¢¢§©d©bd")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?O?BBBJDAFGH[P[IGFVe^BITU[UVWXd]][_`a`©P``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r_ ¡¢¢§ªª[b`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?N?BBBJDAFGH[J[IGFd=^BITU[UVZXd_[]_`a``P``d`cdkqjoppnuvrrwx|vy~z|z|"),
			Custom String("r] ¡¢¢§_¨[b`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?N?BBBJDAFGH[J[IGFd=^BITU[UVZXd_[]_`a``P``d`cdkqjoppnuvrrwx|vy~z|z|"),
			Custom String("r] ¡¢¢§_¨[b`")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢ ¤¢¢¥ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢ ¤¢¢¥¦ªdHbd")), Array(Custom String(
			"	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢ ¤¢¢¥¦ªdHbd")), Array(Custom String(
			""),
			Custom String("")), Array(Custom String(
			"§	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢¢  ¡¢¢¥¦ªdHbd")), Array(Custom String(
			"§	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢¢¡ ¡£¢¥¦ªdHbd")), Array(Custom String(
			"§	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢¢¢ ¤¢¢¥¦ªdHbd")), Array(Custom String(
			"§	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢¢¡£¤£¢¥¦ªdHbd")), Array(Custom String(
			"§	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢¢¢£¤¤¢¥¦ªdHbd")), Array(Custom String(
			"§	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢¢¢ ¥¤¢¥¦ªdHbd")), Array(Custom String(
			"§	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢¢¢ ¥¤¢¦¦ªdHbd")), Array(Custom String(
			"§	   %& #!*+*--/23)*+6*69:9?<<7@@2A;MLGKBBB?==IBITUVWMY?EH[P[d`a`NO``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_¢¢¢ ¥¤¢¦§ªdHbd")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?N?=BBJDAFGHªJHIGFd=^BITU[UVZXdª[]¨¨`a`©O``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§¨¨b`")), Array(Custom String(
			"	+ +( %))$%*86+*--12C2*49@7<;<?N?=?BJDAFNHªJHIGFd=^BITU[NVZXdª[]¨¨`a`©O``d`odkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§©©bd")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?N?BBBJDAFGHªJHIGFd=^BITU[UVZXdª[][¨`a`©P``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§ªªb`")), Array(Custom String(
			"	+5 *( %))$%*86+*--12C2*47@7<;E?N?BBBJDAFGH[J[IGFd=^BITU[UVZXd_[]«_b«a`P``d`cdkqjoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§_¨[`")), Array(Custom String(
			"	+ +( %))$%*86+*--/2C)*49@7<;<?N?=?@?DAFNFªJHIMFd=^BITUVNVZXd_[]`¬`a`¬O``d`cdkqkoppnuvrrwx|vy~z|z|"),
			Custom String("r]_ ¡¢¢§`d¨b")));
		Global.compressBakeResult = Empty Array;
		For Global Variable(compressBakeNodeLoop, 0, Count Of(Global.compressedNodes), True);
			Global.compressCurrentNodeArray = Empty Array;
			For Global Variable(compressBakeStringLoop, 0, Count Of(Global.compressedNodes[Global.compressBakeNodeLoop]), True);
				Global.compressMapper = Empty Array;
				Global.compressMapper[String Length(Global.compressedNodes[Global.compressBakeNodeLoop][Global.compressBakeStringLoop])
					- True] = Null;
				Modify Global Variable(compressCurrentNodeArray, Append To Array, Mapped Array(Global.compressMapper, Index Of String Char(
					Global.compressBakeMatcher, String Slice(Global.compressedNodes[Global.compressBakeNodeLoop][Global.compressBakeStringLoop],
					Current Array Index, 1))));
				Wait(False, Ignore Condition);
			End;
			Global.compressBakeResult[Global.compressBakeNodeLoop] = Global.compressCurrentNodeArray;
		End;
		Global._extendedGlobalCollection[True] = Index Of Array Value(Global._classIndexes, Null);
		Global._classIndexes[Global._extendedGlobalCollection[True]] = 2;
		Global._objectVariable_1[Global._extendedGlobalCollection[True]] = Global.map;
		Global._objectVariable_0[Global._extendedGlobalCollection[True]] = Global.compressBakeResult;
		Global.bake = Global._extendedGlobalCollection[True];
		Global.pathmapReference = Global._objectVariable_1[Global.bake];
		Global.all_nodes = Global._objectVariable_0[Global._objectVariable_1[Global.bake]];
		Global.lol2 = Global._objectVariable_0[Global.bake];
		Global.lol3 = Global._objectVariable_0[Global.pathmapReference];
		Global.lol4 = Global._objectVariable_2[Global.pathmapReference];
		Wait(0.100, Ignore Condition);
		Global._classIndexes = Empty Array;
		Global._extendedGlobalCollection = Vector(9999, 9999, False);
		Global._tempNodes = Null;
		Global._tempSegments = Null;
		Global._tempAttributes = Null;
		Global.map = Null;
		Global.compressBakeMatcher = Vector(9999, -9999, False);
		Global.compressedNodes = Null;
		Global.compressBakeResult = Null;
		Global.compressCurrentNodeArray = Null;
		Global.compressBakeNodeLoop = Null;
		Global.compressBakeStringLoop = Null;
		Global.compressMapper = Null;
		Global._objectVariable_0 = Null;
		Global._objectVariable_1 = Null;
		Global._objectVariable_2 = Null;
		Global.objective_pos = Global._extendedGlobalCollection;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
	}
}

rule("Pathfinder: Resolve Next")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.start_pathfind == True;
	}

	actions
	{
		Event Player.destination = Event Player.zomnic == 1 ? Event Player.zomnic_dest : (Event Player.piss_ending ? Vector(111, 11.150,
			-5.360) : Position Of(Event Player.target));
		Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player),
			Event Player.pathfinderCurrent == -1 ? Event Player.destination : Global.lol3[Event Player.pathfinderCurrent]), 1, To World,
			Replace existing throttle, Direction and Magnitude);
		Event Player.parentArray = Global.lol2[Index Of Array Value(Global.all_nodes, First Of(Sorted Array(Global.all_nodes,
			Distance Between(Current Array Element, Event Player.destination) + 1000 * (Vertical Angle From Direction(Direction Towards(
			Current Array Element, Event Player.destination)) < -50) + 1000 * !Is In Line of Sight(Current Array Element,
			Event Player.destination + Up, Barriers Do Not Block LOS))))];
		Event Player.pathfinderCurrent = Index Of Array Value(Global.lol3, First Of(Sorted Array(Global.lol3, Distance Between(Position Of(
			Event Player), Current Array Element) + Distance Between(Position Of(Event Player.target), Current Array Element) + 1000 * (
			Vertical Angle From Direction(Direction Towards(Position Of(Event Player), Current Array Element)) < -50)
			+ 1000 * !Is In Line of Sight(Eye Position(Event Player), Current Array Element + Up, Barriers Do Not Block LOS))));
		While(Is Alive(Event Player) && Event Player.start_pathfind);
			If(Distance Between(Position Of(Event Player), Global.lol3[Event Player.pathfinderCurrent]) <= 0.400);
				Wait(Global.wait, Ignore Condition);
				If(!Event Player.zomnic);
					Event Player.destination = Event Player.zomnic == 1 ? Event Player.zomnic_dest : (Event Player.piss_ending ? Vector(111, 11.150,
						-5.360) : Position Of(Event Player.target));
					Event Player.parentArray = Global.lol2[Index Of Array Value(Global.all_nodes, First Of(Sorted Array(Global.all_nodes,
						Distance Between(Current Array Element, Event Player.destination) + 1000 * (Vertical Angle From Direction(Direction Towards(
						Current Array Element, Event Player.destination)) < -50) + 1000 * !Is In Line of Sight(Current Array Element,
						Event Player.destination + Up, Barriers Do Not Block LOS))))];
				End;
				Event Player.pathfinderCurrent = Event Player.parentArray[Event Player.pathfinderCurrent] - True;
			End;
			Wait(Global.wait, Ignore Condition);
		End;
	}
}

rule("bot target")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.ana_target_friends == False;
		Global.roar == False;
		Event Player.hex == False;
	}

	actions
	{
		Event Player.target = First Of(Sorted Array(Filtered Array(All Players(Team 2), (!Is Dummy Bot(Current Array Element) || (
			Current Array Element.zomnic && !Event Player.boss_ID && Event Player.enemy_ID != 10)) && !Current Array Element.is_downed),
			Distance Between(Event Player, Current Array Element) + 1000 * !Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Current Array Element), Barriers Do Not Block LOS) + 1000 * (Vertical Angle From Direction(Direction Towards(Event Player,
			Current Array Element)) < -50)));
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

rule("bot pathfind too high/out of los")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.pre_init == False;
		Event Player.avoid_enviro == False;
	}

	actions
	{
		If(!Event Player.start_pathfind);
			If(!Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target), Barriers Do Not Block LOS)
				|| Vertical Angle From Direction(Direction Towards(Event Player, Event Player.target)) < -50);
				Event Player.start_pathfind = True;
			End;
		End;
		If(Event Player.start_pathfind);
			If(Vertical Angle From Direction(Direction Towards(Event Player, Event Player.target)) > -30);
				If(Distance Between(Event Player, Event Player.target) < 25);
					If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target), Barriers Do Not Block LOS));
						Event Player.start_pathfind = False;
					End;
				End;
			End;
		End;
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
		Event Player.start_pathfind = False;
	}
}

rule("narrator vocalisation")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Global.vocalisation == True;
		Array Contains(Array(Hero(Reinhardt), Hero(Sombra)), Global.main_speaker) == True;
	}

	actions
	{
		If(Global.main_speaker == Hero(Reinhardt));
			While(Global.vocalisation);
				Play Effect(Event Player, DVa Micro Missiles Explosion Sound, Color(White), Global.defeat ? World Vector Of(Vector(False, True, 2),
					Global.last_player_to_die, Rotation And Translation) : Eye Position(Event Player) + Facing Direction Of(Event Player),
					Global.defeat ? 200 : 75);
				Wait(Global.defeat ? 0.050 : 0.100, Ignore Condition);
			End;
		Else;
			Create Effect(Event Player, Sombra Hacking Sound, Team 1, Eye Position(Event Player) + Facing Direction Of(Event Player), 200,
				Visible To Position and Radius);
			Event Player.sombra_sound = Last Created Entity;
			Wait Until(!Global.vocalisation, 99999);
			Destroy Effect(Event Player.sombra_sound);
	}
}

rule("main dialogue subr")
{
	event
	{
		Subroutine;
		main_dialogue;
	}

	actions
	{
		Global.line_number = Null;
		For Global Variable(i_vocal, 0, Count Of(Global.active_dialogue_list), True);
			Global.main_speaker = First Of(Global.active_dialogue_list[Global.line_number]);
			If(!Array Contains(Array(20), Global.phase));
				Start Forcing Player To Be Hero(Global.dialogue_bot, Global.ana_spawn_fix ? Hero(Ana) : Global.main_speaker);
			End;
			Global.vocalisation = True;
			Global.main_dialogue = Global.active_dialogue_list[Global.line_number][True];
			Global.letter_scroll = Null;
			For Global Variable(i2_vocal, 0, String Length(Global.main_dialogue), True);
				Wait Until(Global.is_dialoguing, Global.defeat ? 0.018 : 0.035);
				Global.letter_scroll += True;
				If(Array Contains(Array(Custom String(", "), Custom String(". "), Custom String("? "), Custom String("! "), Custom String("- ")),
					String Slice(Global.main_dialogue, Global.letter_scroll - True, 2)));
					Global.vocalisation = False;
					Wait Until(Global.is_dialoguing, (Array Contains(Array(Custom String(","), Custom String("-")), Char In String(
						Global.main_dialogue, Global.letter_scroll - True)) ? 0.250 : 0.500) * (Global.defeat ? 0.500 : 1));
					Global.vocalisation = True;
				End;
				If(!(Global.letter_scroll % 3));
					If(Global.main_speaker != Hero(Reinhardt));
						If(Global.phase == 20 && Global.main_speaker == Hero(Junkrat));
							Play Effect(All Players(All Teams), Junkrat Frag Launcher Explosion Sound, Team 2, Eye Position(Global.junkrat), 75);
						Else If(Number Of Heroes(Global.main_speaker, All Teams) > True);
							Set Status(Global.dialogue_bot, Null, Hacked, 0.001);
						End;
					End;
				End;
				If(Global.is_dialoguing);
					Break;
				End;
			End;
			Global.vocalisation = False;
			Wait Until(Global.is_dialoguing, Global.active_dialogue_list[Global.line_number][2] * 0.500 * Global.subtitle_speed);
			If(Global.is_dialoguing);
				Break;
			End;
			Global.line_number += True;
		End;
		Global.main_dialogue = Null;
	}
}

rule("has status")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep) || (Has Status(
			Event Player, Frozen) && !Event Player.boss_ID == 1)) == True;
	}

	actions
	{
		Event Player.has_status = True;
		While(Has Status(Event Player, Stunned) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep)
			|| Has Status(Event Player, Frozen));
			Wait(0.100, Ignore Condition);
		End;
		Event Player.has_status = False;
	}
}

rule("healthpack clear status")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Event Player.poisoned = False;
	}
}

rule("phased out/immort clear status")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Has Status(Event Player, Phased Out) || Has Status(Event Player, Invincible)) == True;
		(Has Status(Event Player, Burning) || Event Player.poisoned) == True;
	}

	actions
	{
		Abort If(Is Dummy Bot(Event Player));
		Clear Status(Event Player, Burning);
		Event Player.poisoned = False;
	}
}

rule("took knockback")
{
	event
	{
		Player Received Knockback;
		All;
		All;
	}

	actions
	{
		Event Player.took_knockback = 1;
		Chase Player Variable At Rate(Event Player, took_knockback, False, True, None);
	}
}

rule("pond")
{
	event
	{
		Subroutine;
		pond;
	}

	actions
	{
		Apply Impulse(Event Player, Up, Hero Of(Event Player) == Hero(Zenyatta) ? 7 : 0.001, To World, Cancel Contrary Motion);
		If(Throttle Of(Event Player) == Vector(False, False, False) && Speed Of(Event Player) > 0.500 && !Event Player.took_knockback);
			Apply Impulse(Event Player, Forward, 0.001, To World, Cancel Contrary Motion);
			Apply Impulse(Event Player, Backward, 0.001, To World, Cancel Contrary Motion);
			Apply Impulse(Event Player, Left, 0.001, To World, Cancel Contrary Motion);
			Apply Impulse(Event Player, Right, 0.001, To World, Cancel Contrary Motion);
		Else If(Throttle Of(Event Player) != Vector(False, False, False) && !Event Player.took_knockback);
			Apply Impulse(Event Player, Cross Product(World Vector Of(Throttle Of(Event Player), Event Player, Rotation), Up), 0.001, To World,
				Cancel Contrary Motion);
			Apply Impulse(Event Player, Cross Product(World Vector Of(Throttle Of(Event Player), Event Player, Rotation), Down), 0.001,
				To World, Cancel Contrary Motion);
			Apply Impulse(Event Player, World Vector Of(Throttle Of(Event Player), Event Player, Rotation), 0.001, To World,
				Cancel Contrary Motion);
		End;
		Wait(False, Ignore Condition);
		If(Is Button Held(Event Player, Button(Jump)) || Event Player.bot_jump);
			Apply Impulse(Event Player, Up, 6, To World, Cancel Contrary Motion);
		End;
		Loop If Condition Is True;
		If(Event Player.zomnic == 1);
			Call Subroutine(pathfind_init);
		End;
	}
}

rule("pond bounds 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.phase > 8;
		X Component Of(Position Of(Event Player)) > 63;
		X Component Of(Position Of(Event Player)) < 84;
		Y Component Of(Position Of(Event Player)) < 11.700;
		Y Component Of(Position Of(Event Player)) > 10;
		Z Component Of(Position Of(Event Player)) > -94;
		Z Component Of(Position Of(Event Player)) < -74;
	}

	actions
	{
		Call Subroutine(pond);
	}
}

rule("pond bounds 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.phase > 8;
		X Component Of(Position Of(Event Player)) > 83;
		X Component Of(Position Of(Event Player)) < 104;
		Y Component Of(Position Of(Event Player)) < 9.200;
		Y Component Of(Position Of(Event Player)) > 8;
		Z Component Of(Position Of(Event Player)) > -100;
		Z Component Of(Position Of(Event Player)) < -78.500;
	}

	actions
	{
		Call Subroutine(pond);
	}
}

rule("bot stuck")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Throttle Of(Event Player) != Vector(False, False, False);
		Speed Of In Direction(Event Player, World Vector Of(Throttle Of(Event Player), Event Player, Rotation)) < 3;
	}

	actions
	{
		Abort If(Event Player.no_jump);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Apply Impulse(Event Player, Up, 7, To World, Cancel Contrary Motion);
		Event Player.bot_jump = True;
		Wait(1.500, Ignore Condition);
		Loop If Condition Is True;
		Event Player.bot_jump = False;
	}
}

rule("bot stuck too long")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Throttle Of(Event Player) != Vector(False, False, False);
		Speed Of In Direction(Event Player, World Vector Of(Throttle Of(Event Player), Event Player, Rotation)) < 3;
	}

	actions
	{
		Wait(1.500, Abort When False);
		Event Player.start_pathfind = False;
		Wait(Global.wait * 3, Ignore Condition);
		Event Player.start_pathfind = True;
	}
}

rule("spawn doors")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.spawn_doors = Array(Vector(-12.054, 2.313, -6.509), Vector(-25.135, 2.279, -0.134), Vector(-0.763, 7.237, 0.767));
		For Global Variable(i_vocal, 0, Count Of(Global.spawn_doors), True);
			Create In-World Text(Filtered Array(All Players(All Teams), !Global.phase || Current Array Element.egg), Custom String("Ø"),
				Global.spawn_doors[Evaluate Once(Global.i_vocal)] + Down * 0.700, 4, Clip Against Surfaces, Visible To, Color(Red),
				Default Visibility);
			Modify Global Variable(spawn_door_effects, Append To Array, Last Text ID);
		End;
	}
}

rule("player downed")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.is_downed == False;
		Is Dead(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(Global.phase > 13);
			If(Global.phase < 23);
				If(Y Component Of(Position Of(Event Player)) < 8);
					Teleport(Event Player, Vector(77.842, 13.935, -98.146));
					Wait(False, Ignore Condition);
				End;
			End;
		End;
		Event Player.killer = Attacker;
		If(Event Player.potions[8] - Event Player.extra_lives_used > False);
			If(Event Was Environment);
				Teleport(Event Player, Nearest Walkable Position(Event Player) + Direction From Angles(Horizontal Angle From Direction(
					Direction Towards(Event Player, Nearest Walkable Position(Event Player))), -10) * 2);
				Wait(False, Ignore Condition);
			End;
			Resurrect(Event Player);
			Set Status(Event Player, Null, Phased Out, True);
			Play Effect(All Players(All Teams), Pharah Concussive Blast Effect, Team 2, Eye Position(Event Player), 1);
			Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Team 1, Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team 2, Event Player, 1);
			Play Effect(All Players(All Teams), Sigma Accretion Impact Sound, Team 1, Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Violet), Eye Position(Event Player), 30);
			If(Hero Of(Event Player) == Hero(Roadhog));
				If(Array Contains(Event Player.scrolls_equip, 1));
					Event Player.nano = 10;
				End;
			End;
			Event Player.extra_lives_used += True;
			Global._tempAttributes = Event Player;
		Else;
			If(Count Of(Filtered Array(All Living Players(Team 2), !Is Dummy Bot(Current Array Element) && !Current Array Element.is_downed))
				> False);
				Event Player.pos_cache = Nearest Walkable Position(Event Player) + Direction From Angles(Horizontal Angle From Direction(
					Direction Towards(Event Player, Nearest Walkable Position(Event Player))), -10) * 2;
				If(Event Was Environment);
					Resurrect(Event Player);
					Teleport(Event Player, Event Player.pos_cache);
					Wait(0.100, Ignore Condition);
					Kill(Event Player, Null);
				End;
				Event Player.is_downed = True;
				Event Player.death_timer = 40;
				Chase Player Variable At Rate(Event Player, death_timer, False, True, Destination and Rate);
				Event Player.revive_timer = 8;
				Stop Chasing Player Variable(Event Player, revive_timer);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 200);
				Global._tempNodes = Event Player;
			Else;
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 200);
				Global.last_player_to_die = Event Player;
	}
}

rule("player reviving")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.is_downed == True;
	}

	actions
	{
		Wait Until(Event Player.rezzing_players != Empty Array, 99999);
		Chase Player Variable At Rate(Event Player, revive_timer, False, (0.666 + 0.333 * Count Of(Event Player.rezzing_players)) * (
			Hero Of(Event Player) == Hero(Roadhog) && Array Contains(Event Player.scrolls_equip, 1) ? 2 : 1), Destination and Rate);
		Wait(0.100, Ignore Condition);
		Wait Until(Event Player.rezzing_players == Empty Array || Event Player.revive_timer == 8, 99999);
		Chase Player Variable At Rate(Event Player, revive_timer, 8, True, Destination and Rate);
		Wait(False, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("player reviving 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.is_downed == True;
	}

	actions
	{
		Event Player.rezzing_players = Filtered Array(All Living Players(Team 2), !Is Dummy Bot(Current Array Element)
			&& !Current Array Element.is_downed && Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element),
			Barriers Do Not Block LOS) && Distance Between(Event Player, Current Array Element) < 5);
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("player pause death timer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.zomnic == False;
		Event Player.revive_timer < 8;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, death_timer);
		Wait Until(Event Player.revive_timer == 8 || !Event Player.is_downed, 100);
		Chase Player Variable At Rate(Event Player, death_timer, False, True, Destination and Rate);
	}
}

rule("player revive success")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.is_downed == True;
		Event Player.revive_timer == False;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Resurrect(Event Player);
	}
}

rule("player alive again")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.is_downed == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Event Player.is_downed = False;
		Play Effect(All Players(All Teams), Debuff Impact Sound, Team 2, Event Player, 200);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Event Player, 1);
		Set Status(Event Player, Null, Phased Out, True);
		Stop Chasing Player Variable(Event Player, death_timer);
		Stop Chasing Player Variable(Event Player, revive_timer);
		If(Global.difficulty == -1);
			Set Status(Event Player, Null, Unkillable, 99999);
		End;
		If(Hero Of(Event Player) == Hero(Roadhog));
			If(Array Contains(Event Player.scrolls_equip, 1));
				Event Player.nano = 10;
			End;
		End;
		Global._tempSegments = Event Player;
	}
}

rule("do﻿wned dialogue")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global._tempNodes != Null;
	}

	actions
	{
		Abort If(!Array Contains(All Players(Team 2), Global._tempNodes));
		Abort If(Global.dialogue_priority > False);
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		If(Global.phase == 5 && Global._tempNodes.killer.boss_ID > False);
			If(Hero Of(Global._tempNodes) == Hero(Mercy));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Swordsman dispatched the Witch, and in doing so, his mind became clearer."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Junkrat));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Swordsman cut Dr.​ Junkenstein to the ground, silencing him for the moment."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Roadhog));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Swordsman dispatched the hulking behemoth with ease, his attention turning to the next target."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Reaper));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Swordsman banished the Reaper, who disappeared into the night."), 1.500));
			End;
		Else If(Global.phase == 14 && Global._tempNodes.killer.boss_ID > False);
			If(Hero Of(Global._tempNodes) == Hero(Mercy));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Gunslinger felt no joy in killing a woman, even one as twisted as the Witch of the Wilds."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Junkrat));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"With a well-aimed shot, the Gunslinger felled Dr.​ Junkenstein. But the battle still raged…"), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Roadhog));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"With a shot from his revolver, the Gunslinger dropped the monster, who fell to the ground with an earth-shaking thud."),
					1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Reaper));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Gunslinger's shot found its mark, and the Reaper was destroyed."), 1.500));
			End;
		Else If(Global.phase == 20 && Global._tempNodes.killer.boss_ID > False);
			If(Hero Of(Global._tempNodes) == Hero(Mercy));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Alchemist proved stronger than the Witch, a victory to which she derived no small bit of satisfaction."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Junkrat));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Alchemist killed Dr.​ Junkenstein, breathing a sigh of relief."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Roadhog));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Alchemist's concoctions coursed through the monster, and its body was destroyed from within."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Reaper));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Alchemist slew the Reaper, feeling a moment of sadness for the man she had once known."), 1.500));
			End;
		Else If(Global.phase == 26 && Global._tempNodes.killer.boss_ID > False);
			If(Hero Of(Global._tempNodes) == Hero(Mercy));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Witch's magic was no match for the Lord's hammer, and she was struck down."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Junkrat));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"With a mighty swing, the Lord bested his adversary, the Mad Doctor, denying him his revenge… for now."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Roadhog));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"Large as the monster was, the Lord's conviction was larger, and the frightening creature was bested."), 1.500));
			Else If(Hero Of(Global._tempNodes) == Hero(Reaper));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
					"The Lord made quick work of the Reaper, driving the cursed apparition back into the shadows."), 1.500));
			End;
		Else;
			If(Hero Of(Global._tempNodes) == Hero(Mercy));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Random Value In Array(Array(Custom String(
					"The Witch was thusly defeated. But her magic was known to defy death itself."), Custom String(
					"The magical essence in the air faded away, as the Witch crumpled to the ground, motionless."), Custom String(
					"The Witch's power over life and death was not enough, and she suc***bed to her wounds."))), 2));
			Else If(Hero Of(Global._tempNodes) == Hero(Junkrat));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Random Value In Array(Array(Custom String(
					"The mad Dr.​ Junkenstein had been slain. But the Witch of the Wilds was not done with him. Not in the least."), Custom String(
					"With one last laugh, Dr.​ Junkenstein was silenced. But such evil has a way of returning to the world."), Custom String(
					"Dr.​ Junkenstein fell, but the Lord knew that the danger had not passed."))), 2));
			Else If(Hero Of(Global._tempNodes) == Hero(Roadhog));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Random Value In Array(Array(Custom String(
					"With a thunderous crash, the monster fell to the ground, all semblance of life, extinguished."), Custom String(
					"Dr.​ Junkenstein's creation had been slain, its eyes as lifeless as pale stone."), Custom String(
					"The spark of life within the monster was gone, and its fearsome body became inanimate once more."))), 2));
			Else If(Hero Of(Global._tempNodes) == Hero(Reaper));
				Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Random Value In Array(Array(Custom String(
					"The Reaper's body faded into the darkness of the night."), Custom String(
					"The Reaper had been felled. But the Lord felt sure that he'd return."), Custom String(
					"Accursed smoke dissipated into harmless mist as the Reaper was dispatched."))), 2));
			End;
		End;
		Start Rule(main_dialogue, Restart Rule);
		Global._tempNodes = Null;
	}
}

rule("revive dialogue")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global._tempSegments != Null;
	}

	actions
	{
		Abort If(!Array Contains(All Players(Team 2), Global._tempSegments));
		Abort If(Global.dialogue_priority > False);
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		If(Hero Of(Global._tempSegments) == Hero(Mercy));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Random Value In Array(Array(Custom String(
				"The Witch emerged from the night, brought back to the battle by some darker power."), Custom String(
				"The Witch was not to be undone, and she emerged from the shadows once again."), Custom String(
				"Not even her own death could overcome the potent magic of the Witch of the Wilds!"))), 2));
		Else If(Hero Of(Global._tempSegments) == Hero(Junkrat));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Random Value In Array(Array(Custom String(
				"What was that sound on the wind? The Doctor had returned!"), Custom String(
				"Dr.​ Junkenstein emerged again, for his night of terror was yet to reach its conclusion."), Custom String(
				"Alas, Dr.​ Junkenstein could not yet rest without his vengeance fulfilled!"))), 2));
		Else If(Hero Of(Global._tempSegments) == Hero(Roadhog));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Random Value In Array(Array(Custom String(
				"The ground shook and shuddered once again; the monster had returned."), Custom String(
				"Dr.​ Junkenstein was not yet finished - his monster rose again!"), Custom String(
				"A looming shadow reappeared - Junkenstein's monster was alive once more!"))), 2));
		Else If(Hero Of(Global._tempSegments) == Hero(Reaper));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Random Value In Array(Array(Custom String(
				"To the heroes' dismay, the Reaper was not so easily defeated."), Custom String(
				"The shadows took shape, and coalesced back into the form of the Reaper."), Custom String(
				"Out of the night, the Reaper returned."))), 2));
		End;
		Start Rule(main_dialogue, Restart Rule);
		Global._tempSegments = Null;
	}
}

rule("extra life dialogue")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global._tempAttributes != Null;
	}

	actions
	{
		Abort If(!Array Contains(All Players(Team 2), Global._tempAttributes));
		Abort If(Global.dialogue_priority > False);
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"The Merchant's concoction did not disappoint, and {0} cheated the icy grip of death.",
			Global.t2_names_array[Index Of Array Value(Global.t2_heroes_array, Hero Of(Global._tempAttributes))]), 2));
		Start Rule(main_dialogue, Restart Rule);
		Global._tempAttributes = Null;
	}
}

rule("final death dialogue")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.last_player_to_die != Null;
	}

	actions
	{
		All Players(Team 2).is_downed = False;
		Global.no_hud = True;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.defeat = True;
		Start Facing(Global.last_player_to_die, Facing Direction Of(Global.last_player_to_die), False, To World, Direction and Turn Rate);
		Start Camera(All Players(Team 2), Ray Cast Hit Position(Eye Position(Global.last_player_to_die), Evaluate Once(World Vector Of(
			Vector(False, 2, 4), Global.last_player_to_die, Rotation And Translation)), Null, Global.last_player_to_die, True),
			Position Of(Global.last_player_to_die), 30);
		Set Slow Motion(20);
		Global.dialogue_priority = 3;
		Wait(0.700, Ignore Condition);
		If(Hero Of(Global.last_player_to_die) == Hero(Mercy));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("And as the Witch fell, her magic had no more power."),
				0.300), Array(Hero(Reinhardt), Custom String(
				"Her loyal servants remained lifeless on the ground. And as morning dawned, the castle was safe."), 0.600));
		Else If(Hero Of(Global.last_player_to_die) == Hero(Junkrat));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"With one last laugh, Dr.​ Junkenstein's body collapsed onto the flagstones,"), 0.300), Array(Hero(Reinhardt), Custom String(
				"and as the last of his laughter echoed from the walls of the castle, the battle was over, and the castle had been saved."),
				0.600));
		Else If(Hero Of(Global.last_player_to_die) == Hero(Roadhog));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("And the monster fell, just as its creator."), 0.300),
				Array(Hero(Reinhardt), Custom String(
				"Exhausted, battered, bruised, the denizens of Adlersbrunn celebrated their victory, for tonight they were safe."), 0.600));
		Else If(Hero Of(Global.last_player_to_die) == Hero(Reaper));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"The Reaper fell. The enchanted pumpkin where his head ought to have been, smashed against the flagstones."), 0.300), Array(
				Hero(Reinhardt), Custom String("The night was quiet, and the castle was safe."), 0.600));
		Else If(Hero Of(Global.last_player_to_die) == Hero(Symmetra));
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"A chill spread through the air as the Summoner's body turned to ash."), 0.300), Array(Hero(Reinhardt), Custom String(
				"The first signs of the dawn crept over the horizon, and the castle was safe."), 0.600));
		Else If(Hero Of(Global.last_player_to_die) == Hero(Reinhardt) && Global.last_player_to_die == Global.boss);
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"But alas, this story was not one of triumph. This was a story of tragedy."), 0.300), Array(Hero(Reinhardt), Custom String(
				"As the once-mighty Lord of Adlersbrunn toppled over, exhaling his last breath on this mortal coil,"), 0.300), Array(Hero(
				Reinhardt), Global.sombra_egg == 69 ? Custom String(
				"A single tear rolled down his cheek, for he knew that Brazil was inevitable.") : Custom String(
				"A single tear rolled down his cheek, for he knew that Adlersbrunn was doomed."), 0.300), Array(Hero(Reinhardt),
				Global.sombra_egg == 69 ? Custom String("Dr.​ Junkenstein had his revenge, and the vuvuzelas sounded throughout the night.")
				: Custom String("Tonight, Dr.​ Junkenstein had his revenge, and the indomitable villains celebrated."), 0.300), Array(Hero(
				Reinhardt), Global.sombra_egg == 69 ? Custom String("Olé. Olé. Olé. Eu sou brasileiro.") : Custom String(
				"This was their terrible, bitter victory."), 0.600));
		End;
		Set Slow Motion(40);
		Start Rule(main_dialogue, Restart Rule);
		Wait(0.100, Ignore Condition);
		Wait Until(!Global.main_dialogue, 99999);
		If(Hero Of(Global.last_player_to_die) == Hero(Reinhardt) && Global.last_player_to_die == Global.boss);
			Set Slow Motion(100);
			Stop Camera(All Players(Team 2));
			Wait(True, Ignore Condition);
			Global.is_dialoguing = True;
			Wait Until(!Global.main_dialogue, 99999);
			Global.is_dialoguing = False;
			Global.active_dialogue_list = Array(Array(Hero(Sombra), Global.sombra_egg == 69 ? Custom String(
				"Parabéns. You've unlocked the brazil ending. Obrigado por jogar.") : Custom String(
				"Congratulations. You've unlocked the {0} ending. Thank you for playing.", String Split(Custom String(
				"Cinematic/Dead Easy/Para-Normal/Terrifying/JUNKTASTICALLY NIGHTMARISH"), Custom String("/"))[Global.difficulty + 1]), 1),
				Array(Hero(Sombra), Custom String("You can check out the creator's YouTube and Discord at ''bit.ly/therister''."), 1.500),
				Array(Hero(Sombra), Custom String("Try replaying this gamemode to test out the other scrolls, or tackle other difficulties."),
				1), Array(Hero(Sombra), Global.sombra_egg == 69 ? Custom String("rsrsrsrsrsrsrs kkkkkkkkkkkkkkk kspoakpskopaksopaksopka")
				: Custom String("Who knows, perhaps you might even discover some secrets..."), 1.500));
			Call Subroutine(main_dialogue);
			Declare Team Victory(Team 2);
		Else;
			Declare Team Victory(Team 1);
		End;
	}
}

rule("player death timer end")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.is_downed == True;
		Event Player.death_timer == False;
	}

	actions
	{
		Event Player.is_downed = False;
		Global.last_player_to_die = Event Player;
	}
}

rule("no hud")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.no_hud == True;
	}

	actions
	{
		Disable Hero HUD(Event Player);
		Wait Until(!Global.no_hud, 99999);
		Enable Hero HUD(Event Player);
	}
}

rule("burn status")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Burning) == True;
		Event Player.burner != Empty Array;
	}

	actions
	{
		Damage(Event Player, Team Of(Event Player) == Team 1 ? Event Player.burner : Null, Team Of(Event Player)
			== Team 1 ? 4 : 1 + Global.difficulty);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
		Event Player.burner = Empty Array;
	}
}

rule("teammate bot say hi")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Communicating(Event Player, Hello) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Communicate(Filtered Array(All Players(Team 2), Is Dummy Bot(Current Array Element)), Hello);
	}
}

rule("late joiner")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.late_join_check == False;
		Global.phase > 0.500;
		Is Dummy Bot(Event Player) == False;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Random Value In Array(Filtered Array(Remove From Array(All Players(Team 2), Event Player), !Is Dummy Bot(
			Current Array Element))));
		Wait(True, Ignore Condition);
		Loop If(Is In Spawn Room(Event Player));
		Event Player.late_join_check = True;
		Event Player.euros = Global.euros_total;
		Event Player.real = Global.real_total;
		Stop Camera(Event Player);
	}
}

rule("player dealt damage")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		All;
	}

	actions
	{
		If(Event Player.potions[6]);
			Heal(Event Player, Null, Event Damage * Event Player.potions[6] * 0.050);
		End;
		If(Event Player.potions[7]);
			Event Player.random = Random Real(0, 20);
			If(Event Player.random < Event Player.potions[7] && Event Ability != Null);
				Modify Player Variable(Victim, burner, Append To Array, Event Player);
				Set Status(Victim, Event Player, Burning, 3);
	}
}

rule("destroy bound effects subr")
{
	event
	{
		Subroutine;
		delete_bound_effects;
	}

	actions
	{
		While(Global.boundary_effects != Empty Array);
			Destroy Effect(First Of(Global.boundary_effects));
			Modify Global Variable(boundary_effects, Remove From Array By Index, False);
			Wait(False, Ignore Condition);
		End;
		If(Global.phase < 10);
			For Global Variable(i5, 0, 3, True);
				Create Beam Effect(All Players(All Teams), Good Beam, First Of(Global.boundary_corners) + Up * 1.500 * Evaluate Once(Global.i5),
					Last Of(Global.boundary_corners) + Up * 1.500 * Evaluate Once(Global.i5), Color(Gray), Visible To);
				Wait(0.100, Ignore Condition);
			End;
			Create Beam Effect(All Players(All Teams), Good Beam, Vector(90.319, 20.596, -62.974), Vector(88.386, 23.292, -62.407), Color(
				Gray), Visible To);
			Create Beam Effect(All Players(All Teams), Good Beam, Vector(90.337, 23.292, -62.964), Vector(88.386, 20.596, -62.407), Color(
				Gray), Visible To);
		End;
	}
}

rule("enter shop")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.shop_open == True;
		Event Player.shop == False;
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Global.merchant) <= 3;
	}

	actions
	{
		Event Player.shop = 1;
		Event Player.shop_selection = False;
		Create In-World Text(All Players(All Teams), Custom String("Shopping..."), Event Player, True, Do Not Clip,
			Visible To Position and String, Color(Purple), Default Visibility);
		Event Player.is_shopping_text_ID = Last Text ID;
		Start Camera(Event Player, First Of(Global.shop_campos), Last Of(Global.shop_campos), 0);
		Disable Hero HUD(Event Player);
		Set Move Speed(Event Player, 0.001);
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Crouch));
		Disallow Button(Event Player, Button(Melee));
		Disallow Button(Event Player, Button(Reload));
		If(!Event Player.max_health);
			Event Player.max_health = Max Health(Event Player);
		End;
		Wait(0.100, Ignore Condition);
		Event Player.shop_selection = False;
	}
}

rule("shop select")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.shop != False;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		If(Event Player.shop_selection == 69);
			If(Event Player.shop == 1);
				Event Player.shop = False;
			Else;
				Event Player.shop = 1;
			End;
			Event Player.shop_selection = Null;
		Else If(Event Player.shop == 1);
			If(Event Player.shop_selection == Null);
				Event Player.shop = 2;
				Event Player.shop_selection = Null;
			Else If(Event Player.shop_selection == 1);
				Event Player.shop = 3;
				Event Player.shop_selection = Null;
			End;
		Else If(Event Player.shop == 2);
			If(Event Player.potions[Event Player.shop_selection] >= Event Player.potions_max[Event Player.shop_selection]);
				Small Message(Event Player, Custom String("Out of stock!"));
				Play Effect(Event Player, Sombra Translocator Reappear Sound, Color(White), First Of(Global.shop_campos), 200);
			Else;
				If(Event Player.euros < Global.potions_price[Event Player.shop_selection]);
					Small Message(Event Player, Custom String("You cannot afford this item."));
					Play Effect(Event Player, Sombra Translocator Reappear Sound, Color(White), First Of(Global.shop_campos), 200);
				Else;
					Event Player.potions[Event Player.shop_selection] += True;
					Play Effect(Event Player, Brigitte Repair Pack Impact Sound, Color(White), First Of(Global.shop_campos), 200);
					Play Effect(Event Player, Good Pickup Effect, Color(Purple), Global.merchant.attack, 1);
					Event Player.euros -= Global.potions_price[Event Player.shop_selection];
					Communicate(Global.merchant.attack, Thanks);
				End;
			End;
		Else If(Event Player.shop == 3);
			If(Array Contains(Event Player.scrolls_equip, Event Player.scrolls_random[Event Player.shop_selection]));
				Small Message(Event Player, Custom String("Already unlocked!"));
				Play Effect(Event Player, Sombra Translocator Reappear Sound, Color(White), First Of(Global.shop_campos), 200);
			Else;
				If(Event Player.real < 100);
					Small Message(Event Player, Custom String("You cannot afford this scroll."));
					Play Effect(Event Player, Sombra Translocator Reappear Sound, Color(White), First Of(Global.shop_campos), 200);
				Else;
					Modify Player Variable(Event Player, scrolls_equip, Append To Array, Event Player.scrolls_random[Event Player.shop_selection]);
					Play Effect(Event Player, Sombra Logo Sound, Color(White), First Of(Global.shop_campos), 200);
					Play Effect(Event Player, Good Pickup Effect, Color(Yellow), Global.merchant.attack, 1);
					Event Player.real -= 100;
					Communicate(Global.merchant.attack, Thanks);
	}
}

rule("shop 1 selection left right")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.shop == 1;
		Absolute Value(X Component Of(Throttle Of(Event Player))) > 0.500;
	}

	actions
	{
		If(X Component Of(Throttle Of(Event Player)) > False);
			Event Player.shop_selection = Event Player.shop_selection ? (Event Player.shop_selection == 69 ? 1 : Null) : 69;
		Else;
			Event Player.shop_selection = Event Player.shop_selection ? (Event Player.shop_selection == 69 ? Null : 69) : 1;
		End;
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("shop 1 selection up do﻿wn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.shop == 1;
		Absolute Value(Z Component Of(Throttle Of(Event Player))) > 0.500;
	}

	actions
	{
		Event Player.shop_selection = Event Player.shop_selection == 69 ? 1 : 69;
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("shop 2/3 selection left right")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Array Contains(Array(2, 3), Event Player.shop) == True;
		Absolute Value(X Component Of(Throttle Of(Event Player))) > 0.500;
	}

	actions
	{
		If(Event Player.shop == 2);
			If(Event Player.shop_selection == 69);
				Event Player.shop_selection = X Component Of(Throttle Of(Event Player)) < False ? Null : 9;
			Else If((Event Player.shop_selection == 9 && X Component Of(Throttle Of(Event Player)) < False) || (
					Event Player.shop_selection == Null && X Component Of(Throttle Of(Event Player)) > False));
				Event Player.shop_selection = 69;
			Else;
				If(X Component Of(Throttle Of(Event Player)) > False);
					Event Player.shop_selection += Event Player.shop_selection < 5 ? 4 : -5;
				Else;
					Event Player.shop_selection += Event Player.shop_selection < 5 ? 5 : -4;
				End;
			End;
		Else;
			If(Event Player.shop_selection == 69);
				Event Player.shop_selection = X Component Of(Throttle Of(Event Player)) < False ? Null : 5;
			Else If((Event Player.shop_selection == 5 && X Component Of(Throttle Of(Event Player)) < False) || (
					Event Player.shop_selection == Null && X Component Of(Throttle Of(Event Player)) > False));
				Event Player.shop_selection = 69;
			Else;
				If(X Component Of(Throttle Of(Event Player)) > False);
					Event Player.shop_selection += Event Player.shop_selection < 3 ? 2 : -3;
				Else;
					Event Player.shop_selection += Event Player.shop_selection < 3 ? 3 : -2;
				End;
			End;
		End;
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("shop 2/3 selection up do﻿wn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Array Contains(Array(2, 3), Event Player.shop) == True;
		Absolute Value(Z Component Of(Throttle Of(Event Player))) > 0.500;
	}

	actions
	{
		Event Player.shop_selection += Z Component Of(Throttle Of(Event Player)) > False ? -1 : 1;
		If(Event Player.shop_selection == (Event Player.shop == 2 ? 10 : 6) || Event Player.shop_selection == -1);
			Event Player.shop_selection = 69;
		Else If(Event Player.shop_selection == 70);
			Event Player.shop_selection = Null;
		Else If(Event Player.shop_selection == 68);
			Event Player.shop_selection = Event Player.shop == 2 ? 9 : 5;
		End;
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("shop go back")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.shop != False;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.shop = Event Player.shop == 1 ? Null : 1;
		Event Player.shop_selection = Null;
	}
}

rule("shop quick leave")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.shop != False;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Event Player.shop = False;
	}
}

rule("shop leave")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.shop == False;
	}

	actions
	{
		Stop Camera(Event Player);
		Enable Hero HUD(Event Player);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Crouch));
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Reload));
		Destroy In-World Text(Event Player.is_shopping_text_ID);
		Event Player.damage_dealt = 100 + First Of(Event Player.potions) * 5;
		Set Damage Dealt(Event Player, Event Player.damage_dealt);
		Set Healing Dealt(Event Player, 100 + Event Player.potions[True] * 5);
		Set Max Health(Event Player, 100 + 2000 * Event Player.potions[2] / Event Player.max_health);
		Event Player.speed = 100 + Event Player.potions[3] * 5;
		Set Move Speed(Event Player, Event Player.speed);
		If(Hero Of(Event Player) == Hero(Mercy));
			If(Array Contains(Event Player.scrolls_equip, 2));
				Disallow Button(Event Player, Event Player.button_damageboost);
			End;
			If(Array Contains(Event Player.scrolls_equip, 4));
				Set Ability 2 Enabled(Event Player, False);
			End;
		End;
		If(!Event Player.max_ammo);
			Event Player.max_ammo = Max Ammo(Event Player, False);
		End;
		Set Max Ammo(Event Player, False, Event Player.max_ammo + Event Player.potions[4] * Event Player.max_ammo / 5);
		Wait(False, Ignore Condition);
		Set Player Health(Event Player, 99999);
		Set Ammo(Event Player, False, Max Ammo(Event Player, False));
		If(!First Of(Event Player.create_scroll));
			If(Hero Of(Event Player) == Hero(Roadhog));
				If(Array Contains(Event Player.scrolls_equip, 2));
					Create Effect(Is Crouching(Event Player) && Health(Event Player) > 100 ? All Players(All Teams) : Empty Array,
						Mercy Damage Boosted Effect, Team 2, Event Player, True, Visible To Position and Radius);
					Event Player.create_scroll = True;
				End;
			Else If(Hero Of(Event Player) == Hero(Junkrat));
				If(Array Contains(Event Player.scrolls_equip, 1));
					Create Effect(Normalized Health(Event Player) < 0.666 && Is Alive(Event Player) ? All Players(All Teams) : Empty Array,
						Winston Tesla Cannon Target Effect, Team 2, Event Player, True, Visible To Position and Radius);
					Create Effect(Normalized Health(Event Player) < 0.666 && Is Alive(Event Player) ? All Players(All Teams) : Empty Array,
						Winston Tesla Cannon Target Sound, Team 2, Event Player, 200, Visible To Position and Radius);
					Create Effect(Normalized Health(Event Player) < 0.666 && Is Alive(Event Player) ? All Players(All Teams) : Empty Array, Ring,
						Color(White), Event Player, 8, Visible To Position and Radius);
					Create Beam Effect(Normalized Health(Event Player) < 0.666 && Is Alive(Event Player) ? All Players(All Teams) : Empty Array,
						Winston Tesla Cannon Beam, Event Player, (Players Within Radius(Event Player, 8, Team 1, Surfaces)
						== Empty Array ? Event Player : Append To Array(Players Within Radius(Event Player, 8, Team 1, Surfaces), Event Player))
						[Total Time Elapsed * 3 % Count Of(Players Within Radius(Event Player, 8, Team 1, Surfaces))], Team 2,
						Visible To Position and Radius);
					Event Player.create_scroll = True;
				End;
			Else If(Hero Of(Event Player) == Hero(Reaper));
				If(Array Contains(Event Player.scrolls_equip, 1));
					Create Effect(All Players(All Teams), Zenyatta Orb of Discord Target Effect, Team 2, Event Player.death_mark, True,
						Visible To Position and Radius);
					Create Effect(All Players(All Teams), Zenyatta Orb of Discord Target Sound, Team 2, Event Player.death_mark, 200,
						Visible To Position and Radius);
					Create Icon(Event Player.death_mark != Null ? All Players(All Teams) : Empty Array, Event Player.death_mark, Skull,
						Visible To and Position, Color(Violet), False);
					Event Player.create_scroll[False] = True;
				End;
			Else If(Hero Of(Event Player) == Hero(Mercy));
				If(Array Contains(Event Player.scrolls_equip, 2));
					Create Beam Effect(All Players(All Teams), Moira Grasp Connected Beam, Event Player.is_grasping ? Eye Position(Event Player)
						+ Facing Direction Of(Event Player) + World Vector Of(Right, Event Player, Rotation) * 0.100 + Normalize(Cross Product(
						Facing Direction Of(Event Player), World Vector Of(Right, Event Player, Rotation))) * 0.100 : Global._extendedGlobalCollection,
						Event Player.is_grasping ? (Event Player.damage_target != Null ? Event Player.damage_target : Eye Position(Event Player)
						+ Facing Direction Of(Event Player) + World Vector Of(Right, Event Player, Rotation) * 0.100 + Normalize(Cross Product(
						Facing Direction Of(Event Player), World Vector Of(Right, Event Player, Rotation))) * 0.100)
						: Global._extendedGlobalCollection, Team 2, Visible To Position and Radius);
					Create Effect(All Players(All Teams), Mercy Damage Boosted Sound, Team 2, Event Player.is_grasping ? Eye Position(Event Player)
						: Global._extendedGlobalCollection, 200, Visible To Position and Radius);
					Event Player.create_scroll[False] = True;
				End;
			End;
		End;
		If(!Event Player.create_scroll[True]);
			If(Hero Of(Event Player) == Hero(Reaper));
				If(Array Contains(Event Player.scrolls_equip, 3));
					Create Effect(Is Using Ability 1(Event Player) ? All Players(All Teams) : Empty Array, Ring, Color(Violet), Event Player, 7,
						Visible To Position and Radius);
					Event Player.create_scroll[True] = True;
				End;
			Else If(Hero Of(Event Player) == Hero(Mercy));
				If(Array Contains(Event Player.scrolls_equip, Null));
					Start Healing Modification(Event Player, Event Player, 25, None);
					Event Player.create_scroll[True] = True;
				End;
			End;
		End;
		If(!Event Player.create_scroll[2]);
			If(Hero Of(Event Player) == Hero(Reaper));
				If(Array Contains(Event Player.scrolls_equip, 2));
					Event Player.scythe_swing = -1;
					Create Beam Effect(Is Meleeing(Event Player) ? All Players(All Teams) : Empty Array, Grapple Beam, World Vector Of(Up * 1.200,
						Event Player, Rotation And Translation), World Vector Of(Up * 1.200, Event Player, Rotation And Translation) + (
						Sine From Degrees(Event Player.scythe_angle) * Facing Direction Of(Event Player) + Cosine From Degrees(
						Event Player.scythe_angle) * World Vector Of(Vector(-1, 0.300 * Event Player.scythe_swing, False), Event Player, Rotation))
						* Event Player.scythe_length, Team 1, Visible To Position and Radius);
					Create Beam Effect(Is Meleeing(Event Player) ? All Players(All Teams) : Empty Array, Omnic Slicer Beam, World Vector Of(Up * 1.200,
						Event Player, Rotation And Translation) + (Sine From Degrees(Event Player.scythe_angle) * Facing Direction Of(Event Player)
						+ Cosine From Degrees(Event Player.scythe_angle) * World Vector Of(Vector(-1, 0.300 * Event Player.scythe_swing, False),
						Event Player, Rotation)) * Event Player.scythe_length, World Vector Of(Up * 1.200, Event Player, Rotation And Translation) + (
						Sine From Degrees(Event Player.scythe_angle + 55) * Facing Direction Of(Event Player) + Cosine From Degrees(
						Event Player.scythe_angle + 55) * World Vector Of(Vector(-1, 0.300 * Event Player.scythe_swing, False), Event Player,
						Rotation)) * Event Player.scythe_length, Team 1, Visible To Position and Radius);
					Event Player.create_scroll[2] = True;
	}
}

rule("potion of proficiency 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) > False;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Roadhog));
			If(Array Contains(Event Player.scrolls_equip, 3));
				Set Ability Cooldown(Event Player, Button(Ability 1), 12);
				Wait(False, Ignore Condition);
			End;
		End;
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - Event Player.potions[5]);
	}
}

rule("potion of proficiency 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) > False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) - Event Player.potions[5]);
	}
}

rule("spawn enemies subr")
{
	event
	{
		Subroutine;
		spawn_enemies;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		For Global Variable(i4, 0, Count Of(Global.enemy_ID_sequence), True);
			Global.respawn_enemy = First Of(Filtered Array(All Dead Players(Team 1), Current Array Element.enemy_ID));
			If(Global.respawn_enemy.enemy_ID == 5 && Global.enemy_ID_sequence[Global.i4] < 20);
				Global.respawn_enemy.safeguard_fix = True;
				Teleport(Global.respawn_enemy, Global._extendedGlobalCollection);
				Start Forcing Player To Be Hero(Global.respawn_enemy, Hero(Brigitte));
				Wait(False, Ignore Condition);
				Start Forcing Player To Be Hero(Global.respawn_enemy, Hero(Torbjörn));
				Wait(False, Ignore Condition);
			End;
			Respawn(Global.respawn_enemy);
			Global.respawn_enemy.enemy_ID = Global.enemy_ID_sequence[Global.i4];
			Teleport(Global.respawn_enemy, Random Value In Array(Global.enemy_spawn));
			Global.respawn_enemy.safeguard_fix = False;
			Wait(0.300, Ignore Condition);
		End;
	}
}

rule("enemy died")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.boss_ID == False;
	}

	actions
	{
		If(Event Player == Global.dialogue_bot || Event Player.boss_ID == 4.400);
			Resurrect(Event Player);
			Wait(True, Ignore Condition);
			Loop If(Is Dead(Event Player));
		Else;
			Event Player.nano = False;
			Event Player.speed_boosted = False;
			If(Hero Of(Attacker) == Hero(Junkrat));
				If(Array Contains(Attacker.scrolls_equip, 2));
					Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Team 2, Eye Position(Event Player), 1);
					Damage(Players Within Radius(Event Player, 6, Team 1, Surfaces), Attacker, 50);
					Filtered Array(Players Within Radius(Event Player, 6, Team 1, Surfaces), !Has Status(Current Array Element, Phased Out))
						.electrify = 2;
				End;
			End;
			If(Array Contains(All Players(Team 2), Attacker));
				If(!Global.first_kill);
					Global.first_kill = True;
				End;
				If(!Array Contains(Array(5, 6, 7, 14, 15, 16, 26), Global.phase));
					If(Event Player.enemy_ID == 8);
						All Players(Team 2).euros += 100;
						Global.euros_total += 100;
					Else If(Event Player.enemy_ID == 9);
						All Players(Team 2).euros += 150;
						Global.euros_total += 150;
					Else;
						All Players(Team 2).euros += 10;
						Global.euros_total += 10;
					End;
				End;
			End;
			If(Event Player.enemy_ID == 10);
				Clear Status(Event Player, Unkillable);
				All Players(Team 2).euros += 50;
				Global.euros_total += 50;
			End;
			Destroy Effect(First Of(Event Player.trail));
			Destroy In-World Text(Event Player.trail[True]);
			Destroy Effect(Event Player.trail[2]);
			Destroy Icon(Event Player.trail[3]);
			Wait(0.030, Ignore Condition);
			If(Global.reaper.death_mark == Event Player);
				Event Player.damage_received = 130 - 15 * Global.difficulty;
				Set Damage Received(Event Player, Event Player.damage_received * (Event Player.nano ? 1.500 : 1));
				Global.reaper.death_mark = Null;
	}
}

rule("bot strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Event Player.strafe = True;
		While(True);
			Event Player.strafe *= -1;
			Wait(Random Real(0.250, Event Player.boss_ID == 2 || Event Player.speed_boosted ? 1 : 1.500), Ignore Condition);
		End;
	}
}

rule("bot pause")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Event Player.throttle_mag = Event Player.speed_boosted ? True : !Event Player.throttle_mag;
		Wait(Random Real(1, 3), Ignore Condition);
		Loop;
	}
}

rule("enemy throttle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.enemy_ID != False;
		Event Player.start_pathfind == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		If(Array Contains(Array(2, 3, 5), Event Player.enemy_ID) || (Array Contains(Array(21, 23, 24, 25), Event Player.enemy_ID)
			&& Ability Cooldown(Event Player, Button(Secondary Fire)) <= False));
			If(Array Contains(Array(3, 23), Event Player.enemy_ID));
				Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.target) * (Distance Between(Event Player,
					Event Player.target) > 16 ? 1 : (Distance Between(Event Player, Event Player.target) < 14 ? -1 : Null)) + World Vector Of(Left,
					Event Player, Rotation) * Event Player.strafe, Event Player.throttle_mag, To World, Replace existing throttle,
					Direction and Magnitude);
			Else If(Array Contains(Array(24), Event Player.enemy_ID));
				Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.target) * (Distance Between(Event Player,
					Event Player.target) > 8 ? 1 : (Distance Between(Event Player, Event Player.target) < 6 ? -1 : Null)) + World Vector Of(Left,
					Event Player, Rotation) * Event Player.strafe, Event Player.throttle_mag, To World, Replace existing throttle,
					Direction and Magnitude);
			Else;
				Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.target) * (Distance Between(Event Player,
					Event Player.target) > 10 ? 1 : (Distance Between(Event Player, Event Player.target) < 8 ? -1 : Null)) + World Vector Of(Left,
					Event Player, Rotation) * Event Player.strafe, Event Player.throttle_mag, To World, Replace existing throttle,
					Direction and Magnitude);
			End;
		Else;
			Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.target) + World Vector Of(Left,
				Event Player, Rotation) * Event Player.strafe * 0.400, Distance Between(Event Player, Event Player.target) > 2, To World,
				Replace existing throttle, Direction and Magnitude);
	}
}

rule("instant target switch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Event Player.target) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Abort If(Event Player.hex);
		Event Player.target = First Of(Sorted Array(Filtered Array(All Players(Team 2), (!Is Dummy Bot(Current Array Element)
			|| Current Array Element.zomnic) && !Current Array Element.is_downed), Distance Between(Event Player, Current Array Element)
			+ 1000 * !Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)
			+ 1000 * (Vertical Angle From Direction(Direction Towards(Event Player, Current Array Element)) < -50)));
	}
}

rule("v/instakillager start hammering")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Array Contains(Array(1, 7), Event Player.enemy_ID) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Distance Between(Event Player, Event Player.target) < 2.500);
			Start Holding Button(Event Player, Button(Primary Fire));
			While(Distance Between(Event Player, Event Player.target) < 3);
				Wait(Global.wait, Ignore Condition);
			End;
			Stop Holding Button(Event Player, Button(Primary Fire));
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("k/sp/sk/over/overoverkillager attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Array Contains(Array(2, 3, 5, 8, 9), Event Player.enemy_ID) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target), Barriers Do Not Block LOS));
			If(Event Player.enemy_ID == 3);
				Event Player.real = 1.700;
				Chase Player Variable At Rate(Event Player, real, False, True, None);
				Wait(1.700, Ignore Condition);
			End;
			Press Button(Event Player, Array Contains(Array(8), Event Player.enemy_ID) || (Event Player.enemy_ID == 9 && Distance Between(
				Event Player, Event Player.target) < 7) ? Button(Secondary Fire) : Button(Primary Fire));
			Wait(Event Player.enemy_ID == 5 ? Random Real(1, 2) : Random Real(Array Contains(Array(8, 9), Event Player.enemy_ID)
				? 1.100 : 0.600, 1.500), Ignore Condition);
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("over/overoverkillager dead")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Array Contains(Array(8, 9), Event Player.enemy_ID) == True;
		Is Dead(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Interact));
		Wait(True, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("grillager attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.enemy_ID == 4;
		Event Player.grillager_activate == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Distance Between(Event Player, Event Player.target) < 10);
			If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target), Barriers Do Not Block LOS));
				While(!Is Using Ability 2(Event Player));
					Press Button(Event Player, Button(Ability 2));
					Wait(0.250, Ignore Condition);
				End;
				Event Player.grillager_activate = True;
			End;
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("gri/chi/chernobyllager explode")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Array Contains(Array(4, 6, 10), Event Player.enemy_ID) == True;
		Event Player.grillager_activate == True;
		(Is Dead(Event Player) || !Is Using Ability 2(Event Player)) == True;
	}

	actions
	{
		Event Player.grillager_victims = Filtered Array(Players Within Radius(Event Player, Event Player.enemy_ID == 10 ? 12 : 5, Team 2,
			Surfaces), Is Alive(Current Array Element) && !Has Status(Current Array Element, Phased Out));
		If(Event Player.enemy_ID == 4);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(Orange), Eye Position(Event Player), 5);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Event Player.grillager_victims.burner = True;
		Else If(Event Player.enemy_ID == 6);
			Play Effect(All Players(All Teams), Pharah Concussive Blast Effect, Team 2, Eye Position(Event Player), 5);
			Play Effect(All Players(All Teams), Winston Jump Pack Landing Effect, Team 2, Eye Position(Event Player), 5);
			Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Sound, Color(White), Eye Position(Event Player), 200);
		Else;
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Team 1, Eye Position(Event Player), 1);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Eye Position(Event Player), 10);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Eye Position(Event Player), 15);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Eye Position(Event Player), 20);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Eye Position(Event Player), 25);
			Event Player.falloff_pos = Eye Position(Event Player);
			Event Player.falloff = 10;
			Create Effect(All Players(All Teams), Ring, Color(Green), Event Player.falloff_pos, Event Player.falloff,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, falloff_effect, Append To Array, Last Created Entity);
			Create Effect(All Players(All Teams), Bad Aura, Color(Green), Event Player.falloff_pos, Event Player.falloff,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, falloff_effect, Append To Array, Last Created Entity);
		End;
		For Player Variable(Event Player, i, 0, Count Of(Event Player.grillager_victims), True);
			Damage(Event Player.grillager_victims[Evaluate Once(Event Player.i)], Null, Event Player.enemy_ID == 10 ? 125 * (
				16 - Distance Between(Event Player, Event Player.grillager_victims[Evaluate Once(Event Player.i)])) : (
				40 + 15 * Global.difficulty) / 5 * (6 - Distance Between(Event Player, Event Player.grillager_victims[Evaluate Once(
				Event Player.i)])));
			If(Event Player.enemy_ID == 4);
				Set Status(Event Player.grillager_victims[Evaluate Once(Event Player.i)], Null, Burning, 3.500);
			Else If(Event Player.enemy_ID == 6);
				Set Status(Event Player.grillager_victims[Evaluate Once(Event Player.i)], Null, Frozen, 3);
			End;
			Apply Impulse(Event Player.grillager_victims[Evaluate Once(Event Player.i)], Direction Towards(Event Player,
				Event Player.grillager_victims[Evaluate Once(Event Player.i)]) + Up * 0.700, Event Player.enemy_ID == 10 ? 20 : 14, To World,
				Cancel Contrary Motion);
			Event Player.grillager_victims[Evaluate Once(Event Player.i)].took_knockback = 1;
			Chase Player Variable At Rate(Event Player.grillager_victims[Evaluate Once(Event Player.i)], took_knockback, False, True,
				Destination and Rate);
		End;
		Wait(0.050 * Is Dead(Event Player), Ignore Condition);
		Teleport(Event Player, Global.compressBakeMatcher);
		Event Player.grillager_activate = False;
	}
}

rule("chi/chernobyllager explode")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Array Contains(Array(6, 10), Event Player.enemy_ID) == True;
		Event Player.grillager_activate == False;
	}

	actions
	{
		If((Event Player.enemy_ID == 10 ? Health(Event Player) <= True && Is Alive(Event Player) : Is Dead(Event Player)) || (
			Distance Between(Event Player, Event Player.target) < 3 && !Event Player.has_status));
			If(Event Player.enemy_ID == 10);
				Press Button(Event Player, Button(Ultimate));
				Stop Throttle In Direction(Event Player);
				Wait(1.500, Ignore Condition);
			End;
			Event Player.grillager_activate = True;
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("chernobyllager falloff")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.falloff >= 10;
	}

	actions
	{
		For Player Variable(Event Player, i2, 0, 40, True);
			Players Within Radius(Event Player.falloff_pos, Event Player.falloff, Team 2, Surfaces).poisoned = 5;
			Wait(0.200, Ignore Condition);
		End;
		Chase Player Variable At Rate(Event Player, falloff, False, 10, None);
		Wait(True, Ignore Condition);
		Stop Chasing Player Variable(Event Player, falloff);
		While(Event Player.falloff_effect != Empty Array);
			Destroy Effect(First Of(Event Player.falloff_effect));
			Modify Player Variable(Event Player, falloff_effect, Remove From Array By Index, False);
		End;
	}
}

rule("instakillager hello")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.enemy_ID == 7;
	}

	actions
	{
		Communicate(Event Player, Hello);
		Wait(True, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("spillager always ult")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.enemy_ID == 5;
		Is Using Ultimate(Event Player) == False;
		Is Alive(Event Player) == True;
		Event Player.safeguard_fix == False;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.100, Abort When False);
		Loop If Condition Is True;
	}
}

rule("overkillager turret deploy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Array Contains(Array(8, 9), Event Player.enemy_ID) == True;
	}

	actions
	{
		Wait(Random Real(4, 8), Ignore Condition);
		Abort If Condition Is False;
		If(Event Player.enemy_ID == 9);
			Event Player.random = Random Integer(!Event Player.random, 2);
			If(Event Player.random);
				Set Projectile Gravity(Event Player, 1000000);
				Press Button(Event Player, Button(Ability 1));
				Wait(True, Ignore Condition);
			Else;
				Set Projectile Gravity(Event Player, 15);
				While(!Is Using Ultimate(Event Player));
					Set Ultimate Charge(Event Player, 100);
					Press Button(Event Player, Button(Ultimate));
					Wait(False, Ignore Condition);
				End;
			End;
			While(Is Using Ultimate(Event Player));
				Press Button(Event Player, Button(Primary Fire));
				Wait(0.200, Ignore Condition);
			End;
		Else;
			Set Projectile Gravity(Event Player, 1000000);
			Press Button(Event Player, Button(Ability 1));
			Wait(True, Ignore Condition);
		End;
		Set Projectile Gravity(Event Player, 100);
		Loop If Condition Is True;
	}
}

rule("overkillager no hooking")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Array Contains(Array(8, 9), Event Player.enemy_ID) == True;
		Event Player.has_status == True;
	}

	actions
	{
		Start Forcing Player Position(Event Player, Position Of(Event Player), False);
		Wait Until(!Event Player.has_status, 99999);
		Stop Forcing Player Position(Event Player);
	}
}

rule("(royal/life) guard attack (shielded)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Array Contains(Array(21, 23, 25), Event Player.enemy_ID) == True;
		Is Alive(Event Player) == True;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target), Barriers Do Not Block LOS));
			Press Button(Event Player, Button(Ability 1));
		End;
		Wait(Array Contains(Array(23), Event Player.enemy_ID) ? Random Real(3, 6) : Random Real(1.500, 2.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("brig shield")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Array Contains(Array(21, 23, 25), Event Player.enemy_ID) == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target), Barriers Do Not Block LOS));
			Start Holding Button(Event Player, Button(Secondary Fire));
			While(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target), Barriers Do Not Block LOS));
				Wait(Global.wait, Ignore Condition);
			End;
			Stop Holding Button(Event Player, Button(Secondary Fire));
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("brig no shield")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Array Contains(Array(24), Event Player.enemy_ID) == False;
		Ability Cooldown(Event Player, Button(Secondary Fire)) > False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Event Player.enemy_ID == 25 ? 10 : 10000);
		If(Array Contains(Array(21, 23, 25), Event Player.enemy_ID));
			Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.target), Distance Between(Event Player,
				Event Player.target) > 2, To World, Replace existing throttle, Direction and Magnitude);
	}
}

rule("guard attack unshielded")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		(Ability Cooldown(Event Player, Button(Secondary Fire)) || Array Contains(Array(22, 26), Event Player.enemy_ID)) == True;
	}

	actions
	{
		If(Distance Between(Event Player, Event Player.target) < 5);
			Press Button(Event Player, Button(Primary Fire));
		End;
		Wait(0.600, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("van/safeguard dash")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Array Contains(Array(22, 24, 26), Event Player.enemy_ID) == True;
		Event Player.start_pathfind == False;
	}

	actions
	{
		Wait(Random Real(2.500, 4), Ignore Condition);
		Skip If(Event Player.enemy_ID == 24, True);
		Press Button(Event Player, Button(Secondary Fire));
		Skip If(Event Player.enemy_ID == 24 && !Is Firing Secondary(Event Player), True);
		Press Button(Event Player, Button(Primary Fire));
		Loop If Condition Is True;
	}
}

rule("dashed")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Array Contains(Array(22, 24, 25), Attacker.enemy_ID) == True;
		Is Firing Secondary(Attacker) == True;
	}

	actions
	{
		Damage(Event Player, Null, 0.800 * Attacker.damage_dealt * (Attacker.nano ? 1.500 : 1));
	}
}

rule("overoverkillager damage buff")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Attacker.enemy_ID == 9;
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Damage(Event Player, Attacker, Event Damage * 0.500);
	}
}

rule("lifeguard heal")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Event Player.enemy_ID == 23;
	}

	actions
	{
		Wait(Random Real(1, 2), Ignore Condition);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Append To Array(Sorted Array(
			Filtered Array(Remove From Array(All Living Players(Team 1), Array(Event Player, Global.dialogue_bot)), Is In Line of Sight(
			Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)), Normalized Health(
			Current Array Element)), Event Player.target)))), 1000, To World, Direction and Turn Rate);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.100, Ignore Condition);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)), 1000, To World,
			Direction and Turn Rate);
		Loop If Condition Is True;
	}
}

rule("safeguard respawn shield")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.enemy_ID == 24;
		Event Player.has_status == False;
		Is Alive(Event Player) == True;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Wait(True, Abort When False);
		Event Player.safeguard_fix = True;
		Event Player.max_health = Health(Event Player);
		Event Player.boss_target_location = Position Of(Event Player);
		Wait(False, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Hero(Torbjörn));
		Wait(False, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Hero(Brigitte));
		Wait(False, Ignore Condition);
		Set Player Health(Event Player, Event Player.max_health);
		Teleport(Event Player, Event Player.boss_target_location);
		Wait(True, Ignore Condition);
		Event Player.safeguard_fix = False;
	}
}

rule("royal guard rally")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Event Player.enemy_ID == 25;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("royal guard dash")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Event Player.enemy_ID == 25;
		Is Firing Secondary(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Distance Between(Event Player, Event Player.target) < 5);
			Press Button(Event Player, Button(Primary Fire));
		End;
		Wait(Random Real(2, 3), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("bitter guard aura")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Event Player.enemy_ID == 26;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Players Within Radius(Event Player, 8, Team 2, Surfaces).poisoned = 2;
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("boss pet status mimic")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player != Global.boss;
		Event Player.boss_ID > False;
		Global.boss.has_status == True;
	}

	actions
	{
		Abort If(Global.boss.attack == 4.100);
		Set Status(Event Player, Null, Hacked, 10);
		Wait Until(!Global.boss.has_status, 10);
		Clear Status(Event Player, Hacked);
	}
}

rule("boss pet destroy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.boss.boss_pet, Event Player) == True;
		Is Dead(Global.boss) == True;
	}

	actions
	{
		Destroy Dummy Bot(Team 1, Slot Of(Event Player));
	}
}

rule("boss zoom in")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.boss.pre_init == True;
		Is Dummy Bot(Event Player) == False;
		Array Contains(Array(0.100, 1, 2, 3, 4), Global.boss.boss_ID) == True;
	}

	actions
	{
		If(Global.boss.boss_ID == 4);
			Wait(0.600, Ignore Condition);
		End;
		Call Subroutine(boss_zoomin);
	}
}

rule("boss throttle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Array(1, 4), Event Player.boss_ID) == True;
		Event Player.pre_init == False;
		Event Player.start_pathfind == False;
		Event Player.avoid_enviro == False;
		Event Player.attack == False;
	}

	actions
	{
		If(Event Player.boss_ID == 1);
			Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.target) * (Distance Between(Event Player,
				Event Player.target) > 10 ? 1 : (Distance Between(Event Player, Event Player.target) < 8 ? -1 : Null)) + World Vector Of(Left,
				Event Player, Rotation) * Event Player.strafe, 1, To World, Replace existing throttle, Direction and Magnitude);
		Else If(Event Player.boss_ID == 4);
			Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.target), (Distance Between(Event Player,
				Event Player.target) > 2) * Event Player.rein_throttle_mag, To World, Replace existing throttle, Direction and Magnitude);
	}
}

rule("genji init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Global.phase == 5;
		Event Player.boss_ID == 1;
	}

	actions
	{
		Event Player.pre_init = False;
		Event Player.turn_rate = 1000;
		Set Move Speed(Event Player, 70);
		Event Player.damage_dealt = 30 + 10 * Global.difficulty;
		Event Player.damage_received = 130 - 15 * Global.difficulty;
		Set Damage Dealt(Event Player, Event Player.damage_dealt);
		Set Damage Received(Event Player, Event Player.damage_received);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)),
			Event Player.turn_rate, To World, Direction and Turn Rate);
		Create Dummy Bot(Hero(Reinhardt), Team 1, -1, Position Of(Event Player), Facing Direction Of(Event Player));
		Last Created Entity.boss_ID = 1.200;
		Event Player.boss_pet = Last Created Entity;
		Create Dummy Bot(Hero(Genji), Team 1, -1, Global._extendedGlobalCollection, Null);
		Last Created Entity.boss_ID = 1.100;
		Modify Player Variable(Event Player, boss_pet, Append To Array, Last Created Entity);
		Wait(True, Ignore Condition);
		Clear Status(Event Player, Phased Out);
		Destroy Effect(Event Player.effects);
	}
}

rule("genji normal attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Global.phase == 5;
		Event Player.boss_ID == 1;
	}

	actions
	{
		Wait(0.900, Ignore Condition);
		If(Is True For Any(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)), Distance Between(Event Player,
			Current Array Element) < 5 && Is In View Angle(Event Player, Current Array Element, 60)));
			Press Button(Event Player, Button(Primary Fire));
		End;
		Loop If Condition Is True;
	}
}

rule("genji no enviro death")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) <= 2.500;
	}

	actions
	{
		Event Player.start_pathfind = False;
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(14, 80, -64.700)), To World);
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Vector(14, 20, -64.700)), 1, To World,
			Replace existing throttle, Direction and Magnitude);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(13.991, 80, -64.698)), 1000, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Jump));
		Event Player.avoid_enviro = True;
		While(Is In Air(Event Player));
			While(Y Component Of(Position Of(Event Player)) < 3);
				Wait(0.100, Ignore Condition);
				Apply Impulse(Event Player, Up, 3, To World, Cancel Contrary Motion);
				Press Button(Event Player, Button(Ability 1));
			End;
			Wait(False, Ignore Condition);
		End;
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)),
			Event Player.turn_rate, To World, Direction and Turn Rate);
		Stop Holding Button(Event Player, Button(Jump));
		Event Player.avoid_enviro = False;
	}
}

rule("genji random deflect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Global.phase == 5;
	}

	actions
	{
		Wait(Random Real(2, 4), Ignore Condition);
		Wait Until(!Event Player.attack, 99999);
		Press Button(Event Player, Button(Ability 2));
		Wait(Random Real(0.500, 2), Ignore Condition);
		If(Is Using Ability 2(Event Player));
			Press Button(Event Player, Button(Ability 2));
		End;
		Loop If Condition Is True;
	}
}

rule("genji special attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Global.phase == 5;
	}

	actions
	{
		Wait(Random Real(3, 5), Ignore Condition);
		While(Is Using Ability 2(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target),
			Barriers Do Not Block LOS));
			Wait(Global.wait, Ignore Condition);
		End;
		If(!Event Player.boss_phase && Normalized Health(Event Player) < 0.500);
			Event Player.attack = 4;
			Event Player.boss_phase = True;
		Else;
			Event Player.attack = Random Integer(Distance Between(Event Player, Event Player.target) < 11 ? 1 : 3,
				Event Player.boss_phase ? 4 : 3);
		End;
		Wait Until(!Event Player.attack, 99999);
		Loop If Condition Is True;
	}
}

rule("genji pet strike subr")
{
	event
	{
		Subroutine;
		genji_pet_strike;
	}

	actions
	{
		Set Invisible(Event Player.boss_pet[True], None);
		Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Effect, Team 1, World Vector Of(Up,
			Event Player.boss_pet[True], Rotation And Translation), 1);
		Wait(False, Ignore Condition);
		Event Player.boss_target_location_2 = Ray Cast Hit Position(Event Player.boss_target_location,
			Event Player.boss_target_location + Direction From Angles(Random Real(0, 360), 0) * 7.500, Null, Event Player, True);
		Teleport(Event Player.boss_pet[True], Event Player.boss_target_location_2);
		Wait(False, Ignore Condition);
		Set Facing(Event Player.boss_pet[True], Direction Towards(Event Player.boss_target_location_2, Event Player.boss_target_location),
			To World);
		While(!Is Using Ability 1(Event Player.boss_pet[True]));
			Press Button(Event Player.boss_pet[True], Button(Ability 1));
			Wait(False, Ignore Condition);
		End;
	}
}

rule("genji spawn dragonstriker")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Global.phase == 5;
		Event Player.boss_ID == 1;
		Normalized Health(Event Player) < 0.500;
	}

	actions
	{
		Abort If(Health(Event Player) <= False);
		Create Dummy Bot(Hero(Hanzo), Team 1, -1, Position Of(Event Player), Facing Direction Of(Event Player));
		Last Created Entity.boss_ID = 1.300;
		Modify Player Variable(Event Player, boss_pet, Append To Array, Last Created Entity);
	}
}

rule("genji attack 4 dragonstrike")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Global.boss.attack == 4.100;
	}

	actions
	{
		While(!Is Using Ultimate(Event Player));
			Set Ultimate Charge(Event Player, 100);
			Press Button(Event Player, Button(Ultimate));
			Wait(False, Ignore Condition);
		End;
	}
}

rule("boss death")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Array(1, 5), Event Player.boss_ID) == True;
	}

	actions
	{
		If(Event Player.boss_ID == 5);
			All Players(Team 2).euros = 6969;
			Global.euros_total = 6969;
			All Players(Team 2).real = 1337;
			Global.real_total = 1337;
			Global.sombra_egg = 69;
			Wait(2, Ignore Condition);
			Teleport(All Players(Team 2), Global.map);
			Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team 1, Global.map, 200);
			Small Message(All Players(Team 2), Custom String("Some new dialogue has been unlocked."));
			Wait(3, Ignore Condition);
			Small Message(All Players(Team 2), Custom String("Avoid skipping cutscenes to see them!"));
			Wait(True, Ignore Condition);
			Destroy Dummy Bot(Team 1, Slot Of(Event Player));
		Else;
			Global.phase = 6;
			Event Player.attack = 5;
			Global.objective_complete = True;
			All Players(Team 2).euros += 300;
			Global.euros_total += 300;
			All Players(Team 2).real += 100;
			Global.real_total += 100;
	}
}

rule("objective colour subr")
{
	event
	{
		Subroutine;
		obj_color;
	}

	actions
	{
		Global.obj_color_r = 255;
		Global.obj_color_g = 255;
		Global.obj_color_b = 255;
		Stop Chasing Global Variable(obj_color_r);
		Stop Chasing Global Variable(obj_color_g);
		Stop Chasing Global Variable(obj_color_b);
		Wait(0.030, Ignore Condition);
		For Global Variable(i3, 0, 3, True);
			Wait(0.100, Ignore Condition);
			Global.obj_color_g = Null;
			Global.obj_color_b = Null;
			Wait(0.100, Ignore Condition);
			Global.obj_color_g = 255;
			Global.obj_color_b = 255;
		End;
		Wait(0.400, Ignore Condition);
		While(True);
			Chase Global Variable Over Time(obj_color_r, 255, 1.300, Destination and Duration);
			Chase Global Variable Over Time(obj_color_g, 120, 1.300, Destination and Duration);
			Chase Global Variable Over Time(obj_color_b, 255, 1.300, Destination and Duration);
			Wait(1.300, Ignore Condition);
			Chase Global Variable Over Time(obj_color_r, 150, 1.300, Destination and Duration);
			Chase Global Variable Over Time(obj_color_g, 30, 1.300, Destination and Duration);
			Chase Global Variable Over Time(obj_color_b, 255, 1.300, Destination and Duration);
			Wait(1.300, Ignore Condition);
		End;
	}
}

rule("objective updated ding")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.obj_cache != Global.objective;
	}

	actions
	{
		Global.obj_cache = Global.objective;
		Small Message(All Players(Team 2), Custom String("Objective updated!"));
		For Global Variable(i6, 0, 4, True);
			Play Effect(Players In Slot(Evaluate Once(Global.i6), Team 2), Sombra Logo Sound, Color(White), Players In Slot(Evaluate Once(
				Global.i6), Team 2), 200);
		End;
	}
}

rule("objective completed ding")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.objective_complete == True;
		Global.phase > 0.500;
	}

	actions
	{
		Big Message(All Players(Team 2), Random Value In Array(Append To Array(Array(Custom String("Bewitching success!"), Custom String(
			"Junktastic success!"), Custom String("Monstrous success!"), Custom String("Reapalicious success!")),
			Global.sombra_egg == 69 ? Custom String("Sucesso incrível!") : Empty Array)));
		For Global Variable(i6, 0, 4, True);
			Play Effect(Players In Slot(Evaluate Once(Global.i6), Team 2), Buff Impact Sound, Color(White), Players In Slot(Evaluate Once(
				Global.i6), Team 2), 200);
		End;
	}
}

rule("skip cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.main_dialogue != Null;
		Y Component Of(Global.skip_cutscene_pos) < 100;
		Is True For All(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)), Distance Between(Current Array Element,
			Global.skip_cutscene_pos) < 2.300) == True;
	}

	actions
	{
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
	}
}

rule("return cam")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.return_cam == True;
	}

	actions
	{
		Chase Player Variable Over Time(Event Player, cutscene_cam_pos, Eye Position(Event Player), True, Destination and Duration);
		Chase Player Variable Over Time(Event Player, cutscene_cam_lookat, Eye Position(Event Player) + Facing Direction Of(Event Player),
			True, Destination and Duration);
		Wait(True, Ignore Condition);
		Stop Camera(Event Player);
		Stop Chasing Player Variable(Event Player, cutscene_cam_pos);
		Stop Chasing Player Variable(Event Player, cutscene_cam_lookat);
		Stop Chasing Player Variable(Event Player, cutscene_cam_speedup);
	}
}

rule("in spawn check")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.phase < 11;
		Dot Product(Vector Towards(First Of(Global.spawn_corners), Vector(X Component Of(Position Of(Event Player)), False, Z Component Of(
			Position Of(Event Player)))), Global.spawn_line) > False;
		Dot Product(Vector Towards(First Of(Global.spawn_corners), Vector(X Component Of(Position Of(Event Player)), False, Z Component Of(
			Position Of(Event Player)))), Global.spawn_line) < Magnitude Of(Global.spawn_line) ^ 2;
		Dot Product(Vector Towards(First Of(Global.spawn_corners), Vector(X Component Of(Position Of(Event Player)), False, Z Component Of(
			Position Of(Event Player)))), Normalize(Cross Product(Global.spawn_line, Down))) * 50 > False;
		Dot Product(Vector Towards(First Of(Global.spawn_corners), Vector(X Component Of(Position Of(Event Player)), False, Z Component Of(
			Position Of(Event Player)))), Normalize(Cross Product(Global.spawn_line, Down))) * 50 < 2500;
	}

	actions
	{
		Event Player.in_spawn = True;
		Wait(False, Ignore Condition);
		Loop If Condition Is True;
		Event Player.in_spawn = False;
		If(Is Dummy Bot(Event Player));
			Global._objectVariable_0 = True;
			Global.is_dialoguing = True;
			Wait Until(!Global.main_dialogue, 99999);
			Global.is_dialoguing = False;
		End;
	}
}

rule("stuck in spawn phase 0")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.in_spawn == False;
		Global.phase < True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Apply Impulse(Event Player, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Event Player, Vector(-12.838,
			7.257, -0.748))), -30), 5, To World, Cancel Contrary Motion);
		Wait(0.250, Abort When False);
		Respawn(Event Player);
		Play Effect(All Players(All Teams), Tracer Recall Reappear Sound, Color(White), Event Player, 100);
		Small Message(Event Player, Custom String("You cannot yet leave spawn."));
	}
}

rule("phase 1+ cannot re-enter spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.in_spawn == True;
		Global.phase > 0.500;
	}

	actions
	{
		If(Event Player.egg);
			Wait(False, Ignore Condition);
			If(Distance Between(Event Player, Vector(0.952, 6.100, 1.055)) < 7);
				Teleport(Event Player, Vector(0.952, 6.100, 1.055));
			Else If(Distance Between(Event Player, Vector(-26.711, 1.100, -0.393)) < 7);
				Teleport(Event Player, Vector(-26.711, 1.100, -0.393));
			Else;
				Teleport(Event Player, Vector(-12.008, 0.440, -8.068));
			End;
			Play Effect(All Players(All Teams), Tracer Recall Reappear Sound, Color(White), Event Player, 100);
		End;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		If(Event Player.egg == 1);
			Small Message(Event Player, Global.phase == 9 ? Custom String("This is not where you are looking for.") : Custom String(
				"You can no longer return to the spawn room."));
		Else If(Event Player.egg == 31);
			Small Message(Event Player, Global.phase == 9 ? Custom String("Ahem. I said this is not where you are looking for.")
				: Custom String("Ahem. I said you cannot return to the spawn room."));
		Else If(Event Player.egg == 61);
			Small Message(Event Player, Custom String("What are you trying to achieve here?"));
		Else If(Event Player.egg == 91);
			Small Message(Event Player, Custom String("Is this fun for you? Do you find this fun? What is wrong with you?"));
		Else If(Event Player.egg == 121);
			Small Message(Event Player, Custom String("You must really like that warping sound."));
		Else If(Event Player.egg == 161);
			Start Rule(egg, Do Nothing);
		End;
		Event Player.egg += True;
	}
}

rule("first cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == False;
		(Global._objectVariable_0 == 1 || Is True For All(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)),
			Has Spawned(Current Array Element))) == True;
		Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)) != Empty Array;
	}

	actions
	{
		Wait(True, Abort When False);
		Global.phase = 0.100;
		Global.objective_complete = True;
		Global.skip_cutscene_pos = Vector(-12.386, 2.259, -4.887);
		If(!Global._objectVariable_0);
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"Our tale begins in Adlersbrunn, where the lord of the castle has called for heroes to come to his aid,"), 0.500), Array(Hero(
				Reinhardt), Custom String("to defend him against the mad Dr.​ Junkenstein and his minions."), 1), Array(Hero(Mercy),
				Custom String("Excuse me, minion? Tch, don't be absurd. If anything, the mad doctor is my minion."), 1), Array(Hero(Junkrat),
				Custom String(
				"Oh, stick a sock in it, you old hag. I'll have ya know the great Dr.​ Junkenstein doesn't take kindly to such remarks."), 1),
				Array(Hero(Mercy), Custom String("Old- old hag!? Why, I never!"), 1), Array(Hero(Roadhog), Custom String(
				"To be fair, you're somewhere between three to six centuries old."), 1), Array(Hero(Mercy), Custom String(
				"Yet with the complexion of a rose! It's no easy feat staying so youthful."), 1), Array(Hero(Mercy), Custom String(
				"Do you know how much I spend on vitamin C serums alone?"), 1), Array(Hero(Reaper), Custom String("My wife left me."), 1.500));
			Call Subroutine(main_dialogue);
		End;
		Wait(0.100, Ignore Condition);
		If(Global._objectVariable_0);
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("........."), 1), Array(Hero(Reinhardt), Custom String(
				"...What are you doing with Zommy. Put her back."), 1), Array(Hero(Reinhardt), Custom String(
				"She's sensitive to the moonlight."), 1));
			Call Subroutine(main_dialogue);
			Wait(1, Ignore Condition);
			Kill(Global.faq_bot, Null);
			Wait(2, Ignore Condition);
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("...Okay, nevermind. Let's just move on."), 1), Array(
				Hero(Reaper), Custom String("I miss my wife."), 1.500));
			Call Subroutine(main_dialogue);
		End;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 1;
		Global.objective = Custom String("Reach the Village of Adlersbrunn.");
		Start Rule(obj_color, Restart Rule);
		Global.objective_pos = Vector(8.302, 6, -68.151);
		Global.objective_complete = False;
		All Players(Team 2).late_join_check = True;
		Destroy Dummy Bot(Team 2, 5);
	}
}

rule("first kill")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.first_kill == True;
	}

	actions
	{
		Wait(True, Ignore Condition);
		Abort If(Global.dialogue_priority > True);
		Global.dialogue_priority = 1;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Junkrat), Custom String("Crikey! I just found meself some evil dollars!"), 1),
			Array(Hero(Reaper), Custom String("Those are euros."), 1), Array(Hero(Junkrat), Custom String(
			"Don't know what that is, but this one's got an 'E' on it for 'Evil'!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
	}
}

rule("phase 1 spawning event 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == True;
		Is True For Any(All Players(Team 2), Current Array Element.egg) == True;
	}

	actions
	{
		For Global Variable(i4, 0, 2, True);
			Global.enemy_spawn = Array(Vector(-2.644, 3.451, -34.464), Vector(-25.770, 3.221, -34.308))[Global.i4];
			Create Dummy Bot(Hero(Torbjörn), Team 1, Global.i4 + True, Global.enemy_spawn, Up);
			Last Created Entity.enemy_ID = 1;
			Wait(0.100, Ignore Condition);
		End;
	}
}

rule("phase 1 spawning event 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 1;
		First Of(Global.scripted_spawns) == False;
		Is True For Any(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element) && Has Spawned(Current Array Element)),
			Is In Line of Sight(Eye Position(Current Array Element), Vector(21.683, 5.254, -28.292), Barriers Do Not Block LOS)) == True;
	}

	actions
	{
		Global.scripted_spawns[False] = True;
		For Global Variable(i4, 0, 3, True);
			Global.enemy_spawn = Array(Vector(24.164, 5.273, -30.816), Vector(24.164, 5.273, -30.816), Vector(19.751, 6.248, -39.815))
				[Global.i4];
			Create Dummy Bot(Hero(Torbjörn), Team 1, Global.i4 + 3, Global.enemy_spawn, Up);
			Last Created Entity.enemy_ID = Array(1, 2, Global.difficulty == 3 ? 3 : 2)[Global.i4];
			Wait(0.100, Ignore Condition);
		End;
	}
}

rule("phase 1 spawning event 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 1;
		Global.scripted_spawns[True] == False;
		Is True For Any(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element) && Has Spawned(Current Array Element)),
			Is In Line of Sight(Eye Position(Current Array Element), Vector(13.600, 6.002, -50.900), Barriers Do Not Block LOS)) == True;
	}

	actions
	{
		Global.scripted_spawns[True] = True;
		For Global Variable(i4, 0, 3, True);
			Global.enemy_spawn = Array(Vector(35.123, 12.754, -58.077), Vector(18.279, 6.653, -64.255), Vector(11.154, 7.254, -58.814))
				[Global.i4];
			Create Dummy Bot(Hero(Torbjörn), Team 1, Global.i4 + 6, Global.enemy_spawn, Up);
			Last Created Entity.enemy_ID = Array(Global.difficulty == 3 ? 6 : 4, 2, Global.difficulty == 3 ? 7 : 1)[Global.i4];
			Wait(0.100, Ignore Condition);
		End;
	}
}

rule("second cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 1;
		Global.dialogue_priority < 3;
		Y Component Of(Global.objective_pos) < 100;
		Is True For All(All Players(Team 2), Distance Between(Current Array Element, Global.objective_pos) < 4) == True;
	}

	actions
	{
		Global.objective_complete = True;
		Global.phase = 2;
		Wait(False, Ignore Condition);
		Global.objective_pos = Global._extendedGlobalCollection;
		Global.skip_cutscene_pos = Vector(16.597, 7.058, -68.525);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Junkrat), Custom String(
			"Well well, take a gander at these miserable little village-dwellers."), 1), Array(Hero(Roadhog), Custom String(
			"I say we hold 'em hostage, force a bargain with the Lord for his life."), 1), Array(Hero(Roadhog), Custom String(
			"He'll have no choice but abandon the safety of the castle to spare his loyal subjects."), 1), Array(Hero(Junkrat),
			Custom String("Lovely proposal, monster dearest. But I have a better plan."), 1), Array(Hero(Junkrat), Custom String(
			"We kill them all and take their money!"), 1), Array(Hero(Roadhog), Custom String("...Why?"), 2), Array(Hero(Mercy),
			Custom String("A splendid suggestion! You certainly do not disappoint, good Doctor."), 1), Array(Hero(Roadhog), Custom String(
			"Seriously, why?"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 3;
		Global.objective = Custom String("Kill everyone in the village.");
		Start Rule(obj_color, Restart Rule);
		Global.enemy_spawn = Array(Vector(-1.299, 8.147, -71.937), Vector(-8.770, 4.938, -76.420), Vector(4.709, 6.497, -92.627), Vector(
			15.987, 7.642, -87.650), Vector(23.792, 11.636, -87.842), Vector(28.715, 7.662, -73.329), Vector(35.771, 6.875, -53.800),
			Vector(13.890, 7.639, -61.233), Vector(1.177, 7.623, -49.463), Vector(6.328, 11.639, -41.476), Vector(18.923, 5.715, -36.519),
			Vector(26.770, 6.626, -43.500), Vector(34.607, 12.418, -54.705), Vector(29.591, 13.128, -66.596));
		Global.objective_complete = False;
	}
}

rule("within bounds")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.phase < 23;
		Is Dummy Bot(Event Player) == False;
		(X Component Of(Position Of(Event Player)) > 73 || Global.phase < 9) == True;
		Y Component Of(Cross Product(Direction Towards(First Of(Global.boundary_corners), Vector(X Component Of(Position Of(Event Player)),
			False, Z Component Of(Position Of(Event Player)))), Global.boundary_line)) < Null;
	}

	actions
	{
		Event Player.in_boundary = True;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Event Player.in_boundary = False;
	}
}

rule("out of bounds visuals 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == True;
	}

	actions
	{
		Wait(True, Ignore Condition);
		For Global Variable(i3, 0, 11, True);
			Create Beam Effect(All Players(All Teams), Good Beam, First Of(Global.boundary_corners) + Up * 1.500 * Evaluate Once(Global.i3),
				Last Of(Global.boundary_corners) + Up * 1.500 * Evaluate Once(Global.i3), Color(Black), Visible To);
			Modify Global Variable(boundary_effects, Append To Array, Last Created Entity);
			Wait(False, Ignore Condition);
		End;
	}
}

rule("out of bounds phase <?")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.in_boundary == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Apply Impulse(Event Player, Normalize(Cross Product(Global.boundary_line, Up)) + Up * 0.300, 5, To World, Cancel Contrary Motion);
		Wait(False, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("out of bounds phase <? tp")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.phase < 23;
		Event Player.in_boundary == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Teleport(Event Player, Global.phase < 9 ? Vector(32.211, 6.064, -62.332) : Vector(88.095, 13.279, -67.749));
		Small Message(Event Player, Custom String("Tsk tsk. Spoiler alert."));
		Play Effect(All Players(All Teams), Tracer Recall Reappear Sound, Color(White), Event Player, 100);
	}
}

rule("egg")
{
	event
	{
		Subroutine;
		egg;
	}

	actions
	{
		Small Message(Event Player, Custom String("Okay, that's it. Enough of this nonsense."));
		Wait(3, Ignore Condition);
		Small Message(Event Player, Custom String("You want the spawn room back that badly?"));
		Wait(3, Ignore Condition);
		Small Message(Event Player, Custom String("Be careful what you wish for."));
		Wait(3.500, Ignore Condition);
		Restart Match;
	}
}

rule("boundaries 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(2, 10, 13), Global.phase) == True;
	}

	actions
	{
		Global.boundary_corners_2 = Global.phase == 2 ? Array(Vector(40.846, 5, -38.417), Vector(-12.812, 5, -38.358)) : (
			Global.phase == 10 ? Array(Vector(42.805, 6, -44.411), Vector(21.056, 6, -97.984)) : Array(Vector(67.648, 8, -57.147), Vector(
			53.494, 8, -112.111)));
		Global.boundary_line_2 = Vector Towards(First Of(Global.boundary_corners_2), Last Of(Global.boundary_corners_2));
		For Global Variable(i3, 0, Global.phase == 13 ? 12 : 10, True);
			Create Beam Effect(All Players(All Teams), Good Beam, First Of(Global.boundary_corners_2) + Up * 1.500 * Evaluate Once(Global.i3),
				Last Of(Global.boundary_corners_2) + Up * 1.500 * Evaluate Once(Global.i3), Color(Black), Visible To);
			If(Global.phase == 13);
				Modify Global Variable(boundary_effects_2, Append To Array, Last Created Entity);
			Else;
				Modify Global Variable(boundary_effects, Append To Array, Last Created Entity);
			End;
			Wait(False, Ignore Condition);
		End;
	}
}

rule("out of bounds phase x != 9")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.phase != 9;
		Global.phase >= 2;
		Is Dummy Bot(Event Player) == False;
		Y Component Of(Cross Product(Direction Towards(First Of(Global.boundary_corners_2), Vector(X Component Of(Position Of(
			Event Player)), False, Z Component Of(Position Of(Event Player)))), Global.boundary_line_2)) < False;
	}

	actions
	{
		Apply Impulse(Event Player, Normalize(Cross Product(Global.boundary_line_2, Up)) + Up * 0.300, 5, To World,
			Cancel Contrary Motion);
		Wait(False, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("out of bounds phase x != 9 tp")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.phase != 9;
		Global.phase >= 2;
		Is Dummy Bot(Event Player) == False;
		Y Component Of(Cross Product(Direction Towards(First Of(Global.boundary_corners_2), Vector(X Component Of(Position Of(
			Event Player)), False, Z Component Of(Position Of(Event Player)))), Global.boundary_line_2)) < False;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Small Message(Event Player, Custom String("Get back in here, you coward."));
		Play Effect(All Players(All Teams), Tracer Recall Reappear Sound, Color(White), Event Player, 100);
		Teleport(Event Player, Global.phase < 9 ? Vector(12.858, 5.656, -45.527) : (Global.phase < 13 ? Vector(37.539, 5.672, -64.417) : (
			Global.phase < 23 ? Vector(60.491, 11.989, -94.110) : Vector(90.593, 14.310, -60.160))));
	}
}

rule("phase 3 spawning event")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 3;
		Global.objective_value == False;
		Number Of Living Players(Team 1) <= 3;
	}

	actions
	{
		Global.objective_value = 0.500;
		Global.enemy_ID_sequence = Array(1, 1, 2, 2);
		Call Subroutine(spawn_enemies);
		Wait Until(Number Of Living Players(Team 1) <= 3, 99999);
		Global.enemy_ID_sequence = Array(1, 2, 2);
		Call Subroutine(spawn_enemies);
		Wait Until(Number Of Living Players(Team 1) <= 3, 99999);
		Global.enemy_ID_sequence = Array(Global.difficulty == 3 ? 3 : 1, 2, 1, 4);
		Call Subroutine(spawn_enemies);
		Wait Until(Number Of Living Players(Team 1) <= 3, 99999);
		Global.enemy_ID_sequence = Array(1, Global.difficulty == 3 ? 6 : 4, 2, 3, 4);
		Call Subroutine(spawn_enemies);
		Wait Until(Number Of Living Players(Team 1) <= 2, 99999);
		Global.enemy_ID_sequence = Array(Global.difficulty == 3 ? 7 : 1, 2, 2, 3, 4, 8);
		Call Subroutine(spawn_enemies);
		Global.objective_value = 9;
	}
}

rule("end of slaughter + genji intro cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 3;
		Global.objective_value == 9;
		Global.dialogue_priority < 3;
		Number Of Living Players(Team 1) == 1;
	}

	actions
	{
		Global.phase = 4;
		Global.objective_complete = True;
		Wait(True, Ignore Condition);
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(16.597, 7.058, -68.525);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Mercy), Custom String(
			"My, my, I haven't felt such fun since the genocide of the Western Shelf sixty moons ago!"), 1), Array(Hero(Reaper),
			Custom String("I haven't felt happy since 2016."), 1), Array(Hero(Junkrat), Custom String(
			"Ahahahahaha! Oh, this bloodshed's got me mighty stoked. What a blast. "), 1), Array(Hero(Junkrat), Custom String(
			"What were we doing again?"), 1), Array(Hero(Reinhardt), Custom String(
			"As the dust settled from the massacre, one hero emerged from the darkness."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Destroy Dummy Bot(Team 1, 5);
		Destroy Dummy Bot(Team 1, 6);
		Destroy Dummy Bot(Team 1, 7);
		Destroy Dummy Bot(Team 1, 8);
		Set Slow Motion(20);
		Global.no_hud = True;
		Create Dummy Bot(Hero(Genji), Team 1, -1, Vector(-2.233, 24.450, -72.894), Vector(2.611, 0.500, 1.146));
		Global.boss = Last Created Entity;
		Last Created Entity.pre_init = True;
		Last Created Entity.boss_ID = 1;
		Wait(1.800, Ignore Condition);
		Set Slow Motion(100);
		Global.return_cam = True;
		Start Facing(Global.boss, Direction Towards(Eye Position(Global.boss), Eye Position(Global.boss.target)), 1000, To World,
			Direction and Turn Rate);
		Wait(False, Ignore Condition);
		Global.return_cam = False;
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(6.276, 7.050, -69.451);
		Global.dialogue_priority = 2;
		Global.no_hud = False;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"His blade shimmered in the moonlight, hungry for avengement."), 1), Array(Hero(Junkrat), Custom String(
			"...Who the blazes is this spiffy bloke?"), 1), Array(Hero(Genji), Custom String("You took everything from me."), 1), Array(
			Hero(Mercy), Custom String("I don't even know who you are. "), 1), Array(Hero(Genji), Custom String(
			"I will avenge my village and bring honour to my Lord."), 1), Array(Hero(Genji), Custom String("You are all already dead."),
			1), Array(Hero(Roadhog), Custom String("Technically that's true for me."), 1), Array(Hero(Reaper), Custom String(
			"I'm dead on the inside."), 1), Array(Hero(Genji), Custom String("…Smoky fiend, you have issues."), 1), Array(Hero(Mercy),
			Custom String("Cease this banter! Minions, waste this fool!"), 1), Array(Hero(Junkrat), Custom String("Not your minion."),
			1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 5;
		Global.objective = Custom String("Kill the Swordsman.");
		Start Rule(obj_color, Restart Rule);
		Global.objective_complete = False;
		Start Forcing Player To Be Hero(Global.dialogue_bot, Hero(Genji));
	}
}

rule("phase 5 spawning event")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 5;
		Count Of(Filtered Array(Players On Hero(Hero(Torbjörn), Team 1), Is Alive(Current Array Element))) <= True;
	}

	actions
	{
		Wait(Random Real(3, 6), Abort When False);
		Global.enemy_ID_sequence = Array(1, 2, Random Value In Array(Append To Array(Array(1, 2, 4),
			Global.difficulty == 3 ? 6 : Empty Array)));
		Call Subroutine(spawn_enemies);
		Loop If Condition Is True;
	}
}

rule("genji dead cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 6;
	}

	actions
	{
		Wait(True, Ignore Condition);
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(16.597, 7.058, -68.525);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"A lone katana clattered across the floor, as the Swordsman's lifeless body slumped to the ground, ashamed and dishonoured."),
			1), Array(Hero(Mercy), Custom String("Goodness me, what a nuisance that was."), 1), Array(Hero(Junkrat), Custom String(
			"But really though, Reaps, you have issues."), 1), Array(Hero(Reaper), Custom String("She took the kids, James."), 1), Array(
			Hero(Roadhog), Custom String("Let's keep moving. News of our attack must've reached the Lord's ears by now."), 1), Array(Hero(
			Roadhog), Custom String("Security will be tightened, methinks."), 1), Array(Hero(Junkrat), Custom String(
			"Hold that thought, my sweet summer child. Look at this cool dollar I found!"), 1), Array(Hero(Junkrat), Custom String(
			"It's got an ''R'' on it. That must mean it's a REAL dollar!"), 1), Array(Hero(Reaper), Custom String(
			"That's... actually what it's called in Brazil, yeah."), 1));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.objective = Custom String("Reach the castle.");
		Start Rule(obj_color, Restart Rule);
		Global.objective_complete = False;
		Global.phase = 7;
		Destroy Dummy Bot(Team 1, Slot Of(Global.boss));
	}
}

rule("sixth cutscene (merchant)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 7;
		Global.dialogue_priority < 3;
	}

	actions
	{
		Create Dummy Bot(Hero(Moira), Team 2, 9, Global._extendedGlobalCollection, Vector(0.910, False, 0.420));
		Global.merchant = Last Created Entity;
		Wait(5, Ignore Condition);
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(7.650, 7.080, -72.890);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Moira), Custom String("Come hither, evil ones, and browse my arcane wares."), 1),
			Array(Hero(Junkrat), Custom String("Ooh, a merchant! I hope she accepts evil dollars."), 1), Array(Hero(Mercy), Custom String(
			"Oh, be still, my accursed heart! Arcane wares? You certainly know how to treat a lady."), 1), Array(Hero(Moira),
			Custom String("Wicked Witch, I'm afraid this is no treat. I'm here to run a business, you see."), 1), Array(Hero(Mercy),
			Custom String("How you enchant me with your sinister voice! Your spell of seduction is strong, fellow witch."), 1), Array(Hero(
			Moira), Custom String("I am no witch. I am merely a merchant of darkness."), 1), Array(Hero(Mercy), Custom String(
			"Tut, tut! No need for humility, my love. Pray tell, are you free later at break of dawn?"), 1), Array(Hero(Mercy),
			Custom String("I just have an errand to run. Kill the Lord and all that, you know how it is."), 1), Array(Hero(Moira),
			Custom String("Wicked witch, I plead of you. I am only here to sell my wares. Please buy something."), 1), Array(Hero(Mercy),
			Custom String("Oh, you can tell me all about your wares at supper later, you charming devil."), 1), Array(Hero(Moira),
			Custom String("Please. Buy something."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 8;
		Global.objective_pos = Vector(28.598, 6.067, -60.781);
	}
}

rule("regrouped after merchant")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 8;
		Y Component Of(Global.objective_pos) < 100;
		Is True For All(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)), Distance Between(Current Array Element,
			Global.objective_pos) < 4) == True;
	}

	actions
	{
		Global.enemy_spawn_2 = Global.enemy_spawn;
		Global.phase = 9;
		Global.boundary_corners = Array(Vector(103.485, 13.900, -66.421), Vector(74.555, 13.900, -59.152));
		Global.objective_pos = Vector(77.842, 13.935, -98.146);
		Global.boundary_line = Vector Towards(First Of(Global.boundary_corners), Last Of(Global.boundary_corners));
		Start Rule(delete_bound_effects, Restart Rule);
		Press Button(Global.merchant, Button(Ability 1));
		Destroy Dummy Bot(Team 1, Slot Of(Global.merchant.attack));
		Global.shop_open = False;
		Wait(0.400, Ignore Condition);
		Destroy Dummy Bot(Team 2, 9);
		Stop Chasing Global Variable(shop_angle);
	}
}

rule("phase 9 spawning event 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 9;
		Global.scripted_spawns[2] == False;
		Is True For Any(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element) && Has Spawned(Current Array Element)),
			Is In Line of Sight(Eye Position(Current Array Element), Vector(44.274, 6.973, -71.715), Barriers Do Not Block LOS)) == True;
	}

	actions
	{
		Global.scripted_spawns[2] = True;
		For Global Variable(i4, 0, 4, True);
			Global.enemy_spawn = Array(Vector(54.223, 7.977, -74.398), Vector(54.646, 12.977, -73.179), Vector(40.486, 11.923, -97.597),
				Vector(50.089, 9.807, -85.586))[Global.i4];
			Create Dummy Bot(Global.i4 % 2 ? Hero(Torbjörn) : Hero(Brigitte), Team 1, Global.i4 + 5, Global.enemy_spawn, Up);
			Last Created Entity.enemy_ID = Array(21, 2, Global.difficulty == 3 ? 23 : 21, Global.difficulty == 3 ? 3 : 2)[Global.i4];
			Wait(0.100, Ignore Condition);
		End;
	}
}

rule("phase 9 spawning event 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 9;
		Global.scripted_spawns[3] == False;
		Is True For Any(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element) && Has Spawned(Current Array Element)),
			Is In Line of Sight(Eye Position(Current Array Element), Vector(70.683, 14.273, -89.002), Barriers Do Not Block LOS)) == True;
	}

	actions
	{
		Global.scripted_spawns[3] = True;
		Global.enemy_spawn = Array(Vector(73.400, 11.002, -109.240), Vector(96.938, 13.189, -106.700), Vector(92.205, 13.193, -114.037));
		Global.enemy_ID_sequence = Array(6, 22, Global.difficulty == 3 ? 26 : 22);
		Call Subroutine(spawn_enemies);
	}
}

rule("seventh cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 9;
		Global.dialogue_priority < 3;
		Y Component Of(Global.objective_pos) < 100;
		Is True For All(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)), Distance Between(Current Array Element,
			Global.objective_pos) < 4) == True;
	}

	actions
	{
		Create Icon(Global.hint >= 60 ? All Players(All Teams) : Empty Array, First Of(Filtered Array(Global.dragon_blood_actual_spawn,
			Y Component Of(Current Array Element) < 100)), Eye, Visible To and Position, Color(Orange), True);
		Global.dragon_blood_hint_icon = Last Created Entity;
		Global.dragon_blood_spawn = Array(Vector(67.048, 5.341, -83.570), Vector(55.700, 21.801, -68.705), Vector(51.195, 18.501,
			-104.655), Vector(60.065, 12.973, -75.713), Vector(53.161, 7.330, -60.780), Vector(105.710, 13.284, -73.852), Vector(101.553,
			10.602, -93.124), Vector(86.020, 13.850, -107.137), Vector(41.650, 11.321, -96.409), Vector(57.872, 18.146, -112.741), Vector(
			50.761, 18.650, -83.244), Vector(76.753, 13.490, -74.067), Vector(53.264, 7.082, -107.511), Vector(60.860, 7.243, -72.185),
			Vector(52.091, 12.922, -79.863), Vector(50.205, 9.200, -85.327), Vector(46.037, 5.631, -49.559), Vector(35.516, 6.977,
			-70.508), Vector(31.337, 9.455, -86.835));
		All Players(Team 2).blood_cache = 5;
		Global.dragon_blood_effects = Empty Array;
		Global.dragon_blood_qty = 5;
		Global.objective_complete = True;
		Global.phase = 10;
		Start Rule(delete_bound_effects, Restart Rule);
		Wait(False, Ignore Condition);
		Destroy Effect(First Of(Global.skull_effect));
		Global.objective_pos = Global._extendedGlobalCollection;
		Global.skip_cutscene_pos = Vector(70.511, 14.070, -98.653);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Junkrat), Global.sombra_egg == 69 ? Custom String(
			"Nossa Senhora, that is one big door.") : Custom String("Hooley dooley, that is one big door."), 1), Array(Hero(Roadhog),
			Custom String("We're gonna need more firepower. Lots n' lots more."), 1), Array(Hero(Mercy), Custom String(
			"Doctor, couldn't you conjure up some of those metal zombies of yours?"), 1), Array(Hero(Junkrat), Custom String(
			"Well I could, but not nearly enough to take that mighty hunk of wood down."), 1), Array(Hero(Mercy), Custom String(
			"Well, it seems we are out of options. Reaper!"), 1), Array(Hero(Reaper), Custom String("No. Absolutely not. Nuh-uh."), 1),
			Array(Hero(Mercy), Custom String("Oh, get over yourself. She's our best bet right now."), 1), Array(Hero(Reaper),
			Custom String("You'd be making a mistake. She is evil incarnate."), 1), Array(Hero(Roadhog), Custom String(
			"I think she's really sweet. She summoned a Cerberus meatloaf on my first birthday."), 1), Array(Hero(Junkrat), Custom String(
			"Come onnnn, Reaps! Pretty please? Please please please please please please please please pleeeeaaaase?"), 1), Array(Hero(
			Reaper), Custom String("Fine! Whatever. We'll need to perform a ritual first."), 1), Array(Hero(Reaper), Custom String(
			"Get me five bottles of dragon's blood. And don't say I didn't warn you."), 1), Array(Hero(Reinhardt), Custom String(
			"And so the villains began their hunt for the bottles, hidden throughout Adlersbrunn."), 1), Array(Hero(Reinhardt),
			Custom String("Who knows if they can find them all..."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.objective = Custom String("Collect {0} bottles of dragon's blood.", Global.dragon_blood_qty);
		Start Rule(obj_color, Restart Rule);
		Global.objective_complete = False;
		Global.enemy_spawn = Array(Vector(58.274, 21.751, -71.810), Vector(54.145, 7.089, -75.357), Vector(30.489, 15.015, -76.676),
			Vector(33.676, 9.065, -79.304), Vector(57.437, 12.678, -64.421), Vector(52.025, 12.356, -81.899), Vector(67.905, 14.280,
			-74.618), Vector(41.302, 11.422, -96.339), Vector(58.101, 7.812, -105.398), Vector(45.303, 15.651, -106.795), Vector(62.496,
			5.856, -81.776), Vector(53.880, 18.975, -106.780), Vector(51.306, 19.218, -83.228), Vector(77.969, 13.380, -58.986), Vector(
			97.550, 12.730, -66.200), Vector(101.811, 11.200, -93.285));
		Global.enemy_spawn_2 = Global.enemy_spawn;
		Wait(False, Ignore Condition);
		Global.dragon_blood_actual_spawn = Array Slice(Randomized Array(Global.dragon_blood_spawn), False, 6);
		For Global Variable(i3, 0, 6, True);
			Create Effect(All Players(All Teams), Sphere, Color(Red), Global.dragon_blood_actual_spawn[Evaluate Once(Global.i3)], 0.200,
				Visible To Position and Radius);
			Modify Global Variable(dragon_blood_effects, Append To Array, Last Created Entity);
			Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, Global.dragon_blood_actual_spawn[Evaluate Once(Global.i3)],
				Global.dragon_blood_actual_spawn[Evaluate Once(Global.i3)] + Up * 0.001, Team 1, Visible To Position and Radius);
			Modify Global Variable(dragon_blood_effects, Append To Array, Last Created Entity);
			Wait(False, Ignore Condition);
		End;
		Wait(False, Ignore Condition);
		Global.phase = 11;
		Chase Global Variable At Rate(hint, 60, True, Destination and Rate);
		While(Global.spawn_door_effects != Empty Array);
			Destroy In-World Text(First Of(Global.spawn_door_effects));
			Modify Global Variable(spawn_door_effects, Remove From Array By Index, False);
		End;
	}
}

rule("phase 11 spawning event")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase >= 11;
		Global.phase < 13;
		Global.dragon_blood_cache != Global.dragon_blood_qty;
	}

	actions
	{
		Wait(False, Ignore Condition);
		Global.dragon_blood_cache = Global.dragon_blood_qty;
		Start Rule(phase_11_spawn, Restart Rule);
	}
}

rule("collect blood")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.phase == 11;
	}

	actions
	{
		If(Global.hint > True);
			If(Distance Between(Event Player, First Of(Sorted Array(Global.dragon_blood_actual_spawn, Distance Between(Event Player,
				Current Array Element)))) < 1.500);
				If(Array Contains(Array(1, 1.900), Global.mercy_drop));
					If(!Event Player.no_pickup);
						Small Message(Event Player, Custom String("You cannot pick this up during a cutscene."));
						Event Player.no_pickup = True;
					End;
				Else;
					Global.hint = Null;
					Chase Global Variable At Rate(hint, 60, True, Destination and Rate);
					Global.last_collected_blood = Event Player;
					Event Player.blood_collected = Index Of Array Value(Global.dragon_blood_actual_spawn, First Of(Sorted Array(
						Global.dragon_blood_actual_spawn, Distance Between(Event Player, Current Array Element))));
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Red), Global.dragon_blood_actual_spawn[Event Player.blood_collected],
						1);
					Wait(False, Ignore Condition);
					Global.dragon_blood_actual_spawn[Event Player.blood_collected] = Global._extendedGlobalCollection;
					Global.dragon_blood_qty -= True;
					Wait(False, Ignore Condition);
					Small Message(Remove From Array(All Players(All Teams), Event Player), Custom String("{0} collected a bottle of dragon's blood.",
						Event Player));
					Small Message(Event Player, Custom String("You collected a bottle of dragon's blood."));
					If(!Global.dragon_blood_qty);
						Global.objective_complete = True;
						Wait(True, Ignore Condition);
						Abort If(Global.dialogue_priority >= 3);
						Global.dialogue_priority = 2;
						Global.is_dialoguing = True;
						Wait Until(!Global.main_dialogue, 99999);
						Global.is_dialoguing = False;
						Global.active_dialogue_list = Array(Array(Hero(Reaper), Custom String(
							"Now let's head back to the bridge. We'll perform the ritual there."), 1.500));
						Call Subroutine(main_dialogue);
						Global.dialogue_priority = False;
						Global.phase = 12;
						Start Rule(obj_color, Restart Rule);
						Global.objective_complete = False;
						Global.objective = Custom String("Perform the ritual at the bridge.");
						Destroy Icon(Global.dragon_blood_hint_icon);
						While(Global.dragon_blood_effects != Empty Array);
							Destroy Effect(First Of(Global.dragon_blood_effects));
							Modify Global Variable(dragon_blood_effects, Remove From Array By Index, False);
							Wait(False, Ignore Condition);
						End;
					Else;
						Start Rule(obj_color, Restart Rule);
						Global.objective = Custom String("Collect {0} {1} of dragon's blood.", Global.dragon_blood_qty,
							Global.dragon_blood_qty > True ? Custom String("bottles") : Custom String("bottle"));
					End;
					If(!Global.mercy_drop);
						Start Rule(mercy_drop_blood, Do Nothing);
					End;
				End;
			End;
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("mercy drop blood subr")
{
	event
	{
		Subroutine;
		mercy_drop_blood;
	}

	actions
	{
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(70.511, 14.070, -98.653);
		Global.mercy_drop = 1;
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Mercy), Custom String(
			"Ah, dragon's blood. A remarkably priceless substance. And painfully hard to wash off fabrics, mind you."), 1), Array(Hero(
			Mercy), Custom String("I'll hold on to it. One must have a tender, trained touch to handle such a precious item."), 1), Array(
			Hero(Reinhardt), Custom String("The Witch, upon receiving the bottle, immediately dropped it, spilling it all over her robe."),
			1), Array(Hero(Mercy), Global.sombra_egg == 69 ? Custom String(" MONTE DE MERDA! SON OF A GODFORSAKEN, CURSED MOTHERFU-")
			: Custom String(" VERDAMMTE SCHEIßE! SON OF A GODFORSAKEN, CURSED MOTHERFU-"), 0.200), Array(Hero(Junkrat), Custom String(
			"Woah, woah! Watch the language, swiss cheese! My Monster here is literally a minor!"), 1), Array(Hero(Roadhog), Custom String(
			"I'm also neurodivergent."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.mercy_drop = 2;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
	}
}

rule("brig mace no knockback")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 0);
		Wait Until(!Is Using Ability 1(Event Player), 1);
		Set Knockback Dealt(Event Player, 200);
	}
}

rule("drop blood 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.mercy_drop == 1;
		Global.line_number == 2;
		Global.phase == 11;
		Global.letter_scroll >= 50;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Sound, Team 1, Eye Position(Players On Hero(Hero(Mercy), Team 2)
			!= Empty Array ? First Of(Players On Hero(Hero(Mercy), Team 2)) : Random Value In Array(All Players(Team 2))), 200);
		Small Message(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Mercy)), Custom String(
			"{0} dropped a bottle of dragon's blood.", Is Hero Being Played(Hero(Mercy), Team 2) ? First Of(Players On Hero(Hero(Mercy),
			Team 2)) : Custom String("The Witch")));
		Small Message(Players On Hero(Hero(Mercy), Team 2), Custom String("You dropped a bottle of dragon's blood."));
		Wait Until(Global.line_number == 3, 20);
		Abort If(Global.mercy_drop == 2);
		Global.mercy_drop = 1.900;
	}
}

rule("drop blood 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.mercy_drop > True;
	}

	actions
	{
		Global.dragon_blood_qty += True;
		Wait(False, Ignore Condition);
		Global.objective = Custom String("Collect {0} bottles of dragon's blood.", Global.dragon_blood_qty);
		Start Rule(obj_color, Restart Rule);
	}
}

rule("junkrat faster mines")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Ability Charge(Event Player, Button(Ability 1)) < 2;
		Event Player.potions[5] > False;
	}

	actions
	{
		Wait(8 - Event Player.potions[5], Abort When False);
		Event Player.mine_cache = Ability Charge(Event Player, Button(Ability 1));
		Set Ability Charge(Event Player, Button(Ability 1), 2);
		Wait(False, Ignore Condition);
		Set Ability Charge(Event Player, Button(Ability 1), Event Player.mine_cache + True);
		Loop If Condition Is True;
	}
}

rule("junkrat cap mines at 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Ability Charge(Event Player, Button(Ability 1)) > 2;
	}

	actions
	{
		Set Ability Charge(Event Player, Button(Ability 1), 2);
	}
}

rule("cowboy intro cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 12;
		Y Component Of(Global.objective_pos) < 100;
		Is True For All(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)), Distance Between(Current Array Element,
			Global.objective_pos) < 4) == True;
	}

	actions
	{
		Stop Chasing Global Variable(hint);
		Start Rule(delete_bound_effects, Restart Rule);
		Global.enemy_spawn = Array(Vector(62.041, 7.129, -109.873), Vector(59.642, 18.420, -108.625), Vector(83.877, 11.406, -112.180),
			Vector(96.234, 13.366, -105.924), Vector(67.331, 18.722, -74.665), Vector(57.966, 12.388, -83.679), Vector(61.097, 10.048,
			-68.022), Vector(81.906, 13.167, -56.006), Vector(96.078, 13.167, -58.029));
		Global.phase = 13;
		Global.objective_pos = Global._extendedGlobalCollection;
		Abort If(Global.dialogue_priority >= 3);
		Global.dialogue_priority = 2;
		Global.skip_cutscene_pos = Vector(70.511, 14.070, -98.653);
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"But before the villains could begin their malicious ritual, one hero bravely stepped forth into the light!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Teleport(Filtered Array(All Living Players(Team 1), Current Array Element.enemy_ID > False), Global.compressBakeMatcher);
		Destroy Dummy Bot(Team 1, 7);
		Destroy Dummy Bot(Team 1, 8);
		Wait(0.100, Ignore Condition);
		Set Slow Motion(20);
		Global.no_hud = True;
		Create Dummy Bot(Hero(Cassidy), Team 1, 7, Vector(61.155, 19.165, -94.355), Vector(0.860, -0.440, -0.240));
		Global.boss = Last Created Entity;
		Last Created Entity.pre_init = True;
		Last Created Entity.boss_ID = 2;
		Wait(1.500, Ignore Condition);
		Set Slow Motion(100);
		Global.return_cam = True;
		Start Facing(Global.boss, Direction Towards(Eye Position(Global.boss), Eye Position(Global.boss.target)), 1000, To World,
			Direction and Turn Rate);
		Wait(False, Ignore Condition);
		Global.return_cam = False;
		Press Button(Global.boss, Button(Secondary Fire));
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(86.109, 13.219, -101.193);
		Global.dialogue_priority = 2;
		Global.no_hud = False;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		If(Global.sombra_egg == 69);
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"The Gunslinger arrived not for riches nor virtue, but merely because his trusty revolver craved a good fight."), 1), Array(
				Hero(Cassidy), Custom String(
				"The name's Jersey McGee, and I'm boutta' tear all y'all spooky boo-boo voodoo commies a new one."), 1), Array(Hero(Junkrat),
				Custom String("Puta merda! If it ain't the infamous John McAfee in the flesh. I'm a big fan!"), 1), Array(Hero(Cassidy),
				Custom String("Hold up now. Ain't that... Portuguese?"), 1), Array(Hero(Junkrat), Custom String("No, it's Brazilian."), 1),
				Array(Hero(Cassidy), Custom String("...Brazilian ain't a language, Junky."), 1), Array(Hero(Junkrat), Custom String(
				"That's cool, Jeff McBezos, but I didn't ask for your opinion."), 1), Array(Hero(Mercy), Custom String(
				"Step aside, Gunslinger. We have no time for this. I've got shopping to do!~"), 1), Array(Hero(Cassidy), Custom String(
				"Shopping? What are you on about, missy? How much moolah do ya got?"), 1), Array(Hero(Mercy), Custom String(
				"Oh, just a measly €{0}.", Global.euros_total), 1), Array(Hero(Cassidy), Custom String(
				"...Sweet virgin mother Mary, what in the gosh heckin' rootin' tootin' tarnation!?"), 1), Array(Hero(Cassidy), Custom String(
				"Alright, to hell with this whole ''protect the lord'' hogwash. I'm going for the gold!"), 1), Array(Hero(Cassidy),
				Custom String("Those evil dollars are mine, y'hear!? Mine!"), 1), Array(Hero(Reinhardt), Custom String(
				"I stand corrected. The Gunslinger did, in fact, arrive for riches."), 1.500));
		Else;
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"The Gunslinger arrived not for riches nor virtue, but merely because his trusty revolver craved a good fight."), 1), Array(
				Hero(Cassidy), Custom String(
				"The name's Jersey McGee, and I'm boutta' tear all y'all spooky boo-boo voodoo commies a new one."), 1), Array(Hero(Junkrat),
				Custom String("Crikey! If it ain't the infamous Jonald McDonald in the flesh. I'm a big fan!"), 1), Array(Hero(Roadhog),
				Custom String("Boss, I think you got his name wrong."), 1), Array(Hero(Cassidy), Custom String("Thank you kindly."), 1), Array(
				Hero(Junkrat), Custom String("Jooge McDuck?"), 1), Array(Hero(Cassidy), Custom String("Not it."), 1), Array(Hero(Junkrat),
				Custom String("Joseph McJoestar?"), 1), Array(Hero(Cassidy), Custom String("Gettin' colder."), 1), Array(Hero(Junkrat),
				Custom String("Cold Casserole?"), 1), Array(Hero(Cassidy), Custom String(
				"What in tarnation- Actually I kinda like that. S'got a ring to it."), 1), Array(Hero(Reaper), Custom String(
				"Oh noooo, an adversaryyyy. I guess we should give up and not do the ritual anymoreeee."), 1), Array(Hero(Cassidy),
				Custom String("Foggy fella's right. Y'ain't've cm'ere if y'all'd've known better."), 1), Array(Hero(Mercy), Custom String(
				"Gesundheit. Is that even English?"), 1), Array(Hero(Roadhog), Custom String("Probably not. Let's tear him to pieces!"),
				1.500));
		End;
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 14;
		Global.objective = Custom String("Kill the Gunslinger.");
		Start Rule(obj_color, Restart Rule);
		Global.objective_complete = False;
		Start Forcing Player To Be Hero(Global.dialogue_bot, Hero(Cassidy));
	}
}

rule("phase 14 spawning event")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 14;
		Number Of Living Players(Team 1) <= 4;
	}

	actions
	{
		Wait(Random Real(3, 6), Abort When False);
		Global.enemy_ID_sequence = Array(Random Value In Array(Array(2, 3, Global.difficulty == 3 ? 7 : 4, 6)), Random Value In Array(
			Array(2, 3, 4, 6)));
		Call Subroutine(spawn_enemies);
		Loop If Condition Is True;
	}
}

rule("shop stocks randomize")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.shop_open == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Event Player.random = Append To Array(Sorted Array(Array Slice(Randomized Array(Global.numbers), False, 3), Current Array Element),
			10);
		For Player Variable(Event Player, i, 0, Count Of(Event Player.random), True);
			Event Player.potions_max[Event Player.i] += Event Player.random[Event Player.i] - Event Player.random[Event Player.i - True];
		End;
		Event Player.potions_max[4] += Random Integer(2, 5);
		Event Player.potions_max[5] += Random Integer(True, Min(3, 4 - Event Player.potions_max[5]));
		Event Player.random = Random Integer(False, 5);
		Event Player.potions_max[6] += Event Player.random;
		Event Player.potions_max[7] += 5 - Event Player.random;
		Event Player.potions_max[8] += True;
	}
}

rule("cowboy init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Global.phase == 14;
		Event Player.boss_ID == 2;
	}

	actions
	{
		Create Beam Effect(Event Player.trail > False ? All Players(All Teams) : Empty Array, Zarya Particle Beam, World Vector Of(Up,
			Event Player, Rotation And Translation), World Vector Of(Up, Event Player, Rotation And Translation) + Vector Towards(
			World Vector Of(Up, Event Player, Rotation And Translation), Event Player.trail_cache) * Event Player.trail, Team 1,
			Visible To Position and Radius);
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, First Of(Event Player.pos_cache)) * (Distance Between(
			Event Player, First Of(Event Player.pos_cache)) > True ? 1 : Event Player.strafe), 1, To World, Replace existing throttle,
			Direction and Magnitude);
		Event Player.avoid_enviro = True;
		Global.cowboy_tp_array = Array(Vector(56.670, 22.931, -104.653), Vector(82.514, 21.407, -64.821), Vector(96.779, 17.066, -74.286),
			Vector(62.230, 18.978, -92.354), Vector(83.269, 13.141, -102.456), Vector(70.765, 13.565, -76.652));
		Event Player.pos_cache = Position Of(Event Player);
		Event Player.pre_init = False;
		Set Projectile Gravity(Event Player, 200);
		Set Projectile Speed(Event Player, False);
		Set Move Speed(Event Player, 100);
		Event Player.damage_dealt = 30 + 10 * Global.difficulty;
		Event Player.damage_received = 130 - 15 * Global.difficulty;
		Set Damage Dealt(Event Player, Event Player.damage_dealt);
		Set Damage Received(Event Player, Event Player.damage_received);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target) + Down * 0.500 + Vector(
			Random Real(-0.800, 0.800), False, Random Real(-0.800, 0.800))), 1000, To World, Direction and Turn Rate);
		Create Dummy Bot(Hero(Ashe), Team 1, -1, Position Of(Event Player), Facing Direction Of(Event Player));
		Last Created Entity.boss_ID = 2.100;
		Event Player.boss_pet = Last Created Entity;
		Wait(True, Ignore Condition);
		Event Player.pos_cache[True] = Random Value In Array(Remove From Array(Global.cowboy_tp_array, Event Player.pos_cache));
		Call Subroutine(cowboy_tp);
		Clear Status(Event Player, Phased Out);
	}
}

rule("cowboy normal attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Global.phase == 14;
		Event Player.attack < 3;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(Random Real(0.600, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("cowboy tp")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Global.phase == 14;
	}

	actions
	{
		Wait(Random Real(4, 8), Ignore Condition);
		Wait Until(!Event Player.attack, 15);
		Event Player.pos_cache[True] = Random Value In Array(Remove From Array(Global.cowboy_tp_array, Event Player.pos_cache));
		Call Subroutine(cowboy_tp);
		Loop If Condition Is True;
	}
}

rule("cowboy too far from pos cache")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Global.phase == 14;
	}

	actions
	{
		If(Distance Between(Event Player, First Of(Event Player.pos_cache)) > 5 || Y Component Of(Eye Position(Event Player))
			< Y Component Of(First Of(Event Player.pos_cache)));
			Wait(0.250, Ignore Condition);
			If(Distance Between(Event Player, First Of(Event Player.pos_cache)) > 5 || Y Component Of(Eye Position(Event Player))
				< Y Component Of(First Of(Event Player.pos_cache)));
				Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.target) * (Distance Between(Event Player,
					Event Player.target) > 16 ? 1 : (Distance Between(Event Player, Event Player.target) < 14 ? -1 : Null)) + World Vector Of(Left,
					Event Player, Rotation) * Event Player.strafe, 1, To World, Replace existing throttle, Direction and Magnitude);
				While(Distance Between(Event Player, First Of(Event Player.pos_cache)) > 2.500);
					Wait(Global.wait, Ignore Condition);
				End;
			End;
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("cowboy tp no envirokill/in spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Global.phase == 14;
		(Y Component Of(Position Of(Event Player)) < 8 || Is In Spawn Room(Event Player)) == True;
	}

	actions
	{
		Event Player.pos_cache[True] = Random Value In Array(Remove From Array(Global.cowboy_tp_array, Event Player.pos_cache));
		Call Subroutine(cowboy_tp);
	}
}

rule("cowboy tp subr")
{
	event
	{
		Subroutine;
		cowboy_tp;
	}

	actions
	{
		While(Event Player.has_status);
			Wait(Global.wait, Ignore Condition);
		End;
		While(Event Player.took_knockback);
			Wait(Global.wait, Ignore Condition);
		End;
		While(Event Player.tping);
			Wait(Global.wait, Ignore Condition);
		End;
		Event Player.tping = True;
		Press Button(Event Player, Button(Ability 2));
		Event Player.trail_cache = World Vector Of(Up, Event Player, Rotation And Translation);
		Wait(0.250, Ignore Condition);
		Event Player.pos_cache[False] = Event Player.pos_cache[True];
		Teleport(Event Player, First Of(Event Player.pos_cache));
		Event Player.trail = 1;
		Chase Player Variable At Rate(Event Player, trail, False, 2, Destination and Rate);
		Wait(False, Ignore Condition);
		Abort If(Is Dead(Event Player));
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, First Of(Event Player.pos_cache)) * (Distance Between(
			Event Player, First Of(Event Player.pos_cache)) > True ? 1 : Event Player.strafe), 1, To World, Replace existing throttle,
			Direction and Magnitude);
		Play Effect(All Players(All Teams), Cassidy Flashbang Explosion Effect, Team 1, Event Player, 1);
		Play Effect(All Players(All Teams), Cassidy Flashbang Explosion Sound, Team 1, Eye Position(Event Player), 200);
		Event Player.tping = False;
	}
}

rule("cowboy special attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Global.phase == 14;
	}

	actions
	{
		Wait(Random Real(5, 7), Ignore Condition);
		Wait Until(!Event Player.tping, 1);
		If(!Event Player.boss_phase && Normalized Health(Event Player) < 0.500);
			Event Player.attack = 3;
			Event Player.boss_phase = True;
		Else;
			Event Player.attack = Random Integer(True, Event Player.boss_phase ? 3 : 2);
		End;
		Wait Until(!Event Player.attack, 15);
		Loop If Condition Is True;
	}
}

rule("cowboy dead cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 14;
		Health(Global.boss) == False;
	}

	actions
	{
		Global.boss.attack = 5;
		Global.objective_complete = True;
		All Players(Team 2).euros += 300;
		Global.euros_total += 300;
		All Players(Team 2).real += 100;
		Global.real_total += 100;
		Global.phase = 15;
		Wait(True, Ignore Condition);
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(70.511, 14.070, -98.653);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"Bullets proved futile against the dark entities, and the once-zestful Gunslinger was vanquished from his glorious life."), 1),
			Array(Hero(Junkrat), Custom String("Poor Jason McDerulo. I'm gonna miss that bucko."), 1), Array(Hero(Mercy), Custom String(
			"Save the squalling for another night, Doctor. We must make haste! Reaper?"), 1), Array(Hero(Reaper), Custom String(
			"Do I have to."), 1), Array(Hero(Mercy), Custom String("Come on, out with it. Or I'll revoke your immortality privileges. "),
			1), Array(Hero(Reaper), Custom String("*long, heavy sigh*"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.objective = Custom String("Perform the ritual at the bridge.");
		Start Rule(obj_color, Restart Rule);
		Global.objective_complete = False;
		Global.phase = 16;
		Destroy Dummy Bot(Team 1, Slot Of(Global.boss));
		Create Dummy Bot(Hero(Moira), Team 2, 5, Global._extendedGlobalCollection, Vector(0.220, False, 0.950));
		Global.merchant = Last Created Entity;
		Wait(5, Ignore Condition);
		Global.objective_pos = Vector(84.923, 14.448, -100.295);
		Global.pentagram_pos = Ray Cast Hit Position(Vector(77.842, 13.935, -98.146), Vector(77.842, 13.935, -98.146) + Down, Null, Null,
			True) + Down * 0.100;
	}
}

rule("tp dead body")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.is_downed == True;
		Absolute Value(Y Component Of(Position Of(Event Player)) - Y Component Of(Event Player.pos_cache)) > 5;
	}

	actions
	{
		Teleport(Event Player, Event Player.pos_cache);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("summoner intro cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 16;
		Y Component Of(Global.objective_pos) < 100;
		Is True For All(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)), Distance Between(Current Array Element,
			Global.objective_pos) < 4) == True;
	}

	actions
	{
		Stop Chasing Global Variable(shop_angle);
		Global.door_color = Color(White);
		Global.summoner_color = Color(Orange);
		Global.door_health = 100;
		Global.summoner_power = 100;
		Global.zomnic_spawns = Array(Vector(56.839, 17.720, -110.326), Vector(74.472, 10.700, -110.592), Vector(101.742, 9.580, -92.779));
		Global.door = Vector(89.089, 14.071, -63.589);
		Global.summoner_chars = Custom String("ηπραγματικότητασκύβειστηθέλησήμουΗΠΡΑΓΜΑΤΙΚΟΤΗΤΑΕΠΙΤΥΧΕΙΣΤΗ ΘΕΛΗΣΗΜΟΥ");
		Press Button(Global.merchant, Button(Ability 1));
		Global.objective_pos = Global._extendedGlobalCollection;
		Destroy Dummy Bot(Team 1, Slot Of(Global.merchant.attack));
		Global.shop_open = False;
		Wait(0.400, Ignore Condition);
		Destroy Dummy Bot(Team 2, 5);
		Chase Global Variable At Rate(pentagram_radius, 3, 0.316, Destination and Rate);
		Create Effect(All Players(All Teams), Sigma Gravitic Flux Target Sound, Team 1, Global.pentagram_pos,
			Global.pentagram_radius * 66.666, Visible To Position and Radius);
		Global.pentagram_effects = Last Created Entity;
		Create Effect(All Players(All Teams), Ring, Color(Red), Global.pentagram_pos + Up * 0.001, Global.pentagram_radius + 0.100,
			Visible To Position and Radius);
		Modify Global Variable(pentagram_effects, Append To Array, Last Created Entity);
		For Global Variable(i4, 0, 5, True);
			Wait(1.500, Ignore Condition);
			Create Beam Effect(All Players(All Teams), Moira Orb Damage Beam, Global.pentagram_pos + Direction From Angles(
				Global.pentagram_angle + 216 * Evaluate Once(Global.i4), 0) * Global.pentagram_radius,
				Global.pentagram_pos + Direction From Angles(Global.pentagram_angle + 216 * Evaluate Once(Global.i4), 0)
				* Global.pentagram_radius + Vector Towards(Global.pentagram_pos + Direction From Angles(
				Global.pentagram_angle + 216 * Evaluate Once(Global.i4), 0) * Global.pentagram_radius,
				Global.pentagram_pos + Direction From Angles(Global.pentagram_angle + 216 * Evaluate Once(Global.i4 + True), 0)
				* Global.pentagram_radius) * Min(True, Max(False, Total Time Elapsed - Evaluate Once(Total Time Elapsed) + 0.200)), Team 1,
				Visible To Position and Radius);
			Global._classIndexes[Global.i4] = Last Created Entity;
		End;
		Wait(2, Ignore Condition);
		Global.objective_complete = True;
		Abort If(Global.dialogue_priority >= 3);
		Global.dialogue_priority = 2;
		Global.skip_cutscene_pos = Vector(70.511, 14.070, -98.653);
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"The air became charged with the arcane, as the Summoner appeared in their midst!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Destroy Effect(First Of(Global.pentagram_effects));
		For Global Variable(i4, 0, 5, True);
			Destroy Effect(Global._classIndexes[Global.i4]);
			Create Beam Effect(All Players(All Teams), Moira Orb Damage Beam, Global.pentagram_pos + Direction From Angles(
				5 + Global.pentagram_angle + 216 * Evaluate Once(Global.i4), 0) * Global.pentagram_radius,
				Global.pentagram_pos + Direction From Angles(5 + Global.pentagram_angle + 216 * Evaluate Once(Global.i4 + True), 0)
				* Global.pentagram_radius, Team 1, Visible To);
			Modify Global Variable(pentagram_effects, Append To Array, Last Created Entity);
		End;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(Orange), Global.pentagram_pos, 200);
		Wait(0.200, Ignore Condition);
		Set Slow Motion(20);
		Global.no_hud = True;
		Create Dummy Bot(Hero(Symmetra), Team 2, 6, Global.pentagram_pos, Vector(0.240, False, 0.970));
		Global.summoner = Last Created Entity;
		Global.boss = Last Created Entity;
		Last Created Entity.boss_ID = 0.100;
		Wait(1.500, Ignore Condition);
		Set Slow Motion(100);
		Global.return_cam = True;
		Wait(False, Ignore Condition);
		Global.return_cam = False;
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(86.109, 13.219, -101.193);
		Global.dialogue_priority = 2;
		Global.no_hud = False;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Symmetra), Custom String("I have been summoned!"), 1), Array(Hero(Junkrat),
			Custom String("Satya! Jolly good to see your draconic mug again!"), 1), Array(Hero(Symmetra), Custom String(
			"As with you all, old comrades."), 1), Array(Hero(Symmetra), Custom String(
			"My, my, Monster, how you've grown since I last saw you!"), 1), Array(Hero(Roadhog), Custom String(
			"Thanks. I've been stitching random people to my body."), 1), Array(Hero(Symmetra), Custom String("...Grim Reaper."), 1),
			Array(Hero(Reaper), Custom String("Summoner."), 1), Array(Hero(Symmetra), Custom String(
			"Not even going to ask how Vritra and Kāliya are doing?"), 1), Array(Hero(Reaper), Custom String(
			"I'm sure they're doing just fine under your care."), 1), Array(Hero(Symmetra), Custom String("…"), 1), Array(Hero(Symmetra),
			Custom String("Gabriel, listen. I'm not happy about what happened either."), 1), Array(Hero(Symmetra), Custom String(
			"But you need to understand-"), 0.200), Array(Hero(Mercy), Custom String(
			"Boo-hoo, sob story, marital issues and emotional trauma, nobody cares."), 1), Array(Hero(Mercy), Custom String(
			"Great Summoner, we evoke your power to aid us in our siege!"), 1), Array(Hero(Symmetra), Custom String(
			"You haven't changed one bit, Wicked Witch."), 1), Array(Hero(Junkrat), Custom String(
			"Righty tighty, so here's the sitch. We wanna blow up that big flippin' door over yonder."), 1), Array(Hero(Junkrat),
			Custom String("Think you can summon us a few extra hands?"), 1), Array(Hero(Symmetra), Custom String(
			"Am I to follow that ridiculous ''Zomnic'' schematic of yours again?"), 1), Array(Hero(Junkrat), Custom String(
			"Just like old times, Dragon Breath."), 1), Array(Hero(Symmetra), Custom String("Just like old times, Mad Doctor."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.objective = Custom String("Protect The Zomnics.");
		Start Rule(obj_color, Restart Rule);
		Global.objective_complete = False;
		Wait(True, Ignore Condition);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(Orange), Global.pentagram_pos, 200);
		Wait(0.200, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Global.pentagram_pos, 2);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Global.pentagram_pos + Up, 14);
		Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, Global.pentagram_pos, Global.pentagram_pos + Up * 70, Team 1,
			Visible To);
		Modify Global Variable(summoner_effects, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Wrecking Ball Piledriver Fire Sound, Team 1, Global.pentagram_pos, 100, Visible To);
		Modify Global Variable(summoner_effects, Append To Array, Last Created Entity);
		Create Progress Bar In-World Text(All Players(All Teams), Global.door_health, Custom String("{0} Castle Door's Health",
			Ability Icon String(Hero(Brigitte), Button(Secondary Fire))), Global.door + Up * 8, 1, Do Not Clip, Color(White), Color(White),
			Visible To and Values, Default Visibility);
		Modify Global Variable(summoner_effects, Append To Array, Last Text ID);
		Create Progress Bar In-World Text(All Players(All Teams), Global.summoner_power, Custom String("{0} Summoner's Power",
			Ability Icon String(Hero(Moira), Button(Ultimate))), Global.pentagram_pos + Up * 4, 1, Do Not Clip, Color(Orange), Color(
			Orange), Visible To and Values, Default Visibility);
		Modify Global Variable(summoner_effects, Append To Array, Last Text ID);
		Destroy Dummy Bot(Team 2, 6);
		For Global Variable(i5, 1, 6, True);
			Create In-World Text(All Players(All Teams), Char In String(Global.summoner_chars, Round To Integer((
				Total Time Elapsed * 10 + Evaluate Once(Global.i5)) % String Length(Global.summoner_chars), Down)),
				Global.pentagram_pos + Up * 0.600 * Evaluate Once(Global.i5) + Direction From Angles((Evaluate Once(Global.i5)
				% 2 == Null ? 1 : -1) * (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) * Evaluate Once(Random Real(180, 500)), 0)
				* Evaluate Once(Random Real(2, 4)), Evaluate Once(Random Real(1.500, 2)), Clip Against Surfaces,
				Visible To Position and String, Color(Orange), Default Visibility);
			Modify Global Variable(summoner_effects, Append To Array, Last Text ID);
			Wait(0.100, Ignore Condition);
		End;
		Global.phase = 17;
		For Global Variable(i5, 7, 10, True);
			Wait(5, Ignore Condition);
			Create Dummy Bot(Hero(Zenyatta), Team 2, Global.i5, Global.zomnic_spawns[Global.i5 - 7], Vector(0.240, False, 0.970));
			Last Created Entity.zomnic = 1;
		End;
	}
}

rule("zoom in subr")
{
	event
	{
		Subroutine;
		boss_zoomin;
	}

	actions
	{
		Event Player.cutscene_cam_speedup = False;
		Event Player.cutscene_cam_pos = Eye Position(Event Player);
		Event Player.cutscene_cam_lookat = Eye Position(Event Player) + Facing Direction Of(Event Player);
		Start Camera(Event Player, Event Player.cutscene_cam_pos, Event Player.cutscene_cam_lookat, 50);
		Wait(False, Ignore Condition);
		Chase Player Variable At Rate(Event Player, cutscene_cam_pos, World Vector Of(Array(Vector(False, 1.500, 3), Vector(False, -1, 3),
			Vector(False, False, 3.500), Vector(False, -1, 3), Vector(False, 0.500, 3))[Global.boss.boss_ID], Global.boss,
			Rotation And Translation), Event Player.cutscene_cam_speedup, Destination and Rate);
		Chase Player Variable At Rate(Event Player, cutscene_cam_lookat, Eye Position(Global.boss), Event Player.cutscene_cam_speedup,
			Destination and Rate);
		Chase Player Variable At Rate(Event Player, cutscene_cam_speedup, 150, 150, Destination and Rate);
	}
}

rule("dragon blood hint")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 11;
		Global.hint >= 60;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Global.hint = Null;
		Chase Global Variable At Rate(hint, 60, True, Destination and Rate);
		Loop If Condition Is True;
	}
}

rule("summoner vocalisation")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Global.main_speaker == Hero(Symmetra);
		Global.vocalisation == True;
		Entity Exists(Global.summoner) == False;
	}

	actions
	{
		Play Effect(Event Player, Symmetra Teleporter Reappear Sound, Team 1, Eye Position(Event Player) + Facing Direction Of(
			Event Player), 100);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("zomnic explode")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.zomnic == 1;
		Is Alive(Event Player) == True;
	}

	actions
	{
		While(Distance Between(Event Player, Global.door) > 2);
			Wait(Global.wait, Ignore Condition);
		End;
		Event Player.exploding = Null;
		Stop Facing(Event Player);
		Set Status(Event Player, Null, Rooted, 9999);
		Chase Player Variable At Rate(Event Player, exploding, 6, 6, Destination and Rate);
		Start Scaling Player(Event Player, True + Event Player.exploding * 0.100, True);
		Create Effect(Round To Integer(Event Player.exploding, Up) % 2 ? All Players(All Teams) : Empty Array, Echo Cloning Effect, Team 1,
			Event Player, True, Visible To Position and Radius);
		Event Player.trail = Last Created Entity;
		Wait(True, Abort When False);
		Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Team 2, Position Of(Event Player) + Up, 1.500);
		Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Team 1, Position Of(Event Player) + Up, 1.500);
		Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Team 1, Eye Position(Event Player), 200);
		Global.door_health -= Global.difficulty == -1 ? 10 : 5;
		Event Player.grillager_victims = Filtered Array(Players Within Radius(Event Player, 5, Team 1, Surfaces),
			Current Array Element.enemy_ID);
		For Player Variable(Event Player, i, 0, Count Of(Event Player.grillager_victims), True);
			Damage(Event Player.grillager_victims[Evaluate Once(Event Player.i)], Event Player, 40 * (6 - Distance Between(Event Player,
				Event Player.grillager_victims[Evaluate Once(Event Player.i)])));
			Apply Impulse(Event Player.grillager_victims[Evaluate Once(Event Player.i)], Direction Towards(Event Player,
				Event Player.grillager_victims[Evaluate Once(Event Player.i)]) + Up * 0.700, 20, To World, Cancel Contrary Motion);
			Event Player.grillager_victims[Evaluate Once(Event Player.i)].took_knockback = 1;
			Chase Player Variable At Rate(Event Player.grillager_victims[Evaluate Once(Event Player.i)], took_knockback, False, True,
				Destination and Rate);
		End;
		Wait(0.030, Ignore Condition);
		Teleport(Event Player, Global.compressBakeMatcher);
	}
}

rule("phase 18/20 spawning event")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(18, 20), Global.phase) == True;
	}

	actions
	{
		While(!Number Of Dead Players(Team 1));
			Wait(Global.wait, Ignore Condition);
		End;
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		If(Array Contains(Array(18, 20), Global.phase) && Number Of Dead Players(Team 1));
			Global.enemy_ID_sequence = Array(Random Real(0, 100) < (Global.difficulty == 3 ? 7 : -1) ? 10 : Random Value In Array(
				Append To Array(Random Real(0, 100) < 35 ? 5 : Random Integer(True, 7), Count Of(Filtered Array(Players On Hero(Hero(Brigitte),
				Team 1), Is Alive(Current Array Element))) >= 2 ? Empty Array : (Random Real(0, 100) < (Global.difficulty == 3 ? 20 : -1)
				? 26 : Random Integer(21, 24)))));
			Call Subroutine(spawn_enemies);
		End;
		Loop If Condition Is True;
	}
}

rule("no more enemies phase 12")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 12;
		Number Of Living Players(Team 1) <= True;
	}

	actions
	{
		Wait(True, Ignore Condition);
		Loop If Condition Is False;
		Global.objective_pos = Vector(77.842, 13.935, -98.146);
	}
}

rule("zomnic dead")
{
	event
	{
		Player Died;
		Team 2;
		Zenyatta;
	}

	actions
	{
		Event Player.start_pathfind = False;
		Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Team 2, World Vector Of(Up, Event Player,
			Rotation And Translation), 1);
		Play Effect(All Players(All Teams), Junkrat Concussion Mine Explosion Sound, Team 2, Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Effect, Team 2, World Vector Of(Up, Event Player,
			Rotation And Translation), 1);
		Wait(True, Ignore Condition);
		If(Event Player.zomnic == 2);
			Destroy Dummy Bot(Team 2, Slot Of(Event Player));
		Else;
			Teleport(Event Player, Global.compressBakeMatcher);
			Wait(Random Real(4, 6), Ignore Condition);
			Wait Until(Global.phase != 19, 99999);
			If(Global.phase == 21);
				Destroy Dummy Bot(Team 2, Slot Of(Event Player));
			Else If(Event Player.zomnic);
				Abort If(Is Alive(Event Player));
				Resurrect(Event Player);
				Teleport(Event Player, Random Value In Array(Global.zomnic_spawns));
				Clear Status(Event Player, Rooted);
				Stop Scaling Player(Event Player);
				Destroy Effect(Event Player.trail);
				Stop Chasing Player Variable(Event Player, exploding);
	}
}

rule("first zomnic rises")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 17;
		Count Of(Filtered Array(Players On Hero(Hero(Zenyatta), All Teams), Current Array Element.zomnic == 1)) > False;
	}

	actions
	{
		Wait(True, Ignore Condition);
		Destroy Dummy Bot(Team 1, 6);
		Abort If(Global.dialogue_priority > 2);
		Global.skip_cutscene_pos = Vector(84.326, 13.760, -81.319);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"Dr.​ Junkenstein laughed as his minions arose, for tonight was the night of Junkenstein's revenge."), 1), Array(Hero(Junkrat),
			Custom String("Have at it, Summoner! I wanna see blood, gore and exploooosions!"), 1), Array(Hero(Reaper),
			Global.sombra_egg == 69 ? Custom String("I want to go to Brazil.") : Custom String("I want to go home."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 18;
		Global.enemy_ID_sequence = Array(Random Integer(True, 4), Random Integer(True, 4), Random Integer(True, 4), Random Integer(21, 23),
			Random Integer(21, 23));
		Call Subroutine(spawn_enemies);
	}
}

rule("first zomnic explodes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 18;
		Global.door_health < 100;
	}

	actions
	{
		Abort If(Global.dialogue_priority > True);
		Global.dialogue_priority = 1;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("Boom! Boom! The Zomnics crashed against the door,"), 1),
			Array(Hero(Reinhardt), Custom String("Their bodies exploding as the old wood splintered and shuddered."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
	}
}

rule("zomnic path correct")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.zomnic_top == True;
	}

	actions
	{
		While(Distance Between(Event Player, Event Player.zomnic_dest) > 2);
			Wait(Global.wait, Ignore Condition);
		End;
		Event Player.zomnic_dest = Global.door;
		Event Player.zomnic_top = False;
		Event Player.start_pathfind = False;
		Wait(Global.wait * 3, Ignore Condition);
		Event Player.start_pathfind = True;
	}
}

rule("zomnic stuck too long")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.zomnic == 1;
		Is Alive(Event Player) == True;
		Throttle Of(Event Player) != Vector(False, False, False);
		Speed Of In Direction(Event Player, World Vector Of(Throttle Of(Event Player), Event Player, Rotation)) < 1;
	}

	actions
	{
		Wait(1.500, Abort When False);
		Event Player.start_pathfind = False;
		Wait(Global.wait * 3, Ignore Condition);
		Event Player.start_pathfind = True;
	}
}

rule("summoner 33% power")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(18, 20), Global.phase) == True;
		Global.summoner_power <= 33;
	}

	actions
	{
		Abort If(Global.dialogue_priority > True);
		Global.dialogue_priority = 1;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Symmetra), Custom String(
			"My power… is running out! Stop letting… those mortals… destroy my zomnics!"), 1), Array(Hero(Junkrat), Custom String(
			"Our zomnics, ahem. I designed those puppies, thank you very much."), 1), Array(Hero(Symmetra), Custom String(
			"…Focus, Mad Doctor!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
	}
}

rule("summoner out of power")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(18, 20), Global.phase) == True;
		Global.summoner_power <= Null;
	}

	actions
	{
		Kill(Players On Hero(Hero(Zenyatta), Team 2), Null);
		Global.phase = 18.100;
		Abort If(Global.dialogue_priority > 2);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Symmetra), Custom String("This… is the end for me… My apologies, comrades."),
			1.500));
		Call Subroutine(main_dialogue);
		Destroy Dummy Bot(Team 2, 7);
		Destroy Dummy Bot(Team 2, 8);
		Destroy Dummy Bot(Team 2, 9);
		Global.dialogue_priority = False;
		Destroy All Progress Bar HUD Text;
		Destroy Dummy Bot(Team 1, 7);
		Start Forcing Player To Be Hero(Global.dialogue_bot, Hero(Symmetra));
		While(Global.summoner_effects != Empty Array);
			Destroy Effect(First Of(Global.summoner_effects));
			Destroy In-World Text(First Of(Global.summoner_effects));
			Modify Global Variable(summoner_effects, Remove From Array By Index, False);
		End;
		Wait(False, Ignore Condition);
		Create Dummy Bot(Hero(Symmetra), Team 2, 6, Global.pentagram_pos, Vector(0.240, False, 0.970));
		Last Created Entity.dead_summoner = True;
	}
}

rule("door 66% health - alchemist intro cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 18;
		Global.door_health <= 66;
	}

	actions
	{
		Start Forcing Player To Be Hero(Global.dialogue_bot, Hero(Ana));
		Global.ana_spawn_fix = True;
		Abort If(Global.dialogue_priority > 2);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("The door held for now, but the attacks continued."), 1),
			Array(Hero(Reinhardt), Custom String("In the midst of the battle, the Lord's most powerful ally appeared!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.phase = 19;
		Wait(0.200, Ignore Condition);
		Destroy Dummy Bot(Team 1, True);
		Destroy Dummy Bot(Team 1, 2);
		Destroy Dummy Bot(Team 1, 3);
		Destroy Dummy Bot(Team 1, 4);
		Destroy Dummy Bot(Team 1, 5);
		Destroy Dummy Bot(Team 1, 6);
		Set Slow Motion(20);
		Global.no_hud = True;
		Set Status(Players On Hero(Hero(Zenyatta), Team 2), Null, Asleep, 9999);
		Set Status(Players On Hero(Hero(Zenyatta), Team 2), Null, Phased Out, 9999);
		Create Dummy Bot(Hero(Ana), Team 1, 7, Vector(89.347, 20.914, -62.717), Vector(-0.210, -0.440, -0.910));
		Global.boss = Last Created Entity;
		Last Created Entity.pre_init = True;
		Last Created Entity.boss_ID = 3;
		Wait(1.500, Ignore Condition);
		Set Slow Motion(100);
		Global.return_cam = True;
		Global.ana_spawn_fix = False;
		Start Facing(Global.boss, Direction Towards(Eye Position(Global.boss), Eye Position(Global.boss.target)), 1000, To World,
			Direction and Turn Rate);
		Wait(False, Ignore Condition);
		Global.return_cam = False;
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(84.326, 13.760, -81.319);
		Global.dialogue_priority = 2;
		Global.no_hud = False;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		If(Global.sombra_egg == 69);
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"The mighty alchemist, too, had conquered death through her own noble means."), 1), Array(Hero(Reinhardt), Custom String(
				"She vowed to protect the Lord with this newfound power and her trusty arsenal of potions."), 1), Array(Hero(Ana),
				Custom String("Junkenstein, your 'science' has driven you into stark madness and malice."), 1), Array(Hero(Ana), Custom String(
				"You are no doctor at all."), 1), Array(Hero(Junkrat), Custom String(
				"Pára de dizer merda! I didn't endure six years of student loans just to be mocked by some cranky granny!"), 1), Array(Hero(
				Junkrat), Custom String("I'll have ya know I own an actual PhD, a sério!"), 1), Array(Hero(Ana), Custom String(
				"Wait. Was that Portuguese just now?"), 1), Array(Hero(Junkrat), Custom String(
				"Brazilian! Christ's sake, it's Brazilian! You people have no respect for foreign cultures!"), 1), Array(Hero(Ana),
				Custom String("If someone like you is speaking Portuguese, that can only mean one thing..."), 1), Array(Hero(Ana),
				Custom String("...Oh sweet Jesus, I'm so screwed, aren't I."), 1), Array(Hero(Reaper), Custom String(
				"All of us are, actually. The economy's completely ruined after our splurging."), 1), Array(Hero(Reaper), Custom String(
				"Just imagine how inflated the currency is gonna be in a week. Literal shivers."), 1), Array(Hero(Mercy), Custom String(
				"Nerd."), 1), Array(Hero(Junkrat), Custom String("Do not patronize me, dear Alchemist. I'll show you. I'll show all of you!"),
				1), Array(Hero(Junkrat), Custom String("You will all regret the day you hue'd at Dr.​ Jamison Junkenstein!"), 1.500));
		Else;
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"The mighty alchemist, too, had conquered death through her own noble means."), 1), Array(Hero(Reinhardt), Custom String(
				"She vowed to protect the Lord with this newfound power and her trusty arsenal of potions."), 1), Array(Hero(Ana),
				Custom String("Junkenstein, your 'science' has driven you into stark madness and malice."), 1), Array(Hero(Ana), Custom String(
				"You are no doctor at all."), 1), Array(Hero(Junkrat), Custom String(
				"Baloney! I didn't endure six years of student loans just to be mocked by some cranky granny!"), 1), Array(Hero(Junkrat),
				Custom String("I'll have ya know I own an actual PhD, fair dinkum!"), 1), Array(Hero(Mercy), Custom String(
				"Peh, who needs an actual degree when you've got witchcraft?"), 1), Array(Hero(Roadhog), Custom String(
				"For the record, I have a degree in gothic literature."), 1), Array(Hero(Reaper), Custom String(
				"I have a degree in finance and accounting."), 1), Array(Hero(Mercy), Custom String(
				"Mein gott, accounting? No wonder why you're so miserable all the time."), 1), Array(Hero(Ana), Custom String(
				"Enough with this chatter! With my unique alchemical concoction, I am impervious to your attacks."), 1), Array(Hero(Ana),
				Custom String("This is the end of your story, Junkenstein."), 1), Array(Hero(Junkrat), Custom String(
				"I don't think so, dear Alchemist. I'll show you. I'll show all of you!"), 1), Array(Hero(Junkrat), Custom String(
				"You will all regret the day you laughed at Dr.​ Jamison Junkenstein!"), 1.500));
		End;
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 20;
		Start Forcing Player To Be Hero(Global.dialogue_bot, Hero(Ana));
		Clear Status(Players On Hero(Hero(Zenyatta), Team 2), Asleep);
		Clear Status(Players On Hero(Hero(Zenyatta), Team 2), Phased Out);
		Wait(0.500, Ignore Condition);
		For Global Variable(i7, 0, 4, True);
			Create Dummy Bot(Global.i7 % 2 ? Hero(Brigitte) : Hero(Torbjörn), Team 1, Global.i7 + True, Random Value In Array(
				Global.enemy_spawn), Up);
			Last Created Entity.enemy_ID = Array(3, 22, 5, 24)[Global.i7];
			Wait(0.200, Ignore Condition);
		End;
	}
}

rule("ana init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Global.phase == 20;
		Event Player.boss_ID == 3;
	}

	actions
	{
		Event Player.ana_target_friends = True;
		Event Player.avoid_enviro = True;
		Event Player.pre_init = False;
		Set Projectile Gravity(Event Player, 30);
		Event Player.damage_dealt = 30 + 10 * Global.difficulty;
		Event Player.damage_received = 130 - 15 * Global.difficulty;
		Set Damage Dealt(Event Player, Event Player.damage_dealt);
		Set Damage Received(Event Player, Event Player.damage_received);
		Clear Status(Event Player, Phased Out);
		Set Status(Event Player, Null, Invincible, 9999);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Create Effect(All Players(All Teams), Cloud, Color(Violet), Event Player.gas_pos, Event Player.gas_radius, Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Violet), Event Player.gas_pos, Event Player.gas_radius, Position and Radius);
		Start Forcing Player Position(Event Player, Vector(89.137, 20, -63.627), False);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Event Player.attack > False ? Ray Cast Hit Position(
			Eye Position(Event Player.target), Eye Position(Event Player.target) + Down * 10, Null, Null, True) : Eye Position(
			Event Player.target)), 1000, To World, Direction and Turn Rate);
	}
}

rule("ana normal attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Global.phase == 20;
		Event Player.boss_ID == 3;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(Random Real(0.800, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ana special attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Global.phase == 20;
		Event Player.boss_ID == 3;
	}

	actions
	{
		Wait(Random Real(3, 5), Ignore Condition);
		Wait Until(!Event Player.attack, 99999);
		Abort If(Global.door_health <= False);
		Event Player.attack = Random Integer(Event Player.gas_radius ? 2 : 1, Global.door_health < 33.333 ? 4 : 3);
		Wait Until(!Event Player.attack, 99999);
		Loop If Condition Is True;
	}
}

rule("ana gas destroy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Player.gas_radius >= 6;
	}

	actions
	{
		Wait(6, Ignore Condition);
		Chase Player Variable At Rate(Event Player, gas_radius, False, 6, Destination and Rate);
		Wait(1.100, Ignore Condition);
		Event Player.gas_pos = Global._extendedGlobalCollection;
		Stop Chasing Player Variable(Event Player, gas_radius);
	}
}

rule("player poisoned")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.phase == 20;
		Global.boss.gas_radius > False;
		Has Status(Event Player, Phased Out) == False;
	}

	actions
	{
		If(Distance Between(Event Player, Global.boss.gas_pos) < Global.boss.gas_radius);
			Event Player.poisoned = 5;
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("poison damage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.poisoned > False;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, poisoned, False, True, None);
		Create Effect(All Players(All Teams), Bad Aura, Color(Violet), Event Player, True, Position and Radius);
		Modify Player Variable(Event Player, poison_effect, Append To Array, Last Created Entity);
		Create Effect(Event Player, Widowmaker Venom Mine Target Effect, Team 2, Event Player, True, Position and Radius);
		Modify Player Variable(Event Player, poison_effect, Append To Array, Last Created Entity);
		While(Event Player.poisoned);
			Damage(Event Player, Global.boss, 2 + Global.difficulty * 1.250);
			Wait(0.200, Ignore Condition);
		End;
		While(Event Player.poison_effect != Empty Array);
			Destroy Effect(First Of(Event Player.poison_effect));
			Modify Player Variable(Event Player, poison_effect, Remove From Array By Index, False);
		End;
	}
}

rule("speed boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.speed_boosted > False;
		Event Player.zomnic == False;
	}

	actions
	{
		Event Player.throttle_mag = True;
		If(Team Of(Event Player) == Team 1);
			Create Effect(All Players(All Teams), Sigma Gravitic Flux Target Effect, Team 1, Event Player, True, Position and Radius);
		Else;
			Create Effect(All Players(All Teams), Ana Sleeping Effect, Team 2, Event Player, True, Position and Radius);
		End;
		Event Player.speed_effect = Last Created Entity;
		Chase Player Variable At Rate(Event Player, speed_boosted, False, True, Destination and Rate);
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? Event Player.speed * 1.500 : Event Player.speed * 0.500);
		Wait Until(!Event Player.speed_boosted, 99999);
		Set Move Speed(Event Player, Event Player.speed);
		Destroy Effect(Event Player.speed_effect);
		Stop Chasing Player Variable(Event Player, speed_boosted);
	}
}

rule("blinded")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.phase == 20;
		Global.defeat == False;
		Event Player.blind > False;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, blind, False, True, Destination and Rate);
		Event Player.blind_radius = 200;
		Disable Hero HUD(Event Player);
		Start Forcing Player Outlines(All Players(All Teams), Event Player, False, Color(Black), Default);
		Disable Nameplates(All Players(All Teams), Event Player);
		Create Effect(Event Player, Sphere, Color(Black), Event Player, Event Player.blind_radius, Position and Radius);
		Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Cassidy Flashbang Stunned Effect, Team 2, Event Player, True, Position and Radius);
		Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
		Wait Until(!Event Player.blind, 99999);
		Chase Player Variable At Rate(Event Player, blind_radius, False, 400, Destination and Rate);
		Wait Until(!Event Player.blind_radius, 99999);
		Stop Forcing Player Outlines(All Players(All Teams), Event Player);
		Enable Nameplates(All Players(All Teams), Event Player);
		Enable Hero HUD(Event Player);
		While(Event Player.boss_effects != Empty Array);
			Destroy Effect(First Of(Event Player.boss_effects));
			Modify Player Variable(Event Player, boss_effects, Remove From Array By Index, False);
		End;
		Stop Chasing Player Variable(Event Player, blind);
		Stop Chasing Player Variable(Event Player, blind_radius);
	}
}

rule("door <36% health")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase > 18;
		Global.door_health <= 36;
	}

	actions
	{
		Abort If(Global.dialogue_priority > True);
		Global.dialogue_priority = 1;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("The doors shuddered under the relentless assault!"), 1),
			Array(Hero(Ana), Custom String("It cannot be… my concoction's effects are fading!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.ana_start_nana = True;
		Wait Until(Global.door_health <= 22, 99999);
		Create Dummy Bot(Hero(Torbjörn), Team 1, True, Random Value In Array(Global.enemy_spawn), Up);
		Last Created Entity.enemy_ID = 8;
		If(Global.difficulty > True);
			Wait Until(Global.door_health <= 11, 99999);
			Create Dummy Bot(Hero(Torbjörn), Team 1, 2, Random Value In Array(Global.enemy_spawn), Up);
			Last Created Entity.enemy_ID = Global.difficulty == 3 ? 9 : 8;
	}
}

rule("nano effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.nano > False;
	}

	actions
	{
		Abort If(Hero Of(Event Player) == Hero(Ana));
		Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Team Of(Event Player), Event Player, True,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, nano_effect, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Ana Nano Boosted Sound, Team Of(Event Player), Event Player, 200,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, nano_effect, Append To Array, Last Created Entity);
		Chase Player Variable At Rate(Event Player, nano, False, True, None);
		Set Damage Dealt(Event Player, Event Player.damage_dealt * 1.500);
		Set Damage Received(Event Player, Event Player.damage_received * 0.500);
		Wait Until(!Event Player.nano, 99999);
		Set Damage Dealt(Event Player, Event Player.damage_dealt);
		Set Damage Received(Event Player, Event Player.damage_received);
		Stop Chasing Player Variable(Event Player, nano);
		While(Event Player.nano_effect != Empty Array);
			Destroy Effect(First Of(Event Player.nano_effect));
			Modify Player Variable(Event Player, nano_effect, Remove From Array By Index, False);
		End;
	}
}

rule("door 0 health - ana dies cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 20;
		Global.door_health <= Null;
	}

	actions
	{
		Global.objective_complete = True;
		Destroy Effect(First Of(Global.boss.trail));
		Destroy Effect(Global.boss.trail[True]);
		Clear Status(Global.boss, Invincible);
		Set Status(Global.boss, Null, Stunned, 9999);
		Abort If(Global.dialogue_priority > 2);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Ana), Custom String("My Lord… I have failed you… I pray for your safety…"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.phase = 21;
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Team 1, Global.door, 200);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Team 1, Global.door, 200);
		Stop Forcing Player Position(Global.boss);
		Wait(0.200, Ignore Condition);
		Global.door_explosion_victims = Players Within Radius(Global.door, 20, All Teams, Off);
		For Global Variable(i3, 0, Count Of(Global.door_explosion_victims), True);
			Apply Impulse(Global.door_explosion_victims[Evaluate Once(Global.i3)], Direction From Angles(Horizontal Angle From Direction(
				Direction Towards(Global.door, Global.door_explosion_victims[Evaluate Once(Global.i3)])), -30), 20, To World,
				Cancel Contrary Motion);
		End;
		Wait(False, Ignore Condition);
		All Players(Team 2).euros += 300;
		Global.euros_total += 300;
		All Players(Team 2).real += 100;
		Global.real_total += 100;
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Team 1, Global.door, 200);
		Play Effect(All Players(All Teams), Sigma Accretion Impact Sound, Team 1, Global.door, 200);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Global.door + Up * 4, 30);
		Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Team 1, Global.door + Up * 4, 1);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Team 1, Global.door, 1);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Global.door + Up * 4, 20);
		Create Effect(All Players(All Teams), Bad Aura, Color(Gray), Global.door + Up * 4, 8, None);
		Kill(Remove From Array(All Players(Team 1), Global.dialogue_bot), Null);
		Destroy All Progress Bar In-World Text;
		Kill(Filtered Array(Players On Hero(Hero(Zenyatta), Team 2), Current Array Element.zomnic == 1), Null);
		Wait(2, Ignore Condition);
		Destroy Dummy Bot(Team 1, 7);
		Destroy Dummy Bot(Team 2, 7);
		Destroy Dummy Bot(Team 2, 8);
		Destroy Dummy Bot(Team 2, 9);
		Start Forcing Player To Be Hero(Global.dialogue_bot, Hero(Symmetra));
		Wait(0.100, Ignore Condition);
		While(Global.summoner_effects != Empty Array);
			Destroy Effect(First Of(Global.summoner_effects));
			Destroy In-World Text(First Of(Global.summoner_effects));
			Modify Global Variable(summoner_effects, Remove From Array By Index, False);
		End;
		Create Dummy Bot(Hero(Symmetra), Team 2, 6, Global.pentagram_pos, Vector(0.240, False, 0.970));
		Global.summoner = Last Created Entity;
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(84.326, 13.760, -81.319);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"The Alchemist fought valiantly, but she could not stop Dr.​ Junkenstein and his creations."), 1), Array(Hero(Reinhardt),
			Custom String("As the potency of her alchemy wore off, so too did the vigour of her life,"), 1), Array(Hero(Reinhardt),
			Custom String("as she collapsed along with the battered castle doors."), 1), Array(Hero(Junkrat),
			Global.sombra_egg == 69 ? Custom String("That'll teach you to disrespect the Portuguese!") : Custom String(
			"That'll teach you to disrespect an academic!"), 1), Array(Hero(Symmetra), Custom String(
			"Huff… huff… I believe my job here is done, Mad Doctor."), 1), Array(Hero(Mercy), Custom String(
			"Indeed, thank you kindly, great Summoner."), 1), Array(Hero(Mercy), Custom String(
			"Now scram back to your demonic hole from whence you crawled."), 1), Array(Hero(Symmetra), Custom String(
			"A pleasure as always, Wicked Witch."), 1), Array(Hero(Symmetra), Custom String("With that, I take my leave."), 1), Array(Hero(
			Reaper), Custom String("...Satya."), 1), Array(Hero(Symmetra), Custom String("Yes, Grim Reaper?"), 1), Array(Hero(Reaper),
			Global.sombra_egg == 69 ? Custom String("Tell the kids that I'm going to Brazil.") : Custom String(
			"Tell the kids that I miss them."), 1), Array(Hero(Symmetra), Custom String("…"), 1), Array(Hero(Symmetra),
			Global.sombra_egg == 69 ? Custom String("...Um. Okay.") : Custom String("…They miss you too."), 1.500));
		Call Subroutine(main_dialogue);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(Orange), Global.pentagram_pos, 200);
		Wait(0.200, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Global.pentagram_pos, 2);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Global.pentagram_pos + Up, 14);
		Destroy Dummy Bot(Team 2, 6);
		While(Global.pentagram_effects != Empty Array);
			Destroy Effect(First Of(Global.pentagram_effects));
			Modify Global Variable(pentagram_effects, Remove From Array By Index, False);
		End;
		Wait(2, Ignore Condition);
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Roadhog), Custom String("The castle all's open for our taking now."), 1), Array(
			Hero(Roadhog), Custom String("It's time we end this, boss!"), 1), Array(Hero(Junkrat), Global.sombra_egg == 69 ? Custom String(
			"Sapoaskapspaoks, I'm so excited! I can already taste the sweet nectar of revenge!") : Custom String(
			"Ohohoho, I'm so excited! I can already taste the sweet nectar of revenge!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 22;
		Global.objective = Custom String("Storm the castle.");
		Start Rule(obj_color, Restart Rule);
		Global.objective_complete = False;
		Create Dummy Bot(Hero(Moira), Team 2, 5, Global._extendedGlobalCollection, Vector(0.220, False, 0.950));
		Global.merchant = Last Created Entity;
		Wait(5, Ignore Condition);
		Global.objective_pos = Global.door;
	}
}

rule("door exploding")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 20;
		Global.door_health <= Null;
	}

	actions
	{
		Global.door_explosion = Global.door + Up * Random Real(0, 8) + Vector(0.975, False, -0.221) * Random Real(-2, 2);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Team 1, Global.door_explosion, 100);
		Play Effect(All Players(All Teams), Junkrat Concussion Mine Explosion Effect, Team 1, Global.door_explosion, 1);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ana friend target")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.ana_target_friends == True;
	}

	actions
	{
		Event Player.target = First Of(Append To Array(Sorted Array(Filtered Array(All Living Players(Team 1), Is In Line of Sight(
			Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS) && Current Array Element.enemy_ID),
			Normalized Health(Current Array Element)), Event Player.target));
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

rule("shop ui setup")
{
	event
	{
		Subroutine;
		shop_ui_setup;
	}

	actions
	{
		Chase Global Variable At Rate(shop_angle, 9999800320.000, 250, None);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.shop > False), Custom String("{0}{1}",
			Local Player.shop_selection == 69 ? Custom String("▶ ") : Custom String(""), Local Player.shop == 1 ? Custom String(
			"[Exit Shop]") : Custom String("[Back]")), Last Of(Global.shop_campos) + Global.shop_left * (
			Local Player.shop_selection == 69 ? -3.100 : -3) + Down + Global.shop_left * (
			Local Player.shop_selection == 69 ? 0.100 : False) * Sine From Degrees(Global.shop_angle), 2, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		"page 1"
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.shop == 1), Custom String("{0}Potions {1}",
			Local Player.shop_selection ? Custom String("") : Custom String("▶ "), Icon String(Poison 2)), Last Of(Global.shop_campos)
			+ Global.shop_left * 1.500 + Up * Sine From Degrees(Global.shop_angle) * (Local Player.shop_selection ? False : 0.100), 3,
			Do Not Clip, Visible To Position and String, Color(Purple), Default Visibility);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.shop == 1), Custom String("{0}Scrolls {1}",
			Local Player.shop_selection == 1 ? Custom String("▶ ") : Custom String(""), Icon String(Spiral)), Last Of(Global.shop_campos)
			+ Global.shop_left * -1.500 + Up * (Local Player.shop_selection == 1 ? 0.100 : False) * Sine From Degrees(Global.shop_angle),
			3, Do Not Clip, Visible To Position and String, Color(Yellow), Default Visibility);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.shop == 1), Custom String(
			"Come forth and browse my alchemical goods, {0}Or gaze upon my collection of forbidden academia.", Global.newline), Last Of(
			Global.shop_campos) + Down * 1.500, 1.500, Do Not Clip, Visible To Position and String, Global.t2_hero_colours[6],
			Default Visibility);
		"page 2"
		For Player Variable(Event Player, i, 0, 5, True);
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.shop == 2), Custom String("{0}Potion of {1}",
				Local Player.shop_selection == Evaluate Once(Event Player.i) ? Custom String("▶ ") : Custom String(""), Array(Custom String(
				"Vengeance {0}", Icon String(Skull)), Custom String("Salvation {0}", Ability Icon String(Hero(Mercy), Button(Ability 2))),
				Custom String("Endurance {0}", Ability Icon String(Hero(Baptiste), Button(Ability 1))), Custom String("Frenzy {0}",
				Ability Icon String(Hero(Moira), Button(Ability 1))), Custom String("More Gun {0}", Ability Icon String(Hero(Cassidy), Button(
				Primary Fire))))[Evaluate Once(Event Player.i)]), Last Of(Global.shop_campos) + Up * (True - 0.300 * Evaluate Once(
				Event Player.i)) + Global.shop_left * (Local Player.shop_selection == Evaluate Once(Event Player.i) ? 1.400 : 1.500)
				+ Global.shop_left * Sine From Degrees(Global.shop_angle) * (Local Player.shop_selection == Evaluate Once(Event Player.i)
				&& Local Player.potions[Evaluate Once(Event Player.i)] < Local Player.potions_max[Evaluate Once(Event Player.i)
				] && Local Player.euros > Global.potions_price[Evaluate Once(Event Player.i)] ? 0.100 : False), 1.500, Do Not Clip,
				Visible To Position String and Color, Local Player.potions[Evaluate Once(Event Player.i)
				] < Local Player.potions_max[Evaluate Once(Event Player.i)] && Local Player.euros >= Global.potions_price[Evaluate Once(
				Event Player.i)] ? Array(Color(Red), Color(Yellow), Color(Green), Color(Aqua), Color(Blue))[Evaluate Once(Event Player.i)
				] : Color(Gray), Default Visibility);
			Wait(False, Ignore Condition);
			Event Player.i += 5;
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.shop == 2), Custom String("{0}Potion of {1}",
				Local Player.shop_selection == Evaluate Once(Event Player.i) ? Custom String("▶ ") : Custom String(""), Array(Custom String(
				"Proficiency {0}", Icon String(Eye)), Custom String("Vampirism {0}", Ability Icon String(Hero(Moira), Button(Ability 2))),
				Custom String("Pyromancy {0}", Icon String(Fire)), Custom String("Necromancy {0}", Ability Icon String(Hero(Baptiste), Button(
				Ability 2))), Custom String("Water {0}", Ability Icon String(Hero(Roadhog), Button(Ability 2))))[Evaluate Once(Event Player.i)
				- 5]), Last Of(Global.shop_campos) + Up * (True - 0.300 * (Evaluate Once(Event Player.i) - 5)) - Global.shop_left * (
				Local Player.shop_selection == Evaluate Once(Event Player.i) ? 1.600 : 1.500) + Global.shop_left * Sine From Degrees(
				Global.shop_angle) * (Local Player.shop_selection == Evaluate Once(Event Player.i) && Local Player.potions[Evaluate Once(
				Event Player.i)] < Local Player.potions_max[Evaluate Once(Event Player.i)
				] && Local Player.euros > Global.potions_price[Evaluate Once(Event Player.i)] ? 0.100 : False), 1.500, Do Not Clip,
				Visible To Position String and Color, Local Player.potions[Evaluate Once(Event Player.i)
				] < Local Player.potions_max[Evaluate Once(Event Player.i)] && Local Player.euros >= Global.potions_price[Evaluate Once(
				Event Player.i)] ? Array(Color(Purple), Color(Rose), Color(Orange), Custom Color(112, 179, 134, 255), Color(White))
				[Evaluate Once(Event Player.i) - 5] : Color(Gray), Default Visibility);
			Wait(False, Ignore Condition);
			Event Player.i -= 5;
		End;
		Create In-World Text(Filtered Array(All Players(All Teams),
			Current Array Element.shop == 2 && Current Array Element.shop_selection != 69), Custom String("{0} - STOCK: {1} - PRICE: €{2}",
			Custom String("{0}{1}{2}", Array(Custom String("Indulge in your destructive lust for revenge."), Custom String(
			"Not the holy kind. More akin to dumpster-diving salvation."), Custom String(
			"Pain is but an illusion. Free your soul from it."), Custom String("Let the hysteria take over your feeble limbs."),
			Custom String("It’s just a glass bottle full of bullets."), Custom String(
			"Expand your mind. Unlock your repressed potential."), Custom String("Brewed with the fangs of a powerful ancient deity."),
			Custom String("The dragon’s fire consumes all."), Custom String("Death is merely a temporary illness."), Custom String(" "))
			[Local Player.shop_selection], Global.newline, Array(Custom String("Increases damage dealt by 5%."), Custom String(
			"Increases healing dealt by 5%."), Custom String("Increases maximum health by 20HP."), Custom String(
			"Increases movement speed by 5%."), Custom String("Increases ammo clip by 20%."), Custom String(
			"Decreases ability cooldowns by 1 second."), Custom String("Converts 5% of damage to health (Does not stack with Salvation)."),
			Custom String("Adds a 5% chance to light enemies on fire per attack."), Custom String(
			"On your next death, you will immediately revive."), Custom String("A refreshing, hydrating drink."))
			[Local Player.shop_selection]),
			Local Player.potions_max[Local Player.shop_selection] - Local Player.potions[Local Player.shop_selection],
			Global.potions_price[Local Player.shop_selection]), Last Of(Global.shop_campos) + Down * 1.500, 1.500, Do Not Clip,
			Visible To Position String and Color,
			Local Player.potions_max[Local Player.shop_selection] - Local Player.potions[Local Player.shop_selection] > False && Local Player.euros >= Global.potions_price[Local Player.shop_selection] ? Array(
			Color(Red), Color(Yellow), Color(Green), Color(Aqua), Color(Blue), Color(Purple), Color(Rose), Color(Orange), Custom Color(112,
			179, 134, 255), Color(White))[Local Player.shop_selection] : Color(Gray), Default Visibility);
		For Player Variable(Event Player, i, 0, 3, True);
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.shop == 3), Custom String("{0}{1}",
				Local Player.shop_selection == Evaluate Once(Event Player.i) ? Custom String("▶ ") : Custom String(""), Array Contains(
				Local Player.scrolls_equip, Local Player.scrolls_random[Evaluate Once(Event Player.i)]) ? Array(String Split(Custom String(
				"Chaos Magic/Mystic Transfusion/Bewitching Grasp/Flying Broomstick/Undying Servitude/Hex Mania"), Custom String("/")),
				String Split(Custom String("Junkenstein's Revenge/Superconductive/Discharged/Shocking Surprise/Faraday Trap/Zombardier"),
				Custom String("/")), String Split(Custom String(
				"Evil Stitched To Evil/It's Alive!/Recycling/Chain Reaction/Monstrous Roar/Beware; For I Am Fearless"), Custom String("/")),
				String Split(Custom String(
				"Reap What You Sow/Marked For Death/The Reaper's Scythe/Vengeful Ghost/Jumpscare/Dance With The Reaper"), Custom String("/")))
				[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))][Local Player.scrolls_random[Evaluate Once(Event Player.i)
				]] : Custom String("Mysterious Scroll")), Last Of(Global.shop_campos) + Up * (0.400 - 0.300 * Evaluate Once(Event Player.i))
				+ Global.shop_left * (Local Player.shop_selection == Evaluate Once(Event Player.i) ? 1.400 : 1.500)
				+ Global.shop_left * Sine From Degrees(Global.shop_angle) * (Local Player.shop_selection == Evaluate Once(Event Player.i)
				&& !Array Contains(Local Player.scrolls_equip, Local Player.scrolls_random[Evaluate Once(Event Player.i)])
				&& Local Player.real > 99 ? 0.100 : False), 1.800, Do Not Clip, Visible To Position String and Color, Array Contains(
				Local Player.scrolls_equip, Local Player.scrolls_random[Evaluate Once(Event Player.i)])
				? Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))] : (
				Local Player.real > 99 ? Color(White) : Color(Gray)), Default Visibility);
			Wait(False, Ignore Condition);
			Event Player.i += 3;
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.shop == 3), Custom String("{0}{1}",
				Local Player.shop_selection == Evaluate Once(Event Player.i) ? Custom String("▶ ") : Custom String(""), Array Contains(
				Local Player.scrolls_equip, Local Player.scrolls_random[Evaluate Once(Event Player.i)]) ? Array(String Split(Custom String(
				"Chaos Magic/Mystic Transfusion/Bewitching Grasp/Flying Broomstick/Undying Servitude/Hex Mania"), Custom String("/")),
				String Split(Custom String("Junkenstein's Revenge/Superconductive/Discharged/Shocking Surprise/Faraday Trap/Zombardier"),
				Custom String("/")), String Split(Custom String(
				"Evil Stitched To Evil/It's Alive!/Recycling/Chain Reaction/Monstrous Roar/Beware; For I Am Fearless"), Custom String("/")),
				String Split(Custom String(
				"Reap What You Sow/Marked For Death/The Reaper's Scythe/Vengeful Ghost/Jumpscare/Dance With The Reaper"), Custom String("/")))
				[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))][Local Player.scrolls_random[Evaluate Once(Event Player.i)
				]] : Custom String("Mysterious Scroll")), Last Of(Global.shop_campos) + Up * (0.400 - 0.300 * (Evaluate Once(Event Player.i)
				- 3)) - Global.shop_left * (Local Player.shop_selection == Evaluate Once(Event Player.i) ? 1.600 : 1.500)
				+ Global.shop_left * Sine From Degrees(Global.shop_angle) * (Local Player.shop_selection == Evaluate Once(Event Player.i)
				&& !Array Contains(Local Player.scrolls_equip, Local Player.scrolls_random[Evaluate Once(Event Player.i)])
				&& Local Player.real > 99 ? 0.100 : False), 1.800, Do Not Clip, Visible To Position String and Color, Array Contains(
				Local Player.scrolls_equip, Local Player.scrolls_random[Evaluate Once(Event Player.i)])
				? Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array, Hero Of(Local Player))] : (
				Local Player.real > 99 ? Color(White) : Color(Gray)), Default Visibility);
			Wait(False, Ignore Condition);
			Event Player.i -= 3;
		End;
		Create In-World Text(Filtered Array(All Players(All Teams),
			Current Array Element.shop == 3 && Current Array Element.shop_selection != 69), Array Contains(Local Player.scrolls_equip,
			Local Player.scrolls_random[Local Player.shop_selection]) ? Array(Array(Custom String(
			"Heal yourself for 50% damage your heal target takes and 50%\ndamage they deal. Your health regen is drastically reduced."),
			Custom String("Press ''{0}'' while healing a player to instantly heal\nthem for 100HP, sacrificing 60HP of your own.",
			Input Binding String(Button(Reload))), Custom String(
			"Replaces Damage Boost with a beam that locks\nonto enemies and drains their health."), Custom String(
			"Guardian Angel now damages and\nknocks back enemies in your path."), Custom String(
			"Replaces Resurrect. Casts a spell on a living teammate that\nmakes them invulnerable to all damage for 8 seconds."),
			Custom String(
			"Upon activating Valkyrie, all enemies in a 30 meter radius go\ninsane for 8 seconds, becoming hacked and confused.")), Array(
			Custom String("When downed, repeatedly release Total Mayhem\nbombs at your corpse every second."), Custom String(
			"When under 66.6% health, nearby enemies\ntake electric damage over time."), Custom String(
			"Every killing blow causes the victim to discharge\nelectricity, damaging nearby enemies and stunning them."), Custom String(
			"Concussion Mine and Riptire\nnow also electrify enemies, stunning them."), Custom String(
			"When an enemy is caught in your Steel Trap, they start\nelectrifying nearby enemies, damaging and rooting them."),
			Custom String("Upon activating Riptire, a zombardier is summoned\nthat fights for you for 20 seconds.")), Array(Custom String(
			"Every killing blow grants you +100 unrecoverable HP."), Custom String(
			"Become nanoboosted for 10 seconds whenever\nyou revive. Allies revive you twice as quickly."), Custom String(
			"When crouching, deal 2× damage,\nbut every shot takes 100HP from you."), Custom String(
			"Successfully landing a hook sets its cooldown to 1 second,\nhowever missing a hook sets its cooldown to 12 seconds."),
			Custom String(
			"Replaces Take A Breather with a roar that heals you and\ngrants 60% damage reduction for 5 seconds. All enemies\n{0}",
			Custom String("immediately target you.")), Custom String(
			"Whole Hog now deals zero knockback.\n2× movement speed while Whole Hog is active.")), Array(Custom String(
			"Every killing blow refreshes\none of your cooldowns."), Custom String(
			"Shoot an enemy to mark them, making them\nvisible through walls and take 1.25× damage.\n{0}", Custom String(
			"You can only mark one enemy at a time.")), Custom String("Gain 2× melee range and 2.5× melee damage."), Custom String(
			"While in Wraith Form, nearby enemies\ntake damage over time."), Custom String(
			"Upon exiting Shadow Step, all nearby\nenemies become frozen in fear."), Custom String(
			"While using Death Blossom, you become\ninvincible and move 3× as fast.")))[Index Of Array Value(Global.t2_heroes_array,
			Hero Of(Local Player))][Local Player.scrolls_random[Local Player.shop_selection]] : Custom String(
			"Unlock this scroll to attain unique, mysterious powers. - PRICE: R$100"), Last Of(Global.shop_campos) + Down * 1.500, 1.500,
			Do Not Clip, Visible To Position String and Color, Array Contains(Local Player.scrolls_equip,
			Local Player.scrolls_random[Local Player.shop_selection]) ? Global.t2_hero_colours[Index Of Array Value(Global.t2_heroes_array,
			Hero Of(Local Player))] : (Local Player.real > 99 ? Color(White) : Color(Gray)), Default Visibility);
	}
}

rule("zomnic init")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.zomnic == 1;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, World Vector Of(Throttle Of(Event Player), Event Player, Rotation), 100, To World,
			Direction and Turn Rate);
		Wait(False, Ignore Condition);
		If(Distance Between(Event Player, First Of(Global.zomnic_spawns)) < 4);
			Event Player.zomnic_top = True;
		Else;
			Event Player.zomnic_top = False;
		End;
		Event Player.zomnic_dest = Event Player.zomnic_top ? Vector(67.270, 12.720, -70.640) : Global.door;
		Event Player.throttle_mag = True;
		Event Player.start_pathfind = True;
		Event Player.boss_target_location = Global.pentagram_pos + Up * 20;
		Event Player.boss_target_location_2 = Position Of(Event Player);
		Chase Player Variable Over Time(Event Player, boss_target_location, Event Player.boss_target_location_2, 1.300, None);
		Create Beam Effect(All Players(All Teams), Winston Tesla Cannon Beam, Event Player.boss_target_location_2,
			Event Player.boss_target_location, Team 1, Visible To Position and Radius);
		Event Player.trail_cache = Last Created Entity;
		Wait(False, Ignore Condition);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Team 1, Position Of(Event Player), 200);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Event Player, 1);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player, 8);
		Global.summoner_power -= 1.500;
		Wait(1.300, Ignore Condition);
		Destroy Effect(Event Player.trail_cache);
	}
}

rule("phase 11 spawn subr")
{
	event
	{
		Subroutine;
		phase_11_spawn;
	}

	actions
	{
		Abort If(Global.dragon_blood_qty == 4 && Global.mercy_drop == 1);
		Wait Until(Number Of Living Players(Team 1) <= 3, 99999);
		Global.enemy_spawn = Filtered Array(Global.enemy_spawn_2, Distance Between(Current Array Element, Global.last_collected_blood)
			< 40 && !Is In Line of Sight(Current Array Element, Eye Position(Global.last_collected_blood), Barriers Do Not Block LOS));
		If(Global.enemy_spawn == Empty Array);
			Global.enemy_spawn = Filtered Array(Global.enemy_spawn_2, Distance Between(Current Array Element, Global.last_collected_blood)
				< 60);
		End;
		If(Global.dragon_blood_qty > 3);
			Global.enemy_ID_sequence = Append To Array(Array(Random Integer(True, 4), Random Integer(6, 7), Random Integer(True, 4),
				Random Integer(21, 23)), Global.difficulty == 3 ? 7 : Empty Array);
		Else If(Global.dragon_blood_qty > True);
			Global.enemy_ID_sequence = Append To Array(Array(Random Integer(True, 4), Random Integer(True, 4), Random Integer(True, 4),
				Random Integer(21, 23), Random Integer(6, 7)), Global.difficulty == 3 ? (Global.dragon_blood_qty > 2 ? 10 : 7) : Empty Array);
		Else If(Global.dragon_blood_qty > False);
			Global.enemy_ID_sequence = Array(Random Integer(True, 4), Random Integer(True, 4), Global.difficulty == 3 ? 10 : Random Integer(
				True, 4), Random Integer(21, 23), Random Integer(6, 7), Global.difficulty == 3 ? 26 : Random Integer(21, 23));
		Else;
			Global.enemy_ID_sequence = Array(Random Integer(True, 4), Global.difficulty == 3 ? 7 : Random Integer(True, 4), Random Integer(6,
				7), Random Integer(21, 23), Global.difficulty == 3 ? 26 : Random Integer(21, 23), Global.difficulty == 3 ? 9 : 8);
		End;
		Call Subroutine(spawn_enemies);
	}
}

rule("ana nana")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Player.boss_ID == 3;
		Global.ana_start_nana == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Wait(Random Real(6, 8), Ignore Condition);
		Wait Until(!Event Player.attack, 99999);
		Event Player.attack = 5;
		While(!Is Using Ultimate(Event Player));
			Set Ultimate Charge(Event Player, 100);
			Press Button(Event Player, Button(Ultimate));
			Wait(False, Ignore Condition);
		End;
		Event Player.boss_target_location = Eye Position(Event Player);
		Event Player.boss_target_location_2 = Vector(84.326, 12.760, -81.319);
		Chase Player Variable At Rate(Event Player, boss_target_location, Event Player.boss_target_location_2, 20, Destination and Rate);
		Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Event Player.boss_target_location_2,
			Event Player.boss_target_location, Team 1, Visible To Position and Radius);
		Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player.boss_target_location_2, 20);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player.boss_target_location_2, 35);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player.boss_target_location_2, 50);
		For Player Variable(Event Player, i2, 1, 5, 1);
			Players In Slot(Event Player.i2, Team 1).nano = 8;
			Heal(Players In Slot(Event Player.i2, Team 1), Global.boss, 200);
			Wait(0.300, Ignore Condition);
		End;
		Wait Until(Event Player.boss_target_location == Event Player.boss_target_location_2, 99999);
		While(Event Player.boss_effects != Empty Array);
			Destroy Effect(First Of(Event Player.boss_effects));
			Modify Player Variable(Event Player, boss_effects, Remove From Array By Index, False);
		End;
		Wait(False, Ignore Condition);
		Event Player.attack = False;
	}
}

rule("enter castle")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 22;
		Y Component Of(Global.objective_pos) < 100;
		Is True For All(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)), Distance Between(Current Array Element,
			Global.objective_pos) < 4) == True;
	}

	actions
	{
		Teleport(Remove From Array(All Players(Team 2), Global.merchant), Vector(89.583, 13.378, -61.666));
		Global.boundary_corners_2 = Array(Last Of(Global.boundary_corners), First Of(Global.boundary_corners));
		Global.boundary_line_2 = Vector Towards(First Of(Global.boundary_corners_2), Last Of(Global.boundary_corners_2));
		Start Rule(delete_bound_effects, Restart Rule);
		Global.phase = 23;
		Global.objective_pos = Global._extendedGlobalCollection;
		Destroy Dummy Bot(Team 1, Slot Of(Global.merchant.attack));
		Global.shop_open = False;
		Wait(0.400, Ignore Condition);
		Destroy Dummy Bot(Team 2, 5);
		For Global Variable(i4, 0, 4, True);
			Global.enemy_spawn = Array(Vector(94.924, 11.112, -29.514), Vector(90.221, 16.257, -21.267), Vector(106.134, 11.113, -33.421),
				Vector(100.805, 12.688, -46.994))[Global.i4];
			Create Dummy Bot(Hero(Brigitte), Team 1, Global.i4 + True, Global.enemy_spawn, Up);
			Last Created Entity.enemy_ID = Array(21, 22, Global.difficulty == 3 ? 25 : 22, 25)[Global.i4];
			Wait(0.100, Ignore Condition);
		End;
	}
}

rule("rein double earthshatter")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.boss_ID == 4.100;
		Global.boss.attack == 5;
	}

	actions
	{
		Wait(1.250, Ignore Condition);
		For Player Variable(Event Player, i, 0, 3, 0.100);
			Set Ultimate Charge(Event Player, 100);
			Wait(0.100, Ignore Condition);
			Press Button(Event Player, Button(Ultimate));
		End;
	}
}

rule("bot stuck too long tp")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.enemy_ID > False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(60, Abort When False);
		If(Is Alive(Event Player.target));
			If(!Event Player.target.zomnic);
				If(!Is In Line of Sight(Event Player, Event Player.target, Barriers Do Not Block LOS));
					Teleport(Event Player, Nearest Walkable Position(World Vector Of(Backward * 10, Event Player.target, Rotation And Translation)));
				End;
			End;
		End;
		Loop If Condition Is True;
	}
}

rule("enemy init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.enemy_ID >= True;
		Is Alive(Event Player) == True;
		Event Player.safeguard_fix == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Event Player.enemy_ID < 20 ? Hero(Torbjörn) : Hero(Brigitte));
		Stop Facing(Event Player);
		Stop Scaling Barriers(Event Player);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Stop Scaling Player(Event Player);
		Set Knockback Received(Event Player, 100);
		Stop Modifying Hero Voice Lines(Event Player);
		Set Projectile Gravity(Event Player, 100);
		Set Projectile Speed(Event Player, 100);
		Event Player.grillager_activate = False;
		Press Button(Event Player, Button(Interact));
		If(Hero Of(Event Player) == Hero(Torbjörn));
			Start Forcing Dummy Bot Name(Event Player, Array(Custom String("Villager"), Custom String("Killager"), Custom String("Skillager"),
				Custom String("Grillager"), Custom String("Spillager"), Custom String("Chillager"), Custom String("Instakillager"),
				Custom String("Overkillager"), Custom String("Overoverkillager"), Custom String("Chernobyllager"))
				[Event Player.enemy_ID - True]);
			Set Max Health(Event Player, 100);
			Set Knockback Dealt(Event Player, 100);
			Event Player.speed = 80;
			Set Move Speed(Event Player, 80);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)), 1000, To World,
				Direction and Turn Rate);
			Set Weapon(Event Player, Array Contains(Array(1, 4, 6, 7), Event Player.enemy_ID) ? 2 : 1);
			Event Player.damage_dealt = 25 + 15 * Global.difficulty;
			If(Event Player.enemy_ID == 2);
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target) + Down * 0.500)
					+ Vector(Random Real(-0.100, 0.100), False, Random Real(-0.100, 0.100)), 1000, To World, Direction and Turn Rate);
				Event Player.damage_dealt = 10 + 8 * Global.difficulty;
			Else If(Event Player.enemy_ID == 3);
				Event Player.speed = 60;
				Set Move Speed(Event Player, 60);
				Event Player.damage_dealt = 50 + 20 * Global.difficulty;
				Set Projectile Gravity(Event Player, 300);
				Set Projectile Speed(Event Player, 500);
				Create Beam Effect(Event Player.real ? All Players(All Teams) : Empty Array, Torbjörn Turret Sight Beam, Eye Position(
					Event Player), Eye Position(Event Player.target), Team 1, Visible To Position and Radius);
				Event Player.trail[False] = Last Created Entity;
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target) + Vector(X Component Of(
					Velocity Of(Event Player.target)), False, Z Component Of(Velocity Of(Event Player.target))) * (Distance Between(Eye Position(
					Event Player), Eye Position(Event Player.target)) / 350)), 1000, To World, Direction and Turn Rate);
			Else If(Event Player.enemy_ID == 5);
				Event Player.damage_dealt = 10 + 8 * Global.difficulty;
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player.target)), 1000, To World,
					Direction and Turn Rate);
				Set Projectile Gravity(Event Player, 5);
				Set Max Health(Event Player, 200);
				Set Player Health(Event Player, 99999);
			Else If(Event Player.enemy_ID == 6);
				Create Effect(All Players(All Teams), Mei Frozen Effect, Team 1, Event Player, True, Visible To Position and Radius);
				Event Player.trail[False] = Last Created Entity;
				Create Effect(All Players(All Teams), Mei Frozen Sound, Team 1, Event Player, 200, Visible To Position and Radius);
				Event Player.trail[2] = Last Created Entity;
				Set Max Health(Event Player, 150);
			Else If(Event Player.enemy_ID == 7);
				Create In-World Text(All Players(All Teams), Custom String(":D"), Event Player, 2, Clip Against Surfaces,
					Visible To Position and String, Color(Red), Default Visibility);
				Event Player.trail[True] = Last Text ID;
				Event Player.damage_dealt = 300 + 100 * Global.difficulty;
				Start Scaling Player(Event Player, 0.700, False);
				Set Max Health(Event Player, 37.500);
				Event Player.speed = 110;
				Set Move Speed(Event Player, 120);
				Start Modifying Hero Voice Lines(Event Player, 1.250, True);
			Else If(Event Player.enemy_ID == 8);
				Event Player.speed = 70;
				Set Move Speed(Event Player, 70);
				Event Player.damage_dealt = 40 + 15 * Global.difficulty;
				Start Scaling Player(Event Player, 1.700, False);
				Set Max Health(Event Player, Absolute Value(1500));
				Set Knockback Received(Event Player, 50);
				Set Player Health(Event Player, 99999);
				Start Modifying Hero Voice Lines(Event Player, 0.750, True);
			Else If(Event Player.enemy_ID == 9);
				Event Player.speed = 70;
				Set Move Speed(Event Player, 70);
				Event Player.damage_dealt = 40 + 15 * Global.difficulty;
				Start Scaling Player(Event Player, 2.200, False);
				Set Max Health(Event Player, Absolute Value(3000));
				Set Knockback Received(Event Player, 30);
				Set Player Health(Event Player, 99999);
				Start Modifying Hero Voice Lines(Event Player, 0.500, True);
			Else If(Event Player.enemy_ID == 10);
				Event Player.speed = 70;
				Set Move Speed(Event Player, 70);
				Start Scaling Player(Event Player, 1.300, False);
				Set Status(Event Player, Null, Unkillable, 99999);
				Set Knockback Received(Event Player, 50);
				Set Max Health(Event Player, 800);
				Start Modifying Hero Voice Lines(Event Player, 0.500, True);
				Wait(0.100, Ignore Condition);
				Create Effect(Round To Integer(Total Time Elapsed * 2, Up) % 2 ? Empty Array : All Players(All Teams), Echo Cloning Effect, Team 1,
					Event Player, True, Visible To Position and Radius);
				Event Player.trail[False] = Last Created Entity;
				Create Icon(All Players(All Teams), Event Player, Radioactive, Visible To and Position, Color(Green), False);
				Event Player.trail[3] = Last Created Entity;
				Set Player Health(Event Player, 99999);
				Set Ultimate Charge(Event Player, 100);
			End;
			Event Player.damage_received = 130 - 15 * Global.difficulty;
			Set Damage Dealt(Event Player, Event Player.damage_dealt);
			Set Damage Received(Event Player, Event Player.damage_received);
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			Start Forcing Dummy Bot Name(Event Player, Array(Custom String("Guard"), Custom String("Vanguard"), Custom String("Lifeguard"),
				Custom String("Safeguard"), Custom String("Royal Guard"), Custom String("Bitter Guard"))[Event Player.enemy_ID - 21]);
			Set Projectile Speed(Event Player, 60);
			Event Player.speed = 80;
			Set Move Speed(Event Player, 80);
			Event Player.damage_dealt = 25 + 10 * Global.difficulty;
			Set Max Health(Event Player, 41.667);
			Set Knockback Dealt(Event Player, 140);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), False);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)), 1000, To World,
				Direction and Turn Rate);
			Event Player.damage_received = 130 - 15 * Global.difficulty;
			Set Damage Received(Event Player, Event Player.damage_received);
			If(Event Player.enemy_ID == 23);
				Create Effect(All Players(All Teams), Heal Target Active Effect, Team 1, Event Player, True, Visible To Position and Radius);
				Event Player.trail[False] = Last Created Entity;
				Create In-World Text(All Players(All Teams), Custom String("+"), Event Player, 2, Clip Against Surfaces,
					Visible To Position and String, Color(Yellow), Default Visibility);
				Event Player.trail[True] = Last Text ID;
				Set Healing Dealt(Event Player, 100);
			Else;
				Set Healing Dealt(Event Player, 0);
			End;
			If(Event Player.enemy_ID == 24);
				Start Scaling Barriers(Event Player, 5, True);
				Start Holding Button(Event Player, Button(Secondary Fire));
				Set Max Health(Event Player, 27.778);
				Event Player.damage_dealt = 50 + 25 * Global.difficulty;
			End;
			If(Event Player.enemy_ID == 25);
				Create Effect(All Players(All Teams), Wrecking Ball Adaptive Shield Target Effect, Team 1, Event Player, True,
					Visible To Position and Radius);
				Event Player.trail[False] = Last Created Entity;
				Create In-World Text(All Players(All Teams), Custom String("Ω"), Event Player, 2, Clip Against Surfaces,
					Visible To Position and String, Color(Orange), Default Visibility);
				Event Player.trail[True] = Last Text ID;
				Set Max Health(Event Player, 55.556);
				Set Move Speed(Event Player, 69);
				Event Player.damage_dealt = 37.500 + 15 * Global.difficulty;
			End;
			If(Event Player.enemy_ID == 26);
				Create Effect(All Players(All Teams), Good Aura, Color(Purple), Event Player, True, Visible To Position and Radius);
				Event Player.trail[False] = Last Created Entity;
				Create In-World Text(All Players(All Teams), Custom String("–"), Event Player, 2, Clip Against Surfaces,
					Visible To Position and String, Color(Purple), Default Visibility);
				Event Player.trail[True] = Last Text ID;
				Create Effect(All Players(All Teams), Ring, Color(Purple), Event Player, 8, Visible To Position and Radius);
				Event Player.trail[2] = Last Created Entity;
				Set Max Health(Event Player, 55.556);
			End;
			Set Damage Dealt(Event Player, Event Player.damage_dealt);
	}
}

rule("phase 23 waves")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 23;
		Global.scripted_spawns[4] == False;
		Is True For Any(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element) && Has Spawned(Current Array Element)),
			X Component Of(Position Of(Current Array Element)) > 113) == True;
	}

	actions
	{
		Global.scripted_spawns[4] = True;
		For Global Variable(i4, 0, 4, True);
			Global.enemy_spawn = Array(Vector(137.337, 12.131, -52.051), Vector(133.965, 11.367, -30.112), Vector(126.380, 11.267, -57.126),
				Vector(126.059, 11.191, -16.955))[Global.i4];
			Create Dummy Bot(Hero(Brigitte), Team 1, Global.i4 + 5, Global.enemy_spawn, Up);
			Last Created Entity.enemy_ID = Array(25, 21, 22, Global.difficulty == 3 ? 26 : 21)[Global.i4];
			Wait(0.100, Ignore Condition);
		End;
		Wait Until(Number Of Living Players(Team 1) <= True, 99999);
		Global.objective_complete = True;
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(120.415, 9.368, -39.921);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Junkrat), Custom String(
			"Come out, come out, Lord Wilhelm! The Doctor's got an appointment with ya!"), 1), Array(Hero(Junkrat), Custom String(
			"Aren'tcha happy to see this familiar mug?"), 1), Array(Hero(Reinhardt), Custom String(
			"The Lord was, in fact, not happy to see that familiar mug."), 1), Array(Hero(Mercy), Custom String(
			"My, my, what a reception you've prepared for us, good Lord!"), 1), Array(Hero(Roadhog), Custom String(
			"Weakling guards. My favourite! You nobles sure know how to treat a guest!"), 1), Array(Hero(Reaper),
			Global.sombra_egg == 69 ? Custom String("I need to know where my passport is.") : Custom String(
			"I need to know where the bathroom is."), 1), Array(Hero(Reinhardt), Custom String(
			"Despite the constant mockery, the Lord himself was nowhere to be seen,"), 1), Array(Hero(Reinhardt), Custom String(
			"for his loyal soldiers wanted to keep him safe from the invading terror."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.objective = Custom String("Await the arrival of the Lord.");
		Global.objective_complete = False;
		Start Rule(obj_color, Restart Rule);
		Global.phase = 24;
		Global.enemy_spawn = Array(Vector(97.971, 13.452, -62.684), Vector(79.364, 13.451, -59.840), Vector(93.310, 11.086, -28.600),
			Vector(97.314, 16.182, -20.648), Vector(111.103, 13.061, -55.326), Vector(130.767, 12.611, -58.283), Vector(137.603, 15.285,
			-35.069), Vector(110.655, 15.243, -33.718), Vector(125.910, 11.275, -17.257), Vector(113.100, 11.379, -3.929), Vector(143.906,
			11.377, -11.433));
		For Global Variable(i7, 0, 4, True);
			Global.enemy_ID_sequence = Array(Array(1, 2, 2, 3, 4, 21, 22, 25), Array(Global.difficulty == 3 ? 26 : 1, 2, 3, 6, 5, 21), Array(2,
				Global.difficulty == 3 ? 5 : 2, 3, 5, 21, 23), Array(6, 7, 5, 22, 8, 25))[Global.i7];
			Call Subroutine(spawn_enemies);
			Wait Until(Number Of Living Players(Team 1) <= 3, 99999);
		End;
		Wait Until(Number Of Living Players(Team 1) <= True, 99999);
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(120.415, 9.368, -39.921);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Junkrat), Custom String(
			"Keeping me waiting, Lord Wilhelm? Now that's no way to treat an old friend!"), 1), Array(Hero(Mercy), Custom String(
			"You'd think a man of royal blood would know some basic manners!"), 1), Array(Hero(Junkrat),
			Global.sombra_egg == 69 ? Custom String("Huehuehuehue! Good one, Wicked Witch! Up top!") : Custom String(
			"Ehehehehe! Good one, Wicked Witch! Up top!"), 1), Array(Hero(Mercy), Custom String("Ew, no. Get your hand away from me."),
			2));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		For Global Variable(i7, 0, 5, True);
			Global.enemy_ID_sequence = Array(Array(22, 22, 22, 22, 22, 22, Global.difficulty == 3 ? 26 : 22, 25), Append To Array(Array(4, 6,
				4, 6, 4, 6), Global.difficulty == 3 ? 10 : Empty Array), Append To Array(Array(5, 5, 5, 5, 5, 5),
				Global.difficulty == 3 ? 25 : Empty Array), Append To Array(Array(7, 7, 7, 7, 7, 25),
				Global.difficulty == 3 ? 7 : Empty Array), Append To Array(Array(3, 3, 3, 3, 3, 9), Global.difficulty == 3 ? 10 : Empty Array))
				[Global.i7];
			Call Subroutine(spawn_enemies);
			Wait Until(Number Of Living Players(Team 1) <= (Global.difficulty == 3 ? 2 : 3), 99999);
		End;
		Wait Until(Number Of Living Players(Team 1) <= True, 99999);
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(120.415, 9.368, -39.921);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"Fear mixed with guilt slowly crept into the heart of the old Lord,"), 1), Array(Hero(Reinhardt), Custom String(
			"as he witnessed guard after guard falling victim to the Mad Doctor and his minions."), 1), Array(Hero(Mercy), Custom String(
			"We can hear you, you aged cretin! I am no minion of this one-legged buffoon!"), 1), Array(Hero(Junkrat), Custom String(
			"Half the legs but twice the brains, you high school drop-out."), 1), Array(Hero(Roadhog), Custom String(
			"This is getting boring. On with it, foolish Lord!"), 1), Array(Hero(Reaper), Global.sombra_egg == 69 ? Custom String(
			"Please hurry. I really need to go to brazil.") : Custom String("Please hurry. I really need to pee."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.enemy_ID_sequence = Array(25, 25, Global.difficulty == 3 ? 26 : 22, Global.difficulty == 3 ? 26 : 22,
			Global.difficulty > 0 ? 8 : 21, Global.difficulty > 1 ? 8 : 3, 8, 9);
		Call Subroutine(spawn_enemies);
		Wait Until(Number Of Living Players(Team 1) <= True, 99999);
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(120.415, 9.368, -39.921);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"The heartbroken Lord could take the ghastly onslaught no further."), 1), Array(Hero(Reinhardt), Custom String(
			"With a heavy sigh, he donned his battle gear and drew his weapon."), 1), Array(Hero(Reinhardt), Custom String(
			"All hope may have seemed lost, but alas, there is one hero left to face the terrible villains!"), 1), Array(Hero(Reinhardt),
			Custom String("This is the story of that hero, that knight in shining armour!"), 1), Array(Hero(Reinhardt), Custom String(
			"And that hero has arrived in all his brazen glory!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		Global.phase = 25;
		Destroy Dummy Bot(Team 1, 5);
		Destroy Dummy Bot(Team 1, 6);
		Destroy Dummy Bot(Team 1, 7);
		Destroy Dummy Bot(Team 1, 8);
		Wait(False, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 1, 5, Vector(126.550, 14.750, -15.480), Vector(-0.260, -0.100, -0.930));
		Global.boss = Last Created Entity;
		Last Created Entity.pre_init = True;
		Last Created Entity.boss_ID = 4;
		Wait(0.600, Ignore Condition);
		Global.no_hud = True;
		Set Slow Motion(20);
		Wait(1.500, Ignore Condition);
		Set Slow Motion(100);
		Global.return_cam = True;
		Start Facing(Global.boss, Direction Towards(Eye Position(Global.boss), Eye Position(Global.boss.target)), 1000, To World,
			Direction and Turn Rate);
		Wait(False, Ignore Condition);
		Global.return_cam = False;
		Abort If(Global.dialogue_priority >= 3);
		Global.skip_cutscene_pos = Vector(121.927, 9.586, -48.771);
		Global.dialogue_priority = 2;
		Global.no_hud = False;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.water_you_doin = Players In Slot(False, Team 2).potions[9] + Players In Slot(True, Team 2).potions[9] + Players In Slot(2,
			Team 2).potions[9] + Players In Slot(3, Team 2).potions[9];
		If(Global.sombra_egg == 69);
			Global.active_dialogue_list = Array(Array(Hero(Junkrat), Custom String("Huehuehuehuehue! How nice to see you again, velho amigo!"),
				1), Array(Hero(Junkrat), Custom String("Oh, how I've missed your pompous eyes and well-defined features!"), 1), Array(Hero(
				Reinhardt), Custom String("The Lord, upon hearing the Doctor's peculiar laugh, froze in horror,"), 1), Array(Hero(Reinhardt),
				Custom String("For he knew that the enigma of Adlersbrunn had fallen, and he was thusly doomed."), 1), Array(Hero(Mercy),
				Custom String("What's wrong, Lord Wilhelm? Jaguar got your tongue?"), 1), Array(Hero(Reinhardt), Custom String(
				"The Lord had no response."), 1), Array(Hero(Junkrat), Custom String(
				"Those big ravishing muscles of yours won’t protect you for long, Lord Wilhelm."), 1), Array(Hero(Junkrat), Custom String(
				"Mark my words, tonight, you are going to Brazil!"), 1.500));
		Else If(Global.water_you_doin >= 500);
			Global.active_dialogue_list = Array(Array(Hero(Junkrat), Custom String("Ahahahahaha! How nice to see you again, old friend!"), 1),
				Array(Hero(Junkrat), Custom String("Oh, how I've missed your pompous eyes and well-defined features!"), 1), Array(Hero(
				Reinhardt), Custom String(
				"The Lord questioned the Mad Doctor's choice of words, although he admitted in his heart to feeling rather flattered."), 1),
				Array(Hero(Mercy), Custom String("We can hear you, y'know. Who are you even talking to?"), 1), Array(Hero(Reinhardt),
				Custom String("The Lord refused to elaborate."), 1), Array(Hero(Junkrat), Custom String(
				"Those big ravishing muscles of yours won’t protect you for long, Lord Wilhelm."), 1), Array(Hero(Junkrat), Custom String(
				"Mark my words, tonight-"), 0.200), Array(Hero(Reinhardt), Custom String(
				"Actually, hold that thought. Are those... {0} bottles of water?", Global.water_you_doin), 1), Array(Hero(Roadhog),
				Custom String("{0}, actually. I just drank one while you guys were talking.", Global.water_you_doin - True), 1), Array(Hero(
				Reaper), Custom String("Why did we even buy so much water in the first place?"), 1), Array(Hero(Mercy), Custom String(
				"Good hydration is the backbone of youthful skin, darling."), 1), Array(Hero(Reinhardt), Custom String(
				"Do excuse me if I am encroaching, but might you spare some for this old man?"), 1), Array(Hero(Reinhardt), Custom String(
				"My throat has been terribly parched from all this narrating."), 1), Array(Hero(Junkrat), Custom String("Sure! Why not."), 1));
			Call Subroutine(main_dialogue);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Global.boss, 1);
			Play Effect(All Players(All Teams), Brigitte Repair Pack Impact Sound, Team 2, Global.boss, 200);
			Wait(0.500, Ignore Condition);
			Communicate(Global.boss, Thanks);
			Wait(1.500, Ignore Condition);
			Global.is_dialoguing = True;
			Wait Until(!Global.main_dialogue, 99999);
			Global.is_dialoguing = False;
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("Ahhhh, many thanks. That feels so much better."), 1),
				Array(Hero(Reinhardt), Custom String("Why, I'm not sure how to thank you kind folks."), 1), Array(Hero(Junkrat), Custom String(
				"Hmm. Howzabout you roll over and die for us?"), 1), Array(Hero(Reinhardt), Custom String("I'll pass."), 1), Array(Hero(
				Reinhardt), Custom String("Tell you what, though. Instead, perhaps I could repay you all with a riddle?"), 1), Array(Hero(
				Reaper), Custom String("I don't think you understand how the economy works."), 1), Array(Hero(Mercy), Custom String(
				"Shut it, accounting kid. Lord Wilhelm, you've piqued my interest! Do tell."), 1), Array(Hero(Reinhardt), Custom String(
				"Very well. Listen closely, fellow villains..."), 1), Array(Hero(Reinhardt), Custom String(
				"When the Merchant of darkness first takes her leave, return from whence you came."), 1), Array(Hero(Reinhardt), Custom String(
				"Look around, and you will see that something awaits you."), 1), Array(Hero(Reinhardt), Custom String(
				"But beware, it only speaks to those that it deems as worthy."), 1), Array(Hero(Reinhardt), Custom String(
				"Only those who are truly... Nightmarish..."), 1), Array(Hero(Reinhardt), Custom String("Do you understand, villains?"), 1),
				Array(Hero(Roadhog), Custom String("Sorry, what? I spaced out."), 1), Array(Hero(Reinhardt), Custom String(
				"...Nevermind. That is all I have to say."), 1));
			Call Subroutine(main_dialogue);
			Global.boss.piss_ending = True;
			Global.boss.start_pathfind = True;
			Global.is_dialoguing = True;
			Wait Until(!Global.main_dialogue, 99999);
			Global.is_dialoguing = False;
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"Now if you'll excuse me, I have been called. I must answer."), 1), Array(Hero(Reinhardt), Custom String(
				"Called by nature, I mean. I am literally about to piss myself. That water just passes right through, you know?"), 1), Array(
				Hero(Reaper), Custom String("Me too. Do you know where the bathroom is?"), 1.500));
		Else If(Global.water_you_doin > 10);
			Global.active_dialogue_list = Array(Array(Hero(Junkrat), Custom String("Ahahahahaha! How nice to see you again, old friend!"), 1),
				Array(Hero(Junkrat), Custom String("Oh, how I've missed your pompous eyes and well-defined features!"), 1), Array(Hero(
				Reinhardt), Custom String(
				"The Lord questioned the Mad Doctor's choice of words, although he admitted in his heart to feeling rather flattered."), 1),
				Array(Hero(Mercy), Custom String("We can hear you, y'know. Who are you even talking to?"), 1), Array(Hero(Reinhardt),
				Custom String("The Lord refused to elaborate."), 1), Array(Hero(Junkrat), Custom String(
				"Those big ravishing muscles of yours won’t protect you for long, Lord Wilhelm."), 1), Array(Hero(Junkrat), Custom String(
				"Mark my words, tonight-"), 0.200), Array(Hero(Reinhardt), Custom String(
				"Actually, hold that thought. Are those... {0} bottles of water?", Global.water_you_doin), 1), Array(Hero(Roadhog),
				Custom String("{0}, actually. I just drank one while you guys were talking.", Global.water_you_doin - True), 1), Array(Hero(
				Reaper), Custom String("Why did we even buy so much water in the first place?"), 1), Array(Hero(Mercy), Custom String(
				"Good hydration is the backbone of youthful skin, darling."), 1), Array(Hero(Reinhardt), Custom String(
				"Do excuse me if I am encroaching, but might you spare some for this old man?"), 1), Array(Hero(Reinhardt), Custom String(
				"My throat has been terribly parched from all this narrating."), 1), Array(Hero(Junkrat), Custom String("Sure! Why not."), 1));
			Call Subroutine(main_dialogue);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Global.boss, 1);
			Play Effect(All Players(All Teams), Brigitte Repair Pack Impact Sound, Team 2, Global.boss, 200);
			Wait(0.500, Ignore Condition);
			Communicate(Global.boss, Thanks);
			Wait(1.500, Ignore Condition);
			Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
				"Ahhhh, many thanks. Though frankly, I could do with a little more water."), 1), Array(Hero(Reaper), Custom String(
				"You just finished our entire stock."), 1), Array(Hero(Reinhardt), Custom String("Oh."), 2), Array(Hero(Reinhardt),
				Custom String("Well that's a shame. If only you had {0} more bottles of water on you.", 500 - Global.water_you_doin), 1),
				Array(Hero(Junkrat), Custom String("Yeah if only lmfao. Anyways, back to what I was saying."), 1), Array(Hero(Junkrat),
				Custom String("Mark my words, tonight, I shall have my revenge!"), 1.500));
		Else;
			Global.active_dialogue_list = Array(Array(Hero(Junkrat), Custom String("Ahahahahaha! How nice to see you again, old friend!"), 1),
				Array(Hero(Junkrat), Custom String("Oh, how I've missed your pompous eyes and well-defined features!"), 1), Array(Hero(
				Reinhardt), Custom String(
				"The Lord questioned the Mad Doctor's choice of words, although he admitted in his heart to feeling rather flattered."), 1),
				Array(Hero(Mercy), Custom String("We can hear you, y'know. Who are you even talking to?"), 1), Array(Hero(Reinhardt),
				Custom String("The Lord refused to elaborate."), 1), Array(Hero(Junkrat), Custom String(
				"Those big ravishing muscles of yours won’t protect you for long, Lord Wilhelm."), 1), Array(Hero(Junkrat), Custom String(
				"Mark my words, tonight, I shall have my revenge!"), 1.500));
		End;
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Global.skip_cutscene_pos = Global._extendedGlobalCollection;
		If(Global.water_you_doin >= 500 && Global.sombra_egg < 69);
			Wait(True, Ignore Condition);
			Abort If(Global.dialogue_priority > 2);
			Global.dialogue_priority = 2;
			Global.no_hud = True;
			Global.is_dialoguing = True;
			Wait Until(!Global.main_dialogue, 99999);
			Global.is_dialoguing = False;
			Global.active_dialogue_list = Array(Array(Hero(Sombra), Custom String(
				"Congratulations. You've unlocked the piss ending. Thank you for playing."), 1), Array(Hero(Sombra), Custom String(
				"You can check out the creator's YouTube and Discord at ''bit.ly/therister''."), 1.500), Array(Hero(Sombra), Custom String(
				"Try replaying this gamemode to test out the other scrolls, or tackle other difficulties."), 1), Array(Hero(Sombra),
				Custom String("Who knows, perhaps you might even solve the Lord's enigmatic riddle..."), 1.500));
			Call Subroutine(main_dialogue);
			Global.dialogue_priority = False;
			Declare Team Victory(Team 2);
		Else;
			Global.phase = 26;
			Global.objective = Global.sombra_egg == 69 ? Custom String("Take the Lord to Brazil.") : Custom String(
				"Attain Junkenstein's revenge.");
			Start Rule(obj_color, Restart Rule);
			Global.objective_complete = False;
	}
}

rule("rein init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Event Player.boss_ID == 4;
	}

	actions
	{
		Create Progress Bar In-World Text(All Players(All Teams), Normalized Health(Event Player) * 100, Custom String(
			"The Lord Of Adlersbrunn"), Event Player, 0.500, Clip Against Surfaces, Color(Red), Color(Red), Visible To Position and Values,
			Default Visibility);
		Event Player.effects[False] = Last Text ID;
		Set Move Speed(Event Player, 150);
		Event Player.speed = 80;
		Set Move Speed(Event Player, 80);
		Event Player.rein_throttle_mag = 1;
		Event Player.pre_init = False;
		Event Player.turn_rate = 1000;
		Event Player.damage_dealt = 60 + 20 * Global.difficulty;
		Event Player.damage_received = 130 - 15 * Global.difficulty;
		Set Damage Dealt(Event Player, Event Player.damage_dealt);
		Set Damage Received(Event Player, Event Player.damage_received);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)),
			Event Player.turn_rate, To World, Direction and Turn Rate);
		Wait(True, Ignore Condition);
		Clear Status(Event Player, Phased Out);
		Destroy Effect(Event Player.immune_effect);
		Wait(True, Ignore Condition);
		Abort If(Global.dialogue_priority >= 3);
		Global.dialogue_priority = 2;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"Despite The Doctor’s taunting, the old Lord’s spirit did not falter."), 1), Array(Hero(Reinhardt), Custom String(
			"He mustered every ounce of his courage, such that he would never be shaken by his terrifying adversaries!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Set Status(Event Player, Null, Phased Out, 9999);
		Create Effect(All Players(All Teams), Lúcio Sound Barrier Protected Effect, Team 1, Event Player, True,
			Visible To Position and Radius);
		Event Player.effects[True] = Last Created Entity;
		Create Dummy Bot(Hero(Reinhardt), Team 1, 6, Position Of(Event Player), Facing Direction Of(Event Player));
		Last Created Entity.boss_ID = 4.100;
		Event Player.boss_pet[False] = Last Created Entity;
		Small Message(All Players(Team 2), Custom String("The Lord is now immune to stuns and knockback."));
	}
}

rule("rein pee")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.piss_ending == True;
	}

	actions
	{
		While(Distance Between(Event Player, Vector(111, 11.150, -5.360)) > 0.500);
			Wait(0.500, Ignore Condition);
		End;
		Event Player.start_pathfind = False;
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Vector(127.300, 11, 9.500)), 1, To World,
			Replace existing throttle, None);
		Wait(3, Ignore Condition);
		Stop Throttle In Direction(Event Player);
	}
}

rule("rein damage transfer")
{
	event
	{
		Player Took Damage;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.boss_ID == 4.100;
		Team Of(Attacker) == Team 2;
	}

	actions
	{
		Set Player Health(Global.boss, Health(Global.boss) - Event Damage);
		Set Player Health(Event Player, 99999);
	}
}

rule("rein burn transfer")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.boss_ID == 4.100;
		Has Status(Event Player, Burning) == True;
	}

	actions
	{
		Set Status(Global.boss, Null, Burning, 99999);
		Wait Until(!Has Status(Event Player, Burning), 99999);
		Clear Status(Global.boss, Burning);
	}
}

rule("rein start hammering")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Event Player.boss_ID == 4;
		Event Player.attack == False;
	}

	actions
	{
		If(Distance Between(Event Player, Event Player.target) < 4.500);
			Start Holding Button(Event Player, Button(Primary Fire));
			While(Distance Between(Event Player, Event Player.target) < 5);
				Wait(0.200, Ignore Condition);
			End;
			Stop Holding Button(Event Player, Button(Primary Fire));
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("rein firestrike")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Event Player.boss_ID == 4;
	}

	actions
	{
		Wait(Random Real(2, 4), Ignore Condition);
		Wait Until(!Event Player.attack, 99999);
		Skip If(Has Status(Event Player, Rooted), True);
		Press Button(Event Player, Button(Ability 2));
		Loop If Condition Is True;
	}
}

rule("rein special attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Event Player.boss_ID == 4;
	}

	actions
	{
		Wait(Random Real(5, 7), Ignore Condition);
		Wait Until(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.target), Barriers Do Not Block LOS)
			&& !Has Status(Event Player, Rooted), 99999);
		Event Player.attack = Random Integer(True, Normalized Health(Event Player) < 0.500 ? (Normalized Health(Event Player)
			< 0.250 ? 5 : 4) : 3);
		Wait Until(!Event Player.attack, 15);
		Loop If Condition Is True;
	}
}

rule("dont get stuck on chandelier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.boss_ID == 4;
		Y Component Of(Position Of(Event Player)) > 18;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		If(Distance Between(Vector(118.855, 18.777, -44.782), Event Player) < 4);
			Disable Movement Collision With Environment(Event Player, True);
			Wait Until(Distance Between(Vector(118.855, 18.777, -44.782), Event Player) > 4.500, 99999);
			Enable Movement Collision With Environment(Event Player);
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("rein spawn plot armour")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Event Player.boss_ID == 4;
		Event Player.bright == False;
		Normalized Health(Event Player) < 0.750;
	}

	actions
	{
		Event Player.bright = 1;
		Abort If(Health(Event Player) <= False);
		Abort If(Global.dialogue_priority > True);
		Set Status(Event Player, Null, Rooted, 99999);
		Set Status(First Of(Event Player.boss_pet), Null, Phased Out, 99999);
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Team Of(Event Player), Event Player, True,
			Visible To Position and Radius);
		Event Player.immune_effect = Last Created Entity;
		Global.dialogue_priority = 1;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"In spite of the villains' merciless attacks, still the Lord smiled."), 1), Array(Hero(Reinhardt), Custom String(
			"For he knew, every hero of a story has their plot armour!"), 1.500));
		Call Subroutine(main_dialogue);
		Create Dummy Bot(Hero(Reinhardt), Team 1, 7, Position Of(Event Player), Facing Direction Of(Event Player));
		Last Created Entity.boss_ID = 4.200;
		Event Player.boss_pet[True] = Last Created Entity;
		Create Dummy Bot(Hero(Reinhardt), Team 1, 8, Position Of(Event Player), Facing Direction Of(Event Player));
		Last Created Entity.boss_ID = 4.300;
		Event Player.boss_pet[2] = Last Created Entity;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Roadhog), Custom String("Okay, that's just unfair."), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Clear Status(Event Player, Rooted);
		Clear Status(First Of(Event Player.boss_pet), Phased Out);
		Destroy Effect(Event Player.immune_effect);
	}
}

rule("plot armour shield br0ke")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Array Contains(Array(4.200, 4.300), Event Player.boss_ID) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) > False;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 8);
		Set Invisible(Event Player, All);
		Wait(8, Ignore Condition);
		Set Invisible(Event Player, None);
	}
}

rule("rein nana")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Event Player.boss_ID == 4;
		Event Player.bright == 2;
		Normalized Health(Event Player) < 0.250;
	}

	actions
	{
		Abort If(Health(Event Player) <= False);
		Abort If(Global.dialogue_priority > True);
		Set Status(Event Player, Null, Rooted, 99999);
		Set Status(First Of(Event Player.boss_pet), Null, Phased Out, 99999);
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Team Of(Event Player), Event Player, True,
			Visible To Position and Radius);
		Event Player.immune_effect = Last Created Entity;
		Global.dialogue_priority = 1;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String("The tide of the battle was not in the Lord's favour."),
			1), Array(Hero(Reinhardt), Custom String("With a silent prayer, he called upon the spirit of his fallen ally, the Alchemist,"),
			1), Array(Hero(Reinhardt), Custom String("to grant him one last burst of magnificent strength!"), 1.500));
		Call Subroutine(main_dialogue);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player, 10);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player, 15);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player, 20);
		Event Player.bright = 3;
		Event Player.nano = 9999800320.000;
		Event Player.speed = 120;
		Set Move Speed(Event Player, Event Player.speed);
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Mercy), Custom String(
			"Was zur Hölle, that doesn't even make sense! Talk about a deus ex machina."), 1), Array(Hero(Junkrat), Custom String(
			"Enough theatrics, Lord Wilhelm! Submit to your fate!"), 1), Array(Hero(Junkrat), Global.sombra_egg == 69 ? Custom String(
			"You're no ''hero'' of any ''story''. You're just ''going'' to ''Brazil''!") : Custom String(
			"You're no ''hero'' of any ''story''. This is my story! The great Dr.​ Junkenstein!"), 1), Array(Hero(Junkrat),
			Global.sombra_egg == 69 ? Custom String(
			"This here's the story of Lord Reinhardt Wilhelm's express one-way ticket to São Paulo!") : Custom String(
			"This here's the story of Dr.​ Jamison Junkenstein's fothermuckin' victory!"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Clear Status(Event Player, Rooted);
		Clear Status(First Of(Event Player.boss_pet), Phased Out);
		Destroy Effect(Event Player.immune_effect);
	}
}

rule("rein dead")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Event Player.boss_ID == 4;
		Health(Event Player) <= True;
	}

	actions
	{
		Global.phase = 27;
		Destroy Dummy Bot(Team 1, 6);
		Destroy Dummy Bot(Team 1, 7);
		Destroy Dummy Bot(Team 1, 8);
		Destroy Dummy Bot(Team 1, 9);
		Clear Status(Event Player, Phased Out);
		Stop Facing(Event Player);
		Event Player.nano = Null;
		Destroy All Progress Bar In-World Text;
		While(Event Player.effects != Empty Array);
			Destroy Effect(First Of(Event Player.effects));
			Modify Player Variable(Event Player, effects, Remove From Array By Index, False);
		End;
		Wait(False, Ignore Condition);
		Destroy Dummy Bot(Team 1, True);
		Destroy Dummy Bot(Team 1, 2);
		Destroy Dummy Bot(Team 1, 3);
		Destroy Dummy Bot(Team 1, 4);
		Kill(Event Player, Null);
		Global.last_player_to_die = Event Player;
	}
}

rule("phase 26 spawning event 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 26;
		Count Of(Filtered Array(Players On Hero(Hero(Brigitte), Team 1), Is Alive(Current Array Element))) <= True;
	}

	actions
	{
		Wait(Random Real(3, 6), Abort When False);
		Wait Until(!Has Status(Global.boss, Rooted), 99999);
		Global.enemy_ID_sequence = Array(Random Integer(21, 22), Random Integer(21, 22), Global.difficulty == 3 ? Random Value In Array(
			Array(21, 22, 26)) : Random Integer(21, 22));
		Call Subroutine(spawn_enemies);
		Loop If Condition Is True;
	}
}

rule("rein spawn stand")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Global.phase == 26;
		Event Player.boss_ID == 4;
		Event Player.bright == 1;
		Normalized Health(Event Player) < 0.500;
	}

	actions
	{
		Event Player.bright = 2;
		Abort If(Health(Event Player) <= False);
		Abort If(Global.dialogue_priority > True);
		Set Status(Event Player, Null, Rooted, 99999);
		Set Status(First Of(Event Player.boss_pet), Null, Phased Out, 99999);
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Team Of(Event Player), Event Player, True,
			Visible To Position and Radius);
		Event Player.immune_effect = Last Created Entity;
		Global.dialogue_priority = 1;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reinhardt), Custom String(
			"The more battered the Lord was, the stronger his spirit and valour shined."), 1), Array(Hero(Reinhardt), Custom String(
			"His heroic spirit burned so bright, it could manifest and fight on its own!"), 1.500));
		Call Subroutine(main_dialogue);
		Create Dummy Bot(Hero(Reinhardt), Team 1, 9, Position Of(Event Player), Facing Direction Of(Event Player));
		Last Created Entity.boss_ID = 4.400;
		Event Player.boss_pet[3] = Last Created Entity;
		Global.is_dialoguing = True;
		Wait Until(!Global.main_dialogue, 99999);
		Global.is_dialoguing = False;
		Global.active_dialogue_list = Array(Array(Hero(Reaper), Custom String("...Is that a JoJo reference?"), 1), Array(Hero(Junkrat),
			Custom String("What's a JoJo?"), 1.500));
		Call Subroutine(main_dialogue);
		Global.dialogue_priority = False;
		Clear Status(Event Player, Rooted);
		Clear Status(First Of(Event Player.boss_pet), Phased Out);
		Destroy Effect(Event Player.immune_effect);
	}
}

rule("boss special attack followup")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.attack > False;
	}

	actions
	{
		If(Event Player.boss_ID == 1);
			If(Event Player.attack == 1);
				Set Damage Dealt(Event Player, Event Player.damage_dealt * 2);
				Press Button(Event Player, Button(Ability 1));
				Wait(0.200, Ignore Condition);
				Set Damage Dealt(Event Player, Event Player.damage_dealt);
			Else If(Event Player.attack == 2);
				Event Player.no_jump = True;
				Respawn(Event Player.boss_pet[True]);
				Wait(0.250, Ignore Condition);
				Wait Until(Is On Ground(Event Player), 5);
				Stop Facing(Event Player);
				Set Move Speed(Event Player, False);
				Start Holding Button(Event Player, Button(Crouch));
				Event Player.boss_target_location = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
					+ Facing Direction Of(Event Player) * 8, Null, Event Player, True);
				Wait(True, Ignore Condition);
				Wait Until(!Event Player.has_status, 10);
				Stop Holding Button(Event Player, Button(Crouch));
				Set Status(Event Player, Null, Phased Out, True);
				For Player Variable(Event Player, i, 0, 2, True);
					Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Effect, Team 1, World Vector Of(Up, Event Player,
						Rotation And Translation), 1);
					Wait(False, Ignore Condition);
					Event Player.boss_target_location_2 = Ray Cast Hit Position(Event Player.boss_target_location,
						Event Player.boss_target_location + Direction From Angles(Random Real(0, 360), 0) * 7.500, Null, Event Player, True);
					Teleport(Event Player, Event Player.boss_target_location_2);
					Wait(False, Ignore Condition);
					Set Facing(Event Player, Direction Towards(Event Player.boss_target_location_2, Event Player.boss_target_location), To World);
					While(!Is Using Ability 1(Event Player));
						Wait(False, Ignore Condition);
						Press Button(Event Player, Button(Ability 1));
					End;
					If(Event Player.i < 2);
						Wait(0.200, Ignore Condition);
						Start Rule(genji_pet_strike, Restart Rule);
					End;
					Wait Until(!Is Using Ability 1(Event Player), 1);
				End;
				Wait(0.200, Ignore Condition);
				Set Invisible(Event Player.boss_pet[True], All);
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)),
					Event Player.turn_rate, To World, Direction and Turn Rate);
				Set Move Speed(Event Player, 70);
				Event Player.no_jump = False;
				Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Effect, Team 1, World Vector Of(Up,
					Event Player.boss_pet[True], Rotation And Translation), 1);
				Wait(False, Ignore Condition);
				Teleport(Event Player.boss_pet[True], Global._extendedGlobalCollection);
			Else If(Event Player.attack == 3);
				For Player Variable(Event Player, i, 0, 3, True);
					Cancel Primary Action(First Of(Event Player.boss_pet));
					Set Ability Cooldown(First Of(Event Player.boss_pet), Button(Ability 2), False);
					Press Button(First Of(Event Player.boss_pet), Button(Ability 2));
					Wait(0.200, Abort When False);
					Press Button(Event Player, Button(Primary Fire));
					Wait(0.800, Abort When False);
				End;
				Event Player.attack = False;
			Else If(Event Player.attack == 4);
				Event Player.no_jump = True;
				Wait(0.250, Ignore Condition);
				Wait Until(Is On Ground(Event Player), 5);
				Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
				Wait(0.500, Ignore Condition);
				Press Button(Event Player, Button(Jump));
				Apply Impulse(Event Player, World Vector Of(Vector(False, True, -3), Event Player, Rotation), 15, To World,
					Cancel Contrary Motion);
				Wait(0.050, Abort When False);
				Set Status(Event Player, Null, Frozen, 2);
				Event Player.attack = 4.100;
				Wait(0.100, Ignore Condition);
				Event Player.attack = 4.200;
				Wait(2, Ignore Condition);
				Event Player.no_jump = False;
			End;
		Else If(Event Player.boss_ID == 2);
			If(Event Player.attack == 1);
				Event Player.pos_cache[True] = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player.target), Eye Position(
					Event Player.target) + Direction From Angles(Random Real(0, 360), 0) * 10, Null, Event Player, True));
				Call Subroutine(cowboy_tp);
				Wait(0.700, Ignore Condition);
				While(!Is Firing Secondary(Event Player));
					Wait(False, Ignore Condition);
					Press Button(Event Player, Button(Secondary Fire));
				End;
				Wait(2, Ignore Condition);
				Cancel Primary Action(Event Player);
				Event Player.pos_cache[True] = Random Value In Array(Remove From Array(Global.cowboy_tp_array, Event Player.pos_cache));
				Call Subroutine(cowboy_tp);
			Else If(Event Player.attack == 2);
				Wait(0.100, Ignore Condition);
				For Player Variable(Event Player, i, 0, Random Integer(3, 5), True);
					Press Button(Event Player.boss_pet, Button(Ability 2));
					Wait(0.700, Ignore Condition);
				End;
			Else If(Event Player.attack == 3);
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)), 1000, To World,
					Direction and Turn Rate);
				Set Damage Dealt(Event Player, Event Player.damage_dealt * (Global.difficulty <= 0 ? 0.600 : 1));
				For Player Variable(Event Player, i, 0, Random Integer(True, 3), True);
					If(Is True For Any(Global.cowboy_tp_array, Is In Line of Sight(Current Array Element + Up, Eye Position(Event Player.target),
						Barriers Do Not Block LOS)));
						Event Player.pos_cache[True] = Random Value In Array(Remove From Array(Filtered Array(Global.cowboy_tp_array, Is In Line of Sight(
							Eye Position(Event Player.target), Current Array Element + Up, Barriers Do Not Block LOS)), Event Player.pos_cache));
					Else;
						Event Player.pos_cache[True] = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player.target), Eye Position(
							Event Player.target) + Direction From Angles(Random Real(0, 360), 0) * 10, Null, Event Player, True));
					End;
					Call Subroutine(cowboy_tp);
					Stop Throttle In Direction(Event Player);
					While(!Is Using Ultimate(Event Player));
						Set Ultimate Charge(Event Player, 100);
						Press Button(Event Player, Button(Ultimate));
						Wait(False, Ignore Condition);
					End;
					Wait(Random Real(2.500, 3), Ignore Condition);
					Press Button(Event Player, Button(Primary Fire));
					Wait(False, Ignore Condition);
					Press Button(Event Player, Button(Secondary Fire));
					Wait Until(!Is Using Ultimate(Event Player), 2);
				End;
				Set Damage Dealt(Event Player, Event Player.damage_dealt);
				Event Player.attack = False;
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target) + Down * 0.500 + Vector(
					Random Real(-0.800, 0.800), False, Random Real(-0.800, 0.800))), 1000, To World, Direction and Turn Rate);
				Event Player.pos_cache[True] = Random Value In Array(Remove From Array(Global.cowboy_tp_array, Event Player.pos_cache));
				Call Subroutine(cowboy_tp);
			End;
		Else If(Event Player.boss_ID == 3);
			If(Event Player.attack == 1);
				Event Player.ana_target_friends = False;
				Wait(0.500, Ignore Condition);
				Press Button(Event Player, Button(Ability 1));
				Wait(0.200, Ignore Condition);
				Cancel Primary Action(Event Player);
				Event Player.boss_target_location = Eye Position(Event Player);
				Event Player.boss_target_location_2 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
					+ Facing Direction Of(Event Player) * 100, Null, Null, True);
				Chase Player Variable At Rate(Event Player, boss_target_location, Event Player.boss_target_location_2, 40, Destination and Rate);
				Create Effect(All Players(All Teams), Orb, Color(Violet), Update Every Frame(Event Player.boss_target_location), 0.200,
					Position and Radius);
				Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
				Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Update Every Frame(Event Player.boss_target_location),
					Event Player.boss_target_location + Direction Towards(Event Player.boss_target_location_2, Eye Position(Event Player)) * 2,
					Team 2, Visible To Position and Radius);
				Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
				Wait Until(Event Player.boss_target_location == Event Player.boss_target_location_2, 99999);
				While(Event Player.boss_effects != Empty Array);
					Destroy Effect(First Of(Event Player.boss_effects));
					Modify Player Variable(Event Player, boss_effects, Remove From Array By Index, False);
				End;
				Play Effect(All Players(All Teams), Bad Explosion, Color(Violet), Event Player.boss_target_location_2, 5);
				Event Player.gas_pos = Event Player.boss_target_location_2;
				Event Player.gas_radius = Null;
				Chase Player Variable At Rate(Event Player, gas_radius, 6, 4, Destination and Rate);
				Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Sound, Team 1, Event Player.boss_target_location_2, 200);
				Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Effect, Team 1, Event Player.boss_target_location_2, 1);
				Damage(Players Within Radius(Event Player.boss_target_location_2, 4, Team 2, Surfaces), Event Player, 60);
				Heal(Players Within Radius(Event Player.boss_target_location_2, 4, Team 1, Surfaces), Event Player, 100);
				Wait(0.250, Ignore Condition);
				Event Player.ana_target_friends = True;
			Else If(Event Player.attack == 2);
				Event Player.ana_target_friends = False;
				Wait(0.500, Ignore Condition);
				Press Button(Event Player, Button(Ability 2));
				Wait(True, Ignore Condition);
				Event Player.ana_target_friends = True;
			Else If(Event Player.attack == 3);
				Press Button(Event Player, Button(Ability 1));
				Wait(0.200, Ignore Condition);
				Cancel Primary Action(Event Player);
				Event Player.boss_target_location = Eye Position(Event Player);
				Event Player.boss_target_location_2 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
					+ Facing Direction Of(Event Player) * 100, Null, Null, True);
				Chase Player Variable At Rate(Event Player, boss_target_location, Event Player.boss_target_location_2, 40, Destination and Rate);
				Create Effect(All Players(All Teams), Orb, Color(Aqua), Update Every Frame(Event Player.boss_target_location), 0.200,
					Position and Radius);
				Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
				Create Beam Effect(All Players(All Teams), Echo Focusing Beam, Update Every Frame(Event Player.boss_target_location),
					Event Player.boss_target_location + Direction Towards(Event Player.boss_target_location_2, Eye Position(Event Player)) * 2,
					Team 2, Visible To Position and Radius);
				Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
				Wait Until(Event Player.boss_target_location == Event Player.boss_target_location_2, 99999);
				While(Event Player.boss_effects != Empty Array);
					Destroy Effect(First Of(Event Player.boss_effects));
					Modify Player Variable(Event Player, boss_effects, Remove From Array By Index, False);
				End;
				Play Effect(All Players(All Teams), Bad Explosion, Color(Aqua), Event Player.boss_target_location_2, 5);
				Players Within Radius(Event Player.boss_target_location_2, 5, Team 1, Off).speed_boosted = 8;
				Players Within Radius(Event Player.boss_target_location_2, 5, Team 2, Off).speed_boosted = 4;
				Damage(Players Within Radius(Event Player.boss_target_location_2, 4, Team 2, Surfaces), Event Player, 60);
				Heal(Players Within Radius(Event Player.boss_target_location_2, 4, Team 1, Surfaces), Event Player, 100);
				Wait(0.250, Ignore Condition);
				Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Sound, Team 1, Event Player.boss_target_location_2, 200);
				Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Effect, Team 1, Event Player.boss_target_location_2, 1);
				Wait(0.250, Ignore Condition);
			Else If(Event Player.attack == 4);
				Event Player.ana_target_friends = False;
				Wait(0.500, Ignore Condition);
				Press Button(Event Player, Button(Ability 1));
				Wait(0.200, Ignore Condition);
				Cancel Primary Action(Event Player);
				Event Player.boss_target_location = Eye Position(Event Player);
				Event Player.boss_target_location_2 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
					+ Facing Direction Of(Event Player) * 100, Null, Null, True);
				Chase Player Variable At Rate(Event Player, boss_target_location, Event Player.boss_target_location_2, 40, Destination and Rate);
				Create Effect(All Players(All Teams), Orb, Color(Black), Update Every Frame(Event Player.boss_target_location), 0.200,
					Position and Radius);
				Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
				Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, Update Every Frame(Event Player.boss_target_location),
					Event Player.boss_target_location + Direction Towards(Event Player.boss_target_location_2, Eye Position(Event Player)) * 2,
					Team 2, Visible To Position and Radius);
				Modify Player Variable(Event Player, boss_effects, Append To Array, Last Created Entity);
				Wait Until(Event Player.boss_target_location == Event Player.boss_target_location_2, 99999);
				While(Event Player.boss_effects != Empty Array);
					Destroy Effect(First Of(Event Player.boss_effects));
					Modify Player Variable(Event Player, boss_effects, Remove From Array By Index, False);
				End;
				Play Effect(All Players(All Teams), Bad Explosion, Color(Black), Event Player.boss_target_location_2, 5);
				Players Within Radius(Event Player.boss_target_location_2, 5, Team 2, Surfaces).blind = 4;
				Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Sound, Team 1, Event Player.boss_target_location_2, 200);
				Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Effect, Team 1, Event Player.boss_target_location_2, 1);
				Damage(Players Within Radius(Event Player.boss_target_location_2, 4, Team 2, Surfaces), Event Player, 60);
				Heal(Players Within Radius(Event Player.boss_target_location_2, 4, Team 1, Surfaces), Event Player, 100);
				Wait(0.250, Ignore Condition);
				Event Player.ana_target_friends = True;
			End;
		Else If(Event Player.boss_ID == 4);
			If(Event Player.attack == 1);
				Set Move Speed(Event Player, Event Player.speed * 2);
				While(!Is Using Ability 1(Event Player));
					Press Button(Event Player, Button(Ability 1));
					Wait(False, Ignore Condition);
				End;
				Wait(True, Ignore Condition);
				Wait Until(!Is Using Ability 1(Event Player), 4);
				Set Move Speed(Event Player, Event Player.speed);
			Else If(Event Player.attack == 2);
				Event Player.rein_throttle_mag = False;
				Event Player.no_jump = True;
				Start Holding Button(Event Player, Button(Crouch));
				Set Projectile Speed(Event Player, 150);
				Wait(True, Ignore Condition);
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)) + Vector(Random Real(
					-0.500, 0.500), False, Random Real(-0.500, 0.500)), 1000, To World, Direction and Turn Rate);
				For Player Variable(Event Player, i, 0, 5, True);
					Cancel Primary Action(Event Player);
					Press Button(Event Player, Button(Ability 2));
					Wait(0.250, Ignore Condition);
					Cancel Primary Action(First Of(Event Player.boss_pet));
					Press Button(First Of(Event Player.boss_pet), Button(Ability 2));
					Wait(0.250, Ignore Condition);
					If(Has Status(Event Player, Rooted));
						Break;
					End;
				End;
				Stop Holding Button(Event Player, Button(Crouch));
				Event Player.rein_throttle_mag = True;
				Event Player.no_jump = False;
				Set Projectile Speed(Event Player, 100);
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)),
					Event Player.turn_rate, To World, Direction and Turn Rate);
			Else If(Event Player.attack == 3);
				Event Player.turn_rate = False;
				Cancel Primary Action(Event Player);
				Set Ultimate Charge(Event Player, 100);
				Wait(False, Ignore Condition);
				Press Button(Event Player, Button(Ultimate));
				Apply Impulse(Event Player, Up, 7, To World, Cancel Contrary Motion);
				Wait(0.500, Ignore Condition);
				Wait Until(Is On Ground(Event Player), 10);
				Wait(True, Ignore Condition);
				Event Player.turn_rate = 1000;
			Else If(Event Player.attack == 4);
				Event Player.rein_throttle_mag = False;
				For Player Variable(Event Player, i2, 0, 5, True);
					Event Player.turn_rate = False;
					Set Move Speed(Event Player, 5 * Distance Between(Event Player, Event Player.target));
					Set Gravity(Event Player, Max(50, 200 - 5 * Distance Between(Event Player, Event Player.target)));
					While(!Is Using Ability 1(Event Player));
						Press Button(Event Player, Button(Ability 1));
						Wait(False, Ignore Condition);
					End;
					Play Effect(All Players(All Teams), Winston Jump Pack Landing Effect, Team 1, Position Of(Event Player), 1);
					Apply Impulse(Event Player, Up, 20, To World, Cancel Contrary Motion);
					Wait(0.500, Ignore Condition);
					Wait Until(Is On Ground(Event Player), 10);
					Cancel Primary Action(Event Player);
					Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Team 1, Position Of(Event Player), 1);
					Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Team 1, Position Of(Event Player), 200);
					Event Player.grillager_victims = Filtered Array(Players Within Radius(Event Player, 8, Team 2, Surfaces And Enemy Barriers),
						Is Alive(Current Array Element) && !(Hero Of(Current Array Element) == Hero(Reaper) && Is Using Ability 1(
						Current Array Element)));
					For Player Variable(Event Player, i, 0, Count Of(Event Player.grillager_victims), True);
						Damage(Event Player.grillager_victims[Evaluate Once(Event Player.i)], Event Player, 37.500 * (9 - Distance Between(Event Player,
							Event Player.grillager_victims[Evaluate Once(Event Player.i)])));
						Apply Impulse(Event Player.grillager_victims[Evaluate Once(Event Player.i)], Direction From Angles(Horizontal Angle From Direction(
							Direction Towards(Event Player, Event Player.grillager_victims[Evaluate Once(Event Player.i)])), -37), 18, To World,
							Cancel Contrary Motion);
					End;
					Event Player.turn_rate = 1000;
					Wait(True, Ignore Condition);
					If(Has Status(Event Player, Rooted));
						Break;
					End;
				End;
				Set Move Speed(Event Player, Event Player.speed);
				Set Gravity(Event Player, 100);
				Event Player.rein_throttle_mag = True;
			Else If(Event Player.attack == 5);
				Event Player.rein_throttle_mag = False;
				Event Player.no_jump = True;
				Start Holding Button(Event Player, Button(Crouch));
				Wait(True, Ignore Condition);
				Start Facing(Event Player, Event Player.boss_target_location, 1000, To World, Direction and Turn Rate);
				Start Facing(First Of(Event Player.boss_pet), Event Player.boss_target_location * -1, 1000, To World, Direction and Turn Rate);
				For Player Variable(Event Player, i, 0, 3, 0.100);
					Event Player.boss_target_location = Direction From Angles(Random Real(0, 360), 0);
					Set Ultimate Charge(Event Player, 100);
					Wait(0.100, Ignore Condition);
					Press Button(Event Player, Button(Ultimate));
					If(Has Status(Event Player, Rooted));
						Break;
					End;
				End;
				Wait(0.250, Ignore Condition);
				Stop Holding Button(Event Player, Button(Crouch));
				Event Player.rein_throttle_mag = True;
				Event Player.no_jump = False;
				Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)),
					Event Player.turn_rate, To World, Direction and Turn Rate);
				Start Facing(First Of(Event Player.boss_pet), Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
			End;
		End;
		Event Player.attack = False;
	}
}

rule("all player init")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
		Event Player.burner = Empty Array;
		Wait(0.050, Ignore Condition);
		If(Team Of(Event Player) == Team 1);
			If(Global.dialogue_bot == Event Player);
				Event Player.no_dialogue = True;
				Set Invisible(Event Player, All);
				Set Status(Event Player, Null, Phased Out, 9999);
				Set Status(Event Player, Null, Invincible, 9999);
				Set Gravity(Event Player, False);
				Start Forcing Dummy Bot Name(Event Player, Custom String("Dialogue-chan"));
				Start Forcing Player Position(Event Player, Global.vocalisation ? First Of(Filtered Array(Players On Hero(Global.main_speaker,
					All Teams), !Current Array Element.no_dialogue && Hero Of(Current Array Element) != Hero(Reinhardt))) : Vector(9999, 9999,
					9999), True);
				Event Player.pre_init = True;
				Disable Movement Collision With Players(Event Player);
			Else If(Event Player.boss_ID > 0.900);
				If(Array Contains(Array(1, 2, 3, 4), Event Player.boss_ID));
					Set Max Health(Event Player, Array(Null, 500, 500, 500, 12500)[Event Player.boss_ID] * (Global.difficulty == -1 ? 0.777 : 1));
					Start Forcing Dummy Bot Name(Event Player, Array(Null, Custom String("The Swordsman"), Custom String("The Gunslinger"),
						Custom String("The Alchemist"), Custom String("The Lord of Adlersbrunn"))[Event Player.boss_ID]);
					Set Status(Event Player, Null, Phased Out, 9999);
					If(Event Player.boss_ID == 1);
						While(!Is Using Ability 1(Event Player));
							Press Button(Event Player, Button(Ability 1));
							Wait(False, Ignore Condition);
						End;
						Wait(0.100, Ignore Condition);
						Set Facing(Event Player, World Vector Of(Vector(False, -1, 3), Event Player, Rotation), To World);
						While(!Is Using Ultimate(Event Player));
							Set Ultimate Charge(Event Player, 100);
							Press Button(Event Player, Button(Ultimate));
							Wait(False, Ignore Condition);
						End;
						Big Message(All Players(All Teams), Custom String("The Swordsman"));
					Else If(Event Player.boss_ID == 2);
						Start Throttle In Direction(Event Player, World Vector Of(Right, Event Player, Rotation), 1, To World, Replace existing throttle,
							Direction and Magnitude);
						Wait(0.100, Ignore Condition);
						While(!Is Using Ability 1(Event Player));
							Press Button(Event Player, Button(Ability 1));
							Wait(False, Ignore Condition);
						End;
						While(!Is Using Ultimate(Event Player));
							Set Ultimate Charge(Event Player, 100);
							Press Button(Event Player, Button(Ultimate));
							Wait(False, Ignore Condition);
						End;
						Stop Throttle In Direction(Event Player);
						Big Message(All Players(All Teams), Custom String("The Gunslinger"));
					Else If(Event Player.boss_ID == 3);
						Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Effect, Team 1, Position Of(Event Player), 1);
						Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Sound, Team 1, Position Of(Event Player), 200);
						While(!Is Using Ultimate(Event Player));
							Set Ultimate Charge(Event Player, 100);
							Press Button(Event Player, Button(Ultimate));
							Wait(False, Ignore Condition);
						End;
						Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Team 1, Event Player, True, Visible To Position and Radius);
						Event Player.trail[False] = Last Created Entity;
						Create Effect(All Players(All Teams), Ana Nano Boosted Sound, Team 1, Event Player, 200, Visible To Position and Radius);
						Event Player.trail[True] = Last Created Entity;
						Big Message(All Players(All Teams), Custom String("The Alchemist"));
					Else If(Event Player.boss_ID == 4);
						While(!Is Using Ability 1(Event Player));
							Press Button(Event Player, Button(Ability 1));
							Wait(False, Ignore Condition);
						End;
						Wait(1.200, Ignore Condition);
						Cancel Primary Action(Event Player);
						Set Facing(Event Player, World Vector Of(Vector(False, -0.500, 3), Event Player, Rotation), To World);
						Big Message(All Players(All Teams), Custom String("The Lord Of Adlersbrunn"));
						While(!Is Using Ultimate(Event Player));
							Set Ultimate Charge(Event Player, 100);
							Press Button(Event Player, Button(Ultimate));
							Wait(False, Ignore Condition);
						End;
					End;
					Wait(0.100, Ignore Condition);
					Set Player Health(Event Player, 999999);
				Else If(Event Player.boss_ID == 5);
					Start Forcing Dummy Bot Name(Event Player, Custom String("Brazillager"));
					Set Move Speed(Event Player, 200);
					Set Max Health(Event Player, Absolute Value(2000));
					Set Damage Dealt(Event Player, 100);
					Set Knockback Dealt(Event Player, 300);
					Set Damage Received(Event Player, 70);
					Event Player.pre_init = True;
					Event Player.avoid_enviro = True;
					Event Player.random = Facing Direction Of(Event Player);
					Start Throttle In Direction(Event Player, Event Player.random, 1, To World, Replace existing throttle, Direction and Magnitude);
					Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target) + Down * 0.500)
						+ Vector(Random Real(-0.100, 0.100), False, Random Real(-0.100, 0.100)), 1000, To World, Direction and Turn Rate);
					Chase Player Variable At Rate(Event Player, real, Ultimate Charge Percent(Event Player), 1000, Destination and Rate);
					Create Progress Bar In-World Text(All Players(All Teams), Event Player.real, Custom String("{0} Ultimate Charge",
						Ability Icon String(Hero(Lúcio), Button(Ultimate))), Event Player, 0.400, Do Not Clip, Custom Color(110, 255, 84, 255),
						Custom Color(110, 255, 84, 255), Visible To and Values, Default Visibility);
					Wait(False, Ignore Condition);
					Set Player Health(Event Player, 999999);
				Else;
					Set Damage Dealt(Event Player, Global.boss.damage_dealt);
					Set Status(Event Player, Null, Phased Out, 9999);
					Set Invisible(Event Player, All);
					Event Player.pre_init = True;
					If(Event Player.boss_ID == 1.100);
						Start Forcing Dummy Bot Name(Event Player, Custom String("The Swordsman"));
					Else If(Event Player.boss_ID == 1.200);
						Start Forcing Dummy Bot Name(Event Player, Custom String("Dragon's Breath"));
						Attach Players(Event Player, Global.boss, Vector(False, -1.150, False));
						Start Facing(Event Player, Facing Direction Of(Global.boss), 1000, To World, Direction and Turn Rate);
						Disable Movement Collision With Environment(Event Player, True);
						Start Modifying Hero Voice Lines(Event Player, 1.200, True);
					Else If(Event Player.boss_ID == 1.300);
						Start Forcing Dummy Bot Name(Event Player, Custom String("Dragonstrike"));
						Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.boss.target) + Vector(X Component Of(
							Velocity Of(Global.boss.target)), False, Z Component Of(Velocity Of(Global.boss.target))) * (Distance Between(Eye Position(
							Event Player), Eye Position(Global.boss.target)) / 20)), 1000, To World, Direction and Turn Rate);
						Attach Players(Event Player, Global.boss, Vector(False, False, False));
						Disable Movement Collision With Environment(Event Player, True);
						Start Modifying Hero Voice Lines(Event Player, 1.200, True);
						Set Damage Dealt(Event Player, Global.boss.damage_dealt * 1.500);
					Else If(Event Player.boss_ID == 2.100);
						Start Forcing Dummy Bot Name(Event Player, Custom String("Dynamite"));
						Attach Players(Event Player, Global.boss, Vector(False, False, False));
						Set Projectile Gravity(Event Player, 30);
						Disable Movement Collision With Environment(Event Player, True);
						Start Modifying Hero Voice Lines(Event Player, 0.600, True);
						Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Global.boss.target) + Down * 0.100), 1000,
							To World, Direction and Turn Rate);
					Else If(Event Player.boss_ID == 4.100);
						Start Forcing Dummy Bot Name(Event Player, Custom String("The Lord of Adlersbrunn"));
						Set Max Health(Event Player, Absolute Value(2500));
						Clear Status(Event Player, Phased Out);
						Set Status(Event Player, Null, Unkillable, 9999);
						Attach Players(Event Player, Global.boss, Vector(False, False, False));
						Start Facing(Event Player, Facing Direction Of(Global.boss), 1000, To World, Direction and Turn Rate);
						Set Damage Received(Event Player, Global.boss.damage_received);
						Wait(False, Ignore Condition);
						Set Player Health(Event Player, 99999);
					Else If(Array Contains(Array(4.200, 4.300), Event Player.boss_ID));
						Start Forcing Dummy Bot Name(Event Player, Custom String("Plot Armour"));
						Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 2);
						Set Invisible(Event Player, None);
						Start Scaling Player(Event Player, False, False);
						Start Scaling Barriers(Event Player, 7.500, False);
						Start Forcing Player Position(Event Player, Position Of(Global.boss) + Up + Direction From Angles(Global.pentagram_angle, 0) * (
							Event Player.boss_ID == 4.200 ? 3 : -3), True);
						Start Facing(Event Player, Direction Towards(Position Of(Global.boss) + Up, Position Of(Event Player)), 1000, To World,
							Direction and Turn Rate);
						Start Holding Button(Event Player, Button(Secondary Fire));
					Else If(Event Player.boss_ID == 4.400);
						Start Forcing Dummy Bot Name(Event Player, Custom String("Rammstein"));
						Set Move Speed(Event Player, 400);
						Set Invisible(Event Player, None);
						Start Forcing Player Position(Event Player, World Vector Of(Vector(0.500, 0.500 + 0.300 * Sine From Degrees(
							Global.pentagram_angle), -1), Global.boss, Rotation And Translation), True);
						Start Facing(Event Player, Facing Direction Of(Global.boss), 1000, To World, Direction and Turn Rate);
						Set Damage Dealt(Event Player, Global.boss.damage_dealt * 1.500);
						Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 2);
						Wait(0.100, Ignore Condition);
						Create Effect(All Players(All Teams), Echo Cloning Effect, Team 1, Event Player, 5, Visible To Position and Radius);
					End;
				End;
			End;
		Else;
			If(Is Dummy Bot(Event Player));
				If(Event Player == First Of(Global.merchant));
					Disable Nameplates(Event Player, All Players(All Teams));
					Start Forcing Dummy Bot Name(Event Player, Custom String("The Merchant"));
					Set Status(Event Player, Null, Phased Out, 9999);
					Wait(2, Ignore Condition);
					While(!Is Using Ability 1(Event Player));
						Set Ability Cooldown(Event Player, Button(Ability 1), False);
						Press Button(Event Player, Button(Ability 1));
						Wait(False, Ignore Condition);
					End;
					Wait(0.400, Ignore Condition);
					Teleport(Event Player, Global.phase == 7 ? Vector(3.272, 6.277, -70.538) : (Global.phase >= 16 ? Vector(74.474, 11.190, -110.302)
						: Null));
					Start Camera(All Players(All Teams), World Vector Of(Vector(False, 2, 4), Event Player, Rotation And Translation), Eye Position(
						Event Player), 0);
					Wait Until(!Is Using Ability 1(Event Player), 1);
					Communicate(Event Player, Hello);
					Enable Nameplates(Event Player, All Players(All Teams));
					Wait(2, Ignore Condition);
					Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
						All Players(Team 2), Slot Of(Current Array Element) < 4), Distance Between(Event Player, Current Array Element))))), 500,
						To World, Direction and Turn Rate);
					Global.shop_open = True;
					Stop Camera(All Players(All Teams));
					Wait Until(Global.shop_open, 99999);
					Create Effect(All Players(All Teams), Ring, Color(Purple), World Vector Of(Up, Event Player, Rotation And Translation)
						+ Evaluate Once(Facing Direction Of(Event Player)) * 0.200, 3, Visible To Position and Radius);
					Create In-World Text(Filtered Array(Players Within Radius(Event Player, 3, All Teams, Surfaces),
						!Current Array Element.is_downed && !Current Array Element.shop), Custom String("Press ''{0}'' to shop", Input Binding String(
						Button(Interact))), World Vector Of(Up * 1.500, Event Player, Rotation And Translation), 2, Do Not Clip,
						Visible To Position and String, Color(Purple), Default Visibility);
					Create Dummy Bot(Hero(Moira), Team 1, -1, Last Of(Global.shop_campos) + Down, Direction Towards(Last Of(Global.shop_campos),
						First Of(Global.shop_campos)));
					Event Player.attack = Last Created Entity;
					Start Forcing Dummy Bot Name(Event Player.attack, Custom String("The Merchant"));
					Event Player.attack.no_dialogue = True;
					Event Player.attack.pre_init = True;
					Disable Nameplates(Event Player.attack, All Players(All Teams));
					While(!Is Using Ability 2(Event Player.attack));
						Press Button(Event Player.attack, Button(Ability 2));
						Wait(0.250, Ignore Condition);
					End;
					Start Forcing Player Outlines(Event Player.attack, All Players(All Teams), True, Color(Purple), Default);
					Call Subroutine(shop_ui_setup);
				Else If(Event Player == Global.summoner);
					Event Player.pre_init = True;
					Start Forcing Dummy Bot Name(Event Player, Custom String("The Summoner"));
					Set Status(Event Player, Null, Phased Out, 9999);
					Set Status(Event Player, Null, Burning, 9999);
					Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player, 14);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Position Of(Event Player), 2);
					Wait(0.200, Ignore Condition);
					Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(Orange), Eye Position(Event Player), 200);
					Wait(0.200, Ignore Condition);
					Communicate(Event Player, Hello);
					Skip If(Global.phase > 18, True);
					Big Message(All Players(All Teams), Custom String("The Summoner"));
					Wait(1.100, Ignore Condition);
					Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
						All Players(Team 2), Slot Of(Current Array Element) < 4), Distance Between(Event Player, Current Array Element))))), 500,
						To World, Direction and Turn Rate);
				Else If(Event Player.dead_summoner);
					Set Status(Event Player, Null, Burning, 9999);
					Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(Orange), Eye Position(Event Player), 200);
					Start Forcing Dummy Bot Name(Event Player, Custom String("The Summoner"));
					Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player, 14);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Position Of(Event Player), 2);
					Kill(Event Player, Null);
					Set Status(All Players(Team 2), Null, Invincible, 9999);
					Global.last_player_to_die = Event Player;
				Else If(Event Player.zomnic == 1);
					Set Healing Received(Event Player, 10);
					Event Player.no_jump = True;
					Start Forcing Dummy Bot Name(Event Player, Custom String("Zomnic"));
					Set Move Speed(Event Player, 35);
					Set Max Health(Event Player, 1);
					Add Health Pool To Player(Event Player, Health, 150, True, True);
				Else If(Event Player.zomnic == 2);
					Start Forcing Dummy Bot Name(Event Player, Custom String("Zombardier"));
					Set Ammo(Event Player, False, 9999);
					Start Facing(Event Player, Event Player.target ? Direction Towards(Eye Position(Event Player), World Vector Of(Up,
						Event Player.target, Rotation And Translation)) : Facing Direction Of(Global.junkrat), 1000, To World,
						Direction and Turn Rate);
					Start Scaling Player(Event Player, 1.400, False);
					Start Forcing Player Position(Event Player, Position Of(Global.junkrat) + Vector(2, 0.300 + 0.300 * Sine From Degrees(
						Global.pentagram_angle), 2), True);
					Set Damage Dealt(Event Player, 100);
					Set Max Health(Event Player, 600);
					Start Modifying Hero Voice Lines(Event Player, 0.750, False);
					Wait(0.100, Ignore Condition);
					Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Team 1, Position Of(Event Player), 200);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Event Player, 1);
					Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player, 8);
					Set Player Health(Event Player, 99999);
					Start Holding Button(Event Player, Button(Primary Fire));
				Else If(Event Player == Global.faq_bot);
					Start Forcing Dummy Bot Name(Event Player, Custom String("Zommy, the FAQ Zomnic"));
					Create In-World Text(Players Within Radius(Event Player, 3.500, All Teams, Off), Custom String(
						"Check the WORKSHOP SETTINGS page to change the difficulty or subtitle speed!{0}{1}{0}{0}{2}", Global.newline, Custom String(
						"(Go to ''Show Lobby'', then ''Settings'' in the top right, then ''Workshop Settings'' in the bottom left!)"), Custom String(
						"If the gamemode keeps crashing, try changing the ''Data Center Preference'' to ''Singapore 2''.{0}{1}", Global.newline,
						Custom String(
						"(Go to ''Show Lobby'', then ''Settings'' in the top right, then ''Lobby'' in the top middle and check under ''Match''!)"))),
						Event Player, True, Do Not Clip, Visible To Position and String, Custom Color(145, 227, 153, 255), Default Visibility);
					Wait(True, Ignore Condition);
					Teleport(Event Player, Vector(-12.940, True, -0.410));
					Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
						All Players(Team 2), Slot Of(Current Array Element) < 4), Distance Between(Event Player, Current Array Element))))), 500,
						To World, Direction and Turn Rate);
				End;
			Else;
				Disable Game Mode HUD(Event Player);
				Event Player.scrolls_equip = Empty Array;
				Event Player.damage_received = 100;
				Event Player.damage_dealt = 100;
				Event Player.speed = 100;
				Event Player.scrolls_random = Randomized Array(Array(Null, 1, 2, 3, 4, 5));
				If(Global.difficulty == -1);
					Set Status(Event Player, Null, Unkillable, 99999);
				End;
				Create Effect(Event Player.is_downed ? All Players(All Teams) : Empty Array, Winston Primal Rage Effect, Team 1, Eye Position(
					Event Player), True, Visible To Position and Radius);
				Create Effect(Event Player.is_downed ? All Players(All Teams) : Empty Array, Ring, Event Player.revive_timer >= 8 ? Color(Red)
					: Color(Yellow), Eye Position(Event Player), 5, Visible To Position and Radius);
				Create Progress Bar HUD Text(Event Player.is_downed ? All Players(Team 2) : Empty Array,
					Event Player.revive_timer >= 8 ? Event Player.death_timer * 2.500 : (8 - Event Player.revive_timer) * 12.500,
					Event Player.revive_timer >= 8 ? Custom String("{0} {1} needs to be revived!", Hero Icon String(Hero Of(Event Player)),
					Event Player) : Custom String("Reviving {0} {1}...", Hero Icon String(Hero Of(Event Player)), Event Player), Right, -0.010,
					Event Player.revive_timer >= 8 ? Color(Red) : Color(Yellow), Event Player.revive_timer >= 8 ? Color(Red) : Color(Yellow),
					Visible To Values and Color, Default Visibility);
				Create Icon(Event Player.is_downed ? Filtered Array(All Players(Team 2), !Current Array Element.shop) : Empty Array, Eye Position(
					Event Player), Skull, Visible To and Position, Color(Yellow), True);
				Event Player.potions_max[9] = 200;
			End;
		End;
		If(Hero Of(Event Player) == Hero(Torbjörn) && !Event Player.enemy_ID);
			Teleport(Event Player, Global.compressBakeMatcher);
		End;
		Abort If(Event Player.enemy_ID || Event Player.boss_ID == 4.400 || (Is Dummy Bot(Event Player) && Team Of(Event Player)
			== Team 2));
		Wait Until(Global.phase > 0.500, 99999);
		Create Effect((Has Status(Event Player, Phased Out) || Has Status(Event Player, Invincible)) && !(Hero Of(Event Player) == Hero(
			Reaper) && Is Using Ability 1(Event Player)) && !Is In Spawn Room(Event Player) ? All Players(All Teams) : Empty Array,
			Baptiste Immortality Field Protected Effect, Team Of(Event Player), Event Player, True, Visible To Position and Radius);
		Event Player.immune_effect = Last Created Entity;
	}
}

rule("rein stand charge")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.boss_ID == 4.400;
	}

	actions
	{
		Wait(Event Player.bright >= 3 ? Random Real(1, 2) : Random Real(3, 5), Ignore Condition);
		Wait Until(!Has Status(Global.boss, Rooted), 99999);
		Event Player.target = Random Value In Array(Filtered Array(All Living Players(Team 2), !Is Dummy Bot(Current Array Element)));
		Event Player.boss_target_location = Ray Cast Hit Position(World Vector Of(Up, Event Player.target, Rotation And Translation),
			World Vector Of(Up, Event Player.target, Rotation And Translation) + Direction From Angles(Random Real(0, 360), 0) * 10, Null,
			Event Player, True);
		Event Player.boss_target_location_2 = Ray Cast Hit Position(World Vector Of(Up, Event Player.target, Rotation And Translation),
			World Vector Of(Up, Event Player.target, Rotation And Translation) + Direction Towards(Event Player.boss_target_location,
			World Vector Of(Up, Event Player.target, Rotation And Translation)) * 100, Null, Event Player, True);
		Create Beam Effect(All Players(All Teams), Echo Focusing Beam, Event Player.boss_target_location,
			Event Player.boss_target_location_2, Team 1, Visible To);
		Event Player.boss_effects[False] = Last Created Entity;
		Start Facing(Event Player, Direction Towards(Event Player.boss_target_location, Event Player.boss_target_location_2), 1000,
			To World, Direction and Turn Rate);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Position Of(Event Player), 2);
		Stop Forcing Player Position(Event Player);
		Wait(0.050, Ignore Condition);
		Teleport(Event Player, Global._extendedGlobalCollection);
		Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Sound, Color(Red), Event Player.boss_target_location, 200);
		Wait(0.500, Ignore Condition);
		While(!Is Using Ability 1(Event Player));
			Press Button(Event Player, Button(Ability 1));
			Wait(False, Ignore Condition);
		End;
		Wait(0.500, Ignore Condition);
		Teleport(Event Player, Event Player.boss_target_location);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 2);
		Play Effect(All Players(All Teams), Tracer Recall Reappear Sound, Color(Red), Event Player.boss_target_location, 200);
		Destroy Effect(First Of(Event Player.boss_effects));
		Destroy Effect(Event Player.boss_effects[True]);
		Wait Until(!Is Using Ability 1(Event Player), 5);
		Wait(True, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Position Of(Event Player), 2);
		Wait(False, Ignore Condition);
		Start Forcing Player Position(Event Player, World Vector Of(Vector(0.500, True, -2), Global.boss, Rotation And Translation)
			+ Up * Sine From Degrees(Global.pentagram_angle) * 0.500, True);
		Wait(False, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 2);
		Start Facing(Event Player, Facing Direction Of(Global.boss), 1000, To World, Direction and Turn Rate);
		Loop If(Is Alive(Global.boss));
	}
}

rule("mercy save")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Global.mercy = Event Player;
	}
}

rule("junkrat save")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Global.junkrat = Event Player;
	}
}

rule("reaper save")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Global.reaper = Event Player;
	}
}

rule("mercy heal target")
{
	event
	{
		Player Dealt Healing;
		Team 2;
		Mercy;
	}

	conditions
	{
		Healee != Event Player;
	}

	actions
	{
		Event Player.heal_target = Healee;
	}
}

rule("mercy heal target off")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Weapon(Global.mercy) == 1;
		Is Firing Primary(Event Player) == False;
	}

	actions
	{
		Event Player.heal_target = Null;
	}
}

rule("killing b﻿low")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Roadhog));
			If(Array Contains(Event Player.scrolls_equip, Null));
				Add Health Pool To Player(Event Player, Health, 100, False, False);
			End;
		End;
		If(Hero Of(Event Player) == Hero(Reaper));
			If(Array Contains(Event Player.scrolls_equip, Null));
				Set Ability Cooldown(Event Player, Random Value In Array(Filtered Array(Array(Button(Ability 1), Button(Ability 2)),
					Ability Cooldown(Event Player, Current Array Element))), False);
	}
}

rule("electrify effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.electrify > False;
	}

	actions
	{
		Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Team 1, Event Player, True,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, electrify_effect, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Winston Tesla Cannon Target Sound, Team 1, Event Player, 200,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, electrify_effect, Append To Array, Last Created Entity);
		Chase Player Variable At Rate(Event Player, electrify, False, True, None);
		Set Status(Event Player, Null, Stunned, 99999);
		Wait Until(!Event Player.electrify, 99999);
		Clear Status(Event Player, Stunned);
		Stop Chasing Player Variable(Event Player, electrify);
		While(Event Player.electrify_effect != Empty Array);
			Destroy Effect(First Of(Event Player.electrify_effect));
			Modify Player Variable(Event Player, electrify_effect, Remove From Array By Index, False);
		End;
	}
}

rule("mercy chaos magic")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		(Global.mercy.heal_target == Event Player || Is Using Ultimate(Global.mercy)) == True;
		Array Contains(Global.mercy.scrolls_equip, Null) == True;
	}

	actions
	{
		Heal(Global.mercy, Null, 0.500 * Event Damage * (True + Global.mercy.potions[True] * 0.050));
	}
}

rule("mercy chaos magic 2")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		All;
	}

	conditions
	{
		(Global.mercy.heal_target == Event Player || Is Using Ultimate(Global.mercy)) == True;
		Array Contains(Global.mercy.scrolls_equip, Null) == True;
	}

	actions
	{
		Heal(Global.mercy, Null, 0.500 * Event Damage * (True + Global.mercy.potions[True] * 0.050));
	}
}

rule("mercy mystic transfusion")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Weapon(Event Player) == 1;
		Is Button Held(Event Player, Button(Reload)) == True;
		Array Contains(Event Player.scrolls_equip, 1) == True;
	}

	actions
	{
		Abort If(Health(Event Player) < 60);
		If(Is Firing Primary(Event Player));
			Heal(Event Player.heal_target, Event Player, 100);
			Damage(Event Player, Null, 60);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.heal_target, 1);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Purple), Event Player, 1);
			Play Effect(All Players(All Teams), Brigitte Repair Pack Impact Sound, Team 2, Event Player.heal_target, 200);
	}
}

rule("mercy bewitching grasp")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Weapon(Event Player) == 1;
		Is Button Held(Event Player, Event Player.button_damageboost) == True;
		Event Player.has_status == False;
		Array Contains(Event Player.scrolls_equip, 2) == True;
	}

	actions
	{
		If(Is Firing Primary(Event Player));
			Cancel Primary Action(Event Player);
		End;
		Event Player.is_grasping = True;
		While(Is Button Held(Event Player, Event Player.button_damageboost) && Weapon(Event Player) == 1 && !Is Firing Primary(
			Event Player) && !Event Player.has_status);
			Event Player.damage_target = First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Is In Line of Sight(Eye Position(
				Event Player), Eye Position(Current Array Element), All Barriers Block LOS) && Angle Between Vectors(Facing Direction Of(
				Event Player), Direction Towards(Eye Position(Event Player) - Facing Direction Of(Event Player), Current Array Element))
				< 30 && !Has Status(Current Array Element, Phased Out) && Distance Between(Event Player, Current Array Element) < (
				Is Using Ultimate(Event Player) ? 30 : 15)), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(
				Eye Position(Event Player), Eye Position(Current Array Element)))));
			Damage(Event Player.damage_target, Event Player, 15);
			Wait(0.200, Ignore Condition);
			Damage(Event Player.damage_target, Event Player, 15);
			If(!Is Button Held(Event Player, Event Player.button_damageboost) || Weapon(Event Player) == 2);
				Break;
			End;
			Wait(0.200, Ignore Condition);
		End;
		Event Player.is_grasping = False;
		Event Player.damage_target = Null;
	}
}

rule("mercy bewitching grasp chain")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Phased Out) == False;
		Is Using Ultimate(Global.mercy) == True;
		Global.mercy.damage_target != Null;
		Event Player != Global.mercy.damage_target;
		Array Contains(Global.mercy.scrolls_equip, 2) == True;
	}

	actions
	{
		Create Beam Effect(Distance Between(Event Player, Global.mercy.damage_target) <= 10 && Is Alive(Global.mercy.damage_target)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Global.mercy.damage_target), All Barriers Block LOS)
			? All Players(All Teams) : Empty Array, Moira Grasp Connected Beam, Global.mercy.damage_target, Event Player, Team 2,
			Visible To Position and Radius);
		Event Player.grasp_effect = Last Created Entity;
		While(Is Using Ultimate(Global.mercy) && Is Alive(Event Player) && Global.mercy.damage_target != Null);
			If(Distance Between(Event Player, Global.mercy.damage_target) <= 10 && Is In Line of Sight(Eye Position(Event Player),
				Eye Position(Global.mercy.damage_target), All Barriers Block LOS));
				Damage(Event Player, Global.mercy, 15);
			End;
			Wait(0.200, Ignore Condition);
		End;
		Destroy Effect(Event Player.grasp_effect);
	}
}

rule("mercy flying broomstick")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ability 1(Global.mercy) == True;
		Event Player.broomsticked == False;
		Array Contains(Global.mercy.scrolls_equip, 3) == True;
	}

	actions
	{
		If(Speed Of(Global.mercy) > 10 * (True + Global.mercy.potions[3] * 0.050));
			If(Distance Between(Event Player, Global.mercy) < 5);
				Abort If(Has Status(Event Player, Phased Out));
				Damage(Event Player, Global.mercy, 40);
				Apply Impulse(Event Player, Normalize(Velocity Of(Global.mercy)) + Direction Towards(Global.mercy, Event Player) + Up * 1.200, 20,
					To World, Cancel Contrary Motion);
				Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Team 1, Event Player, 200);
				Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Effect, Team 1, Event Player, 1);
				Event Player.broomsticked = True;
				Wait(2, Ignore Condition);
				Event Player.broomsticked = False;
			End;
		End;
		Wait(Global.wait, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("mercy undying servitude")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Array Contains(Event Player.scrolls_equip, 4) == True;
		Ability Cooldown(Event Player, Event Player.button_rez) == False;
		Is Button Held(Event Player, Event Player.button_rez) == True;
	}

	actions
	{
		Event Player.ubercharge_target = First Of(Sorted Array(Filtered Array(All Living Players(Team 2), Is In Line of Sight(Eye Position(
			Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS) && Is In View Angle(Event Player, Eye Position(
			Current Array Element), 45) && !Is Dummy Bot(Current Array Element) && Distance Between(Event Player, Current Array Element)
			<= 15), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(Event Player), Eye Position(
			Current Array Element)))));
		If(Event Player.ubercharge_target != Null);
			Set Status(Event Player.ubercharge_target, Event Player, Invincible, 8);
			Heal(Event Player.ubercharge_target, Event Player, 99999);
			Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Team 2, Position Of(Event Player.ubercharge_target), 1);
			Play Effect(All Players(All Teams), Lúcio Sound Barrier Cast Sound, Team 1, Position Of(Event Player.ubercharge_target), 200);
			Set Ability Cooldown(Event Player, Event Player.button_rez, 20);
			Create Effect(All Players(All Teams), Ana Nano Boosted Sound, Team 1, Event Player.ubercharge_target, 200,
				Visible To Position and Radius);
			Event Player.ubercharge_effect[False] = Last Created Entity;
			Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Sound, Team 1, Event Player.ubercharge_target, 200,
				Visible To Position and Radius);
			Event Player.ubercharge_effect[True] = Last Created Entity;
			Wait(1.500, Ignore Condition);
			Destroy Effect(First Of(Event Player.ubercharge_effect));
			Wait(6.500, Ignore Condition);
			Destroy Effect(Event Player.ubercharge_effect[True]);
	}
}

rule("mercy hex mania")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Array Contains(Event Player.scrolls_equip, 5) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Players Within Radius(Event Player, 30, Team 1, Surfaces).hex = 8;
		Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Eye Position(Event Player), 30);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Eye Position(Event Player), 30);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Eye Position(Event Player), 40);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Eye Position(Event Player), 50);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Team 1, Eye Position(Event Player), 200);
	}
}

rule("hex effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.hex > False;
	}

	actions
	{
		Press Button(Event Player, Button(Interact));
		Set Status(Event Player, Null, Hacked, 99999);
		Chase Player Variable At Rate(Event Player, hex, False, True, None);
		Event Player.target = Random Value In Array(Remove From Array(All Players(Team 1), Global.dialogue_bot));
		Wait Until(!Event Player.hex, 99999);
		Stop Chasing Player Variable(Event Player, hex);
		Clear Status(Event Player, Hacked);
		If(Array Contains(Array(4.200, 4.300), Event Player.boss_ID) || Event Player.enemy_ID == 24);
			Stop Holding Button(Event Player, Button(Secondary Fire));
			Wait(False, Ignore Condition);
			Start Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("junkrat junkensteins revenge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Is Dead(Event Player) == True;
		Array Contains(Event Player.scrolls_equip, Null) == True;
		Is Using Ability 2(Global.mercy) == False;
	}

	actions
	{
		Wait(True, Abort When False);
		Resurrect(Event Player);
		Wait(False, Ignore Condition);
		Kill(Event Player, Null);
		Loop If Condition Is True;
	}
}

rule("junkrat superconductive")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Global.junkrat) == True;
		Normalized Health(Global.junkrat) < 0.666;
	}

	actions
	{
		If(Array Contains(Global.junkrat.scrolls_equip, 1));
			If(Distance Between(Event Player, Global.junkrat) < 8);
				Damage(Event Player, Global.junkrat, 12);
			End;
		End;
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("junkrat shocking surprise")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Array Contains(Array(Button(Ability 1), Button(Ultimate)), Event Ability) == True;
		Array Contains(Event Player.scrolls_equip, 3) == True;
	}

	actions
	{
		Victim.electrify = 2;
	}
}

rule("junkrat faraday trap")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
		Array Contains(Global.junkrat.scrolls_equip, 4) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Team 2, Event Player, True,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, faraday_effect, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Winston Tesla Cannon Target Sound, Team 2, Event Player, 200,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, faraday_effect, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Ring, Color(White), Event Player, 8, Visible To Position and Radius);
		Modify Player Variable(Event Player, faraday_effect, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Winston Tesla Cannon Beam, Event Player, Players Within Radius(Event Player, 8, Team 1,
			Surfaces)[Total Time Elapsed * 3 % (Count Of(Players Within Radius(Event Player, 8, Team 1, Surfaces)) - True)], Team 2,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, faraday_effect, Append To Array, Last Created Entity);
		While(Has Status(Event Player, Rooted));
			Damage(Filtered Array(Players Within Radius(Event Player, 8, Team 1, Surfaces), !Has Status(Current Array Element, Rooted)),
				Global.junkrat, 50);
			Set Status(Remove From Array(Players Within Radius(Event Player, 8, Team 1, Surfaces), Event Player), Global.junkrat, Rooted,
				0.300);
			Wait(0.200, Ignore Condition);
		End;
		While(Event Player.faraday_effect != Empty Array);
			Destroy Effect(First Of(Event Player.faraday_effect));
			Modify Player Variable(Event Player, faraday_effect, Remove From Array By Index, False);
		End;
	}
}

rule("junkrat zombardier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Array Contains(Event Player.scrolls_equip, 5) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Zenyatta), Team 2, 10, Event Player, Up);
		Last Created Entity.zomnic = 2;
	}
}

rule("zombardier target")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.zomnic == 2;
	}

	actions
	{
		Event Player.target = First Of(Sorted Array(Filtered Array(All Players(Team 1), Is Alive(Current Array Element) && !Has Status(
			Current Array Element, Phased Out) && !Has Status(Current Array Element, Invincible)), Distance Between(Event Player,
			Current Array Element) + 1000 * !Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element),
			Barriers Do Not Block LOS)));
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("zombardier delete")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.zomnic == 2;
	}

	actions
	{
		Wait(20, Ignore Condition);
		Kill(Event Player, Null);
	}
}

rule("roadhog recycling")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Health(Event Player) > 100;
		Array Contains(Event Player.scrolls_equip, 2) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, Event Player.damage_dealt * (Event Player.nano ? 1.500 : 1) * 2);
		Wait Until(!Is Crouching(Event Player) || Health(Event Player) <= 100, 99999);
		Set Damage Dealt(Event Player, Event Player.damage_dealt * (Event Player.nano ? 1.500 : 1));
	}
}

rule("roadhog recycling 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Array Contains(Event Player.scrolls_equip, 2) == True;
		Event Player.ammo_cache != Ammo(Event Player, False);
	}

	actions
	{
		If(Event Player.ammo_cache > Ammo(Event Player, False) && Is Crouching(Event Player) && Health(Event Player) > 100);
			Set Player Health(Event Player, Health(Event Player) - 100);
		End;
		Event Player.ammo_cache = Ammo(Event Player, False);
	}
}

rule("roadhog chain reaction 1")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Array Contains(Event Player.scrolls_equip, 3) == True;
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Wait(1.300, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), False);
	}
}

rule("roadhog roar")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Array Contains(Event Player.scrolls_equip, 4) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(False, Ignore Condition);
		Cancel Primary Action(Event Player);
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
		Heal(Event Player, Event Player, 300);
		If(!Global.roar);
			Create Effect(All Players(All Teams), Winston Primal Rage Effect, Team 2, Event Player, True, Visible To Position and Radius);
			Modify Player Variable(Event Player, roar_effect, Append To Array, Last Created Entity);
			Create Effect(All Players(All Teams), Winston Primal Rage Sound, Team 1, Event Player, 200, Visible To Position and Radius);
			Modify Player Variable(Event Player, roar_effect, Append To Array, Last Created Entity);
			Create Effect(All Players(All Teams), Winston Primal Rage Sound, Team 1, Event Player, 200, Visible To Position and Radius);
			Modify Player Variable(Event Player, roar_effect, Append To Array, Last Created Entity);
		End;
		Global.roar = 5;
		Chase Global Variable At Rate(roar, False, True, None);
		Event Player.damage_received = 40;
		Set Damage Received(Event Player, Event Player.damage_received * (Event Player.nano ? 1.500 : 1));
		All Players(Team 1).target = Event Player;
		Wait Until(!Global.roar, 99999);
		Stop Chasing Global Variable(roar);
		Event Player.damage_received = 100;
		Set Damage Received(Event Player, Event Player.damage_received * (Event Player.nano ? 1.500 : 1));
		While(Event Player.roar_effect != Empty Array);
			Destroy Effect(First Of(Event Player.roar_effect));
			Modify Player Variable(Event Player, roar_effect, Remove From Array By Index, False);
		End;
	}
}

rule("roadhog beware")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Array Contains(Event Player.scrolls_equip, 5) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 0);
		Event Player.speed = 200 + Event Player.potions[3] * 10;
		Set Move Speed(Event Player, Event Player.speed * (True - 0.500 * (Event Player.speed_boosted > False)));
		Wait Until(!Is Using Ultimate(Event Player), 6);
		Set Knockback Dealt(Event Player, 100);
		Event Player.speed = 100 + Event Player.potions[3] * 5;
		Set Move Speed(Event Player, Event Player.speed * (True - 0.500 * (Event Player.speed_boosted > False)));
	}
}

rule("reaper marked for death")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Reaper;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
		Array Contains(Event Player.scrolls_equip, 1) == True;
	}

	actions
	{
		Event Player.death_mark.damage_received = 130 - 15 * Global.difficulty;
		Set Damage Received(Event Player.death_mark, Event Player.death_mark.damage_received * (Event Player.death_mark.nano ? 1.500 : 1));
		Wait(False, Ignore Condition);
		Event Player.death_mark = Victim;
		Victim.damage_received = (130 - 15 * Global.difficulty) * 1.250;
		Set Damage Received(Victim, Victim.damage_received * (Victim.nano ? 1.500 : 1));
	}
}

rule("reaper marked for death bug fix")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Entity Exists(Event Player.death_mark) == False;
	}

	actions
	{
		Event Player.death_mark = Null;
	}
}

rule("reaper the reapers scythe")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Meleeing(Global.reaper) == True;
		Array Contains(Global.reaper.scrolls_equip, 2) == True;
	}

	actions
	{
		While(Distance Between(Event Player, Global.reaper) > 5);
			Wait(Global.wait, Ignore Condition);
		End;
		Abort If(!Is Meleeing(Global.reaper));
		If(Distance Between(Event Player, Global.reaper) <= 5);
			Damage(Event Player, Global.reaper, Distance Between(Event Player, Global.reaper) <= 2.500 ? 45 : 75);
	}
}

rule("reaper the reapers scythe visual")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Is Meleeing(Event Player) == True;
		Array Contains(Event Player.scrolls_equip, 2) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Moira Fade Reappear Sound, Team 1, Eye Position(Event Player), 150);
		Event Player.scythe_swing *= -1;
		Event Player.scythe_length = Null;
		Event Player.scythe_angle = -10;
		Chase Player Variable Over Time(Event Player, scythe_angle, 130, 0.300, None);
		Chase Player Variable Over Time(Event Player, scythe_length, 5, 0.050, None);
		Wait(0.400, Ignore Condition);
		Chase Player Variable Over Time(Event Player, scythe_length, False, 0.100, None);
		Wait(0.100, Ignore Condition);
		Stop Chasing Player Variable(Event Player, scythe_angle);
		Stop Chasing Player Variable(Event Player, scythe_length);
	}
}

rule("reaper vengeful ghost")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Array Contains(Event Player.scrolls_equip, 3) == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 7, Team 1, Surfaces), Event Player, 12);
		Wait(0.200, Ignore Condition);
		Loop If(Is Using Ability 1(Event Player));
	}
}

rule("reaper jumpscare")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Array Contains(Event Player.scrolls_equip, 4) == True;
	}

	actions
	{
		Wait(1.700, Abort When False);
		Set Status(Filtered Array(Players Within Radius(Event Player, 7, Team 1, Surfaces), !Has Status(Current Array Element,
			Phased Out)), Event Player, Frozen, 3);
		Play Effect(All Players(All Teams), Pharah Concussive Blast Effect, Team 2, Eye Position(Event Player), 5);
		Play Effect(All Players(All Teams), Winston Jump Pack Landing Effect, Team 2, Eye Position(Event Player), 5);
		Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Sound, Color(White), Eye Position(Event Player), 200);
	}
}

rule("reaper dance with the reaper")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Array Contains(Event Player.scrolls_equip, 5) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 3);
		Event Player.speed = 300 + Event Player.potions[3] * 15;
		Set Move Speed(Event Player, Event Player.speed * (Event Player.speed_boosted ? 0.500 : 1));
		Wait(3, Ignore Condition);
		Event Player.speed = 100 + Event Player.potions[3] * 5;
		Set Move Speed(Event Player, Event Player.speed * (Event Player.speed_boosted ? 0.500 : 1));
	}
}

rule("cowboy name")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 13;
		Global.line_number == 1;
	}

	actions
	{
		Global.cowboy_name = Custom String("J{0} Mc{1}", String Slice(Custom String("qwertyuiopasdfghjklzxcvbnm"), Random Integer(False,
			21), 4), String Slice(Custom String("qwertyuiopasdfghjklzxcvbnm"), Random Integer(False, 21), 4));
		Wait(False, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("mystery skull visual")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 9;
		Global.sombra_egg < 2;
	}

	actions
	{
		Play Effect(All Players(All Teams), Sombra Hacked Starting Effect, Team 1, Vector(-5.360, 4, -40.780), 1);
		Wait(True, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("mystery skull")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase == 9;
		Global.sombra_egg == False;
		Is True For Any(All Players(Team 2), Distance Between(Current Array Element, Vector(-5.360, 2, -40.780)) < 3.500) == True;
	}

	actions
	{
		Global.sombra_egg = 1;
		If(Global.difficulty == 3);
			Abort If(Global.dialogue_priority > True);
			Global.dialogue_priority = 1;
			Global.is_dialoguing = True;
			Wait Until(!Global.main_dialogue, 99999);
			Global.is_dialoguing = False;
			Global.active_dialogue_list = Array(Array(Hero(Sombra), Custom String("..........................."), 1), Array(Hero(Sombra),
				Custom String("...You are worthy."), 1), Array(Hero(Sombra), Custom String("Witness me bequeath to thee this mystery key."),
				1), Array(Hero(Sombra), Custom String("Ask no more ''Which door is it for?'', for I forgor."), 1.500));
			Call Subroutine(main_dialogue);
			Global.dialogue_priority = False;
			Global.sombra_egg = 2;
			Small Message(All Players(Team 2), Custom String("Obtained mystery key!"));
			Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team 1, Vector(-5.360, 4, -40.780), 200);
			Global.map = Vector(54.450, 11.530, -100.120);
		Else;
			Abort If(Global.dialogue_priority > True);
			Global.dialogue_priority = 1;
			Global.is_dialoguing = True;
			Wait Until(!Global.main_dialogue, 99999);
			Global.is_dialoguing = False;
			Global.active_dialogue_list = Array(Array(Hero(Sombra), Custom String("..........................."), 1), Array(Hero(Sombra),
				Custom String("...I only care for those who dare to bear the despair of a nightmare."), 1), Array(Hero(Sombra), Custom String(
				"You are all not worthy."), 1.500));
			Call Subroutine(main_dialogue);
			Global.dialogue_priority = False;
			Global.sombra_egg = 4;
	}
}

rule("mystery door")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.sombra_egg == 2;
		Global.phase >= 9;
		Global.phase <= 12;
	}

	actions
	{
		Global.mystery_door += 0.100;
		If(Global.mystery_door >= 15);
			Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Sound, Team 1, Global.map, 200);
			Global.mystery_door = False;
		End;
		If(Is True For Any(All Players(Team 2), Distance Between(Current Array Element, Global.map) < 2.300));
			Global.sombra_egg = 3;
			Small Message(All Players(Team 2), Custom String("A clicking sound was heard..."));
			Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Sound, Team 2, Global.map, 200);
			Create Effect(All Players(All Teams), Ring, Color(White), Global.map, 2.400, Visible To Position and Radius);
			Global.skull_effect[True] = Last Created Entity;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("enter mystery door")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.sombra_egg == 3;
		Is True For All(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)), Distance Between(Current Array Element,
			Global.map) < 2.300) == True;
	}

	actions
	{
		Global.sombra_egg = 4;
		Teleport(Filtered Array(All Players(Team 1), Current Array Element.enemy_ID > False), Global.compressBakeMatcher);
		Teleport(All Players(Team 2), Vector(54.930, 11.210, -102.170));
		Create Dummy Bot(Hero(Lúcio), Team 1, -1, Vector(54.440, 11.210, -122.390), Up);
		Last Created Entity.boss_ID = 5;
		Destroy Effect(Global.skull_effect[True]);
		Big Message(All Players(All Teams), Custom String("The Brazillager"));
	}
}

rule("b﻿razillager throttle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	actions
	{
		Event Player.random = Is In Line of Sight(Vector(54.440, 11.210, -122.390), Eye Position(Event Player), Barriers Do Not Block LOS)
			? Direction From Angles(Horizontal Angle From Direction(Direction Towards(Position Of(Event Player), Vector(55, 11.210, -118)))
			+ Random Real(-90, 90), 0) : Direction Towards(Position Of(Event Player), Vector(55, 11.210, -118));
		Wait(Random Real(0.200, 1), Ignore Condition);
		Loop;
	}
}

rule("b﻿razillager jump")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	actions
	{
		Communicate(Event Player, Hello);
		Press Button(Event Player, Button(Jump));
		Press Button(Event Player, Button(Primary Fire));
		Wait(Random Real(1, 3), Ignore Condition);
		Loop;
	}
}

rule("b﻿razillager boop")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Distance Between(Event Player, Event Player.target) < 4;
	}

	actions
	{
		Press Button(Event Player, Button(Secondary Fire));
	}
}

rule("b﻿razillager ult")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) >= 100;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 99999);
		Apply Impulse(Event Player, Up, 15, To World, Cancel Contrary Motion);
		Press Button(Event Player, Button(Ultimate));
		Wait Until(Health Of Type(Event Player, Shields), 10);
		Restart Match;
	}
}

rule("dialogue chan")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.phase > Null;
		(!Entity Exists(Global.dialogue_bot) || !Global.dialogue_bot) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Reinhardt), Team 1, False, Global._extendedGlobalCollection, Up);
		Global.dialogue_bot = Last Created Entity;
	}
}

rule("wait time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.wait != 0.030 * Number Of Living Players(Team 1);
	}

	actions
	{
		Global.wait = 0.030 * Number Of Living Players(Team 1);
	}
}

rule("console check")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Event Player.button_rez == False;
		Magnitude Of(Throttle Of(Event Player)) > 0;
	}

	actions
	{
		If(Is True For All(Array(X Component Of(Throttle Of(Event Player)), Z Component Of(Throttle Of(Event Player))), !(
			Current Array Element % 1)));
			Event Player.button_damageboost = Button(Secondary Fire);
			Event Player.button_rez = Button(Ability 2);
		Else;
			Event Player.button_damageboost = Button(Ability 2);
			Event Player.button_rez = Button(Secondary Fire);
	}
}

rule("restart no players")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		Wait(True, Ignore Condition);
		If(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element)) == Empty Array);
			Restart Match;
	}
}
