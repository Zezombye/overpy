variables {
    global:
        0: A
        1: B
        2: C
        3: D
    player:
        0: A
}
rule ("comparison") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Compare(Global.B, ==, Global.C));
        "false"
        Set Global Variable(A, False);
        "true"
        Set Global Variable(A, True);
        "not B"
        Set Global Variable(A, Compare(Global.B, ==, Null));
        "isGameInProgress()"
        Set Global Variable(A, Is Game In Progress);
        "false"
        Set Global Variable(A, False);
        "should not be optimized"
        Set Global Variable(A, Compare(Hero(Ana), ==, Custom String("azer{0}", Global.A)));
        Set Global Variable(A, Compare(Global.B, !=, Global.C));
        "true"
        Set Global Variable(A, True);
        "false"
        Set Global Variable(A, False);
        Set Global Variable(A, Compare(Global.B, !=, Null));
        "not B"
        Set Global Variable(A, Not(Compare(Global.B, !=, Null)));
        "not isGameInProgress()"
        Set Global Variable(A, Not(Is Game In Progress));
        "true"
        Set Global Variable(A, True);
        "should not be optimized"
        Set Global Variable(A, Compare(Hero(Ana), !=, Custom String("azer{0}", Global.A)));
        Set Global Variable(A, Compare(Global.B, >=, Global.C));
        "true"
        Set Global Variable(A, True);
        "true"
        Set Global Variable(A, True);
        Set Global Variable(A, Compare(Global.B, <=, Global.C));
        "false"
        Set Global Variable(A, False);
        "true"
        Set Global Variable(A, True);
        Set Global Variable(A, Compare(Global.B, >, Global.C));
        "true"
        Set Global Variable(A, True);
        "false"
        Set Global Variable(A, False);
        Set Global Variable(A, Compare(Global.B, <, Global.C));
        "false"
        Set Global Variable(A, False);
        "false"
        Set Global Variable(A, False);
    }
}

rule ("add") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Add(Global.B, Global.C));
        "B+0"
        Set Global Variable(A, Add(Global.B, 0));
        "B*2"
        Set Global Variable(A, Multiply(2, Global.B));
        "3"
        Set Global Variable(A, 3);
        "B+vect(0,0,0)"
        Set Global Variable(A, Add(Global.B, Add(Left, Right)));
        "vect(0,0,0)+B"
        Set Global Variable(A, Add(Add(Left, Right), Global.B));
        Set Global Variable(A, Add(Vector(Global.B, Global.C, Global.D), Vector(True, 2, 3)));
        "vect(5,7,9)"
        Set Global Variable(A, Vector(5, 7, 9));
        "left + right"
        Set Global Variable(A, Add(Left, Right));
        "up"
        Set Global Variable(A, Up);
        "vect(1, -1, -1)"
        Set Global Variable(B, Vector(True, -1, -1));
        "vect(-1, 1, 1)"
        Set Global Variable(C, Vector(-1, True, True));
    }
}

rule ("subtract") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Subtract(Global.B, Global.C));
        Set Global Variable(A, Subtract(Subtract(Global.B, Global.C), Global.D));
        "B"
        Set Global Variable(A, Global.B);
        "B*0"
        Set Global Variable(A, Multiply(Global.B, 0));
        "-1"
        Set Global Variable(A, -1);
        "B"
        Set Global Variable(A, Global.B);
        Set Global Variable(A, Subtract(Vector(Global.B, Global.C, Global.D), Vector(True, 2, 3)));
        "vect(-3,-3,-3)"
        Set Global Variable(A, Vector(-3, -3, -3));
    }
}

rule ("negate") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Multiply(-1, Global.B));
        Set Global Variable(A, Modulo(Multiply(-1, Global.B), Global.C));
        Set Global Variable(A, Multiply(-1, Vector(True, Global.B, -2)));
        "vect(-1,-2,3)"
        Set Global Variable(A, Vector(-1, -2, 3));
        Set Global Variable(A, -1);
        Set Global Variable(A, Multiply(-1, Global.B));
        "B"
        Set Global Variable(A, Multiply(1, Global.B));
        "1"
        Set Global Variable(A, 1);
        "B"
        Set Global Variable(A, Multiply(1, Global.B));
        "-1"
        Set Global Variable(A, -1);
        "-B"
        Set Global Variable(A, Multiply(-1, Global.B));
        "0.01"
        Set Global Variable(A, 0.01);
        Set Global Variable(A, Add(Global.B, Multiply(-1, Global.C)));
        Set Global Variable(A, Not(Multiply(-1, Global.C)));
        Set Global Variable(A, Multiply(Global.B, Multiply(-1, Global.C)));
    }
}

rule ("multiply") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Multiply(Global.B, Global.C));
        "B*1"
        Set Global Variable(A, Multiply(Global.B, 1));
        "B**2"
        Set Global Variable(A, Multiply(Global.B, Global.B));
        "B*0"
        Set Global Variable(A, Multiply(Global.B, 0));
        "0"
        Set Global Variable(A, Null);
        "6"
        Set Global Variable(A, 6);
        "vect(6,8,10)"
        Set Global Variable(A, Vector(6, 8, 10));
        "vect(6,8,10)"
        Set Global Variable(A, Vector(6, 8, 10));
        "vect(4,10,18)"
        Set Global Variable(A, Vector(4, 10, 18));
    }
}

rule ("divide") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Divide(Global.B, Global.C));
        "B/1"
        Set Global Variable(A, Divide(Global.B, 1));
        "B/0"
        Set Global Variable(A, Divide(Global.B, 0));
        "0/B"
        Set Global Variable(A, Divide(0, Global.B));
        "0.5"
        Set Global Variable(A, 0.5);
        Set Global Variable(A, Divide(-3, Global.B));
        "vect(3,1.5,1)"
        Set Global Variable(A, Vector(3, 1.5, True));
        "vect(0.5,1,1.5)"
        Set Global Variable(A, Vector(0.5, True, 1.5));
    }
}

rule ("modulo") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Modulo(Global.B, Global.C));
        "0"
        Set Global Variable(A, Null);
        "0"
        Set Global Variable(A, Null);
        "0"
        Set Global Variable(A, Null);
        "1"
        Set Global Variable(A, 1);
        "-1"
        Set Global Variable(A, -1);
        "-1"
        Set Global Variable(A, -1);
        "1"
        Set Global Variable(A, 1);
    }
}

rule ("power") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Raise To Power(Global.B, Global.C));
        Set Global Variable(A, Raise To Power(Global.B, Raise To Power(Global.C, Global.D)));
        "B"
        Set Global Variable(A, Global.B);
        "0"
        Set Global Variable(A, Null);
        "1"
        Set Global Variable(A, 1);
        "0"
        Set Global Variable(A, Raise To Power(-1, Global.B));
        "8"
        Set Global Variable(A, 8);
        "0"
        Set Global Variable(A, Null);
    }
}

rule ("assignment") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Set Global Variable(A, Global.B);
        Set Global Variable At Index(A, False, Global.B);
        Set Player Variable(Event Player, A, Global.B);
        Set Player Variable At Index(Event Player, A, False, Global.B);
        Modify Global Variable(A, Add, Global.B);
        Modify Player Variable(Event Player, A, Add, Global.B);
        Modify Global Variable(A, Subtract, Global.B);
        Modify Global Variable(A, Multiply, Global.B);
        Modify Global Variable(A, Divide, Global.B);
        Modify Global Variable(A, Modulo, Global.B);
        Modify Global Variable(A, Raise To Power, Global.B);
        Modify Global Variable(A, Max, Global.B);
        Modify Global Variable(A, Min, Global.B);
        Modify Global Variable(A, Add, True);
        Modify Global Variable(A, Subtract, True);
    }
}

rule ("and") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, And(Global.A, Global.B));
        "B and true"
        Set Global Variable(A, And(Global.B, True));
        "B and false"
        Set Global Variable(A, And(Global.B, False));
        "B"
        Set Global Variable(A, Global.B);
        "B and not B"
        Set Global Variable(A, And(Global.B, Not(Global.B)));
        "not (B or C)"
        Set Global Variable(A, Not(Or(Global.B, Global.C)));
    }
}

rule ("or") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Or(Global.A, Global.B));
        "B"
        Set Global Variable(A, Global.B);
        "A or true"
        Set Global Variable(A, Or(Global.A, True));
        "B or false"
        Set Global Variable(A, Or(Global.B, False));
        "B or not B"
        Set Global Variable(A, Or(Global.B, Not(Global.B)));
        "not (B and C)"
        Set Global Variable(A, Not(And(Global.B, Global.C)));
    }
}

rule ("not") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Not(Global.B));
        "B"
        Set Global Variable(A, Not(Not(Global.B)));
        "false"
        Set Global Variable(A, False);
        "true"
        Set Global Variable(A, True);
        Set Global Variable(A, Multiply(3, Not(Global.B)));
    }
}

rule ("in") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Array Contains(Global.B, Global.A));
        "true"
        Set Global Variable(A, True);
        Set Global Variable(A, Compare(3, ==, Global.A));
        Set Global Variable(A, Not(Array Contains(Global.C, Global.B)));
    }
}

rule ("ternaries") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, If-Then-Else(Global.C, Global.B, Global.D));
        "B"
        Set Global Variable(A, Global.B);
        "D"
        Set Global Variable(A, Global.D);
        "B"
        Set Global Variable(A, Global.B);
        "if-then-else(C, D, B)"
        Set Global Variable(A, If-Then-Else(Global.C, Global.D, Global.B));
        "D"
        Set Global Variable(A, Global.D);
    }
}

rule ("handling random values") {
    event {
        Ongoing - Global;
    }
    actions {
        Modify Player Variable(Random Value In Array(All Players(All Teams)), A, Add, True);
        Modify Player Variable(Random Value In Array(All Players(All Teams)), A, Max, Global.B);
    }
}

