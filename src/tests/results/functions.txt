variables {
    global:
        0: A
        1: B
        2: C
        3: D
        4: E
        23: X
        24: Y
        25: Z
    player:
        1: B
}
rule ("function") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Set Global Variable(A, Ray Cast Hit Player(Global.B, Global.C, Global.D, Global.E, True));
        Set Global Variable(A, Ray Cast Hit Position(Global.B, Global.C, Global.D, Global.E, False));
        Set Global Variable(A, Ray Cast Hit Normal(Global.B, Global.C, Global.D, Global.E, True));
        Set Global Variable(A, Divide(Divide(Multiply(Multiply(-3, 999999999999), 999999999999), 999999999999), 10));
        Set Global Variable(A, String Slice(Global.B, 2, 4));
        Chase Player Variable Over Time(Event Player, B, 9999, 3, Destination and Duration);
        Chase Player Variable Over Time(Event Player, B, 9999, 3, Destination and Duration);
        Chase Player Variable At Rate(Event Player, B, 9999, 3, Destination and Rate);
        Chase Global Variable Over Time(B, 9999, True, Destination and Duration);
        Chase Global Variable At Rate(B, 99999, True, Destination and Rate);
        Create HUD Text(All Players(All Teams), Custom String("test"), Null, Null, Left, True, Color(Red), Null, Null, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("test"), Left, True, Null, Null, Color(Red), Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Custom String("test"), Null, Left, True, Null, Color(Red), Null, Visible To and String, Visible Always);
        Create HUD Text(Null, Custom String("azer"), Custom String("dqsf"), Custom String("fdsq"), Left, -1, Color(Red), Color(White), Color(Yellow), Visible To Sort Order and String, Visible Never);
        Wait(False, Ignore Condition);
        Set Global Variable(A, Closest Player To(Global.B, Global.C));
        Set Global Variable(A, First Of(Sorted Array(Filtered Array(All Living Players(Global.C), Has Spawned(Current Array Element)), Distance Between(Current Array Element, Global.B))));
        Set Global Variable(A, First Of(Sorted Array(Filtered Array(All Living Players(Global.C), Has Spawned(Current Array Element)), Distance Between(Current Array Element, Global.B))));
        Set Global Variable(A, Farthest Player From(Global.B, Global.C));
        Set Global Variable(A, First Of(Sorted Array(Filtered Array(All Living Players(Global.C), Has Spawned(Current Array Element)), Multiply(-1, Distance Between(Current Array Element, Global.B)))));
        Set Global Variable(A, First Of(Sorted Array(Filtered Array(All Living Players(Global.C), Has Spawned(Current Array Element)), Multiply(-1, Distance Between(Current Array Element, Global.B)))));
        Set Global Variable(A, Player Closest To Reticle(Global.A, Global.B));
        Set Global Variable(A, First Of(Sorted Array(Filtered Array(All Living Players(Global.B), And(Has Spawned(Current Array Element), Compare(Current Array Element, !=, Global.A))), Angle Between Vectors(Facing Direction Of(Global.A), Subtract(Current Array Element, Eye Position(Global.A))))));
        Set Global Variable(A, First Of(Sorted Array(Filtered Array(All Living Players(Global.B), And(Has Spawned(Current Array Element), Compare(Current Array Element, !=, Global.A))), Angle Between Vectors(Facing Direction Of(Global.A), Subtract(Current Array Element, Eye Position(Global.A))))));
        Set Global Variable(A, Compare(Angle Between Vectors(Global.B, Random Value In Array(Global.C)), <=, Arcsine In Degrees(Divide(Random Value In Array(Global.E), Distance Between(Global.B, Global.D)))));
        "Color.YELLOW"
        Set Global Variable(A, Color(Yellow));
    }
}

rule ("beams") {
    event {
        Ongoing - Global;
    }
    actions {
        Create Beam Effect(Global.A, Grapple Beam, Global.B, Global.C, Null, Visible To Position and Radius);
        Create Beam Effect(Global.A, Grapple Beam, Vector(Global.A, Global.B, Global.C), Vector(Global.A, Global.D, Global.C), Null, Visible To Position and Radius);
        Create Beam Effect(Global.A, Grapple Beam, Vector(Global.Z, Global.B, Global.C), Vector(Global.A, Global.D, Global.C), Null, Visible To Position and Radius);
        Create Beam Effect(Global.A, Good Beam, Vector(Global.A, Global.B, Global.C), Vector(Global.A, Global.D, Global.C), Color(White), Visible To Position and Radius);
        Create Beam Effect(Global.A, Good Beam, Vector(Global.A, Global.B, Global.C), Vector(Global.A, Global.D, Global.C), Color(White), Visible To Position and Radius);
        Create Beam Effect(Global.A, Bad Beam, Vector(Global.A, Global.B, Global.C), Vector(Global.A, Global.D, Global.C), Color(White), Visible To Position and Radius);
        Create Beam Effect(Global.A, Bad Beam, Vector(Global.A, Global.B, Global.C), Vector(Global.A, Global.D, Global.Z), Color(White), Visible To Position and Radius);
    }
}

rule ("vectors") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Vector(Global.B, Global.C, Global.D));
        Set Global Variable(A, X Component Of(Global.B));
        "B"
        Set Global Variable(A, Global.B);
        "C"
        Set Global Variable(A, Global.C);
        "D"
        Set Global Variable(A, Global.D);
        "Vector.UP"
        Set Global Variable(A, Up);
    }
}

rule ("optimizations with literals") {
    event {
        Ongoing - Global;
    }
    actions {
        "4"
        Modify Global Variable(A, Append To Array, 4);
        "3"
        Modify Global Variable(A, Append To Array, 3);
        "4"
        Modify Global Variable(A, Append To Array, 4);
        "3"
        Modify Global Variable(A, Append To Array, 3);
        "5"
        Modify Global Variable(A, Append To Array, 5);
        "1.012"
        Modify Global Variable(A, Append To Array, 1.012195761452095);
        "3.1415"
        Modify Global Variable(A, Append To Array, 3.141592653589793);
        "113.633"
        Modify Global Variable(A, Append To Array, 0.034597891672104);
        "-0.302"
        Modify Global Variable(A, Append To Array, -0.304692654015397);
        "36.865"
        Modify Global Variable(A, Append To Array, 0.011231213088677);
        "1.584"
        Modify Global Variable(A, Append To Array, 1.583839065425504);
        "140.057"
        Modify Global Variable(A, Append To Array, 0.042663877670413);
        "0.996"
        Modify Global Variable(A, Append To Array, 0.996090498505521);
        "-0.934"
        Modify Global Variable(A, Append To Array, -0.933580426497201);
        "vect(3951, -3165, -6406)"
        Modify Global Variable(A, Append To Array, Vector(3951, -3165, -6406));
        "vect(-0.182, 0.273, 0.945)"
        Modify Global Variable(A, Append To Array, Vector(-0.182127177225397, 0.273190765838096, 0.944561536786621));
        "1014.740"
        Modify Global Variable(A, Append To Array, 1014.7403608805555);
        "43498"
        Modify Global Variable(A, Append To Array, 43498);
        "Team 2"
        Modify Global Variable(A, Append To Array, Team 2);
        "Team 1"
        Modify Global Variable(A, Append To Array, Team 1);
        "All Teams"
        Modify Global Variable(A, Append To Array, All Teams);
        "0"
        Modify Global Variable(A, Append To Array, Null);
        "3"
        Modify Global Variable(A, Append To Array, 3);
        "4"
        Modify Global Variable(A, Append To Array, 4);
        "13.287"
        Modify Global Variable(A, Append To Array, 13.28771237954945);
        "9.210"
        Modify Global Variable(A, Append To Array, 9.210340371976184);
        "32"
        Modify Global Variable(A, Append To Array, 32);
        "-31"
        Modify Global Variable(A, Append To Array, -31);
        "vect(-0.017, 0.433, 0.901)"
        Modify Global Variable(A, Append To Array, Vector(-0.017380968387966, 0.433187212130861, 0.901136361037656));
        "0.704"
        Modify Global Variable(A, Append To Array, 0.703595051234721);
        "-0.218"
        Modify Global Variable(A, Append To Array, -0.218143241396542);
        "0"
        Modify Global Variable(A, Append To Array, Null);
        "9.656"
        Modify Global Variable(A, Append To Array, 9.655568341635826);
        "1.364"
        Modify Global Variable(A, Append To Array, 1.363873635438722);
        "-36.648"
        Modify Global Variable(A, Append To Array, -36.64847484990379);
        "vect(342, -88, 68)"
        Modify Global Variable(A, Append To Array, Vector(342, -88, 68));
    }
}

rule ("optimizations for function combinations") {
    event {
        Ongoing - Global;
    }
    actions {
        "directionTowards(x, y)"
        Set Global Variable(A, Direction Towards(Global.X, Global.Y));
        "is dead(B)"
        Set Global Variable(A, Is Dead(Global.B));
        "is alive(B)"
        Set Global Variable(A, Is Alive(Global.B));
        "getPlayersOnHero(C, B)"
        Set Global Variable(A, Players On Hero(Global.C, Global.B));
        "getPlayersOnObjective(B)"
        Set Global Variable(A, All Players On Objective(Global.B));
        "getPlayersNotOnObjective(B)"
        Set Global Variable(A, All Players Not On Objective(Global.B));
        "getLivingPlayers(B)"
        Set Global Variable(A, All Living Players(Global.B));
        "getDeadPlayers(B)"
        Set Global Variable(A, All Dead Players(Global.B));
        "getNumberOfPlayers(B)"
        Set Global Variable(A, Number Of Players(Global.B));
        "getNumberOfPlayersOnObjective(B)"
        Set Global Variable(A, Number Of Players On Objective(Global.B));
        "getNumberOfHeroes(B, C)"
        Set Global Variable(A, Number Of Heroes(Global.B, Global.C));
        "getNumberOfLivingPlayers(B)"
        Set Global Variable(A, Number Of Living Players(Global.B));
        "getNumberOfDeadPlayers(B)"
        Set Global Variable(A, Number Of Dead Players(Global.B));
    }
}

rule ("default arguments") {
    event {
        Ongoing - Global;
    }
    actions {
        Create HUD Text(All Players(All Teams), 1234, Null, Null, Left, False, Color(White), Null, Null, Visible To Sort Order String and Color, Default Visibility);
        Create HUD Text(Global.A, 1234, Null, Null, Left, False, Color(White), Null, Null, Visible To Sort Order String and Color, Default Visibility);
        Create HUD Text(Global.A, 1234, Null, Null, Left, False, Color(White), Null, Null, Visible To Sort Order String and Color, Default Visibility);
        Create HUD Text(Global.A, 1234, Null, Null, Left, False, Color(White), Null, Null, Visible To Sort Order String and Color, Default Visibility);
        Wait(False, Ignore Condition);
        Start Facing(Global.C, Vector(True, 2, 3), 999999999999, To World, Direction and Turn Rate);
        Start Facing(Global.C, Vector(True, 2, 3), 999999999999, To Player, Direction and Turn Rate);
        Set Global Variable(D, Ammo(Global.D, False));
        Set Global Variable(E, Array Slice(Global.E, 5, 999999999999));
        Set Global Variable(E, Array Slice(Global.E, 5, 7));
    }
}

