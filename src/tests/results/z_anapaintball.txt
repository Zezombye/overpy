settings
{
	main
	{
		Description: "Always import the code → 1DMTZ ←\nNEVER SAVE AS PRESET!\n\nTrain your aim while having fun!\nEarn medals, honor players, get a nuke...\nThe best Ana Paintball mode since 2019!\n\nDonate ≫ ko-fi.com/jinkofi\nDiscord ≫ jinko.dev/discord\nTikTok ≫ @Jinko_OW\nFull mode details ≫ www.jinko.dev/anapb"
		Mode Name: "｢︻デ≡一一 ANA PAINTBALL by Jinko"
	}
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Max FFA Players: 8
		Max Spectators: 12
		Return To Lobby: Never
		Swap Teams After Match: No
	}
	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Black Forest Winter
				Blizzard World 972777519512068194
				Château Guillard
				Dorado 972777519512068153
				Ecopoint: Antarctica
				Eichenwalde 972777519512068154
				Hollywood 972777519512068154
				Kanezaka
				Lijiang Control Center
				Malevento
				Petra
			}
		}
		General
		{
			Allow Hero Switching: Off
			Enemy Health Bars: Off
			Game Mode Start: Immediately
			Kill Cam: Off
			Respawn Time Scalar: 0%
			Score To Win: 30
			Self Initiated Respawn: Off
			Spawn Health Packs: Disabled
		}
	}
	heroes
	{
		General
		{
			Infinite Ultimate Duration: On
			Ultimate Generation: 10%
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 0%
			Ana
			{
				Biotic Grenade: Off
				Sleep Dart Cooldown Time: 20%
				Ultimate Generation - Combat Nano Boost: 0%
				Ultimate Generation - Passive Nano Boost: 0%
			}
			Bastion
			{
				Infinite Ultimate Duration: On
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
			}
			enabled heroes
			{
				Ana
			}
		}
	}
	extensions
	{
		Buff Status Effects
		Buff and Debuff Sounds
		Energy Explosion Effects
		Explosion Sounds
		Debuff Status Effects
		Projectiles
	}
}
variables {
    global:
        0: ONFIRE_STREAK
        1: RAMPAGE_STREAK
        2: NUCLEAR_STREAK
        3: NANO_SCORE
        4: LONGSHOT_DISTANCE
        5: CUSTOM_RESPAWN_TIME
        6: NIGHT_MAPS
        7: JUMP_PAD_COLOR
        8: DEATH_PLANE_BOT_MAPS
        10: JumpPadPos
        11: JumpPadPower
        12: JumpPadSize
        13: JumpPadFx
        14: LongestShotPlayer
        15: LongestShotValue
        16: BestKillstreakPlayer
        17: BestKillstreakValue
        18: BestSleepAccuracyPlayer
        19: BestSleepAccuracyValue
        20: BestNoscopeAccuracyPlayer
        21: BestNoscopeAccuracyValue
        22: BestScopedAccuracyValue
        23: BestScopedAccuracyPlayer
        24: MatchEnded
        25: Winner
        26: FinalVictim
        27: LongshotWin
        28: i
        29: FirstBlood
        30: FirstSleep
        31: RespawnHigherDistance
        32: RespawnLowerDistance
        33: RespawnFailsafeDistance
        34: SpawnPointSettings
        35: PlayzoneCenter
        36: PlayzoneRadius
        37: OutOfBoundBot
        38: NanoNukeBot
        39: PetraPunches
        40: TempAIBotBeingRemoved
        41: TempAIBotBeingRemovedName
        42: RevertKillsToAIBotsEnabled
        43: TempLeavingAIBotSlot
        44: AIBotSlots
        45: NukeExplodeFxPos
        46: NukeCamHorizontalDist
        47: Camdist
        48: NukePos
        49: NukeImpactPos
        50: NukeCamPos
        51: NukeCamShakeX
        52: NukeCamShakeY
        53: NukeCamShakeZ
        54: Rainbow
        55: BotName
        58: SlowMo
    player:
        0: A
        1: ClosestPadIndex
        2: LongshotCount
        3: LongestLongshot
        4: SleepShots
        5: SleepHits
        6: SleepAccuracy
        7: NoscopeShots
        8: NoscopeHits
        9: NoscopeAccuracy
        10: ScopedShots
        11: L
        12: ScopedHits
        13: ScopedAccuracy
        14: Jumps
        15: PerfectQuickscopes
        16: ComebackCount
        17: Executes
        18: StolenKills
        19: DemotedPlayers
        20: Deaths
        21: ElimsBeforeQS
        22: KillStreak
        23: KillStreakBeforeDeath
        24: DemotedEffect
        25: RampageVFX
        26: RampageSFX
        27: IsOnFire
        28: IsOnRampage
        29: IsNuclear
        31: DisplayMedal
        32: SystemMessages
        33: MedalQueue
        34: MultiKillCount
        35: QuadFeedTimes
        36: EarnedCollateral
        37: Sandman
        38: PunchDrunk
        39: AlivePlayers
        40: SpawnPointsNotInLOS
        41: SpawnPointsFarEnoughFromPlayers
        42: ChosenSpawnPoint
        43: AIBotKillsPerSlot
        44: HonorQueue
        45: HonorBar
        46: HonorTarget
        47: RaycastLastHitPlayer
        48: RaycastLastHitPos
        49: NukeEffects
        51: SysMsgCount
        52: FixMovementBug
        53: IsPlayer
        54: IsAIBot
        55: LastSleptBy
        56: SleepUsedAndDied
        57: SleepLock
        58: SleepsOnground
        59: DemotionVictim
        60: ShutdownVictim
        61: StolenFrom
        62: NanoDelay
        63: DisplayStats
        64: OofDistance
        65: OofText
        66: Temp
        67: PerfectQSVFX
}
subroutines {
    0: SleepDarts
    1: SayVoiceline
    2: SayUltStatus
    3: SayThanks
    4: SaySorry
    5: RandomEmote
    6: FromTheGrave
    7: RespawnSystem
    8: RespawnsCHATEAU
    9: RespawnsPETRA
    10: RespawnsMALEVENTO
    11: RespawnsDORADO
    12: RespawnsHOLLYWOOD
    13: RespawnsBLIZZWORLD
    14: RespawnsEICHENWALDE
    15: RespawnsECOPOINT
    16: RespawnsBLACKFOREST
    18: RespawnsKANEZAKA
    19: RespawnsLIJANGCONTROL
}
rule ("Initialize global variables") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(ONFIRE_STREAK, 5);
        Set Global Variable(RAMPAGE_STREAK, 10);
        Set Global Variable(NUCLEAR_STREAK, 15);
        Set Global Variable(NANO_SCORE, 29);
        Set Global Variable(LONGSHOT_DISTANCE, 40);
        Set Global Variable(CUSTOM_RESPAWN_TIME, 1.6);
        Set Global Variable(NIGHT_MAPS, Array(Map(Eichenwalde Halloween), Map(Château Guillard Halloween), Map(Blizzard World Winter), Map(Ecopoint: Antarctica Winter), Map(Hollywood Halloween)));
        Set Global Variable(JUMP_PAD_COLOR, If-Then-Else(Array Contains(Global.NIGHT_MAPS, Current Map), Color(Blue), Color(Purple)));
        Set Global Variable(DEATH_PLANE_BOT_MAPS, Array(Map(Black Forest), Map(Black Forest Winter), Map(Hollywood), Map(Hollywood Halloween), Map(Château Guillard), Map(Château Guillard Halloween)));
        Set Global Variable(MatchEnded, False);
        Set Global Variable(RevertKillsToAIBotsEnabled, Workshop Setting Toggle(Custom String("AI Bots"), Custom String("Revert kills against removed AI bots"), True, 0));
        Set Global Variable(AIBotSlots, Empty Array);
        Set Global Variable(NukeExplodeFxPos, 1);
        Set Global Variable(BotName, 1);
        Set Global Variable(SlowMo, 100);
    }
}

rule ("Initialize player variables") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Set Player Variable(Event Player, LongestLongshot, 0);
        Set Player Variable(Event Player, KillStreak, 0);
        Set Player Variable(Event Player, IsOnFire, False);
        Set Player Variable(Event Player, IsOnRampage, False);
        Set Player Variable(Event Player, IsNuclear, False);
        Set Player Variable(Event Player, SystemMessages, Empty Array);
        Set Player Variable(Event Player, MedalQueue, Empty Array);
        Set Player Variable(Event Player, QuadFeedTimes, Empty Array);
        Set Player Variable(Event Player, HonorQueue, Empty Array);
        Set Player Variable(Event Player, HonorBar, 0);
        Set Player Variable(Event Player, SleepUsedAndDied, True);
        Set Player Variable(Event Player, SleepsOnground, False);
        Set Player Variable(Event Player, NanoDelay, 1);
        Set Player Variable(Event Player, DisplayStats, True);
    }
}

rule ("Disable inspector & match ending and initiate text rainbow") {
    event {
        Ongoing - Global;
    }
    actions {
        Disable Inspector Recording;
        Disable Built-In Game Mode Completion;
        Set Global Variable(Rainbow, Vector(0, 0, 0));
        Chase Global Variable At Rate(Rainbow, Vector(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 50), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 50), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 50), 561), 841.5), 420.75)), 25.5), 114.75), 255)), 99999, Destination and Rate);
    }
}

rule ("Player damage & HP settings") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    actions {
        Set Damage Received(Event Player, 0);
        Set Max Health(Event Player, 27.5);
    }
}

rule ("Start match sooner & pause timer") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Assembling Heroes == True;
    }
    actions {
        Set Match Time(13);
        Wait(13.2, Ignore Condition);
        Set Match Time(261);
        Wait(0.016, Ignore Condition);
        Pause Match Time;
    }
}

rule ("Detect players") {
    event {
        Player Joined Match;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == False;
    }
    actions {
        Start Forcing Dummy Bot Name(Event Player, Custom String("​ [ -C°▥°]-C Ana Bot #{0}", Count Of(Filtered Array(All Players(All Teams), (Current Array Element).IsAIBot))));
        If(Compare(Custom String("{0}", Event Player), ==, Custom String("​ [ -C°▥°]-C Ana Bot #{0}", Count Of(Filtered Array(All Players(All Teams), (Current Array Element).IsAIBot)))));
            Set Player Variable(Event Player, IsPlayer, False);
            Set Player Variable(Event Player, IsAIBot, True);
        Else;
            Set Player Variable(Event Player, IsPlayer, True);
            Set Player Variable(Event Player, IsAIBot, False);
            Stop Forcing Dummy Bot Name(Event Player);
        End;
        Set Respawn Max Time(Event Player, Global.CUSTOM_RESPAWN_TIME);
        If(Global.MatchEnded);
            Disallow Button(Event Player, Button(Primary Fire));
            Disallow Button(Event Player, Button(Secondary Fire));
            Disallow Button(Event Player, Button(Melee));
            Set Status(Event Player, Null, Rooted, 999);
    }
}

rule ("Restart game when lobby is empty") {
    event {
        Player Left Match;
        All;
        All;
    }
    conditions {
        Global.MatchEnded == False;
    }
    actions {
        If(Compare(Number Of Heroes(Hero(Ana), All Teams), ==, 0));
            Restart Match;
    }
}

rule ("Define spawn points, play zone and nuke settings depending on map") {
    event {
        Ongoing - Global;
    }
    actions {
        If(Or(Compare(Current Map, ==, Map(Château Guillard)), Compare(Current Map, ==, Map(Château Guillard Halloween))));
            Call Subroutine(RespawnsCHATEAU);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(200.75, 21.89, 67));
            Set Global Variable(NukeCamPos, Vector(241.37, 123.78, 29.92));
        Else If(Compare(Current Map, ==, Map(Petra)));
            Call Subroutine(RespawnsPETRA);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(15.57, -6.6, 35.95));
            Set Global Variable(NukeCamPos, Vector(25.8, 66.8, 89.99));
        Else If(Or(Compare(Current Map, ==, Map(Black Forest)), Compare(Current Map, ==, Map(Black Forest Winter))));
            Call Subroutine(RespawnsBLACKFOREST);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(-21.97, 12.09, 5.58));
            Set Global Variable(NukeCamPos, Vector(-54.85, 104.18, -38.5));
        Else If(Compare(Current Map, ==, Map(Malevento)));
            Call Subroutine(RespawnsMALEVENTO);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(0.31, -1, -7.36));
            Set Global Variable(NukeCamPos, Vector(30.1, 78, -53.59));
        Else If(Compare(Current Map, ==, Map(Dorado)));
            Call Subroutine(RespawnsDORADO);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(99.13, 21.23, 1.93));
            Set Global Variable(NukeCamPos, Vector(119.79, 122.46, -49.05));
        Else If(Or(Compare(Current Map, ==, Map(Hollywood)), Compare(Current Map, ==, Map(Hollywood Halloween))));
            Call Subroutine(RespawnsHOLLYWOOD);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(1.95, 1.6, -47.4));
            Set Global Variable(NukeCamPos, Vector(1.08, 83.21, 7.6));
        Else If(Or(Compare(Current Map, ==, Map(Blizzard World)), Compare(Current Map, ==, Map(Blizzard World Winter))));
            Call Subroutine(RespawnsBLIZZWORLD);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(-51.16, 11.03, 96.46));
            Set Global Variable(NukeCamPos, Vector(-105.76, 102.05, 89.83));
        Else If(Or(Compare(Current Map, ==, Map(Eichenwalde)), Compare(Current Map, ==, Map(Eichenwalde Halloween))));
            Call Subroutine(RespawnsEICHENWALDE);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(56, 18, -80));
            Set Global Variable(NukeCamPos, Vector(117, 95, -114));
        Else If(Or(Compare(Current Map, ==, Map(Ecopoint: Antarctica)), Compare(Current Map, ==, Map(Ecopoint: Antarctica Winter))));
            Call Subroutine(RespawnsECOPOINT);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(2.68, 7.3, 1.25));
            Set Global Variable(NukeCamPos, Vector(-13.77, 92.29, -51.37));
        Else If(Compare(Current Map, ==, Map(Kanezaka)));
            Call Subroutine(RespawnsKANEZAKA);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 25);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(NukeImpactPos, Vector(-36.31, 5.84, -7.69));
            Set Global Variable(NukeCamPos, Vector(-66.48, 91.68, -53.68));
        Else If(Or(Compare(Current Map, ==, Map(Lijiang Control Center)), Compare(Current Map, ==, Map(Lijiang Control Center Lunar New Year))));
            Call Subroutine(RespawnsLIJANGCONTROL);
            Set Global Variable(RespawnHigherDistance, 999);
            Set Global Variable(RespawnLowerDistance, 30);
            Set Global Variable(RespawnFailsafeDistance, 15);
            Set Global Variable(PlayzoneCenter, Vector(0, 267.28, 282.52));
            Set Global Variable(PlayzoneRadius, 75);
            Set Global Variable(NukeImpactPos, Vector(44.84, 243.67, 257.17));
            Set Global Variable(NukeCamPos, Vector(93.75, 567.33, 282.32));
        Else;
            Set Global Variable(SpawnPointSettings, 0);
            Set Global Variable(PlayzoneCenter, 0);
            Set Global Variable(PlayzoneRadius, 0);
            Set Global Variable(NukeImpactPos, Vector(0, 0, 0));
            Set Global Variable(NukeCamPos, Vector(55, 80, 0));
    }
}

rule ("PLAYER EFFECTS") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    actions {
        Create In-World Text(If-Then-Else(And(And(And(And(And(And(Not(Has Status(Local Player, Asleep)), Has Status(Event Player, Asleep)), Compare(Distance Between(Local Player, Event Player), <=, 20)), Is Alive(Event Player)), (Event Player).SleepsOnground), Compare(Angle Between Vectors(Facing Direction Of(Local Player), Direction Towards(Eye Position(Local Player), Event Player)), <, 5)), Not(Global.MatchEnded)), Local Player, Empty Array), If-Then-Else(Compare((Local Player).Executes, <, 3), Custom String("{0} punch to {1}", Ability Icon String(Hero(Ana), Button(Melee)), If-Then-Else(Compare(Score Of(Event Player), >, Score Of(Local Player)), Custom String("demote"), Custom String("execute"))), Custom String("")), Add(Event Player, Vector(0, 0.4, 0)), 1, Clip Against Surfaces, Visible To Position String and Color, If-Then-Else(Compare(Score Of(Event Player), >, Score Of(Local Player)), Custom Color(63, 191, 116, 255), Color(Sky Blue)), Visible Never);
        Create Effect(If-Then-Else(Compare((Event Player).KillStreak, >=, Global.ONFIRE_STREAK), Local Player, Empty Array), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, 10, Visible To Position and Radius);
        Create Effect(If-Then-Else(And(Compare((Event Player).KillStreak, >=, Global.RAMPAGE_STREAK), Not(Compare((Event Player).KillStreak, ==, Global.NUCLEAR_STREAK))), Local Player, Empty Array), Echo Cloning Effect, Color(Team 1), Event Player, 1, Visible To Position and Radius);
        Create Effect(If-Then-Else(And(Compare((Event Player).KillStreak, >=, Global.RAMPAGE_STREAK), Compare((Event Player).RampageSFX, ==, True)), Local Player, Empty Array), Winston Primal Rage Sound, Color(Team 1), Event Player, If-Then-Else(Compare(Event Player, ==, Local Player), 80, 200), Visible To Position and Radius);
        Create Effect(If-Then-Else(And(And(Compare(Score Of(Event Player), ==, Global.NANO_SCORE), Is Alive(Event Player)), (Event Player).NanoDelay), Local Player, Empty Array), Ana Nano Boosted Effect, Color(Team 1), Event Player, If-Then-Else(Is Using Ultimate(Event Player), 0, 1), Visible To Position and Radius);
        Create Effect(If-Then-Else(And(And(Compare(Score Of(Event Player), ==, Global.NANO_SCORE), Is Alive(Event Player)), (Event Player).NanoDelay), Local Player, Empty Array), Ana Nano Boosted Sound, Color(Team 1), Event Player, If-Then-Else(Compare(Event Player, ==, Local Player), If-Then-Else(Is Using Ultimate(Event Player), 0, 25), 150), Visible To Position and Radius);
        Create Effect(If-Then-Else(Compare((Event Player).DemotedEffect, ==, True), Local Player, Empty Array), Sombra Hacked Sound, Color(Team 1), Event Player, If-Then-Else(Compare(Event Player, ==, Local Player), 100, 0), Visible To Position and Radius);
        Create Effect(If-Then-Else(And(Compare((Event Player).RampageVFX, ==, True), Not(Compare((Event Player).KillStreak, ==, Global.NUCLEAR_STREAK))), Remove From Array(Local Player, Event Player), Empty Array), Winston Primal Rage Effect, Color(Team 1), Event Player, If-Then-Else(Compare(Event Player, ==, Local Player), 70, 200), Visible To Position and Radius);
        Create Effect(If-Then-Else(Compare((Event Player).RampageVFX, ==, True), Local Player, Empty Array), Wrecking Ball Adaptive Shield Target Effect, Color(Team 1), Event Player, If-Then-Else(Compare(Event Player, ==, Local Player), 70, 200), Visible To Position and Radius);
        Create Effect(If-Then-Else(And(Global.MatchEnded, Global.NukePos), Local Player, Empty Array), Zenyatta Orb of Discord Target Effect, Color(Team 1), Remove From Array(Event Player, Global.Winner), 1, Visible To Position and Radius);
        Create Effect(If-Then-Else(Compare((Event Player).PerfectQSVFX, ==, True), Local Player, Empty Array), Wrecking Ball Adaptive Shield Target Effect, Color(Team 1), Event Player, If-Then-Else(Compare(Event Player, ==, Local Player), 100, 0), Visible To Position and Radius);
    }
}

rule ("toggle stats HUD") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
    }
    actions {
        Set Player Variable(Event Player, DisplayStats, Not((Event Player).DisplayStats));
    }
}

rule ("PLAYER HUDs") {
    event {
        Ongoing - Global;
    }
    actions {
        "SCOREBOARD STUFF"
        Create HUD Text((Local Player).IsPlayer, Null, Null, Custom String("                                                                                                                www.jinko.dev{0}", Custom String("/discord                  use game code  ▶  1DMTZ                                                                            {0}", Custom String("                                                                                    "))), Left, 0, Null, Null, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Visible To and Color, Visible Never);
        Create HUD Text((Local Player).IsPlayer, Null, Custom String("always import code 1DMTZ to play the latest version!"), Null, Top, 1, Null, Color(White), Null, Visible To and String, Visible Never);
        "Makes the scoreboard larger and pushes the honor prompt down"
        Create HUD Text((Local Player).IsPlayer, Null, Null, Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                                            {0}", Custom String("                   ")), Top, 5, Null, Null, Color(White), Visible To, Visible Never);
        "Aligns the ScoreBoard Wallpapers horizontally"
        Create HUD Text((Local Player).IsPlayer, Null, Custom String("\n                                                                                                                            {0}", Custom String("                                     ")), Null, Right, 0, Null, Color(Red), Null, Visible To and String, Visible Never);
        Create HUD Text((Local Player).IsPlayer, Null, Null, Custom String("{0}", If-Then-Else(Is True For Any(All Players(All Teams), Compare(Score Of(Current Array Element), ==, Global.NANO_SCORE)), Custom String("                                                         {0}    {0}       {0}    {0}", Icon String(Warning)), Custom String("                                                         {0}    {0}       {0}    {0}", Ability Icon String(Hero(Kiriko), Button(Ultimate))))), Right, 0, Null, Null, Color(White), Visible To and String, Visible Never);
        Create HUD Text(Array(And((Local Player).IsPlayer, Compare(Number Of Players(All Teams), >, 1))), Null, Null, Custom String("\n{0}", If-Then-Else(And(Compare(Count Of(Filtered Array(All Players(All Teams), Compare(Score Of(Current Array Element), ==, Global.NANO_SCORE))), >=, 2), Compare(Score Of(Local Player), ==, Global.NANO_SCORE)), Custom String("                                                         {0}    {0}       {0}    {0}", Icon String(Warning)), Custom String("                                                         {0}    {0}       {0}    {0}", Ability Icon String(Hero(D.Va), Button(Ultimate))))), Right, 0, Null, Null, Color(White), Visible To and String, Visible Never);
        "MAIN STATS (with icons)"
        Create HUD Text((Local Player).IsPlayer, Null, Null, If-Then-Else((Local Player).DisplayStats, Custom String("▼ use [{0}] to toggle stats                                                                                                  {1}", Input Binding String(Button(Interact)), Custom String("                                                              ")), Custom String("▶ use [{0}] to toggle stats                                                                                                  {1}", Input Binding String(Button(Interact)), Custom String("                                                              "))), Left, 8, Null, Null, If-Then-Else((Local Player).DisplayStats, Custom Color(63, 191, 116, 255), Custom Color(63, 191, 116, 50)), Visible To Sort Order String and Color, Visible Never);
        Create HUD Text((Local Player).DisplayStats, Custom String("{0}", Ability Icon String(Hero(Sojourn), Button(Secondary Fire))), Custom String("Scoped Accuracy                                                                                                              {0}", Custom String("                                                            ")), Custom String("{0}%", (Local Player).ScopedAccuracy), Left, 10, If-Then-Else(And(And(Compare((Local Player).ScopedAccuracy, ==, Global.BestScopedAccuracyValue), Compare((Local Player).ScopedShots, >=, 15)), Compare((Local Player).ScopedAccuracy, >, 0)), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Color(White), If-Then-Else(And(And(Compare((Local Player).ScopedAccuracy, ==, Global.BestScopedAccuracyValue), Compare((Local Player).ScopedShots, >=, 15)), Compare((Local Player).ScopedAccuracy, >, 0)), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Visible To Sort Order String and Color, Visible Never);
        Create HUD Text((Local Player).DisplayStats, Custom String("{0}", Ability Icon String(Hero(Ana), Button(Ultimate))), Custom String("Noscope Accuracy                                                                                                             {0}", Custom String("                                                             ")), Custom String("{0}%", (Local Player).NoscopeAccuracy), Left, 11, If-Then-Else(And(And(Compare((Local Player).NoscopeAccuracy, ==, Global.BestNoscopeAccuracyValue), Compare((Local Player).NoscopeShots, >=, 15)), Compare((Local Player).NoscopeAccuracy, >, 0)), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Color(White), If-Then-Else(And(And(Compare((Local Player).NoscopeAccuracy, ==, Global.BestNoscopeAccuracyValue), Compare((Local Player).NoscopeShots, >=, 15)), Compare((Local Player).NoscopeAccuracy, >, 0)), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Visible To Sort Order String and Color, Visible Never);
        Create HUD Text((Local Player).DisplayStats, Custom String("{0}", Ability Icon String(Hero(Ana), Button(Ability 1))), Custom String("Sleep Dart Accuracy                                                                                                          {0}", Custom String("                                                                ")), Custom String("{0}%", (Local Player).SleepAccuracy), Left, 12, If-Then-Else(And(And(Compare((Local Player).SleepAccuracy, ==, Global.BestSleepAccuracyValue), Compare((Local Player).SleepShots, >=, 10)), Compare((Local Player).SleepAccuracy, >, 0)), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Color(White), If-Then-Else(And(And(Compare((Local Player).SleepAccuracy, ==, Global.BestSleepAccuracyValue), Compare((Local Player).SleepShots, >=, 10)), Compare((Local Player).SleepAccuracy, >, 0)), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Visible To Sort Order String and Color, Visible Never);
        Create HUD Text(Array(And((Local Player).DisplayStats, Compare(Global.LongestShotValue, >=, 40))), Custom String("{0}", Ability Icon String(Hero(Cassidy), Button(Ultimate))), Custom String("Longest longshot                                                                                                             {0}", Custom String("                                                             ")), Custom String("{0}: {1}m", Global.LongestShotPlayer, Global.LongestShotValue), Left, 13, If-Then-Else(Compare((Local Player).LongestLongshot, ==, Global.LongestShotValue), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Color(White), If-Then-Else(Compare((Local Player).LongestLongshot, ==, Global.LongestShotValue), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Visible To Sort Order String and Color, Visible Never);
        Create HUD Text(Array(And((Local Player).DisplayStats, Compare(Global.BestKillstreakValue, >=, Global.ONFIRE_STREAK))), Custom String("{0}", Ability Icon String(Hero(Reaper), Button(Ultimate))), Custom String("Longest killstreak                                                                                                           {0}", Custom String("                                                               ")), Custom String("{0} - {1}k", Global.BestKillstreakPlayer, Global.BestKillstreakValue), Left, 14, If-Then-Else(Compare(Global.BestKillstreakPlayer, ==, Local Player), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Color(White), If-Then-Else(Compare(Global.BestKillstreakPlayer, ==, Local Player), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Visible To Sort Order String and Color, Visible Never);
        "SECONDARY STATS\nCurrent killstreak"
        Create HUD Text(Array((Local Player).DisplayStats), Null, Custom String("Current killstreak: {0}                                                                                                      {1}", (Local Player).KillStreak, Custom String("                                                                    ")), Null, Left, 21, Null, If-Then-Else(Compare((Local Player).KillStreak, <, Global.ONFIRE_STREAK), Custom Color(63, 191, 116, 255), If-Then-Else(And(Compare((Local Player).KillStreak, >=, Global.ONFIRE_STREAK), Compare((Local Player).KillStreak, <, Global.RAMPAGE_STREAK)), Color(Orange), If-Then-Else(And(Compare((Local Player).KillStreak, >=, Global.RAMPAGE_STREAK), Compare((Local Player).KillStreak, <, Global.NUCLEAR_STREAK)), Color(Yellow), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255)))), Null, Visible To Sort Order String and Color, Visible Never);
        "K/D Ratio"
        Create HUD Text(Array(And(And((Local Player).DisplayStats, Compare((Local Player).Deaths, >, 0)), Compare(Score Of(Local Player), >, 0))), Null, Custom String("K/D ratio: {0}                                                                                                               {1}", Divide(Add(Add((Local Player).ScopedHits, (Local Player).NoscopeHits), (Local Player).Executes), (Local Player).Deaths), Custom String("                                                           ")), Null, Left, 22, Null, Custom Color(63, 191, 116, 255), Null, Visible To Sort Order and String, Visible Never);
        "Shots fired"
        Create HUD Text(Array(And((Local Player).DisplayStats, Compare(Add((Local Player).ScopedShots, (Local Player).NoscopeShots), >, 100))), Null, Custom String("Rifle shots: {0}                                                                                                             {1}", Add((Local Player).ScopedShots, (Local Player).NoscopeShots), Custom String("                                                             ")), Null, Left, 23, Null, Custom Color(63, 191, 116, 255), Null, Visible To Sort Order and String, Visible Never);
        "Jumps"
        Create HUD Text(Array(And((Local Player).DisplayStats, Compare((Local Player).Jumps, >, 200))), Null, Custom String("Jumps: {0}                                                                                                                   {1}", (Local Player).Jumps, Custom String("                                                       ")), Null, Left, 24, Null, Custom Color(63, 191, 116, 255), Null, Visible To Sort Order and String, Visible Never);
        "Kills stolen"
        Create HUD Text(Array(And((Local Player).DisplayStats, Compare((Local Player).StolenKills, >, 0))), Null, Custom String("Kills stolen: {0}                                                                                                            {1}", (Local Player).StolenKills, Custom String("                                                              ")), Null, Left, 25, Null, Custom Color(63, 191, 116, 255), Null, Visible To Sort Order and String, Visible Never);
        "Players demoted"
        Create HUD Text(Array(And((Local Player).DisplayStats, Compare((Local Player).DemotedPlayers, >, 0))), Null, Custom String("Players demoted: {0}                                                                                                         {1}", (Local Player).DemotedPlayers, Custom String("                                                                 ")), Null, Left, 26, Null, Custom Color(63, 191, 116, 255), Null, Visible To Sort Order and String, Visible Never);
        "Perfect Quickscopes"
        Create HUD Text(Array(And((Local Player).DisplayStats, Compare((Local Player).PerfectQuickscopes, >, 0))), Null, Custom String("Perfect Quickscopes: {0}                                                                                                     {1}", (Local Player).PerfectQuickscopes, Custom String("                                                                     ")), Null, Left, 27, Null, Custom Color(63, 191, 116, 255), Null, Visible To Sort Order and String, Visible Never);
        Create Progress Bar HUD Text(Array(And(And((Local Player).IsPlayer, Compare((Local Player).HonorBar, >, 0)), Compare((Local Player).HonorBar, <, 100))), (Local Player).HonorBar, Custom String("press [{0}] to honor {1}", Input Binding String(Button(Ability 2)), (Local Player).HonorTarget), Top, 10, Custom Color(44, 133, 81, 255), Custom Color(44, 133, 81, 255), Visible To and Values, Visible Never);
    }
}

rule ("SPECTATOR & POTG HUDs") {
    event {
        Ongoing - Global;
    }
    actions {
        "hudText([not localPlayer.IsPlayer and LongestShotValue >= 40], \"{}\".format(abilityIconString(Hero.MCCREE, Button.ULTIMATE)), \"Longest longshot          \" emptySpace, \"{0}: {1}m\".format(LongestShotPlayer, LongestShotValue), HudPosition.LEFT, 14, customGreen"
        Create HUD Text(Array(Not((Local Player).IsPlayer)), Null, Null, Custom String("\n\n\nana paintball by jinko - code 1DMTZ\n             www.jinko.dev/discord"), Top, 100, Null, Null, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 85), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 85), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Visible To and Color, Visible Never);
    }
}

rule ("Initial spawn point & message") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Dummy Bot(Event Player) == False;
        Number Of Deaths(Event Player) == 0;
        Global.SpawnPointSettings != 0;
    }
    actions {
        Wait Until(Has Spawned(Event Player), 99999);
        Call Subroutine(RespawnSystem);
        Wait(0.2, Ignore Condition);
        Small Message(Event Player, Custom String("    Mode by Jinko#2838"));
        Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Color(White), Event Player, 200);
        Wait(0.7, Ignore Condition);
        If(Not(String Contains(Custom String("{0}", Event Player), Custom String("ml7"))));
            Small Message(Event Player, Random Value In Array(Array(Custom String("    {0}  Discord invite up there  {0}", Icon String(Arrow: Up)), Custom String("    {0}  TikTok: @Jinko_OW", Icon String(Heart)), Custom String("    {0}  Scoped shots pierce enemies!", Ability Icon String(Hero(Zarya), Button(Ability 2))), Custom String("    {0}  Get a 15 kills streak for a BIG surprise!", Icon String(Radioactive)), Custom String("    {0}{1}  Try punching sleeping players!", Ability Icon String(Hero(Ana), Button(Melee)), Ability Icon String(Hero(Ana), Button(Ability 1))))));
        Else;
            Small Message(Event Player, Random Value In Array(Array(Custom String("    {0}  Guard Check  {0}", Ability Icon String(Hero(Ashe), Button(Ultimate))), Custom String("    fun fact: ml7 never got a nuke ml7Point"), Custom String("    100% nuking this game!! ml7Whoa"), Custom String("    {0}  Can we get some Guard Check in the chat?", Ability Icon String(Hero(Ashe), Button(Ultimate))), Custom String("    {0}  Demmos 1 nuke - ml7 0 nuke", Icon String(Sad)), Custom String("    ml7 joacă modul meu!! poggies"), Custom String("    Hewwo. I'm em ewl sewwen (´・ω・`). I wuuve den (^^). I wike cats nyaa~ Owaf pways the game instwead of me, but uwu will ne{0}", Custom String("ver know (≧ω≦)")))));
        End;
        Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Color(White), Event Player, 200);
    }
}

rule ("Subroutine RespawnSystem") {
    event {
        Subroutine;
        RespawnSystem;
    }
    actions {
        Set Player Variable(Event Player, AlivePlayers, Filtered Array(All Players(All Teams), And(And(And(Compare(Current Array Element, !=, Event Player), Is Alive(Current Array Element)), Has Spawned(Current Array Element)), Compare(Hero Of(Current Array Element), ==, Hero(Ana)))));
        Set Player Variable(Event Player, SpawnPointsNotInLOS, Filtered Array(Global.SpawnPointSettings, And(And(And(And(And(And(And(If-Then-Else(Compare(First Of((Event Player).AlivePlayers), !=, Null), Not(Is In Line of Sight(First Of((Event Player).AlivePlayers), Add(First Of(Current Array Element), Vector(0, 1.8, 0)), Barriers Do Not Block LOS)), True), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 1), !=, Null), Not(Is In Line of Sight(Value In Array((Event Player).AlivePlayers, 1), Add(First Of(Current Array Element), Vector(0, 1.8, 0)), Barriers Do Not Block LOS)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 2), !=, Null), Not(Is In Line of Sight(Value In Array((Event Player).AlivePlayers, 2), Add(First Of(Current Array Element), Vector(0, 1.8, 0)), Barriers Do Not Block LOS)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 3), !=, Null), Not(Is In Line of Sight(Value In Array((Event Player).AlivePlayers, 3), Add(First Of(Current Array Element), Vector(0, 1.8, 0)), Barriers Do Not Block LOS)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 4), !=, Null), Not(Is In Line of Sight(Value In Array((Event Player).AlivePlayers, 4), Add(First Of(Current Array Element), Vector(0, 1.8, 0)), Barriers Do Not Block LOS)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 5), !=, Null), Not(Is In Line of Sight(Value In Array((Event Player).AlivePlayers, 5), Add(First Of(Current Array Element), Vector(0, 1.8, 0)), Barriers Do Not Block LOS)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 6), !=, Null), Not(Is In Line of Sight(Value In Array((Event Player).AlivePlayers, 6), Add(First Of(Current Array Element), Vector(0, 1.8, 0)), Barriers Do Not Block LOS)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 7), !=, Null), Not(Is In Line of Sight(Value In Array((Event Player).AlivePlayers, 7), Add(First Of(Current Array Element), Vector(0, 1.8, 0)), Barriers Do Not Block LOS)), True))));
        If(Compare(Count Of((Event Player).SpawnPointsNotInLOS), ==, 0));
            "failsafe"
            Set Player Variable(Event Player, SpawnPointsNotInLOS, Global.SpawnPointSettings);
        End;
        Set Player Variable(Event Player, SpawnPointsFarEnoughFromPlayers, Filtered Array((Event Player).SpawnPointsNotInLOS, And(And(And(And(And(And(And(If-Then-Else(Compare(First Of((Event Player).AlivePlayers), !=, Null), Compare(Absolute Value(Subtract(Distance Between(First Of(Current Array Element), First Of((Event Player).AlivePlayers)), Divide(Add(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2))), <=, Divide(Subtract(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2)), True), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 1), !=, Null), Compare(Absolute Value(Subtract(Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 1)), Divide(Add(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2))), <=, Divide(Subtract(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 2), !=, Null), Compare(Absolute Value(Subtract(Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 2)), Divide(Add(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2))), <=, Divide(Subtract(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 3), !=, Null), Compare(Absolute Value(Subtract(Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 3)), Divide(Add(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2))), <=, Divide(Subtract(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 4), !=, Null), Compare(Absolute Value(Subtract(Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 4)), Divide(Add(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2))), <=, Divide(Subtract(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 5), !=, Null), Compare(Absolute Value(Subtract(Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 5)), Divide(Add(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2))), <=, Divide(Subtract(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 6), !=, Null), Compare(Absolute Value(Subtract(Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 6)), Divide(Add(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2))), <=, Divide(Subtract(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2)), True)), If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 7), !=, Null), Compare(Absolute Value(Subtract(Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 7)), Divide(Add(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2))), <=, Divide(Subtract(Global.RespawnHigherDistance, Global.RespawnLowerDistance), 2)), True))));
        If(Compare(Count Of((Event Player).SpawnPointsFarEnoughFromPlayers), ==, 0));
            "failsafe"
            Set Player Variable(Event Player, SpawnPointsFarEnoughFromPlayers, Filtered Array((Event Player).SpawnPointsNotInLOS, And(And(And(And(And(And(And(Compare(If-Then-Else(Compare(First Of((Event Player).AlivePlayers), !=, Null), Distance Between(First Of(Current Array Element), First Of((Event Player).AlivePlayers)), 999999), >=, Global.RespawnFailsafeDistance), Compare(If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 1), !=, Null), Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 1)), 999999), >=, Global.RespawnFailsafeDistance)), Compare(If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 2), !=, Null), Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 2)), 999999), >=, Global.RespawnFailsafeDistance)), Compare(If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 3), !=, Null), Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 3)), 999999), >=, Global.RespawnFailsafeDistance)), Compare(If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 4), !=, Null), Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 4)), 999999), >=, Global.RespawnFailsafeDistance)), Compare(If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 5), !=, Null), Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 5)), 999999), >=, Global.RespawnFailsafeDistance)), Compare(If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 6), !=, Null), Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 6)), 999999), >=, Global.RespawnFailsafeDistance)), Compare(If-Then-Else(Compare(Value In Array((Event Player).AlivePlayers, 7), !=, Null), Distance Between(First Of(Current Array Element), Value In Array((Event Player).AlivePlayers, 7)), 999999), >=, Global.RespawnFailsafeDistance))));
        End;
        If(Compare(Count Of((Event Player).SpawnPointsFarEnoughFromPlayers), ==, 0));
            "failsafe"
            Set Player Variable(Event Player, SpawnPointsFarEnoughFromPlayers, (Event Player).SpawnPointsNotInLOS);
        End;
        Set Player Variable(Event Player, ChosenSpawnPoint, Random Value In Array((Event Player).SpawnPointsFarEnoughFromPlayers));
        Teleport(Event Player, First Of((Event Player).ChosenSpawnPoint));
        Set Facing(Event Player, Value In Array((Event Player).ChosenSpawnPoint, 1), To World);
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player, Value In Array((Event Player).ChosenSpawnPoint, 1), To World);
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player, Value In Array((Event Player).ChosenSpawnPoint, 1), To World);
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player, Value In Array((Event Player).ChosenSpawnPoint, 1), To World);
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player, Value In Array((Event Player).ChosenSpawnPoint, 1), To World);
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Speed Of(Event Player), To World, Incorporate Contrary Motion);
    }
}

rule ("Subroutine RespawnsCHATEAU") {
    event {
        Subroutine;
        RespawnsCHATEAU;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(165.76, 5, 81), Left), Array(Vector(185.5, 1, 72.4), Vector(0.83, 0, -0.56)), Array(Vector(167.64, 5, 76.94), Vector(0.88, 0, 0.48)), Array(Vector(170, 7, 69.5), Vector(0.84, 0, -0.55)), Array(Vector(177, 0, 51.5), Vector(1, 0, 0.07)), Array(Vector(194.68, 1, 66.55), Vector(-0.74, 0, 0.68)), Array(Vector(202, 0, 84.2), Vector(0.63, 0, -0.78)), Array(Vector(210.5, 0, 84.2), Vector(-0.68, 0, -0.73)), Array(Vector(202.55, 0, 70.12), Vector(0.55, 0, 0.83)), Array(Vector(210.18, 0, 70.46), Vector(-0.57, 0, 0.82)), Array(Vector(224.4, 1, 80.7), Vector(-1, 0, -0.01)), Array(Vector(215.75, 2, 93.49), Vector(0.71, 0, -0.71)), Array(Vector(238.63, 2, 84.62), Vector(-0.71, 0, 0.71)), Array(Vector(233.8, 2, 100.2), Vector(-0.9, 0, -0.43)), Array(Vector(228.51, 2, 101.19), Vector(0.52, 0, -0.85)), Array(Vector(204.15, 9, 89.4), Vector(0.55, 0, 0.83)), Array(Vector(189.6, 9, 110), Left), Array(Vector(176.53, 9, 108.5), Vector(0.5, 0, -0.86)), Array(Vector(220.35, 12, 43.89), Vector(-0.86, 0, 0.5)), Array(Vector(209.2, 9, 83.4), Vector(-0.57, 0, -0.82)), Array(Vector(202.5, 8, 73.6), Left), Array(Vector(209.69, 8, 73.08), Right), Array(Vector(220.06, 8, 69.5), Vector(0.22, 0, 0.97)), Array(Vector(218.91, 9, 61.07), Vector(-1, 0, -0.08)), Array(Vector(222.5, 8, 80), Vector(-0.72, 0, 0.7)), Array(Vector(225.3, 13, 62), Vector(-1, 0, -0.01)), Array(Vector(222.6, 6, 107.3), Vector(-0.36, 0, -0.93)), Array(Vector(236.5, 4, 113.4), Vector(-0.24, 0, -0.97)), Array(Vector(181, 1.66, 84.71), Vector(0.93, 0, -0.36)), Array(Vector(180.88, 1.67, 81.5), Vector(0.72, 0, 0.69)), Array(Vector(188.74, 1, 93.79), Vector(-0.97, 0, -0.26)), Array(Vector(172.9, 5, 92.3), Vector(0.73, 0, -0.68)), Array(Vector(183.5, 9, 108.5), Vector(-0.17, 0, -0.99)), Array(Vector(188.73, 8, 106.49), Vector(0.52, 0, -0.85)), Array(Vector(188.5, 9, 115), Vector(0.9, 0, -0.43)), Array(Vector(193.12, 9, 116.87), Vector(0.02, 0, -1)), Array(Vector(222.75, 2, 93.49), Vector(-0.92, 0, -0.39)), Array(Vector(177.3, 7, 59.74), Vector(-0.97, 0, -0.25)), Array(Vector(188.5, 6, 90), Vector(-0.87, 0, -0.5)), Array(Vector(222, 8, 98), Vector(-1, 0, -0.01)), Array(Vector(203.1, 9, 83.35), Vector(0.58, 0, -0.81)), Array(Vector(208.3, 9, 89.4), Vector(-0.57, 0, 0.82)), Array(Vector(225.71, 1, 78.32), Vector(-0.92, 0, 0.4)), Array(Vector(238.63, 2, 90.67), Vector(-1, 0, -0.01)), Array(Vector(210.38, 8, 110.58), Vector(-1, 0, -0.03)), Array(Vector(212.99, 8, 95.91), Vector(-1, 0, -0.1)), Array(Vector(217.31, 5, 109.5), Left), Array(Vector(217.31, 5, 114.61), Left), Array(Vector(177.25, 7, 63.99), Vector(-0.4, 0, 0.91)), Array(Vector(176.04, 7, 70), Vector(-0.28, 0, -0.96)), Array(Vector(168.87, 7, 67.51), Vector(0.72, 0, -0.69))));
    }
}

rule ("Subroutine RespawnsPETRA") {
    event {
        Subroutine;
        RespawnsPETRA;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(10.99, -5.72, -14.02), Vector(0.73, 0, 0.68)), Array(Vector(-38.36, -10.65, -15.66), Vector(0.05, 0, 1)), Array(Vector(-31.14, -11.67, 22.25), Vector(0.51, 0, -0.86)), Array(Vector(-27.86, -11.88, 22.24), Vector(-0.68, 0, -0.74)), Array(Vector(-24.83, -11.63, 19.22), Vector(-0.57, 0, -0.82)), Array(Vector(-30.79, -5, 23.25), Vector(0.47, 0, -0.88)), Array(Vector(-15.25, -8.18, 17.22), Vector(-0.76, 0, 0.65)), Array(Vector(6.5, -12.79, 32.8), Vector(-0.56, 0, 0.83)), Array(Vector(-2.5, -11.9, 32.8), Vector(0.55, 0, 0.83)), Array(Vector(-6.5, -12.68, 40.57), Vector(0.85, 0, 0.53)), Array(Vector(5.2, -11.58, 60.53), Vector(-0.93, 0, -0.34)), Array(Vector(34.91, -9.43, 21.37), Vector(-0.63, 0, 0.78)), Array(Vector(28.25, -5.8, 11.79), Vector(-0.83, 0, -0.56)), Array(Vector(27.82, -5.71, 5.78), Vector(-0.76, 0, 0.65)), Array(Vector(19.75, -5.81, 6.23), Vector(0.41, 0, 0.91)), Array(Vector(19.83, -5.69, 11.87), Vector(0.37, 0, -0.93)), Array(Vector(-13.25, -9.33, -1.25), Vector(0.66, 0, 0.75)), Array(Vector(-9.34, -5, 39.25), Vector(-0.61, 0, -0.79)), Array(Vector(-12.79, -4.98, -5.75), Vector(0.61, 0, -0.79)), Array(Vector(-6.75, -5.61, -14.79), Vector(-0.7, 0, 0.71)), Array(Vector(-18.51, -6.03, -6.75), Vector(-0.75, 0, -0.66)), Array(Vector(3.65, -1, -13.36), Vector(-0.91, 0, -0.42)), Array(Vector(0.36, -1, -13.34), Vector(0.91, 0, -0.42)), Array(Vector(-7.21, 1, -19.24), Vector(-0.21, 0, 0.98)), Array(Vector(8.85, -6, -11.19), Vector(-0.52, 0, 0.85)), Array(Vector(16.24, -5.69, -6.72), Vector(-0.81, 0, -0.58)), Array(Vector(28.04, -4, -5.54), Vector(-0.9, 0, 0.43)), Array(Vector(-36.27, -12.18, 12.22), Vector(0.06, 0, -1)), Array(Vector(-13.81, -9, 35.25), Vector(-0.66, 0, -0.75)), Array(Vector(-22.09, -6.02, 53.22), Vector(0.97, 0, -0.22)), Array(Vector(-9.87, -9.95, 14.38), Vector(-0.24, 0, 0.97)), Array(Vector(7.63, -5.93, -5.15), Vector(-1, 0, -0.1)), Array(Vector(-10.79, 1.05, -19.24), Vector(0.5, 0, 0.87)), Array(Vector(24.37, -10.19, 26.91), Vector(-0.19, 0, 0.98)), Array(Vector(11.14, -12.19, 57.62), Vector(0.7, 0, -0.71)), Array(Vector(-7.74, -10.11, 52.59), Vector(0.88, 0, 0.47)), Array(Vector(28.65, -5.98, 16.35), Vector(-0.78, 0, 0.62)), Array(Vector(29.17, -3.38, -2.05), Vector(-0.89, 0, -0.45)), Array(Vector(24.4, -4, -9.92), Vector(-0.02, 0, 1)), Array(Vector(19.2, -4.9, -14.2), Vector(0.74, 0, 0.68)), Array(Vector(19.2, -4.9, -14.2), Vector(-0.83, 0, 0.56)), Array(Vector(5.14, -5.82, -15.05), Vector(-0.45, 0, 0.89)), Array(Vector(-1.13, -5.74, -16.01), Vector(0.58, 0, 0.81)), Array(Vector(-4.8, -6, -11.23), Vector(0.77, 0, 0.64)), Array(Vector(-12.75, -9, 24.78), Vector(-0.62, 0, 0.78)), Array(Vector(-6.84, -10.58, 22.11), Vector(-1, 0, -0.03)), Array(Vector(-6.84, -10.58, 22.11), Left), Array(Vector(9.19, -11, 22.03), Vector(1, 0, 0.01)), Array(Vector(9.19, -11, 22.03), Right), Array(Vector(7.24, -11, 30.79), Vector(-0.75, 0, -0.66)), Array(Vector(-2.82, -11, 31.22), Vector(0.71, 0, -0.71)), Array(Vector(-20.64, -12.03, 8.94), Vector(1, 0, 0.01)), Array(Vector(-44.05, -13.01, 18.14), Vector(1, 0, -0.03)), Array(Vector(20.49, -12.98, 54.94), Vector(-0.68, 0, -0.74))));
    }
}

rule ("Subroutine RespawnsMALEVENTO") {
    event {
        Subroutine;
        RespawnsMALEVENTO;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(49.14, 6, 18.5), Right), Array(Vector(38.32, 3, 17), Vector(-0.54, 0, 0.84)), Array(Vector(40.88, 6, 30.29), Vector(-0.97, 0, 0.25)), Array(Vector(8.7, 4, 30.84), Vector(0.77, 0, 0.64)), Array(Vector(-7.25, 2, 10.28), Vector(0.98, 0, -0.22)), Array(Vector(0.58, 2, 7.14), Vector(-0.03, 0, 1)), Array(Vector(20.06, 6, -4.27), Vector(0.65, 0, 0.76)), Array(Vector(33.67, 5.5, -5.35), Vector(-0.76, 0, -0.65)), Array(Vector(33.55, 3.16, -14.22), Vector(-0.93, 0, -0.36)), Array(Vector(25.68, 2, -29.7), Vector(-0.27, 0, 0.96)), Array(Vector(32.39, 3, -20.42), Vector(-0.95, 0, -0.3)), Array(Vector(2.91, -3.5, -35.07), Vector(-0.28, 0, 0.96)), Array(Vector(6.99, -3.27, -31.79), Vector(-0.85, 0, 0.52)), Array(Vector(3.97, -3.5, -26.85), Vector(-0.89, 0, -0.45)), Array(Vector(-14.24, -2.32, -13.98), Vector(-0.99, 0, 0.12)), Array(Vector(-18.37, -3, -5.07), Vector(-0.51, 0, -0.86)), Array(Vector(-25.38, -2, 4), Vector(-0.39, 0, 0.92)), Array(Vector(-34.45, -1, 14.55), Vector(0.92, 0, 0.4)), Array(Vector(-16.43, 3.01, 48.47), Vector(0.76, 0, -0.65)), Array(Vector(-1.36, 2.67, 47.36), Vector(0.78, 0, -0.63)), Array(Vector(1.36, 2.67, 47.36), Vector(-0.79, 0, -0.61)), Array(Vector(9.62, 3, 12.55), Vector(1, 0, -0.01)), Array(Vector(-32.84, 4, 7.94), Left), Array(Vector(-24.15, 4, 5.1), Vector(-0.41, 0, 0.91)), Array(Vector(-23.4, 4, 11.43), Vector(-0.4, 0, -0.92)), Array(Vector(42.74, 3, 22.07), Right), Array(Vector(39.25, 3, 26.68), Vector(-0.69, 0, -0.73)), Array(Vector(3.83, -2, -19.89), Vector(-0.96, 0, -0.27)), Array(Vector(-5.83, -2, -22.48), Vector(0.96, 0, 0.28)), Array(Vector(-21.37, 0.44, 46.25), Vector(-0.49, 0, -0.87)), Array(Vector(-19.78, 1.24, 46.25), Vector(0.97, 0, -0.26)), Array(Vector(-19.5, 2, 41.13), Vector(0.97, 0, 0.25)), Array(Vector(-31.1, -1, 22.57), Vector(0.19, 0, -0.98)), Array(Vector(-29.98, -1, 25.94), Vector(0.63, 0, 0.78)), Array(Vector(-28, -2, 8.15), Vector(0.19, 0, 0.98)), Array(Vector(-31.76, -2, 12.23), Vector(0.07, 0, -1)), Array(Vector(-27.08, -2, 4), Vector(-0.01, 0, 1)), Array(Vector(32.55, 3, -18.17), Vector(-0.73, 0, 0.68)), Array(Vector(20.5, 2.9, -7.47), Vector(0.4, 0, -0.92)), Array(Vector(20.29, 1, -3.61), Vector(-0.58, 0, 0.82)), Array(Vector(44.04, 5.5, 9.86), Vector(-0.93, 0, -0.38)), Array(Vector(38.83, 7, 26.5), Vector(-0.48, 0, 0.88)), Array(Vector(35.31, 6, 31.68), Vector(-0.98, 0, 0.22)), Array(Vector(11.25, 4, 42.17), Vector(-1, 0, 0.09)), Array(Vector(0.03, 9.04, 41.85), Backward), Array(Vector(-9.99, 2, 26.82), Vector(-0.61, 0, 0.79)), Array(Vector(2.68, 6.8, 1.75), Vector(0.73, 0, 0.68)), Array(Vector(10.7, 6, 3.76), Vector(1, 0, -0.03)), Array(Vector(-6.09, 7.76, 33.93), Left), Array(Vector(-1.66, 6.68, 27.72), Vector(0.82, 0, 0.58)), Array(Vector(49.14, 5.14, 21.99), Vector(-1, 0, -0.04)), Array(Vector(43.8, 7, 26.7), Vector(-0.87, 0, -0.5)), Array(Vector(6.28, 1.56, 33.49), Vector(-0.73, 0, -0.68)), Array(Vector(-3, 6.63, 3.1), Vector(1, 0, 0.03)), Array(Vector(-6.05, 5.5, 1.75), Forward), Array(Vector(6.12, 5.5, 5.27), Vector(-0.05, 0, 1)), Array(Vector(-8.38, -3.27, -30.8), Vector(-1, 0, 0.02)), Array(Vector(-8.38, -3.27, -30.8), Vector(0.99, 0, -0.15)), Array(Vector(-3.53, -3.5, -34.3), Vector(0.37, 0, 0.93)), Array(Vector(38.05, 7, 16.87), Vector(-0.3, 0, 0.95)), Array(Vector(24.99, 6, 6.3), Vector(-0.29, 0, -0.96)), Array(Vector(24.29, 5, -7), Vector(-0.25, 0, -0.97))));
    }
}

rule ("Subroutine RespawnsDORADO") {
    event {
        Subroutine;
        RespawnsDORADO;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(111.05, 8.04, -18.21), Vector(1, 0, -0.1)), Array(Vector(130.48, 8.04, -7.1), Vector(-0.9, 0, -0.44)), Array(Vector(158.34, 10.01, -13.25), Vector(-0.84, 0, 0.54)), Array(Vector(152.32, 10.01, -3.06), Vector(-0.85, 0, -0.53)), Array(Vector(161.88, 10.01, -3.16), Vector(-0.96, 0, -0.27)), Array(Vector(152.47, 10.01, 0.62), Vector(-0.26, 0, 0.96)), Array(Vector(159.65, 11.05, 2.6), Vector(-0.8, 0, 0.6)), Array(Vector(63.98, 14.01, 24.34), Vector(0.94, 0, 0.33)), Array(Vector(77.74, 13.01, 16.59), Vector(0.05, 0, 1)), Array(Vector(102.64, 12.03, 19.43), Vector(0.15, 0, -0.99)), Array(Vector(83.21, 6.81, -7.75), Vector(0.37, 0, 0.93)), Array(Vector(107.12, 11, 48.48), Vector(0.63, 0, -0.78)), Array(Vector(121.37, 11, 52.18), Vector(-0.42, 0, -0.91)), Array(Vector(135.61, 11.01, 48.21), Vector(-0.97, 0, -0.25)), Array(Vector(124.55, 11, 39.69), Vector(-0.96, 0, -0.28)), Array(Vector(133.61, 7.25, -14.25), Vector(-0.99, 0, 0.14)), Array(Vector(98.46, 13.01, 21.62), Vector(-0.99, 0, 0.15)), Array(Vector(67.47, 14.01, 16.63), Vector(0.28, 0, 0.96)), Array(Vector(68.15, 15.07, 32.48), Vector(-0.62, 0, 0.78)), Array(Vector(68.15, 15.07, 32.48), Vector(0.62, 0, -0.78)), Array(Vector(63.35, 17.01, 36.64), Vector(0.94, 0, 0.35)), Array(Vector(72.44, 8, 8.89), Vector(0.96, 0, -0.29)), Array(Vector(76.84, 8, 5.44), Vector(0.78, 0, 0.63)), Array(Vector(79.41, 8, 3.37), Vector(0.49, 0, 0.87)), Array(Vector(81.24, 7, 2.43), Vector(0.82, 0, -0.58)), Array(Vector(108.47, 11.01, -25.48), Vector(-0.9, 0, 0.45)), Array(Vector(108.47, 11.01, -25.48), Vector(0.62, 0, -0.79)), Array(Vector(112.46, 11.01, -33.26), Vector(-0.12, 0, 0.99)), Array(Vector(128.88, 9.41, -28.51), Vector(-0.38, 0, 0.92)), Array(Vector(132.81, 9.41, -25.45), Vector(-0.8, 0, 0.61)), Array(Vector(140.97, 11, -20.85), Vector(0.09, 0, 1)), Array(Vector(144.24, 11, -20.05), Vector(-0.87, 0, 0.49)), Array(Vector(141.03, 10.01, -10.69), Vector(0.32, 0, 0.95)), Array(Vector(155.95, 10.01, -7.09), Vector(-1, 0, 0.04)), Array(Vector(162.87, 10.01, -8.53), Vector(-0.98, 0, 0.19)), Array(Vector(155.67, 10.01, 5.48), Vector(-0.7, 0, 0.71)), Array(Vector(101.25, 12.34, 0.99), Vector(0.26, 0, 0.97)), Array(Vector(111.05, 12.34, 8.61), Vector(-0.99, 0, 0.14)), Array(Vector(98.5, 18.88, 24.82), Vector(-0.14, 0, -0.99)), Array(Vector(122.38, 11, 36.85), Vector(-0.98, 0, 0.19)), Array(Vector(133.56, 11.01, 46.77), Vector(-0.86, 0, -0.51)), Array(Vector(89.58, 11.01, 17.06), Vector(0.99, 0, -0.13))));
    }
}

rule ("Subroutine RespawnsHOLLYWOOD") {
    event {
        Subroutine;
        RespawnsHOLLYWOOD;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(45.8, 2.75, -45.42), Vector(-1, 0, 0.07)), Array(Vector(47.43, 2.75, -64.9), Vector(-0.97, 0, 0.24)), Array(Vector(35.06, 1.8, -29.22), Vector(-0.85, 0, -0.53)), Array(Vector(32.24, 2.75, -62.28), Vector(0.23, 0, 0.97)), Array(Vector(28.21, 1.86, -71.5), Vector(-0.36, 0, -0.93)), Array(Vector(19.1, 1.75, -93.56), Vector(0.58, 0, 0.82)), Array(Vector(-1.82, 4.79, -65.06), Vector(0.97, 0, -0.24)), Array(Vector(-6.45, 4, -65.06), Vector(0.37, 0, 0.93)), Array(Vector(8.52, 4.79, -64.91), Vector(-0.54, 0, 0.84)), Array(Vector(-18.79, 1.75, -47.45), Vector(0.93, 0, -0.37)), Array(Vector(-19.17, 5.75, -52.35), Vector(-0.49, 0, -0.87)), Array(Vector(-17.12, 1.73, -77.89), Vector(0.3, 0, 0.95)), Array(Vector(-8.17, 1.6, -73.87), Vector(-0.2, 0, 0.98)), Array(Vector(-16.17, 1.73, -71.41), Vector(0.98, 0, -0.21)), Array(Vector(6.37, 5.83, -28.17), Vector(0.89, 0, 0.45)), Array(Vector(5.83, 5.75, -32.47), Vector(-0.97, 0, -0.24)), Array(Vector(-10.73, 1.75, -10.95), Vector(0.91, 0, -0.42)), Array(Vector(10, 1.75, -1.37), Vector(-0.84, 0, -0.54)), Array(Vector(5.23, 1.75, -10.44), Vector(1, 0, 0.01)), Array(Vector(15.26, 1.75, -8.25), Vector(-0.2, 0, -0.98)), Array(Vector(3.03, 1.75, -33.7), Vector(0.8, 0, 0.6)), Array(Vector(12.55, 3.33, -33.03), Vector(-1, 0, 0.04)), Array(Vector(-0.33, 1.87, -29.95), Vector(-0.26, 0, 0.97)), Array(Vector(13.55, 1.75, -40.25), Vector(0.9, 0, 0.44)), Array(Vector(-12.58, 1.73, -58.24), Vector(0.76, 0, 0.65)), Array(Vector(0.99, 1.6, -83.53), Vector(0.65, 0, 0.76)), Array(Vector(26.73, 1.61, -47.34), Vector(-0.96, 0, 0.28)), Array(Vector(26.73, 1.61, -47.34), Vector(-0.15, 0, 0.99)), Array(Vector(8.25, 2, -66.19), Vector(-0.64, 0, -0.77)), Array(Vector(2.55, 2, -67.58), Vector(0.2, 0, 0.98)), Array(Vector(2.76, 3.97, -12.79), Vector(-0.35, 0, -0.94)), Array(Vector(-6.4, 1.6, -40.34), Vector(0.86, 0, 0.51)), Array(Vector(42.16, 1.75, -68.16), Vector(-0.99, 0, 0.12)), Array(Vector(42.16, 1.75, -68.16), Vector(-0.48, 0, -0.88)), Array(Vector(37.74, 2.75, -53.24), Vector(-1, 0, -0.02)), Array(Vector(27.47, 1.63, -93.54), Vector(-0.72, 0, 0.7)), Array(Vector(37.79, 1.6, -83.91), Vector(-0.13, 0, 0.99)), Array(Vector(22.42, 1.86, -78.92), Vector(0.92, 0, -0.4)), Array(Vector(9.67, 2.78, -69.69), Vector(0.75, 0, 0.66)), Array(Vector(-2.33, 1.6, -67.64), Vector(0.47, 0, -0.88)), Array(Vector(42.82, 2.75, -63.16), Vector(-0.97, 0, 0.22)), Array(Vector(38.91, 2.75, -46.44), Vector(-0.07, 0, 1)), Array(Vector(48.88, 2.75, -52.79), Vector(-0.77, 0, 0.64)), Array(Vector(49.57, 2.75, -58.58), Vector(-0.85, 0, -0.52)), Array(Vector(10.46, 1.75, -9.64), Vector(0.73, 0, -0.69)), Array(Vector(-1.58, 1.75, -5.51), Vector(-0.03, 0, -1)), Array(Vector(-21.11, 5.75, -39.24), Vector(0.44, 0, -0.9)), Array(Vector(-17.32, 3.75, -41.94), Vector(0.58, 0, -0.81)), Array(Vector(-26.53, 5.75, -46.69), Vector(0.44, 0, -0.9)), Array(Vector(-18.32, 5.75, -56.49), Vector(-0.18, 0, -0.98)), Array(Vector(-19.43, 1.73, -77.36), Vector(0.83, 0, 0.56)), Array(Vector(-17.66, 1.73, -65.59), Vector(1, 0, -0.02)), Array(Vector(7.75, 2, -64.77), Vector(-0.71, 0, 0.7)), Array(Vector(1.07, 1.87, -24.32), Vector(-0.48, 0, -0.88)), Array(Vector(9.13, 1.6, -51.76), Vector(-0.95, 0, 0.31)), Array(Vector(-8.43, 1.75, -14.79), Vector(0.85, 0, 0.53)), Array(Vector(1.27, 6, -65.79), Vector(0.98, 0, -0.21)), Array(Vector(22.38, 1.63, -94.91), Vector(0.07, 0, 1)), Array(Vector(35.08, 1.6, -76.76), Vector(0.32, 0, 0.95)), Array(Vector(33.44, 2.12, -79.98), Vector(-0.41, 0, -0.91)), Array(Vector(36.83, 1.6, -75.59), Vector(-0.14, 0, 0.99)), Array(Vector(51.04, 5.43, -65.63), Vector(-0.43, 0, 0.9)), Array(Vector(55.21, 2.75, -49.21), Vector(-0.98, 0, -0.2)), Array(Vector(29.89, 2.75, -60.86), Vector(0.87, 0, 0.49)), Array(Vector(43.13, 2.75, -32.04), Vector(-0.87, 0, -0.48)), Array(Vector(24.27, 2.53, -28.47), Vector(-0.99, 0, 0.17)), Array(Vector(18.15, 1.75, -13.78), Vector(-0.94, 0, 0.34)), Array(Vector(8.41, 3.69, 1.32), Vector(-0.39, 0, -0.92)), Array(Vector(-12.17, 1.6, -20.28), Vector(0.83, 0, -0.55)), Array(Vector(4.06, 1.75, -29.17), Vector(0.92, 0, 0.39)), Array(Vector(0.14, 2, -56.11), Vector(0.74, 0, -0.68)), Array(Vector(-4.13, 1.6, -82.23), Vector(0.65, 0, 0.76)), Array(Vector(12.42, 1.75, -85.35), Vector(0.28, 0, 0.96)), Array(Vector(35.04, 1.6, -86.68), Vector(-0.57, 0, 0.82)), Array(Vector(32.27, 1.62, -42.54), Vector(-0.81, 0, -0.58)), Array(Vector(33.16, 1.75, -28.74), Vector(-0.64, 0, -0.76)), Array(Vector(16.62, 1.75, -41.02), Vector(-0.12, 0, 0.99)), Array(Vector(-0.05, 1.75, -32.07), Vector(0.08, 0, -1)), Array(Vector(-16.97, 1.75, -46.54), Vector(0.76, 0, -0.65)), Array(Vector(-27.25, 5.75, -38.52), Vector(0.49, 0, -0.87)), Array(Vector(-25.04, 5.75, -52.57), Vector(1, 0, -0.02)), Array(Vector(-14.11, 1.73, -69.58), Vector(0.74, 0, -0.67)), Array(Vector(-16.76, 1.73, -62.03), Vector(0.86, 0, -0.52))));
    }
}

rule ("Subroutine RespawnsBLIZZWORLD") {
    event {
        Subroutine;
        RespawnsBLIZZWORLD;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(-13.32, 1.94, 85.29), Vector(-0.71, 0, 0.71)), Array(Vector(-22.94, 0.29, 114.41), Vector(-0.41, 0, -0.91)), Array(Vector(-27.47, 0.29, 112.51), Vector(0.52, 0, -0.86)), Array(Vector(-28.62, 0.29, 102.19), Vector(-0.97, 0, -0.26)), Array(Vector(-20.8, 2.07, 104.07), Vector(0.13, 0, -0.99)), Array(Vector(-27.19, 6, 86.44), Vector(0.69, 0, 0.72)), Array(Vector(-42.26, -0.11, 97.26), Vector(0.41, 0, -0.91)), Array(Vector(-55.14, -0.19, 98.16), Vector(0.04, 0, -1)), Array(Vector(-45.56, -0.2, 89.21), Vector(-0.98, 0, -0.21)), Array(Vector(-62, 1.03, 73.03), Vector(0.36, 0, 0.93)), Array(Vector(-82.54, 0.25, 60.96), Vector(0.71, 0, 0.7)), Array(Vector(-56.69, -0.25, 58.8), Vector(-0.93, 0, 0.37)), Array(Vector(-52.64, -0.25, 62.08), Vector(-0.88, 0, 0.48)), Array(Vector(-51.08, -0.25, 67.29), Vector(-1, 0, -0.03)), Array(Vector(-40.34, 0.75, 55.53), Vector(-0.12, 0, 0.99)), Array(Vector(-20.06, 0.02, 61.19), Vector(-0.98, 0, 0.22)), Array(Vector(-15.81, 2, 74.19), Vector(-0.22, 0, 0.98)), Array(Vector(-75.88, 0.79, 92.86), Vector(0.02, 0, -1)), Array(Vector(-86.25, 0.75, 79.24), Vector(-0.28, 0, 0.96)), Array(Vector(-80.46, 4.88, 63.05), Vector(0.71, 0, 0.7)), Array(Vector(-90.78, 0.75, 88.79), Vector(0.72, 0, -0.69)), Array(Vector(-83.94, 0.75, 100.72), Vector(0.5, 0, -0.87)), Array(Vector(-85.42, 0.75, 92.49), Vector(0.73, 0, 0.68)), Array(Vector(-42.54, -0.21, 136.04), Vector(-0.95, 0, -0.3)), Array(Vector(-44.34, -2.21, 149.3), Vector(-0.87, 0, -0.5)), Array(Vector(-42.05, -2.21, 140.77), Vector(-1, 0, -0.09)), Array(Vector(-46.11, 1.91, 144.13), Vector(-0.96, 0, -0.28)), Array(Vector(-78.02, 1.75, 152.07), Vector(0.3, 0, -0.95)), Array(Vector(-70.62, 1.75, 156.48), Vector(0.68, 0, -0.73)), Array(Vector(-74.26, 0.75, 135.91), Vector(0.96, 0, 0.29)), Array(Vector(-77.29, 0.81, 117.5), Vector(0.82, 0, 0.57)), Array(Vector(-62.85, 0.75, 134.45), Vector(-0.95, 0, -0.3)), Array(Vector(-58.31, -0.11, 127.24), Vector(0.99, 0, -0.12)), Array(Vector(-67.23, 1.12, 107.28), Vector(0.27, 0, -0.96)), Array(Vector(-81.96, 0.25, 71.3), Vector(0.97, 0, 0.25)), Array(Vector(-71.23, 0.25, 62.34), Vector(0.03, 0, 1)), Array(Vector(-29.85, 0, 56.9), Vector(-0.1, 0, 0.99)), Array(Vector(-16.21, 2, 62.5), Vector(-0.74, 0, 0.68)), Array(Vector(-19.59, 2, 69.57), Vector(0.29, 0, 0.96)), Array(Vector(-25.97, 6, 88.92), Vector(0.29, 0, -0.96)), Array(Vector(-42.92, -0.12, 131.24), Vector(-0.97, 0, -0.26)), Array(Vector(-29.96, -2.21, 148.52), Vector(-0.96, 0, -0.27)), Array(Vector(-44.04, -0.19, 97.29), Vector(0.09, 0, -1)), Array(Vector(-44.1, -0.19, 97.37), Vector(-0.9, 0, 0.43)), Array(Vector(-55.7, -0.19, 92.29), Vector(-0.01, 0, -1)), Array(Vector(-49.45, -0.19, 87.06), Vector(-1, 0, -0.02)), Array(Vector(-84.53, 0.25, 63.82), Vector(0.96, 0, 0.27)), Array(Vector(-80.4, 0.25, 59.16), Vector(0.34, 0, 0.94)), Array(Vector(-70.17, 0.25, 64.05), Vector(-0.71, 0, 0.7)), Array(Vector(-79.94, 0.25, 73.29), Vector(0.71, 0, -0.7)), Array(Vector(-81.66, 4.88, 66.56), Vector(0.82, 0, 0.57)), Array(Vector(-77.28, 4.88, 61.73), Vector(0.55, 0, 0.83)), Array(Vector(-53.19, -0.25, 69.27), Vector(-0.99, 0, -0.15)), Array(Vector(-23.64, 0, 55.39), Vector(-0.57, 0, 0.82)), Array(Vector(-27.33, 0.29, 107.11), Vector(-0.65, 0, -0.76)), Array(Vector(-101.16, 0.75, 93.04), Vector(0.99, 0, -0.14)), Array(Vector(-88.14, 0.75, 82.18), Vector(0.96, 0, 0.28)), Array(Vector(-95.9, 1.61, 86.82), Vector(0.8, 0, 0.6)), Array(Vector(-36.13, -2.21, 146.91), Vector(-0.96, 0, -0.27)), Array(Vector(-52.87, -0.25, 147.39), Vector(0.29, 0, -0.96)), Array(Vector(-71.92, 1.75, 149.72), Vector(-0.59, 0, -0.81)), Array(Vector(-68.42, 1.75, 150.16), Vector(0.95, 0, -0.3)), Array(Vector(-77.19, 1.75, 156.09), Vector(0.58, 0, -0.82)), Array(Vector(-77.72, 0.9, 139.31), Vector(0.98, 0, -0.21))));
    }
}

rule ("Subroutine RespawnsEICHENWALDE") {
    event {
        Subroutine;
        RespawnsEICHENWALDE;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(66, 16.03, -63.59), Vector(0.96, 0, -0.28)), Array(Vector(60.85, 6.72, -77.36), Vector(-0.66, 0, 0.75)), Array(Vector(55.58, 5.98, -100.31), Vector(-0.24, 0, -0.97)), Array(Vector(62.48, 6.72, -109.84), Vector(-0.9, 0, 0.44)), Array(Vector(66.25, 10.5, -116.92), Vector(0.9, 0, 0.44)), Array(Vector(29.54, 10.4, -94.07), Vector(0.99, 0, 0.1)), Array(Vector(34.99, 12.72, -106.34), Vector(0.78, 0, 0.62)), Array(Vector(101.12, 12.72, -108.84), Vector(-0.59, 0, 0.81)), Array(Vector(101.12, 12.72, -108.84), Vector(-0.89, 0, -0.45)), Array(Vector(95.87, 12.72, -105.25), Vector(0.43, 0, 0.9)), Array(Vector(92.4, 18.68, -66.33), Vector(-0.65, 0, -0.76)), Array(Vector(75.19, 12.66, -71.86), Vector(-0.38, 0, 0.93)), Array(Vector(81.9, 13.04, -65.17), Vector(-0.22, 0, -0.97)), Array(Vector(57.1, 6.72, -108.97), Vector(0.99, 0, 0.15)), Array(Vector(67.99, 18.05, -76.64), Vector(-0.56, 0, 0.83)), Array(Vector(58.25, 11.72, -84.47), Vector(-0.63, 0, 0.78)), Array(Vector(88.98, 12.8, -63.53), Vector(-0.27, 0, -0.96)), Array(Vector(28.63, 8, -87.77), Vector(0.58, 0, 0.81)), Array(Vector(52.49, 10.72, -120.62), Vector(0.39, 0, 0.92)), Array(Vector(58.2, 10.72, -121.73), Vector(-0.03, 0, 1)), Array(Vector(54.9, 4.72, -89.37), Vector(0.08, 0, -1)), Array(Vector(55.91, 4.72, -85.47), Vector(0.36, 0, 0.93)), Array(Vector(53.6, 6.72, -76.03), Vector(0.52, 0, 0.85)), Array(Vector(51.64, 11.72, -82.04), Vector(0.91, 0, 0.42)), Array(Vector(60.8, 11.72, -75.62), Vector(-0.55, 0, 0.84)), Array(Vector(102.95, 12.72, -71.18), Vector(-0.92, 0, -0.38)), Array(Vector(99.26, 11.85, -98.24), Vector(-0.42, 0, -0.91)), Array(Vector(105.76, 12.72, -111.07), Vector(-0.9, 0, 0.44)), Array(Vector(56.01, 10.72, -116.71), Vector(0.65, 0, 0.76)), Array(Vector(52.58, 21.2, -65.27), Vector(0.97, 0, -0.26)), Array(Vector(70.15, 18.04, -69.32), Vector(-0.85, 0, -0.53)), Array(Vector(54.42, 10.72, -125.17), Vector(0.23, 0, 0.97)), Array(Vector(31.08, 8, -86.94), Vector(0.28, 0, 0.96)), Array(Vector(31.89, 6.03, -73.7), Vector(1, 0, -0.1)), Array(Vector(35.79, 5.25, -51.97), Vector(0.17, 0, -0.98)), Array(Vector(35.79, 5.25, -51.97), Vector(0.9, 0, 0.44)), Array(Vector(57.84, 6.72, -73.97), Vector(-0.32, 0, 0.95)), Array(Vector(64.75, 4.72, -82.1), Vector(-0.91, 0, -0.4)), Array(Vector(104.78, 12.75, -71.8), Vector(-0.87, 0, -0.5)), Array(Vector(100.06, 10.72, -96.11), Vector(0.29, 0, 0.96)), Array(Vector(100.06, 10.72, -96.11), Vector(-0.38, 0, -0.93)), Array(Vector(103.84, 12.72, -115.11), Vector(-0.69, 0, 0.72)), Array(Vector(94.53, 12.72, -112.97), Vector(-0.39, 0, 0.92)), Array(Vector(47.3, 8.45, -102.74), Vector(-0.96, 0, 0.27)), Array(Vector(50.26, 6.72, -107.19), Vector(0.88, 0, 0.47)), Array(Vector(61.05, 4.72, -95.46), Vector(-0.83, 0, 0.56))));
    }
}

rule ("Subroutine RespawnsECOPOINT") {
    event {
        Subroutine;
        RespawnsECOPOINT;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(-10.62, 7, 9.12), Vector(-0.44, 0, -0.9)), Array(Vector(-9.88, 7, -8.47), Vector(-0.52, 0, 0.86)), Array(Vector(-6.52, 7.24, -9.73), Vector(0.87, 0, 0.49)), Array(Vector(-6.52, 7.24, 9.73), Vector(0.87, 0, -0.49)), Array(Vector(23.35, 6.02, -18.8), Vector(-0.75, 0, 0.67)), Array(Vector(24.12, 6.01, 15.26), Vector(-0.96, 0, 0.27)), Array(Vector(23.16, 6.01, 18.9), Vector(-0.69, 0, -0.73)), Array(Vector(11.04, 8.04, 60.32), Vector(-0.25, 0, -0.97)), Array(Vector(6.64, 8.04, 55.91), Vector(0.14, 0, -0.99)), Array(Vector(-4.78, 7, 52.65), Vector(-0.7, 0, -0.71)), Array(Vector(4.44, 7.39, -25.38), Vector(0.33, 0, 0.95)), Array(Vector(-32.12, 9, 6.11), Vector(1, 0, 0.01)), Array(Vector(-32.12, 9, -6.1), Left), Array(Vector(18.34, 11.21, 11.13), Vector(-0.36, 0, 0.93)), Array(Vector(-9.71, 6.93, -10.88), Vector(0.01, 0, -1)), Array(Vector(-9.15, 8.53, -0.23), Right), Array(Vector(-9.79, 6.9, 10.88), Forward), Array(Vector(13.85, 8.01, -59.45), Vector(-0.33, 0, 0.94)), Array(Vector(-7.8, 7, -50.47), Vector(-0.52, 0, 0.85)), Array(Vector(-14.91, 7.13, -32.01), Vector(0.92, 0, 0.39)), Array(Vector(-8.17, 7, 49.26), Vector(-0.69, 0, -0.72)), Array(Vector(-29, 9, 3.12), Vector(-0.23, 0, -0.97)), Array(Vector(-28.72, 9, -3.12), Vector(-0.29, 0, 0.96)), Array(Vector(-33.98, 9, -3.12), Vector(0.93, 0, 0.36)), Array(Vector(-34.1, 9, 3.12), Vector(0.94, 0, -0.35)), Array(Vector(-19.96, 7, -8.45), Vector(0.87, 0, 0.49)), Array(Vector(-19.96, 7, 8.3), Vector(0.8, 0, -0.6)), Array(Vector(-16.58, 7.52, 16.11), Vector(0.83, 0, -0.56)), Array(Vector(-16.6, 7.53, -16.1), Vector(0.8, 0, 0.61)), Array(Vector(22.03, 6.86, -12.56), Vector(0.15, 0, 0.99)), Array(Vector(21.98, 6.98, 12.32), Vector(0.22, 0, -0.98)), Array(Vector(24.12, 6.02, -15.56), Vector(-0.99, 0, -0.16)), Array(Vector(18.02, 4.63, -8.97), Forward), Array(Vector(18.02, 4.63, -8.97), Backward), Array(Vector(29.88, 3, -0.03), Vector(-0.86, 0, 0.5)), Array(Vector(29.88, 3, -0.03), Vector(-0.87, 0, -0.49)), Array(Vector(27.18, 3.16, 6.28), Vector(-0.57, 0, -0.82)), Array(Vector(27.16, 3.16, -6.26), Vector(-0.56, 0, 0.83)), Array(Vector(18, 4.67, 9.05), Vector(-0.01, 0, 1)), Array(Vector(18, 4.67, 9.05), Backward), Array(Vector(3.14, 7.4, 20.21), Vector(-0.07, 0, 1)), Array(Vector(6.51, 7.4, 23.58), Vector(-0.76, 0, -0.65)), Array(Vector(4.33, 7.4, 25.99), Vector(-0.5, 0, -0.87)), Array(Vector(13.73, 8.04, 59.49), Vector(-0.29, 0, -0.96)), Array(Vector(15.4, 8.96, 43.82), Vector(-0.99, 0, -0.1)), Array(Vector(3.61, 9.12, 47.12), Vector(0.87, 0, -0.5)), Array(Vector(-0.18, 7.56, 55.39), Vector(0.82, 0, -0.57)), Array(Vector(-0.18, 7.56, 55.39), Vector(-0.77, 0, -0.64)), Array(Vector(-15.59, 7.56, 31.85), Vector(0.98, 0, -0.22)), Array(Vector(-15.58, 7.55, -31.88), Vector(0.99, 0, 0.16)), Array(Vector(-0.83, 7.35, -54.49), Vector(0.95, 0, 0.32)), Array(Vector(-0.83, 7.35, -54.49), Vector(-0.85, 0, 0.53)), Array(Vector(3.67, 8.96, -47.3), Vector(0.77, 0, 0.63)), Array(Vector(15.34, 8.94, -43.62), Vector(-1, 0, 0.06)), Array(Vector(12.27, 8.16, -54.18), Vector(-0.31, 0, 0.95)), Array(Vector(3.6, 8.06, -19.77), Vector(0.36, 0, -0.93)), Array(Vector(15.36, 10.26, -27.81), Vector(0.46, 0, 0.89)), Array(Vector(19.08, 12, -15.51), Vector(-0.86, 0, -0.52)), Array(Vector(18.35, 11.46, -11.64), Vector(-0.43, 0, -0.9)), Array(Vector(18.35, 11.46, -11.64), Vector(-0.03, 0, 1)), Array(Vector(17.99, 11.36, 11.44), Vector(0.02, 0, -1)), Array(Vector(17.99, 11.36, 11.44), Vector(-0.37, 0, 0.93)), Array(Vector(15.5, 10.12, 28.16), Vector(0.62, 0, -0.78))));
    }
}

rule ("Subroutine RespawnsBLACKFOREST") {
    event {
        Subroutine;
        RespawnsBLACKFOREST;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(-8.38, 14.13, 23.08), Vector(-0.33, 0, 0.94)), Array(Vector(-4.79, 11.46, 36.3), Vector(0.96, 0, -0.27)), Array(Vector(0.13, 12.86, 12.54), Vector(0.25, 0, -0.97)), Array(Vector(7.86, 12.5, 12.59), Vector(-0.64, 0, -0.77)), Array(Vector(11.42, 12.5, 4.14), Vector(-0.93, 0, -0.36)), Array(Vector(7.86, 12.5, -2.6), Vector(-0.57, 0, 0.82)), Array(Vector(0.23, 12.84, -2.6), Vector(0.46, 0, 0.89)), Array(Vector(10.97, 17.86, -0.93), Vector(0.7, 0, -0.71)), Array(Vector(35.75, 14, -13.04), Right), Array(Vector(31.63, 17, -2.46), Vector(-1, 0, -0.02)), Array(Vector(26.45, 16.95, -16.91), Vector(-0.98, 0, 0.22)), Array(Vector(29.35, 12, -22.27), Vector(-0.07, 0, 1)), Array(Vector(28.78, 12, -22.53), Vector(-0.63, 0, -0.78)), Array(Vector(35.86, 12, -26.1), Vector(-0.87, 0, 0.49)), Array(Vector(13.43, 9.09, 1.62), Vector(0.96, 0, 0.27)), Array(Vector(14.83, 9, 8.24), Vector(0.95, 0, -0.31)), Array(Vector(27.95, 16.97, 22.93), Vector(-0.99, 0, -0.13)), Array(Vector(25.13, 16.89, 30.12), Vector(-0.9, 0, -0.43)), Array(Vector(-12.92, 15, 36.98), Vector(0.15, 0, -0.99)), Array(Vector(10.97, 16.95, 10.93), Vector(0.7, 0, 0.71)), Array(Vector(28.04, 16.98, -10.61), Vector(-0.99, 0, 0.12)), Array(Vector(-11.84, 13.44, -15.25), Vector(-0.24, 0, -0.97)), Array(Vector(-13.13, 15, -27.37), Vector(0.15, 0, 0.99)), Array(Vector(41.74, 12, 32.41), Vector(-1, 0, -0.06)), Array(Vector(38.72, 12, 35.11), Vector(-0.96, 0, -0.27)), Array(Vector(35.36, 12, 43.46), Vector(-0.55, 0, -0.84)), Array(Vector(29.09, 9, 1.63), Vector(-0.84, 0, 0.55)), Array(Vector(29.09, 9.3, 8.37), Vector(-0.81, 0, -0.59)), Array(Vector(19.13, 17.5, 4.27), Vector(-0.9, 0, -0.44)), Array(Vector(19.13, 17.5, 1.06), Vector(-0.98, 0, 0.18)), Array(Vector(19.13, 17.5, 5.73), Vector(-0.97, 0, 0.24)), Array(Vector(19.13, 17.5, 8.94), Vector(-0.98, 0, -0.21)), Array(Vector(4.3, 17.5, 12.79), Backward), Array(Vector(4.64, 17.5, -2.77), Forward), Array(Vector(-6.11, 11.81, -26.52), Vector(0.98, 0, 0.22)), Array(Vector(-4.65, 11.9, -22.67), Vector(-0.52, 0, 0.86)), Array(Vector(-4.65, 11.9, -22.67), Vector(0.51, 0, -0.86)), Array(Vector(-4.4, 11.81, 32.38), Vector(0.5, 0, 0.87)), Array(Vector(-4.4, 11.81, 32.38), Vector(-0.51, 0, -0.86)), Array(Vector(-14.17, 14.38, 33.86), Vector(0.4, 0, -0.92)), Array(Vector(-3.5, 18, 31.53), Vector(-0.94, 0, -0.33)), Array(Vector(-8.38, 18, 23.08), Vector(-0.31, 0, 0.95)), Array(Vector(-9.83, 16.1, -25.31), Vector(-0.25, 0, 0.97)), Array(Vector(-8.76, 18, -13.35), Vector(-0.3, 0, -0.95)), Array(Vector(-7.86, 13.44, -14.34), Vector(-0.17, 0, -0.98)), Array(Vector(0.15, 17.31, 10.01), Vector(0.7, 0, -0.71)), Array(Vector(0.14, 17.31, -0.01), Vector(0.7, 0, 0.72)), Array(Vector(-5.59, 13.09, 5.08), Vector(0.03, 0, -1)), Array(Vector(-5.59, 13.09, 5.08), Forward), Array(Vector(-8.69, 16.58, 34.53), Vector(-0.5, 0, -0.87)), Array(Vector(-14.58, 14.12, -23.61), Vector(0.56, 0, 0.83)), Array(Vector(-12.81, 13.07, -22.25), Vector(0.43, 0, 0.9)), Array(Vector(-11.37, 13, 32.38), Vector(0.33, 0, -0.94)), Array(Vector(30.84, 17, 12.49), Right), Array(Vector(32, 12, 41.38), Vector(-0.36, 0, -0.93)), Array(Vector(14.05, 11.49, 4.78), Vector(1, 0, 0.02)), Array(Vector(15.68, 9, 6.56), Vector(1, 0, -0.08)), Array(Vector(33.33, 12, -32.4), Vector(-0.43, 0, 0.9)), Array(Vector(39.42, 12, -22.05), Vector(-0.99, 0, 0.11)), Array(Vector(29.29, 12, 32.65), Vector(-0.88, 0, 0.48)), Array(Vector(29.29, 12, 32.65), Vector(-0.05, 0, -1)), Array(Vector(1.43, 11.05, 33.48), Vector(1, 0, -0.04)), Array(Vector(0.77, 10.92, -23.92), Vector(0.98, 0, 0.2)), Array(Vector(35.57, 14, 22.77), Vector(-1, 0, 0.02)), Array(Vector(34.51, 15.97, 17.84), Vector(-0.07, 0, 1)), Array(Vector(34.51, 15.97, 17.84), Vector(0.01, 0, -1)), Array(Vector(35.75, 17, 11.06), Vector(-0.8, 0, 0.61)), Array(Vector(35.75, 17, -1.01), Vector(-0.79, 0, -0.61)), Array(Vector(34.09, 16.02, -7.74), Vector(0.01, 0, -1)), Array(Vector(34.09, 16.02, -7.74), Vector(0.01, 0, 1)), Array(Vector(9.45, 12.5, 1.31), Vector(-0.83, 0, 0.56)), Array(Vector(8.71, 12.5, 4.99), Right), Array(Vector(8.12, 12.5, 9.23), Vector(-0.91, 0, -0.41))));
    }
}

rule ("Subroutine RespawnsLIJANGCONTROL") {
    event {
        Subroutine;
        RespawnsLIJANGCONTROL;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(40.96, 267, 312.98), Vector(-0.81, 0, 0.59)), Array(Vector(26.88, 267, 325.74), Vector(0.71, 0, -0.7)), Array(Vector(34.5, 267, 327.09), Vector(-0.17, 0, -0.98)), Array(Vector(26.75, 267, 316.84), Vector(-0.08, 0, -1)), Array(Vector(20.14, 270, 331.86), Vector(-1, 0, -0.05)), Array(Vector(28.85, 267, 280.4), Vector(-0.67, 0, -0.74)), Array(Vector(15.44, 267, 270.89), Vector(0.29, 0, 0.96)), Array(Vector(24.01, 267, 282.83), Vector(1, 0, -0.04)), Array(Vector(10.25, 270, 307.25), Vector(-0.69, 0, -0.72)), Array(Vector(-4.32, 274, 337.25), Backward), Array(Vector(3.8, 274, 337.25), Backward), Array(Vector(24.58, 267, 277.9), Vector(-0.7, 0, -0.72)), Array(Vector(-15.43, 267, 270.89), Vector(-0.29, 0, 0.96)), Array(Vector(-24.58, 267, 277.9), Vector(0.72, 0, -0.7)), Array(Vector(-27.97, 267, 281.19), Vector(0.56, 0, -0.83)), Array(Vector(-26.75, 267, 316.84), Vector(-0.14, 0, -0.99)), Array(Vector(-10.25, 270, 307.25), Vector(0.57, 0, -0.82)), Array(Vector(-40.48, 267, 314.15), Left), Array(Vector(-12.26, 270, 299.03), Vector(1, 0, -0.07)), Array(Vector(12.27, 270, 299.02), Vector(-1, 0, 0.04)), Array(Vector(5.13, 267.17, 292.12), Vector(0.41, 0, -0.91)), Array(Vector(-5.13, 267.17, 292.12), Vector(-0.41, 0, -0.91)), Array(Vector(-0.08, 278, 337.25), Backward), Array(Vector(-0.04, 270, 329.48), Backward), Array(Vector(35.51, 267, 317.28), Vector(-0.7, 0, -0.72)), Array(Vector(41.19, 266.15, 323.18), Vector(-0.7, 0, -0.72)), Array(Vector(-32.62, 267, 327.53), Vector(-0.02, 0, -1)), Array(Vector(-41.8, 266.13, 322.64), Vector(0.71, 0, -0.7)), Array(Vector(-35.12, 267, 316.08), Vector(0.71, 0, -0.7)), Array(Vector(5.32, 267.17, 267.42), Vector(-0.13, 0, 0.99)), Array(Vector(-5.32, 267.17, 267.42), Vector(0.13, 0, 0.99)), Array(Vector(-0.12, 274, 337.25), Backward), Array(Vector(44.06, 265, 325.86), Vector(-0.69, 0, -0.73)), Array(Vector(41.1, 265, 330.05), Vector(0.12, 0, -0.99)), Array(Vector(40.97, 265, 339.72), Vector(-0.37, 0, -0.93)), Array(Vector(23.62, 267, 330.68), Vector(0.67, 0, -0.74)), Array(Vector(19.55, 270, 349.55), Vector(0.73, 0, -0.68)), Array(Vector(10.78, 270, 340.97), Vector(0.7, 0, -0.72)), Array(Vector(9.75, 270, 330.75), Vector(1, 0, 0.05)), Array(Vector(25.91, 270, 337.62), Vector(-0.93, 0, -0.37)), Array(Vector(-16.74, 270, 346.7), Vector(0.11, 0, -0.99)), Array(Vector(-25.91, 270, 337.62), Vector(0.91, 0, -0.41)), Array(Vector(-17.78, 270, 347.89), Vector(-0.84, 0, -0.54)), Array(Vector(-30.43, 267, 335.94), Vector(-0.09, 0, -1)), Array(Vector(-22.47, 267, 329.51), Vector(-0.69, 0, -0.72)), Array(Vector(-41.96, 265, 340.7), Vector(0.31, 0, -0.95)), Array(Vector(-40.76, 265, 330.69), Vector(-0.18, 0, -0.98)), Array(Vector(-47.02, 265, 327.77), Vector(0.72, 0, -0.69)), Array(Vector(-22.85, 267, 278.31), Left), Array(Vector(22.86, 267, 278.31), Right), Array(Vector(31.84, 270, 347.07), Vector(-0.71, 0, -0.7)), Array(Vector(29.57, 267, 336.8), Vector(0.3, 0, -0.95)), Array(Vector(-20.44, 270, 332.15), Vector(0.94, 0, -0.34)), Array(Vector(-23.36, 270, 350.33), Vector(-0.42, 0, -0.91)), Array(Vector(46.32, 265, 336.94), Vector(-0.68, 0, -0.74)), Array(Vector(24.94, 270, 349.58), Vector(-0.03, 0, -1)), Array(Vector(19.58, 270, 343.92), Vector(-0.32, 0, -0.95)), Array(Vector(16.78, 270, 346.7), Vector(-0.1, 0, -0.99)), Array(Vector(28.27, 267, 285.36), Vector(0.7, 0, 0.71)), Array(Vector(28.27, 267, 285.36), Vector(-0.34, 0, -0.94)), Array(Vector(-24.01, 267, 282.83), Vector(-1, 0, -0.06)), Array(Vector(-33.24, 267, 289.56), Vector(-0.66, 0, 0.75)), Array(Vector(-33.24, 267, 289.56), Vector(0.63, 0, -0.77)), Array(Vector(-17.35, 269.95, 341.06), Vector(0.22, 0, -0.98)), Array(Vector(-9.75, 269.95, 331.6), Vector(-1, 0, -0.09)), Array(Vector(1.43, 270, 329.5), Vector(-0.36, 0, -0.93)), Array(Vector(-1.43, 270, 329.5), Vector(0.37, 0, -0.93)), Array(Vector(-4.16, 278, 337.14), Vector(-0.01, 0, -1)), Array(Vector(3.89, 278, 337.1), Backward)));
    }
}

rule ("Subroutine RespawnsKANEZAKA") {
    event {
        Subroutine;
        RespawnsKANEZAKA;
    }
    actions {
        "Spawn points:"
        Set Global Variable(SpawnPointSettings, Array(Array(Vector(4.17, 7, 22.05), Vector(-0.9, 0, -0.43)), Array(Vector(-5.05, 9.12, 38.49), Vector(-0.57, 0, -0.82)), Array(Vector(-33.42, 4, 41.35), Vector(0.51, 0, -0.86)), Array(Vector(-40.75, 6, 35.13), Vector(-0.44, 0, -0.9)), Array(Vector(-56.16, 8, 23.67), Vector(0.93, 0, 0.36)), Array(Vector(-47.79, 6, 19.61), Vector(0.85, 0, 0.53)), Array(Vector(-33.06, 6, 20.25), Vector(0.77, 0, 0.63)), Array(Vector(-11.17, 6.23, 44.06), Vector(-0.92, 0, -0.38)), Array(Vector(-16.74, 10.5, 20.99), Vector(-0.53, 0, -0.85)), Array(Vector(-15.93, 6, 20.01), Vector(-0.05, 0, -1)), Array(Vector(-0.66, 6.86, 2.92), Vector(-0.35, 0, 0.94)), Array(Vector(3.86, 6, 13.13), Vector(-0.7, 0, -0.71)), Array(Vector(10.07, 7.73, -32.26), Vector(-0.01, 0, 1)), Array(Vector(-5.08, 10, -42.01), Vector(-0.7, 0, 0.71)), Array(Vector(-14.08, 6, -36.9), Vector(0.66, 0, 0.75)), Array(Vector(-17.18, 6, -31.3), Vector(-1, 0, -0.1)), Array(Vector(-15.37, 6, -30.14), Vector(0.98, 0, -0.2)), Array(Vector(-10.57, 6, 15.63), Vector(0.75, 0, -0.66)), Array(Vector(-8.73, 6, -11.75), Vector(0.65, 0, -0.76)), Array(Vector(-11.1, 6, -11.3), Vector(-0.98, 0, -0.21)), Array(Vector(-16.88, 7.01, -57.01), Vector(0.35, 0, 0.94)), Array(Vector(-19.24, 7.01, -49.03), Vector(-0.99, 0, -0.12)), Array(Vector(-43.27, 10, -49.4), Vector(-0.66, 0, 0.75)), Array(Vector(-41.62, 11, -37.25), Vector(-0.98, 0, 0.22)), Array(Vector(-44.25, 10, -30.59), Vector(0.99, 0, 0.14)), Array(Vector(-58.3, 9, -9.46), Vector(0.76, 0, 0.65)), Array(Vector(-61.46, 11, -18.96), Vector(0.96, 0, 0.27)), Array(Vector(-58.95, 11, -38.05), Vector(0.7, 0, 0.72)), Array(Vector(-43.28, 13, -25.36), Vector(-0.68, 0, 0.74)), Array(Vector(-51.65, 11, -49.91), Vector(0.97, 0, -0.24)), Array(Vector(6.13, 7, -35.29), Vector(-0.72, 0, 0.69)), Array(Vector(14.14, 7, -29.3), Vector(-0.94, 0, -0.34)), Array(Vector(-27.83, 6, 9.99), Vector(-0.01, 0, 1)), Array(Vector(-25.64, 9, -57.29), Vector(-0.39, 0, 0.92)), Array(Vector(-8.65, 7.5, 43.93), Vector(0.76, 0, -0.65)), Array(Vector(-8.65, 7.5, 43.93), Vector(-1, 0, -0.08)), Array(Vector(-4.9, 10, 31.49), Vector(-0.71, 0, 0.7)), Array(Vector(-31.35, 4, 45.35), Vector(0.43, 0, -0.9)), Array(Vector(-26.65, 4, 45.35), Vector(-0.21, 0, -0.98)), Array(Vector(-58.11, 9, -6.17), Vector(0.98, 0, -0.21)), Array(Vector(-66.25, 12, -33), Vector(0.8, 0, 0.6)), Array(Vector(-66.25, 12, -27.74), Left), Array(Vector(-66.25, 12, -22), Vector(0.85, 0, -0.52)), Array(Vector(-43.85, 9.4, -55.29), Vector(0.86, 0, 0.52)), Array(Vector(-23.88, 7, -54.29), Vector(-0.58, 0, 0.82)), Array(Vector(-11.71, 7, -54.18), Vector(-0.19, 0, 0.98)), Array(Vector(10.57, 8.37, -41.1), Vector(-0.98, 0, 0.18)), Array(Vector(13.65, 8, -39.14), Vector(-0.75, 0, 0.66)), Array(Vector(9.02, 8, -35.95), Vector(0.79, 0, -0.62)), Array(Vector(12.8, 7, -22.79), Vector(-0.94, 0, 0.34)), Array(Vector(10.19, 6, -18.63), Vector(-0.53, 0, 0.85)), Array(Vector(10.19, 6, -18.63), Vector(-0.21, 0, -0.98)), Array(Vector(8.24, 9, 2.22), Vector(-0.96, 0, 0.29)), Array(Vector(8.24, 9, 2.22), Vector(0.01, 0, -1)), Array(Vector(8.69, 7.57, 6.89), Vector(-0.9, 0, 0.43)), Array(Vector(8.69, 7.57, 6.89), Vector(0.3, 0, -0.95)), Array(Vector(-32.47, 6.58, -11.38), Vector(0.71, 0, 0.71)), Array(Vector(-26.71, 10, -28.58), Vector(-1, 0, 0.05)), Array(Vector(-26.71, 10, -28.58), Vector(0.96, 0, 0.28)), Array(Vector(-23.75, 6, -28.43), Vector(0.93, 0, -0.36)), Array(Vector(-10.56, 10.5, 17.96), Vector(-0.98, 0, -0.2)), Array(Vector(-14.82, 10.5, 13.06), Vector(-0.31, 0, 0.95))));
    }
}

rule ("Create playzone FX") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.PlayzoneCenter != 0;
    }
    actions {
        Create Effect(Array(If-Then-Else(Compare(Distance Between(Local Player, Global.PlayzoneCenter), >=, Subtract(Global.PlayzoneRadius, 8)), Local Player, Empty Array)), Sphere, Color(Orange), Global.PlayzoneCenter, Global.PlayzoneRadius, Visible To);
    }
}

rule ("Tri­gger playzone") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Distance Between(Eye Position(Event Player), Global.PlayzoneCenter) >= Subtract(Global.PlayzoneRadius, 2);
        Global.PlayzoneCenter != 0;
    }
    actions {
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Speed Of(Event Player), To World, Incorporate Contrary Motion);
        Apply Impulse(Event Player, Vector(X Component Of(Direction Towards(Position Of(Event Player), Global.PlayzoneCenter)), 0, Z Component Of(Direction Towards(Position Of(Event Player), Global.PlayzoneCenter))), 5, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Up, 2, To World, Incorporate Contrary Motion);
        Play Effect(Event Player, Baptiste Biotic Launcher Explosion Sound, Color(White), Event Player, 20);
        Set Status(Event Player, Null, Stunned, 0.5);
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("ECOPOINT create TPs") {
    event {
        Ongoing - Global;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Ecopoint: Antarctica)), Compare(Current Map, ==, Map(Ecopoint: Antarctica Winter))) == True;
    }
    actions {
        Create Icon(Array(And((Local Player).IsPlayer, Is In Line of Sight(Eye Position(Local Player), Vector(-5, 9, -54), All Barriers Block LOS))), Vector(-5.2, 8, -54.64), Spiral, Visible To Position and Color, Color(Sky Blue), False);
        Create Effect(All Players(All Teams), Bad Aura, Color(Rose), Vector(-5.35, 8, -54.66), 1.5, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Sparkles, Color(Purple), Vector(-5.35, 8, -54.66), 1.5, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Beacon Sound, Color(Blue), Vector(-5.35, 8, -54.66), 100, Visible To Position and Radius);
        Create Icon(Array(And((Local Player).IsPlayer, Is In Line of Sight(Eye Position(Local Player), Vector(-13, 9, 44), All Barriers Block LOS))), Vector(-13.6, 8, 43.6), Spiral, Visible To Position and Color, Color(Sky Blue), False);
        Create Effect(All Players(All Teams), Bad Aura, Color(Rose), Vector(-13.8, 8, 43.57), 1.5, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Sparkles, Color(Purple), Vector(-13.8, 8, 43.57), 1.5, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Beacon Sound, Color(Blue), Vector(-13.8, 8, 43.57), 100, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Bad Aura, Color(Rose), Vector(-25, 31.5, -10.89), 0.5, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Bad Aura, Color(Rose), Vector(-25, 31.5, 10.89), 0.5, Visible To Position and Radius);
    }
}

rule ("ECOPOINT tri­gger right side TP") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Ecopoint: Antarctica)), Compare(Current Map, ==, Map(Ecopoint: Antarctica Winter))) == True;
        Distance Between(Event Player, Vector(-7.78, 8, -57.05)) <= 4.8;
    }
    actions {
        Play Effect(All Players(All Teams), Explosion Sound, Color(White), Vector(-5.3, 8, -54.7), 80);
        Play Effect(All Players(All Teams), Sombra Translocator Disappear Effect, Color(White), Vector(-5.3, 8, -54.7), 20);
        Set Player Variable(Event Player, L, 1.5);
        Chase Player Variable At Rate(Event Player, L, 0, 1, Destination and Rate);
        Set Player Variable(Event Player, A, Y Component Of(Facing Direction Of(Event Player)));
        Teleport(Event Player, Vector(-25, 31.5, -10.89));
        Set Facing(Event Player, Add(Normalize(Subtract(Vector(5, Y Component Of(Position Of(Event Player)), -23), Position Of(Event Player))), Vector(0, (Event Player).A, 0)), To World);
        Start Accelerating(Event Player, Up, 20, 20, To World, Direction Rate and Max Speed);
        Apply Impulse(Event Player, Vector(0, 0, 0), 2, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Down, 3, To World, Cancel Contrary Motion);
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Explosion Sound, Color(White), Position Of(Event Player), 200);
        Play Effect(All Players(All Teams), Sombra Translocator Reappear Effect, Color(White), Position Of(Event Player), 20);
        Wait(0.5, Ignore Condition);
        Stop Accelerating(Event Player);
    }
}

rule ("ECOPOINT tri­gger left side TP") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Ecopoint: Antarctica)), Compare(Current Map, ==, Map(Ecopoint: Antarctica Winter))) == True;
        Distance Between(Event Player, Vector(-16.3, 8, 41)) <= 4.9;
    }
    actions {
        Play Effect(All Players(All Teams), Explosion Sound, Color(White), Vector(-13.7, 8, 43.5), 80);
        Play Effect(All Players(All Teams), Sombra Translocator Disappear Effect, Color(White), Vector(-13.7, 8, 43.5), 20);
        Set Player Variable(Event Player, L, 1.5);
        Chase Player Variable At Rate(Event Player, L, 0, 1, Destination and Rate);
        Set Player Variable(Event Player, A, Y Component Of(Facing Direction Of(Event Player)));
        Teleport(Event Player, Vector(-25, 31.5, 10.89));
        Set Facing(Event Player, Add(Normalize(Subtract(Vector(0, Y Component Of(Position Of(Event Player)), 28), Position Of(Event Player))), Vector(0, (Event Player).A, 0)), To World);
        Start Accelerating(Event Player, Up, 20, 20, To World, Direction Rate and Max Speed);
        Apply Impulse(Event Player, Vector(0, 0, 0), 2, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Down, 3, To World, Cancel Contrary Motion);
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Explosion Sound, Color(White), Position Of(Event Player), 200);
        Play Effect(All Players(All Teams), Sombra Translocator Reappear Effect, Color(White), Position Of(Event Player), 20);
        Wait(0.5, Ignore Condition);
        Stop Accelerating(Event Player);
    }
}

rule ("FOREST create TP") {
    event {
        Ongoing - Global;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Black Forest Winter)), Compare(Current Map, ==, Map(Black Forest))) == True;
    }
    actions {
        Create In-World Text(Array(And(And(And((Local Player).IsPlayer, Is In Line of Sight(Eye Position(Local Player), Vector(-32, 13, 8), All Barriers Block LOS)), Compare(Angle Between Vectors(Facing Direction Of(Local Player), Direction Towards(Eye Position(Local Player), Vector(-32, 13, 8))), <, 15)), Compare(Distance Between(Vector(-32, 14.5, 8), Local Player), <=, 25))), Custom String("teleporter"), Vector(-32, 17, 8), 2, Clip Against Surfaces, Visible To Position and Color, Color(Rose), Visible Never);
        Create Effect(All Players(All Teams), Bad Aura, Color(Rose), Vector(-32, 13, 8), 3, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Sparkles, Color(Purple), Vector(-32, 13, 8), 3, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Beacon Sound, Color(Blue), Vector(-32, 13, 8), 100, Visible To Position and Radius);
    }
}

rule ("FOREST tri­gger TP") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Black Forest Winter)), Compare(Current Map, ==, Map(Black Forest))) == True;
        Distance Between(Event Player, Vector(-32, 13, 8)) <= 3;
    }
    actions {
        Play Effect(All Players(All Teams), Explosion Sound, Color(White), Vector(-32, 13, 8), 120);
        Play Effect(All Players(All Teams), Sombra Translocator Disappear Effect, Color(White), Vector(-32, 13, 8), 20);
        Set Player Variable(Event Player, L, 1.5);
        Chase Player Variable At Rate(Event Player, L, 0, 1, Destination and Rate);
        Set Player Variable(Event Player, A, Y Component Of(Facing Direction Of(Event Player)));
        Teleport(Event Player, Vector(29, 11, 5));
        Set Facing(Event Player, Add(Normalize(Subtract(Vector(0, Y Component Of(Position Of(Event Player)), 0), Position Of(Event Player))), Vector(0, (Event Player).A, 0)), To World);
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Explosion Sound, Color(White), Position Of(Event Player), 200);
        Play Effect(All Players(All Teams), Sombra Translocator Reappear Effect, Color(White), Position Of(Event Player), 20);
        Wait(0.75, Ignore Condition);
        Stop Accelerating(Event Player);
    }
}

rule ("HOLLYWOOD Locked zone 1") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Hollywood)), Compare(Current Map, ==, Map(Hollywood Halloween))) == True;
        Is On Ground(Event Player) == True;
        Distance Between(Event Player, Vector(2.88, 7.75, -15.9)) <= 2;
    }
    actions {
        Apply Impulse(Event Player, Vector Towards(Vector(2.88, 7.75, -15.9), Event Player), 1, To World, Cancel Contrary Motion);
        Set Status(Event Player, Null, Rooted, 0.2);
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("HOLLYWOOD Locked zone 2") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Hollywood)), Compare(Current Map, ==, Map(Hollywood Halloween))) == True;
        Distance Between(Event Player, Vector(37, 8.74, -66.5)) <= 6.3;
        Is On Ground(Event Player) == True;
        Absolute Value(Subtract(Y Component Of(Position Of(Event Player)), 8.9)) < 0.2;
    }
    actions {
        Apply Impulse(Event Player, Vector Towards(Vector(138, -100, 300), Event Player), 3, To World, Cancel Contrary Motion);
        Set Status(Event Player, Null, Rooted, 0.2);
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("CREATE Dorado launcher") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Dorado);
    }
    actions {
        Create Effect(All Players(All Teams), Good Aura, Color(Yellow), Vector(123.4, 10, -17.5), 0.5, Visible To Position and Radius);
    }
}

rule ("TRI­GGER Dorado launcher") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Current Map == Map(Dorado);
        Distance Between(Event Player, Vector(123.4, 10, -17.5)) <= 1.2;
    }
    actions {
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Speed Of(Event Player), To World, Incorporate Contrary Motion);
        Set Status(Event Player, Null, Rooted, 1);
        Play Effect(Event Player, Buff Impact Sound, Color(White), Vector(123.4, 10, -17.5), 30);
        Play Effect(Remove From Array(All Players(All Teams), Event Player), Buff Impact Sound, Color(White), Vector(123.4, 10, -17.5), 40);
        Apply Impulse(Event Player, Vector(-21.1, 20, 27.4), 44, To World, Cancel Contrary Motion);
        Disable Movement Collision With Environment(Event Player, False);
        Wait(0.4, Ignore Condition);
        Enable Movement Collision With Environment(Event Player);
    }
}

disabled rule ("CREATE Lijang Control launcher") {
    event {
        Ongoing - Global;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Lijiang Control Center)), Compare(Current Map, ==, Map(Lijiang Control Center Lunar New Year))) == True;
    }
    actions {
        Create Effect(All Players(All Teams), Good Aura, Color(Yellow), Vector(0, 271, 268), 0.5, Visible To Position and Radius);
    }
}

disabled rule ("TRI­GGER Lijang Control launcher") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Lijiang Control Center)), Compare(Current Map, ==, Map(Lijiang Control Center Lunar New Year))) == True;
        Distance Between(Event Player, Vector(0, 271, 268)) <= 1.2;
    }
    actions {
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Speed Of(Event Player), To World, Incorporate Contrary Motion);
        Set Status(Event Player, Null, Rooted, 1);
        Play Effect(Event Player, Buff Impact Sound, Color(White), Vector(0, 271, 268), 30);
        Play Effect(Remove From Array(All Players(All Teams), Event Player), Buff Impact Sound, Color(White), Vector(0, 271, 268), 40);
        Apply Impulse(Event Player, Vector(0, 16, 22), 38, To World, Cancel Contrary Motion);
        Disable Movement Collision With Environment(Event Player, False);
        Wait(1.2, Ignore Condition);
        Enable Movement Collision With Environment(Event Player);
    }
}

rule ("HOLLYWOOD platform boost PAYLOAD SIDE") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Hollywood)), Compare(Current Map, ==, Map(Hollywood Halloween))) == True;
        Distance Between(Event Player, Vector(13.2, 10.55, -32.1)) <= 2.3;
        Is On Ground(Event Player) == True;
        Update Every Frame(And(Compare(Y Component Of(Position Of(Event Player)), >=, 9), Compare(Y Component Of(Position Of(Event Player)), <, 10.4))) != False;
    }
    actions {
        Wait(0.016, Ignore Condition);
        If(Not(Is Jumping(Event Player)));
            Loop If Condition Is True;
            Wait Until(Is Jumping(Event Player), 0.016);
            Abort If(Not(Is Jumping(Event Player)));
        End;
        Apply Impulse(Event Player, Up, 12, To World, Cancel Contrary Motion);
        Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 20);
    }
}

rule ("HOLLYWOOD platform boost WALL SIDE") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Hollywood)), Compare(Current Map, ==, Map(Hollywood Halloween))) == True;
        Distance Between(Event Player, Vector(-6.21, 10.13, -58.94)) <= 2.3;
        Is On Ground(Event Player) == True;
        Update Every Frame(And(Compare(Y Component Of(Position Of(Event Player)), >=, 8.3), Compare(Y Component Of(Position Of(Event Player)), <, 9.88))) != False;
    }
    actions {
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
        If(Is Jumping(Event Player));
            Apply Impulse(Event Player, Up, 12, To World, Cancel Contrary Motion);
            Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 20);
    }
}

rule ("Hammond says hello back") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Communicating(Event Player, Hello) == True;
        Distance Between(Event Player, Eye Position(Global.OutOfBoundBot)) < 15;
        Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(Event Player), Eye Position(Global.OutOfBoundBot))) <= 16.5;
        Is In Line of Sight(Eye Position(Event Player), Eye Position(Global.OutOfBoundBot), Barriers Do Not Block LOS) == True;
    }
    actions {
        Wait(0.5, Ignore Condition);
        Communicate(Global.OutOfBoundBot, Hello);
        Wait(3, Ignore Condition);
    }
}

rule ("GLOBAL create Nano-Nuke Bastion") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Create Dummy Bot(Hero(Bastion), All Teams, 10, Vector(0, 999, 0), Up);
        Set Global Variable(NanoNukeBot, Last Created Entity);
        Start Forcing Dummy Bot Name(Global.NanoNukeBot, Custom String("join www.jinko.dev/discord"));
        Set Player Score(Global.NanoNukeBot, -69);
        Set Invisible(Global.NanoNukeBot, All);
        Set Status(Global.NanoNukeBot, Null, Phased Out, 9999);
        Set Gravity(Global.NanoNukeBot, 0);
        Start Modifying Hero Voice Lines(Global.NanoNukeBot, 0.5, False);
        Start Forcing Player Outlines(Global.NanoNukeBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        "for petra floor breaking"
        Start Scaling Player(Global.NanoNukeBot, 0.2, False);
    }
}

rule ("PETRA break floor over time") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.NanoNukeBot != False;
        Current Map == Map(Petra);
    }
    actions {
        For Global Variable(PetraPunches, 0, 50, 1);
            Wait(3, Ignore Condition);
            "for spectators joining during the match"
            Start Forcing Player Outlines(Global.NanoNukeBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
            Teleport(Global.NanoNukeBot, Random Value In Array(Array(Vector(-4, -11, 12), Vector(9.5, -11, 11.3), Vector(8.2, -11, 6.5), Vector(-3.3, -11, 6.5))));
            Start Holding Button(Global.NanoNukeBot, Button(Melee));
            Wait(0.016, Ignore Condition);
            Teleport(Global.NanoNukeBot, Vector(0, 999, 0));
        End;
    }
}

rule ("Death plane exploit loop") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Global.DEATH_PLANE_BOT_MAPS, Current Map) == True;
    }
    actions {
        Wait(10, Ignore Condition);
        Set Environment Credit Player(Global.OutOfBoundBot, Global.OutOfBoundBot);
        Start Forcing Player Outlines(Global.OutOfBoundBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        Loop;
    }
}

rule ("Death plane HAMMOND CHATEAU") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Or(Compare(Current Map, ==, Map(Château Guillard)), Compare(Current Map, ==, Map(Château Guillard Halloween))) == True;
    }
    actions {
        Create Dummy Bot(Hero(Wrecking Ball), All Teams, 11, Vector(200, 200, 80), Forward);
        Set Global Variable(OutOfBoundBot, Last Created Entity);
        Start Forcing Player Outlines(Global.OutOfBoundBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        Set Player Score(Global.OutOfBoundBot, -69);
        Start Forcing Dummy Bot Name(Global.OutOfBoundBot, Custom String("giant cheese eater"));
        "OutOfBoundBot.disableNameplatesFor(getAllPlayers())"
        Disable Movement Collision With Environment(Global.OutOfBoundBot, True);
        Set Max Health(Global.OutOfBoundBot, Absolute Value(100000000));
        Set Damage Dealt(Global.OutOfBoundBot, 0);
        Start Scaling Player(Global.OutOfBoundBot, 100, False);
        Set Gravity(Global.OutOfBoundBot, 0);
        Wait(2, Ignore Condition);
        Set Status(Global.OutOfBoundBot, Null, Invincible, 9999);
        Set Status(Global.OutOfBoundBot, Null, Phased Out, 9999);
        Set Environment Credit Player(Global.OutOfBoundBot, Global.OutOfBoundBot);
        Teleport(Global.OutOfBoundBot, Vector(206.4, -34.5, 92));
        Set Facing(Global.OutOfBoundBot, Backward, To Player);
        Wait(0.016, Ignore Condition);
        Start Facing(Global.OutOfBoundBot, If-Then-Else(And(And(And(Compare(Distance Between(Closest Player To(Global.OutOfBoundBot, All Teams), Vector(206.4, 0, 92)), <=, 25), Compare(Distance Between(Closest Player To(Global.OutOfBoundBot, All Teams), Vector(206, 0, 73)), <=, 13)), Compare(Y Component Of(Position Of(Closest Player To(Global.OutOfBoundBot, All Teams))), <, 3.5)), Has Spawned(Closest Player To(Global.OutOfBoundBot, All Teams))), Direction Towards(Eye Position(Global.OutOfBoundBot), Closest Player To(Global.OutOfBoundBot, All Teams)), Backward), 20, To World, Direction and Turn Rate);
    }
}

rule ("Death plane HAMMOND HOLLYWOOD") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Or(Compare(Current Map, ==, Map(Hollywood)), Compare(Current Map, ==, Map(Hollywood Halloween))) == True;
    }
    actions {
        Create Dummy Bot(Hero(Wrecking Ball), All Teams, 11, Vector(200, 200, 80), Forward);
        Set Global Variable(OutOfBoundBot, Last Created Entity);
        Start Forcing Player Outlines(Global.OutOfBoundBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        Set Player Score(Global.OutOfBoundBot, -69);
        Start Forcing Dummy Bot Name(Global.OutOfBoundBot, Custom String("giant cheese eater"));
        "OutOfBoundBot.disableNameplatesFor(getAllPlayers())"
        Disable Movement Collision With Environment(Global.OutOfBoundBot, True);
        Set Max Health(Global.OutOfBoundBot, Absolute Value(100000000));
        Set Damage Dealt(Global.OutOfBoundBot, 0);
        Start Scaling Player(Global.OutOfBoundBot, 100, False);
        Set Gravity(Global.OutOfBoundBot, 0);
        Wait(2, Ignore Condition);
        Set Status(Global.OutOfBoundBot, Null, Invincible, 9999);
        Set Status(Global.OutOfBoundBot, Null, Phased Out, 9999);
        Set Environment Credit Player(Global.OutOfBoundBot, Global.OutOfBoundBot);
        Teleport(Global.OutOfBoundBot, Vector(-16.7, -32.75, -14.25));
        Set Facing(Global.OutOfBoundBot, Direction Towards(Eye Position(Global.OutOfBoundBot), Vector(-4, 3, -12)), To World);
        Wait(0.016, Ignore Condition);
        Start Facing(Global.OutOfBoundBot, If-Then-Else(Compare(Distance Between(Closest Player To(Global.OutOfBoundBot, All Teams), Vector(-7, 0.8, -7)), <=, 12.2), Direction Towards(Eye Position(Global.OutOfBoundBot), Closest Player To(Global.OutOfBoundBot, All Teams)), Direction Towards(Eye Position(Global.OutOfBoundBot), Vector(-4, 3, -12))), 20, To World, Direction and Turn Rate);
    }
}

rule ("Death plane SIGMA BLACK FOREST") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Or(Compare(Current Map, ==, Map(Black Forest)), Compare(Current Map, ==, Map(Black Forest Winter))) == True;
    }
    actions {
        Create Dummy Bot(Hero(Sigma), All Teams, 11, Vector(1000, 1000, 1000), Forward);
        Set Global Variable(OutOfBoundBot, Last Created Entity);
        Start Forcing Player Outlines(Global.OutOfBoundBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        Set Player Score(Global.OutOfBoundBot, -69);
        Start Forcing Dummy Bot Name(Global.OutOfBoundBot, Custom String("Bigma"));
        "OutOfBoundBot.disableNameplatesFor(getAllPlayers())"
        Disable Movement Collision With Environment(Global.OutOfBoundBot, True);
        Set Max Health(Global.OutOfBoundBot, Absolute Value(100000000));
        Set Damage Dealt(Global.OutOfBoundBot, 0);
        Start Scaling Player(Global.OutOfBoundBot, 100, False);
        Set Gravity(Global.OutOfBoundBot, 0);
        Wait(2, Ignore Condition);
        Set Status(Global.OutOfBoundBot, Null, Invincible, 9999);
        Set Status(Global.OutOfBoundBot, Null, Invincible, 9999);
        Set Status(Global.OutOfBoundBot, Null, Phased Out, 9999);
        Set Environment Credit Player(Global.OutOfBoundBot, Global.OutOfBoundBot);
        Teleport(Global.OutOfBoundBot, Vector(-44, -25, -2));
        Set Facing(Global.OutOfBoundBot, Direction Towards(Eye Position(Global.OutOfBoundBot), Vector(-16.4, 15, -6)), To World);
    }
}

disabled rule ("Mei ECOPOINT") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Or(Compare(Current Map, ==, Map(Ecopoint: Antarctica)), Compare(Current Map, ==, Map(Ecopoint: Antarctica Winter))) == True;
    }
    actions {
        Create Dummy Bot(Hero(Mei), All Teams, 11, Vector(26, 9.5, 0), Right);
        Set Global Variable(OutOfBoundBot, Last Created Entity);
        Start Forcing Player Outlines(Global.OutOfBoundBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        Set Player Score(Global.OutOfBoundBot, -69);
        Start Forcing Dummy Bot Name(Global.OutOfBoundBot, Custom String("Ice Cube"));
        Disable Nameplates(Global.OutOfBoundBot, All Players(All Teams));
        Disable Movement Collision With Environment(Global.OutOfBoundBot, False);
        Start Scaling Player(Global.OutOfBoundBot, 0.2, False);
        Set Gravity(Global.OutOfBoundBot, 0);
        Set Status(Global.OutOfBoundBot, Null, Invincible, 9999);
        Wait(2, Ignore Condition);
        Set Status(Global.OutOfBoundBot, Null, Asleep, 9999);
    }
}

rule ("Kiriko Kanezaka") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Current Map == Map(Kanezaka);
    }
    actions {
        Create Dummy Bot(Hero(Kiriko), All Teams, 11, Vector(-11.5, 10.8, 16.9), Right);
        Set Global Variable(OutOfBoundBot, Last Created Entity);
        Start Forcing Player Outlines(Global.OutOfBoundBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        Set Player Score(Global.OutOfBoundBot, -69);
        Start Forcing Dummy Bot Name(Global.OutOfBoundBot, Custom String("Kiricat"));
        Disable Nameplates(Global.OutOfBoundBot, All Players(All Teams));
        Disable Movement Collision With Environment(Global.OutOfBoundBot, True);
        Start Scaling Player(Global.OutOfBoundBot, 0.15, False);
        Set Gravity(Global.OutOfBoundBot, 0);
        Wait(2, Ignore Condition);
        Set Status(Global.OutOfBoundBot, Null, Knocked Down, 9999);
        Create Effect(Local Player, Ana Sleeping Effect, Color(Team 1), Add(Eye Position(Global.OutOfBoundBot), Vector(0, -0.1, 0)), 1, Visible To);
        Set Status(Global.OutOfBoundBot, Null, Phased Out, 9999);
    }
}

rule ("Junkrat Petra") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Current Map == Map(Petra);
    }
    actions {
        Create Dummy Bot(Hero(Junkrat), All Teams, 11, Vector(-17.94, 0.24, 17.11), Left);
        Set Global Variable(OutOfBoundBot, Last Created Entity);
        Start Forcing Player Outlines(Global.OutOfBoundBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        Set Player Score(Global.OutOfBoundBot, -69);
        Start Forcing Dummy Bot Name(Global.OutOfBoundBot, Custom String("Gold Hoarder"));
        Disable Nameplates(Global.OutOfBoundBot, All Players(All Teams));
        Set Gravity(Global.OutOfBoundBot, 0);
        Wait(2, Ignore Condition);
        Set Status(Global.OutOfBoundBot, Null, Knocked Down, 9999);
        Create Effect(Local Player, Ana Sleeping Effect, Color(Team 1), Vector(-18.8, 0.85, 17.11), 1, Visible To);
        Set Status(Global.OutOfBoundBot, Null, Phased Out, 9999);
    }
}

rule ("Count human kills of AI bots") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        (Attacker).IsAIBot == False;
        (Victim).IsAIBot != False;
    }
    actions {
        Modify Player Variable At Index(Attacker, AIBotKillsPerSlot, Slot Of(Victim), Add, 1);
    }
}

rule ("Store slot of AI bot that just joined") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).IsAIBot != False;
    }
    actions {
        Modify Global Variable(AIBotSlots, Append To Array, Slot Of(Event Player));
    }
}

rule ("Remove scores from players who killed the AI bot that just left") {
    event {
        Player Left Match;
        All;
        All;
    }
    conditions {
        Global.RevertKillsToAIBotsEnabled != False;
    }
    actions {
        Set Global Variable(TempLeavingAIBotSlot, -1);
        For Global Variable(i, 0, Number Of Slots(All Teams), 1);
            If(And(Array Contains(Global.AIBotSlots, Global.i), Not(And(Entity Exists(Players In Slot(Global.i, All Teams)), (Players In Slot(Global.i, All Teams)).IsAIBot))));
                Set Global Variable(TempLeavingAIBotSlot, Global.i);
                Break;
            End;
        End;
        If(Compare(Global.TempLeavingAIBotSlot, >=, 0));
            Modify Global Variable(AIBotSlots, Remove From Array By Value, Global.TempLeavingAIBotSlot);
            For Global Variable(i, 0, Number Of Slots(All Teams), 1);
                If(Not(Or((Players In Slot(Global.i, All Teams)).IsAIBot, Is Dummy Bot(Players In Slot(Global.i, All Teams)))));
                    Set Player Score(Players In Slot(Global.i, All Teams), Subtract(Score Of(Players In Slot(Global.i, All Teams)), Value In Array((Players In Slot(Global.i, All Teams)).AIBotKillsPerSlot, Global.TempLeavingAIBotSlot)));
                    Set Player Variable At Index(Players In Slot(Global.i, All Teams), AIBotKillsPerSlot, Global.TempLeavingAIBotSlot, 0);
                End;
            End;
    }
}

rule ("Remove AI bots to leave space for human players") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Subtract(Number Of Players(All Teams), Count Of(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)))) == Number Of Slots(All Teams);
        Event Player == First Of(Filtered Array(All Players(All Teams), (Current Array Element).IsAIBot));
    }
    actions {
        "let the setup playerJoined rule run first, so IsAIBot is set"
        Wait(0, Abort When False);
        Set Global Variable(TempAIBotBeingRemoved, First Of(Filtered Array(All Players(All Teams), (Current Array Element).IsAIBot)));
        Set Global Variable(TempAIBotBeingRemovedName, Custom String("{0}", Global.TempAIBotBeingRemoved));
        Abort If(Not(Global.TempAIBotBeingRemoved));
        Wait Until(Has Spawned(Host Player), 99999);
        Small Message(Host Player, Custom String("    {0} Removing {1} to leave space for more human players", Icon String(Bolt), Global.TempAIBotBeingRemovedName));
        Remove Player(Global.TempAIBotBeingRemoved);
        Wait Until(Not(Entity Exists(Global.TempAIBotBeingRemoved)), 2);
        "There may be AI Bots in the lobby waiting to join in. Let's remove those too."
        Loop If Condition Is True;
    }
}

rule ("Hardscope messages") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Firing Secondary(Event Player) == True;
        Is Firing Primary(Event Player) == False;
    }
    actions {
        Wait(4, Abort When False);
        Set Player Variable(Event Player, MedalQueue, Append To Array(Array(0), (Event Player).MedalQueue));
        If(Not(String Contains(Custom String("{0}", Event Player), Custom String("ml7"))));
            Small Message(Event Player, Random Value In Array(Array(Custom String("    Take your time..."), Custom String("    That's a long hardscope"), Custom String("    No quickscopes?"))));
        Else;
            Small Message(Event Player, Random Value In Array(Array(Custom String("    ML7 CAUGHT HARDSCOPING LMFAO"), Custom String("    POV you're hardscoping"), Custom String("    Even Demmos doesn't hardscope ml7LMAO"))));
        End;
        Abort;
    }
}

rule ("If melee an awake player") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Melee);
        Has Status(Victim, Asleep) == False;
    }
    actions {
        Set Player Variable(Event Player, MedalQueue, Append To Array(Array(0), (Event Player).MedalQueue));
        Small Message(Event Player, Custom String("    {0}{1}  Melee only kills sleeping players  {0}{1}", Ability Icon String(Hero(Ana), Button(Melee)), Ability Icon String(Hero(Ana), Button(Ability 1))));
        Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 120);
        Wait(0.5, Ignore Condition);
    }
}

rule ("If nanoboosted player uses disabled buttons") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Score Of(Event Player) == Global.NANO_SCORE;
        Is True For Any(Array(Button(Melee), Button(Reload), Button(Primary Fire), Button(Secondary Fire)), Is Button Held(Event Player, Current Array Element)) == True;
    }
    actions {
        Set Player Variable(Event Player, MedalQueue, Append To Array(Array(0), (Event Player).MedalQueue));
        Small Message(Event Player, Custom String("    {0}  Use sleep dart to win  {0}", Icon String(Exclamation Mark)));
        Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 120);
        Wait(1, Ignore Condition);
    }
}

rule ("Scoped shots") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Firing Primary(Event Player) == True;
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        Modify Player Variable(Event Player, ScopedShots, Add, 1);
        Set Player Variable(Event Player, ScopedAccuracy, Round To Integer(Multiply(Divide((Event Player).ScopedHits, (Event Player).ScopedShots), 100), To Nearest));
        Set Global Variable(BestScopedAccuracyValue, (Last Of(Sorted Array(Filtered Array(All Players(All Teams), Compare((Current Array Element).ScopedShots, >=, 15)), (Current Array Element).ScopedAccuracy))).ScopedAccuracy);
    }
}

rule ("Noscope shots") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Firing Primary(Event Player) == True;
        Is Firing Secondary(Event Player) == False;
    }
    actions {
        Modify Player Variable(Event Player, NoscopeShots, Add, 1);
        Set Player Variable(Event Player, NoscopeAccuracy, Round To Integer(Multiply(Divide((Event Player).NoscopeHits, (Event Player).NoscopeShots), 100), To Nearest));
        Set Global Variable(BestNoscopeAccuracyValue, (Last Of(Sorted Array(Filtered Array(All Players(All Teams), Compare((Current Array Element).NoscopeShots, >=, 15)), (Current Array Element).NoscopeAccuracy))).NoscopeAccuracy);
    }
}

rule ("Noscope hits") {
    event {
        Player Dealt Final Blow;
        All;
        Ana;
    }
    conditions {
        Is Firing Secondary(Attacker) == False;
        Is Meleeing(Attacker) == False;
    }
    actions {
        Modify Player Variable(Attacker, NoscopeHits, Add, 1);
        Set Player Variable(Attacker, NoscopeAccuracy, Round To Integer(Multiply(Divide((Attacker).NoscopeHits, (Attacker).NoscopeShots), 100), To Nearest));
        Set Global Variable(BestNoscopeAccuracyValue, (Last Of(Sorted Array(Filtered Array(All Players(All Teams), Compare((Current Array Element).NoscopeShots, >=, 15)), (Current Array Element).NoscopeAccuracy))).NoscopeAccuracy);
        Set Global Variable(BestNoscopeAccuracyPlayer, Event Player);
        If(Compare((Attacker).NoscopeHits, ==, 10));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 34);
            Big Message(Attacker, Custom String("{0}  No scope needed!  {0}", Ability Icon String(Hero(Sojourn), Button(Ultimate))));
    }
}

rule ("Sleep Dart shots") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Is Alive(Event Player) == True;
    }
    actions {
        Wait(0.3, Abort When False);
        Modify Player Variable(Event Player, SleepShots, Add, 1);
        Set Player Variable(Event Player, SleepAccuracy, Round To Integer(Multiply(Divide((Event Player).SleepHits, (Event Player).SleepShots), 100), To Nearest));
        Set Global Variable(BestSleepAccuracyValue, (Last Of(Sorted Array(Filtered Array(All Players(All Teams), Compare((Current Array Element).SleepShots, >=, 10)), (Current Array Element).SleepAccuracy))).SleepAccuracy);
    }
}

rule ("Subroutine SleepDarts") {
    event {
        Subroutine;
        SleepDarts;
    }
    actions {
        If(Not(Global.FirstSleep));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 9);
            Set Global Variable(FirstSleep, True);
        End;
        Set Player Variable(Victim, LastSleptBy, Attacker);
        For Global Variable(i, 0, Number Of Players(All Teams), 1);
            Start Forcing Player Outlines(Victim, Value In Array(All Players(All Teams), Global.i), True, If-Then-Else(Compare(Score Of(Victim), >, Score Of(Value In Array(All Players(All Teams), Global.i))), Custom Color(63, 191, 116, 255), Color(Sky Blue)), Default);
        End;
        Modify Player Variable(Attacker, SleepHits, Add, 1);
        Set Player Variable(Attacker, SleepAccuracy, Round To Integer(Multiply(Divide((Attacker).SleepHits, (Attacker).SleepShots), 100), To Nearest));
        Set Global Variable(BestSleepAccuracyValue, (Last Of(Sorted Array(Filtered Array(All Players(All Teams), Compare((Current Array Element).SleepShots, >=, 10)), (Current Array Element).SleepAccuracy))).SleepAccuracy);
        Set Global Variable(BestSleepAccuracyPlayer, Attacker);
        Wait(0.5, Ignore Condition);
        Set Player Variable(Victim, SleepsOnground, True);
        Wait Until(Not(Has Status(Victim, Asleep)), 4);
        Set Player Variable(Victim, SleepsOnground, False);
        Stop Forcing Player Outlines(Victim, All Players(All Teams));
        If(Is Alive(Victim));
            Set Player Variable(Victim, LastSleptBy, Null);
            If(Compare((Victim).KillStreak, >=, Global.RAMPAGE_STREAK));
                Start Forcing Player Outlines(Victim, All Players(All Teams), True, Color(Yellow), Default);
            Else If(Compare((Victim).KillStreak, >=, Global.ONFIRE_STREAK));
                Start Forcing Player Outlines(Victim, All Players(All Teams), True, Color(Orange), Default);
            Else;
                Stop Forcing Player Outlines(Victim, All Players(All Teams));
            End;
        End;
    }
}

rule ("Sleep Dart hits") {
    event {
        Player Took Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Event Was Environment == False;
    }
    actions {
        "Using the async thingie to keep the wait in the logic while allowing other rules to run"
        Start Rule(SleepDarts, Restart Rule);
    }
}

rule ("detect movement bug") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Has Status(Victim, Asleep) == True;
        Event Ability == Button(Ability 1);
        Event Was Environment == False;
    }
    actions {
        Set Player Variable(Victim, FixMovementBug, True);
    }
}

rule ("Kill logic") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Or(Compare(Event Ability, ==, Button(Primary Fire)), And(Compare(Event Ability, ==, Button(Melee)), Has Status(Victim, Asleep))) == True;
        Global.MatchEnded == False;
    }
    actions {
        Kill(Victim, Attacker);
        Set Player Variable(Attacker, EarnedCollateral, 0);
        Set Player Variable(Victim, HonorTarget, Attacker);
        Set Player Variable(Victim, HonorBar, 100);
        Chase Player Variable Over Time(Victim, HonorBar, 0, Add(Global.CUSTOM_RESPAWN_TIME, 0.9), Destination and Duration);
        If(Compare((Attacker).ComebackCount, >, 3));
            Set Player Variable(Attacker, ComebackCount, 0);
            Start Rule(SayVoiceline, Do Nothing);
            If(Compare((Attacker).ComebackCount, <, 10));
                Modify Player Variable(Attacker, MedalQueue, Append To Array, 10);
            Else;
                Modify Player Variable(Attacker, MedalQueue, Append To Array, 11);
                Big Message(Attacker, Custom String("{0}  Iron Will!  {0}", Ability Icon String(Hero(Pharah), Button(Jump))));
            End;
        End;
        If(Not(Global.FirstBlood));
            Set Global Variable(FirstBlood, Not(Global.FirstBlood));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 8);
            Start Rule(SayVoiceline, Do Nothing);
        End;
        "SCOPED KILLS"
        If(And(Is Firing Primary(Attacker), Is Firing Secondary(Attacker)));
            Modify Player Variable(Attacker, ScopedHits, Add, 1);
            Set Player Variable(Attacker, RaycastLastHitPlayer, Attacker);
            Set Player Variable(Attacker, RaycastLastHitPos, Eye Position(Attacker));
            "COLLATERALS"
            While(Compare((Attacker).RaycastLastHitPlayer, !=, Null));
                "if DEBUG_MODE: createBeam(getAllPlayers(), Beam.GRAPPLE, attacker.RaycastLastHitPos, raycast(attacker.RaycastLastHitPos, attacker.RaycastLastHitPos + eventPlayer.getFacingDirection() * 250, getAllPlayers(), [victim, attacker.RaycastLastHitPlayer], true).ge"
                Set Player Variable(Attacker, Temp, Ray Cast Hit Position((Attacker).RaycastLastHitPos, Add((Attacker).RaycastLastHitPos, Multiply(Facing Direction Of(Event Player), 250)), All Living Players(All Teams), Array(Victim, (Attacker).RaycastLastHitPlayer), True));
                Set Player Variable(Attacker, RaycastLastHitPlayer, Ray Cast Hit Player((Attacker).RaycastLastHitPos, Add((Attacker).RaycastLastHitPos, Multiply(Facing Direction Of(Event Player), 250)), All Living Players(All Teams), Array(Victim, (Attacker).RaycastLastHitPlayer), True));
                Set Player Variable(Attacker, RaycastLastHitPos, (Attacker).Temp);
                Kill((Attacker).RaycastLastHitPlayer, Attacker);
                Set Player Variable(Attacker, MedalQueue, Append To Array(Array(0), (Attacker).MedalQueue));
                Modify Player Variable(Attacker, KillStreak, Add, 1);
                Modify Player Variable(Attacker, EarnedCollateral, Add, 1);
            End;
            Set Player Variable(Attacker, ScopedAccuracy, Round To Integer(Multiply(Divide((Attacker).ScopedHits, (Attacker).ScopedShots), 100), To Nearest));
            Set Global Variable(BestScopedAccuracyPlayer, Last Of(Sorted Array(Filtered Array(All Players(All Teams), Compare((Current Array Element).ScopedShots, >=, 15)), (Current Array Element).ScopedAccuracy)));
            Set Global Variable(BestScopedAccuracyValue, (Global.BestScopedAccuracyPlayer).ScopedAccuracy);
            If(Compare((Attacker).EarnedCollateral, >, 1));
                Modify Player Variable(Attacker, MedalQueue, Append To Array, 30);
                Big Message(Attacker, Custom String("{0}  {1} collateral kills!  {0}", Ability Icon String(Hero(Zarya), Button(Ability 2)), (Attacker).EarnedCollateral));
                "For loop required for SYSMSG that target multiple players"
                For Global Variable(i, 0, Subtract(Number Of Players(All Teams), 1), 1);
                    Set Player Variable(Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i), MedalQueue, Append To Array(Array(0), (Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i)).MedalQueue));
                End;
                Small Message(Remove From Array(All Players(All Teams), Attacker), Custom String("    {0}  {1} got {2} collateral kills!", Ability Icon String(Hero(Zarya), Button(Ability 2)), Attacker, (Attacker).EarnedCollateral));
            End;
        Else If(Compare(Event Ability, ==, Button(Primary Fire)));
            Modify Player Variable(Attacker, KillStreak, Add, 1);
            Set Player Variable(Attacker, MedalQueue, Append To Array(Array(0), (Attacker).MedalQueue));
        Else;
            Modify Player Variable(Attacker, KillStreak, Add, 1);
            If(And(Is In Air(Victim), Is In Air(Attacker)));
                Modify Player Variable(Attacker, MedalQueue, Append To Array, 33);
                Big Message(Attacker, Custom String("{0}  Dream catcher!  {0}", Ability Icon String(Hero(Ramattra), Button(Ability 2))));
            End;
            Modify Player Variable(Attacker, Executes, Add, 1);
            Modify Player Variable(Attacker, PunchDrunk, Add, 1);
            Set Ammo(Attacker, 0, 15);
            Set Player Variable(Attacker, MedalQueue, Append To Array(Array(0), (Attacker).MedalQueue));
            Play Effect(If-Then-Else(Compare(Score Of(Victim), >, Score Of(Attacker)), All Players(All Teams), Remove From Array(All Players(All Teams), Victim)), Sigma Accretion Impact Sound, Color(White), Position Of(Victim), 55);
            "DEMOTIONS"
            If(Compare(Score Of(Victim), >=, Score Of(Attacker)));
                Set Player Variable(Attacker, DemotionVictim, Victim);
                Modify Player Variable(Attacker, MedalQueue, Append To Array, 3);
                Start Rule(SaySorry, Do Nothing);
                "For loop required for SYSMSG that target multiple players"
                For Global Variable(i, 0, Subtract(Number Of Players(All Teams), 2), 1);
                    Set Player Variable(Value In Array(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Global.i), MedalQueue, Append To Array(Array(0), (Value In Array(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Global.i)).MedalQueue));
                End;
                Small Message(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Custom String("    {0}  {1} demoted {2}!", Ability Icon String(Hero(Wrecking Ball), Button(Crouch)), Attacker, Victim));
                Set Player Variable(Victim, MedalQueue, Append To Array(Array(0), (Victim).MedalQueue));
                Small Message(Victim, Custom String("    {0}  {1} demoted you", Ability Icon String(Hero(Wrecking Ball), Button(Crouch)), Attacker));
                Set Player Score(Victim, Subtract(Score Of(Victim), 1));
                Modify Player Variable(Attacker, DemotedPlayers, Add, 1);
                If(Compare((Attacker).DemotedPlayers, ==, 5));
                    Modify Player Variable(Attacker, MedalQueue, Append To Array, 4);
                    Big Message(Attacker, Custom String("{0}  Terminator!  {0}", Ability Icon String(Hero(Baptiste), Button(Ability 2))));
                End;
                Play Effect(Attacker, Ana Biotic Grenade Explosion Sound, Color(White), Victim, 200);
                Set Player Variable(Victim, DemotedEffect, True);
                If(Compare(Score Of(Victim), ==, Subtract(Global.NANO_SCORE, 1)));
                    Modify Player Variable(Attacker, MedalQueue, Append To Array, 24);
                    Big Message(Attacker, Custom String("  Showstopper!  "));
                End;
            Else If(Compare(Score Of(Attacker), <, Global.NANO_SCORE));
                Modify Player Variable(Attacker, MedalQueue, Append To Array, 2);
                Set Ammo(Attacker, 0, 15);
            End;
            If(Compare((Attacker).PunchDrunk, ==, 3));
                Modify Player Variable(Attacker, MedalQueue, Append To Array, 38);
                Set Player Variable(Attacker, PunchDrunk, 0);
            End;
        End;
        If(Or(Compare((Victim).KillStreak, ==, Subtract(Global.ONFIRE_STREAK, 1)), Compare((Victim).KillStreak, ==, Subtract(Global.RAMPAGE_STREAK, 1))));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 19);
            Start Rule(SaySorry, Do Nothing);
        End;
        If(Compare((Victim).KillStreak, ==, Subtract(Global.NUCLEAR_STREAK, 1)));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 23);
            Start Rule(SaySorry, Do Nothing);
            Big Message(Remove From Array(All Players(All Teams), Attacker), Custom String("{0} saved everyone from {1}'s nuke!", Attacker, Victim));
            Big Message(Attacker, Custom String("{0}  You saved everyone from {1}'s nuke!  {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)), Victim));
        End;
        If((Victim).IsNuclear);
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 22);
            Big Message(Attacker, Custom String("You triggered {0}'s nuke!", Victim));
        End;
        If(Compare((Victim).KillStreak, ==, 0));
            Modify Player Variable(Victim, ComebackCount, Add, 1);
        End;
        If(And(Compare((Attacker).KillStreak, >, Global.BestKillstreakValue), Compare((Attacker).KillStreak, >=, Global.ONFIRE_STREAK)));
            Set Global Variable(BestKillstreakPlayer, Attacker);
            Set Global Variable(BestKillstreakValue, (Attacker).KillStreak);
        End;
        If(Compare(Score Of(Attacker), >, Global.NANO_SCORE));
            Set Player Score(Attacker, Global.NANO_SCORE);
        End;
        If(Compare(Ammo(Attacker, 0), ==, 0));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 32);
            Big Message(Attacker, Custom String("{0} Last bullet kill! {0}", Icon String(Club)));
        End;
        "STOLEN KILLS"
        If(And(Compare((Victim).LastSleptBy, !=, Null), Compare((Victim).LastSleptBy, !=, Attacker)));
            Set Player Variable(Attacker, StolenFrom, (Victim).LastSleptBy);
            Modify Player Variable(Attacker, StolenKills, Add, 1);
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 6);
            "For the assist"
            Set Player Variable((Attacker).StolenFrom, MedalQueue, Append To Array(Array(0), ((Attacker).StolenFrom).MedalQueue));
            "For the kill"
            Set Player Variable((Attacker).StolenFrom, MedalQueue, Append To Array(Array(0), ((Attacker).StolenFrom).MedalQueue));
            "For the message below"
            Set Player Variable((Attacker).StolenFrom, MedalQueue, Append To Array(Array(0), ((Attacker).StolenFrom).MedalQueue));
            If(Compare((Attacker).StolenKills, ==, 5));
                Modify Player Variable(Attacker, MedalQueue, Append To Array, 7);
                Big Message(Attacker, Custom String("{0}  Sleep thief:  {0}", Ability Icon String(Hero(Moira), Button(Secondary Fire))));
            End;
            Set Player Variable(Attacker, StolenFrom, Append To Array(Array(0), (Attacker).StolenFrom));
            Small Message((Attacker).StolenFrom, Custom String("    {0}  {1} stole your kill", Ability Icon String(Hero(Roadhog), Button(Ability 1)), Attacker));
            Start Rule(SayThanks, Do Nothing);
        End;
        If(Is Dead(Attacker));
            Start Rule(FromTheGrave, Do Nothing);
        End;
        Set Ultimate Charge(Attacker, Multiply(Divide(Score Of(Attacker), Global.NANO_SCORE), 100));
        If(Compare(Score Of(Attacker), ==, Subtract(Global.NANO_SCORE, 2)));
            Start Rule(SayUltStatus, Do Nothing);
        End;
        Set Player Variable(Attacker, ComebackCount, 0);
    }
}

rule ("Respawn logic") {
    event {
        Player Died;
        All;
        Ana;
    }
    conditions {
        Global.MatchEnded == False;
        Global.SpawnPointSettings != 0;
    }
    actions {
        Disable Nameplates(Event Player, Array(All Players(All Teams), Not((Local Player).IsPlayer)));
        Wait(0.7, Ignore Condition);
        Set Invisible(Event Player, All);
        Wait Until(Is Alive(Event Player), 9);
        Call Subroutine(RespawnSystem);
        Set Invisible(Event Player, None);
        Enable Nameplates(Event Player, All Players(All Teams));
    }
}

rule ("Reset players upon death") {
    event {
        Player Died;
        All;
        Ana;
    }
    actions {
        Stop Forcing Player Outlines(Event Player, All Players(All Teams));
        "for the death system message"
        Set Player Variable(Event Player, MedalQueue, Append To Array(Array(0), (Event Player).MedalQueue));
        Set Player Variable(Event Player, KillStreakBeforeDeath, (Event Player).KillStreak);
        Modify Player Variable(Event Player, Deaths, Add, 1);
        Set Player Variable(Event Player, SleepUsedAndDied, True);
        Set Player Variable(Event Player, SleepsOnground, False);
        Clear Status(Event Player, Burning);
        Set Player Variable(Event Player, IsOnFire, False);
        Set Player Variable(Event Player, IsOnRampage, False);
        Set Player Variable(Event Player, RampageSFX, False);
        Set Player Variable(Event Player, NanoDelay, Not((Event Player).NanoDelay));
        Set Player Variable(Event Player, Sandman, 0);
        Set Player Variable(Event Player, PunchDrunk, 0);
        Set Player Variable(Event Player, MultiKillCount, 0);
        Wait Until(Is Alive(Event Player), 69);
        Set Player Variable(Event Player, SleepLock, 0);
        Set Player Variable(Event Player, KillStreak, 0);
        Set Player Variable(Event Player, LastSleptBy, Null);
        If(Compare(Score Of(Event Player), <, Global.NANO_SCORE));
            Set Ultimate Charge(Event Player, Multiply(Divide(Score Of(Event Player), Global.NANO_SCORE), 100));
        End;
        Wait(Subtract(2.1, Global.CUSTOM_RESPAWN_TIME), Ignore Condition);
        Set Player Variable(Event Player, NanoDelay, 1);
        Wait(0.5, Ignore Condition);
        Set Player Variable(Event Player, DemotedEffect, Null);
    }
}

rule ("fix movement bug") {
    event {
        Player Died;
        All;
        Ana;
    }
    conditions {
        (Event Player).FixMovementBug == True;
    }
    actions {
        Wait Until(Is Alive(Event Player), 69);
        Start Forcing Player To Be Hero(Event Player, Hero(Ashe));
        Start Forcing Player To Be Hero(Event Player, Hero(Ana));
        Set Player Variable(Event Player, FixMovementBug, False);
    }
}

rule ("Send honor medal") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Button Held(Event Player, Button(Ability 2)) == True;
        (Event Player).HonorTarget != Null;
        (Event Player).HonorBar != 0;
    }
    actions {
        Modify Player Variable((Event Player).HonorTarget, HonorQueue, Append To Array, Event Player);
        Modify Player Variable((Event Player).HonorTarget, MedalQueue, Append To Array, 1);
        Set Player Variable(Event Player, HonorBar, 0);
        Set Player Variable(Event Player, MedalQueue, Append To Array(Array(0), (Event Player).MedalQueue));
        Small Message(Event Player, Custom String("    {0}  honor sent to {1}!", Icon String(Happy), (Event Player).HonorTarget));
        Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Color(White), Event Player, 200);
    }
}

rule ("sleep hit sys msg") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Event Was Environment == False;
    }
    actions {
        Set Player Variable(Attacker, MedalQueue, Append To Array(Array(0), (Attacker).MedalQueue));
    }
}

rule ("Jumps") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Jumping(Event Player) == True;
    }
    actions {
        Modify Player Variable(Event Player, Jumps, Add, 1);
        If(Compare((Event Player).Jumps, ==, 200));
            Modify Player Variable(Event Player, MedalQueue, Append To Array, 29);
    }
}

rule ("perfect quickscopes") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, ElimsBeforeQS, (Event Player).KillStreak);
        "Scope-in time"
        Wait(0.24, Abort When False);
        "1 frame time window"
        Wait Until(Is Firing Primary(Event Player), 0.016);
        If(Is Firing Primary(Event Player));
            "Scope-out time"
            Wait(0.16, Ignore Condition);
            If(And(Not(Is Firing Secondary(Event Player)), Compare((Event Player).KillStreak, >=, Add((Event Player).ElimsBeforeQS, 1))));
                Modify Player Variable(Event Player, MedalQueue, Append To Array, 5);
                Modify Player Variable(Event Player, PerfectQuickscopes, Add, 1);
                Set Player Variable(Event Player, PerfectQSVFX, True);
                Play Effect(Event Player, Wrecking Ball Minefield Explosion Sound, Color(Team 1), Add(Position Of(Event Player), Multiply(Throttle Of(Event Player), Speed Of(Event Player))), 200);
                If(Compare((Event Player).PerfectQuickscopes, ==, 5));
                    Modify Player Variable(Event Player, MedalQueue, Append To Array, 40);
                    Big Message(Event Player, Custom String("{0}  Perfectionist!  {0}", Ability Icon String(Hero(Kiriko), Button(Ultimate))));
                End;
                Wait(0.5, Ignore Condition);
                Set Player Variable(Event Player, PerfectQSVFX, Null);
    }
}

rule ("Quadfeed") {
    event {
        Player Earned Elimination;
        All;
        Ana;
    }
    actions {
        Set Player Variable(Attacker, QuadFeedTimes, Filtered Array((Attacker).QuadFeedTimes, Compare(Subtract(Total Time Elapsed, Current Array Element), <=, 7.5)));
        Modify Player Variable(Attacker, QuadFeedTimes, Append To Array, Total Time Elapsed);
        Set Player Variable(Remove From Array(All Players(All Teams), Attacker), QuadFeedTimes, Empty Array);
        If(Compare(Count Of((Attacker).QuadFeedTimes), ==, 4));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 25);
            Set Player Variable(Attacker, QuadFeedTimes, Empty Array);
            Big Message(Attacker, Custom String("{0}  Quadfeed!  {0}", Ability Icon String(Hero(Pharah), Button(Ultimate))));
            Play Effect(Attacker, Echo Sticky Bomb Explosion Sound, Color(Team 1), Add(Position Of(Attacker), Multiply(Throttle Of(Attacker), Speed Of(Attacker))), 200);
    }
}

rule ("Multikills") {
    event {
        Player Earned Elimination;
        All;
        Ana;
    }
    actions {
        Modify Player Variable(Attacker, MultiKillCount, Add, 1);
        If(Compare((Attacker).MultiKillCount, ==, 5));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 26);
            Play Effect(Attacker, Echo Sticky Bomb Explosion Sound, Color(Team 1), Add(Position Of(Attacker), Multiply(Throttle Of(Attacker), Speed Of(Attacker))), 200);
            "For loop required for SYSMSG that target multiple players"
            For Global Variable(i, 0, Subtract(Number Of Players(All Teams), 1), 1);
                Set Player Variable(Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i), MedalQueue, Append To Array(Array(0), (Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i)).MedalQueue));
            End;
            Small Message(Remove From Array(All Players(All Teams), Attacker), Custom String("    {0} got a pentakill!", Ability Icon String(Hero(Kiriko), Button(Ability 2))));
        Else If(Compare((Attacker).MultiKillCount, ==, 6));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 27);
            Play Effect(Attacker, Echo Sticky Bomb Explosion Sound, Color(Team 1), Add(Position Of(Attacker), Multiply(Throttle Of(Attacker), Speed Of(Attacker))), 200);
            "For loop required for SYSMSG that target multiple players"
            For Global Variable(i, 0, Subtract(Number Of Players(All Teams), 1), 1);
                Set Player Variable(Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i), MedalQueue, Append To Array(Array(0), (Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i)).MedalQueue));
            End;
            Small Message(Remove From Array(All Players(All Teams), Attacker), Custom String("    {0} got an ultrakill!", Ability Icon String(Hero(Zenyatta), Button(Primary Fire))));
        Else If(Compare((Attacker).MultiKillCount, >=, 7));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 28);
            Play Effect(Attacker, Echo Sticky Bomb Explosion Sound, Color(Team 1), Add(Position Of(Attacker), Multiply(Throttle Of(Attacker), Speed Of(Attacker))), 200);
            "For loop required for SYSMSG that target multiple players"
            For Global Variable(i, 0, Subtract(Number Of Players(All Teams), 1), 1);
                Set Player Variable(Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i), MedalQueue, Append To Array(Array(0), (Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i)).MedalQueue));
            End;
            Small Message(Remove From Array(All Players(All Teams), Attacker), Custom String("    {0} got a pentakill!", Ability Icon String(Hero(Zenyatta), Button(Ultimate))));
        End;
        Wait(3, Restart When True);
        Set Player Variable(Attacker, MultiKillCount, 0);
    }
}

rule ("Killstreak effects & announcements") {
    event {
        Player Earned Elimination;
        All;
        Ana;
    }
    conditions {
        Compare(Event Ability, ==, Button(Ability 1)) == False;
    }
    actions {
        If(And(And(Compare((Attacker).KillStreak, >=, Global.ONFIRE_STREAK), Is Alive(Attacker)), Not((Attacker).IsOnFire)));
            Set Player Variable(Attacker, IsOnFire, True);
            Set Status(Attacker, Null, Burning, 9999);
            Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(Team 1), Attacker, If-Then-Else(Compare(Event Player, ==, Local Player), 70, 200));
            Start Forcing Player Outlines(Attacker, All Players(All Teams), True, Color(Orange), Default);
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 15);
            "For loop required for SYSMSG that target multiple players"
            For Global Variable(i, 0, Subtract(Number Of Players(All Teams), 1), 1);
                Set Player Variable(Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i), MedalQueue, Append To Array(Array(0), (Value In Array(Remove From Array(All Players(All Teams), Attacker), Global.i)).MedalQueue));
            End;
            Small Message(Remove From Array(All Players(All Teams), Attacker), Custom String("    {0}  {1} is on fire!  {0}", Ability Icon String(Hero(Torbjörn), Button(Ultimate)), Attacker));
        Else If(And(And(Compare((Attacker).KillStreak, >=, Global.RAMPAGE_STREAK), Is Alive(Attacker)), Not((Attacker).IsOnRampage)));
            Set Player Variable(Attacker, IsOnRampage, True);
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 17);
            Set Player Variable(Attacker, RampageSFX, True);
            Start Forcing Player Outlines(Attacker, All Players(All Teams), True, Color(Yellow), Default);
            Big Message(Remove From Array(All Players(All Teams), Attacker), Custom String("{0}  {1} is on a rampage!  {0}", Ability Icon String(Hero(Reaper), Button(Ultimate)), Attacker));
            Set Player Variable(Attacker, RampageVFX, True);
            Wait(1, Ignore Condition);
            Set Player Variable(Attacker, RampageVFX, False);
        Else If(And(Compare((Attacker).KillStreak, >=, Global.NUCLEAR_STREAK), Not((Attacker).IsNuclear)));
            Set Player Variable(Attacker, IsNuclear, True);
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 20);
            Play Effect(All Players(All Teams), Ana Biotic Grenade No Healing Sound, Color(White), Attacker, 200);
            Create In-World Text(Attacker, Custom String("    {0} Nuclear killstreak! {0}\nPress [{1}] to request Nano-nuke", Icon String(Radioactive), Input Binding String(Button(Ultimate))), Update Every Frame(Add(Eye Position(Local Player), Multiply(100, Add(Multiply(0.49, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90))), Multiply(3, Facing Direction Of(Local Player)))))), 9, Do Not Clip, Visible To Position String and Color, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 500), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Default Visibility);
            Big Message(Remove From Array(All Players(All Teams), Attacker), Custom String("{0}  {1} is Nuclear!  {0}", Icon String(Radioactive), Attacker));
    }
}

rule ("Killstreak shutdown announcements") {
    event {
        Player Dealt Final Blow;
        All;
        Ana;
    }
    conditions {
        Event Was Environment == False;
        "?"
        (Victim).SleepLock < 1;
        (Victim).KillStreak >= Global.ONFIRE_STREAK;
    }
    actions {
        Set Player Variable(Attacker, ShutdownVictim, Victim);
        Communicate(Attacker, Goodbye);
        Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Color(White), Position Of(Victim), 200);
        "For loop required for SYSMSG that target multiple players"
        For Global Variable(i, 0, Subtract(Number Of Players(All Teams), 2), 1);
            Set Player Variable(Value In Array(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Global.i), MedalQueue, Append To Array(Array(0), (Value In Array(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Global.i)).MedalQueue));
        End;
        If(Compare((Victim).KillStreak, <, Global.RAMPAGE_STREAK));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 16);
            Small Message(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Custom String("    {0}  {1}'s {2} killstreak ended", Ability Icon String(Hero(Tracer), Button(Ability 2)), Victim, (Victim).KillStreak));
        Else If(Compare((Victim).KillStreak, <, Global.NUCLEAR_STREAK));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 18);
            Small Message(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Custom String("    {0}  {1}'s {2} kills rampage ended", Ability Icon String(Hero(Tracer), Button(Ability 2)), Victim, (Victim).KillStreak));
        End;
        "why"
        Wait(2, Ignore Condition);
    }
}

rule ("environmental kills") {
    event {
        Player Died;
        All;
        Ana;
    }
    conditions {
        Event Was Environment == True;
        Event Ability == Button(Ability 1);
    }
    actions {
        Modify Player Variable(Attacker, MedalQueue, Append To Array, 14);
        Big Message(Attacker, Custom String("{0}  Environmental Kill!  {0}", Ability Icon String(Hero(Sigma), Button(Ultimate))));
        "For loop required for SYSMSG that target multiple players"
        For Global Variable(i, 0, Subtract(Number Of Players(All Teams), 2), 1);
            Set Player Variable(Value In Array(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Global.i), MedalQueue, Append To Array(Array(0), (Value In Array(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Global.i)).MedalQueue));
        End;
        Small Message(Remove From Array(All Players(All Teams), Array(Victim, Attacker)), Custom String("    {0} made {1} fall off the map...", Victim, Attacker));
    }
}

rule ("Environement death") {
    event {
        Player Died;
        All;
        Ana;
    }
    conditions {
        Event Was Environment == True;
    }
    actions {
        If(Not(String Contains(Custom String("{0}", Event Player), Custom String("ml7"))));
            Set Player Variable(Event Player, MedalQueue, Append To Array(Array(0), (Event Player).MedalQueue));
            Small Message(Event Player, Random Value In Array(Array(Custom String("    {0}  no wings?", Hero Icon String(Random Value In Array(Array(Hero(Echo), Hero(Mercy))))), Custom String("    {0}  no jetpacks?", Hero Icon String(Random Value In Array(Array(Hero(Pharah), Hero(Winston))))), Custom String("    {0}  no translocators?", Hero Icon String(Hero(Sombra))), Custom String("    {0}  no grapples?", Hero Icon String(Random Value In Array(Array(Hero(Wrecking Ball), Hero(Widowmaker))))), Custom String("    {0}  no teleports?", Hero Icon String(Hero(Kiriko))), Custom String("    {0}  no recalls?", Hero Icon String(Hero(Tracer))), Custom String("    {0}  no wallrides?", Hero Icon String(Hero(Lúcio))), Custom String("    {0}  no slams?", Hero Icon String(Hero(Doomfist))), Custom String("    {0}  no mekas?", Hero Icon String(Hero(D.Va))), Custom String("    {0}  no double jumps?", Hero Icon String(Hero(Genji))), Custom String("    {0}  no wallclimbs?", Hero Icon String(Random Value In Array(Array(Hero(Genji), Hero(Hanzo), Hero(Kiriko))))), Custom String("    {0}  no life grips?", Hero Icon String(Hero(Lifeweaver))), Custom String("    {0}  no rocket legs?", Hero Icon String(Hero(Sojourn))))));
        Else;
            Set Player Variable(Event Player, MedalQueue, Append To Array(Array(0), (Event Player).MedalQueue));
            Small Message(Event Player, Random Value In Array(Array(Custom String("    {0} would have survived this", Random Value In Array(Array(Custom String("Olaf"), Custom String("Denn"), Custom String("Umarrii")))), Custom String("    {0} would never die like that", Random Value In Array(Array(Custom String("Demmos"), Custom String("Sp33dyal"), Custom String("Zeldig")))), Custom String("    Demmos would have never done this"), Custom String("    Who put that wall there???"), Custom String("    Are y'all really subbed to this guy?"), Custom String("    COOM?!?"))));
    }
}

rule ("Longshot") {
    event {
        Player Took Damage;
        All;
        Ana;
    }
    conditions {
        Distance Between(Attacker, Victim) >= Global.LONGSHOT_DISTANCE;
        Event Was Environment == False;
        Score Of(Attacker) != Global.NANO_SCORE;
    }
    actions {
        "try removing"
        Wait(0.016, Ignore Condition);
        Modify Player Variable(Attacker, MedalQueue, Append To Array, 12);
        Modify Player Variable(Attacker, LongshotCount, Add, 1);
        Set Player Variable(Attacker, OofDistance, Distance Between(Attacker, Victim));
        Create In-World Text(All Players(All Teams), Random Value In Array(Array(Custom String("oof"), Custom String("ouch"), Custom String("damn"), Custom String("owie"), Custom String("bonk"))), Victim, 1, Clip Against Surfaces, Visible To Position String and Color, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 150), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 150), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 150), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Visible Never);
        Set Player Variable(Victim, OofText, Last Text ID);
        If(Compare((Attacker).OofDistance, >, (Attacker).LongestLongshot));
            Set Player Variable(Attacker, LongestLongshot, Distance Between(Attacker, Victim));
        End;
        "try removing"
        Wait(0.016, Ignore Condition);
        If(Compare((Attacker).LongestLongshot, >, Global.LongestShotValue));
            Set Global Variable(LongestShotPlayer, Attacker);
            Set Global Variable(LongestShotValue, (Attacker).LongestLongshot);
        End;
        If(Compare((Attacker).LongshotCount, >=, 10));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 35);
            Big Message(Attacker, Custom String("{0}  Deadeye!  {0}", Ability Icon String(Hero(Cassidy), Button(Ultimate))));
        End;
        If(Compare(Event Ability, ==, Button(Ability 1)));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 36);
            Big Message(Attacker, Custom String("{0}  Sleep Sniper!  {0}", Ability Icon String(Hero(Orisa), Button(Secondary Fire))));
        End;
        Wait(0.5, Ignore Condition);
        Destroy In-World Text((Victim).OofText);
    }
}

rule ("Sandman") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Event Was Environment == False;
        Is Alive(Attacker) == True;
        Has Status(Victim, Asleep) == False;
    }
    actions {
        Modify Player Variable(Attacker, Sandman, Add, 1);
        If(Compare((Attacker).Sandman, ==, 3));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 37);
            Set Player Variable(Attacker, Sandman, 0);
    }
}

rule ("MEDALS") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Count Of((Event Player).MedalQueue) > 0;
        Global.MatchEnded == False;
    }
    actions {
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, DisplayMedal, First Of((Event Player).MedalQueue));
        If(Compare((Event Player).DisplayMedal, !=, 0));
            Small Message(Event Player, Value In Array(Array(Custom String("    {0}  {1} said: '{2}'", Hero Icon String(Hero(Ana)), First Of((Event Player).HonorQueue), Random Value In Array(Array(Custom String("Nice one!"), Custom String("Sheeeesh"), Custom String("Damn!"), Custom String("Wow"), Custom String("Oof"), Custom String("Clean"), Custom String("{0}{0}{0}", Icon String(Fire))))), Custom String("    {0}{1}  Execution! Max ammo", Ability Icon String(Hero(Ana), Button(Melee)), Icon String(Recycle)), Custom String("    {0}  Demotion! {1} lost a point", Ability Icon String(Hero(Wrecking Ball), Button(Crouch)), (Event Player).DemotionVictim), Custom String("    {0}  Terminator", Ability Icon String(Hero(Baptiste), Button(Ability 2))), Custom String("    {0}  Perfect quickscope", Ability Icon String(Hero(Kiriko), Button(Jump))), Custom String("    {0}  Perfectionist", Ability Icon String(Hero(Kiriko), Button(Ultimate))), Custom String("    {0}  Stole {1}'s kill", Ability Icon String(Hero(Roadhog), Button(Ability 1)), (Event Player).StolenFrom), Custom String("    {0}  Sleep thief", Ability Icon String(Hero(Moira), Button(Secondary Fire))), Custom String("    {0}  Comeback", Ability Icon String(Hero(Mercy), Button(Ultimate))), Custom String("    {0}  Iron will", Ability Icon String(Hero(Pharah), Button(Jump))), Custom String("    {0}  First blood", Ability Icon String(Hero(Brigitte), Button(Ultimate))), Custom String("    {0}  First sleep", Ability Icon String(Hero(Brigitte), Button(Ultimate))), Custom String("    {0}  Longshot! {1}m", Hero Icon String(Hero(Widowmaker)), String Slice(Custom String("{0}", Add((Event Player).OofDistance, 0.001)), 0, Subtract(String Length(Custom String("{0}", Add((Event Player).OofDistance, 0.001))), 1))), Custom String("    {0}  Nanopunch", Ability Icon String(Hero(Ramattra), Button(Ability 1))), Custom String("    {0}  Environmental kill", Ability Icon String(Hero(Sigma), Button(Ultimate))), Custom String("    {0}  On fire", Ability Icon String(Hero(Torbjörn), Button(Ultimate))), Custom String("    {0}  Ended {1}'s {2} Kills streak", Ability Icon String(Hero(Tracer), Button(Ability 2)), (Event Player).ShutdownVictim, ((Event Player).ShutdownVictim).KillStreakBeforeDeath), Custom String("    {0}  {1}", Ability Icon String(Hero(Reaper), Button(Ultimate)), Random Value In Array(Array(Custom String("You are on a rampage!"), Custom String("Rampage!")))), Custom String("    {0}  Ended {1}'s {2} kills rampage", Ability Icon String(Hero(Tracer), Button(Ability 2)), (Event Player).ShutdownVictim, ((Event Player).ShutdownVictim).KillStreakBeforeDeath), Custom String("    {0}  Nuclear", Icon String(Radioactive)), Custom String("    {0}{1}  Countermeasure", Icon String(No), Icon String(Radioactive)), Custom String("    {0}  Catastrophe", Ability Icon String(Hero(Bastion), Button(Ultimate))), Custom String("    {0}  Streak Squasher", Ability Icon String(Hero(Doomfist), Button(Ability 1))), Custom String("    {0}  Showstopper", Icon String(Stop)), Custom String("    {0}  Quadfeed", Ability Icon String(Hero(Pharah), Button(Ultimate))), Custom String("    {0}  Pentakill", Ability Icon String(Hero(Kiriko), Button(Ability 2))), Custom String("    {0}  Ultrakill", Ability Icon String(Hero(Zenyatta), Button(Primary Fire))), Custom String("    {0}  Killionaire", Ability Icon String(Hero(Zenyatta), Button(Ultimate))), Custom String("    {0}  Jolly jumper", Ability Icon String(Hero(Baptiste), Button(Crouch))), Custom String("    {0}  Collateral kills", Ability Icon String(Hero(Zarya), Button(Ability 2))), Custom String("    {0}  Mutual sleep, awaking...", Ability Icon String(Hero(Mercy), Button(Ability 2))), Custom String("    {0}  Last bullet kill", Icon String(Club)), Custom String("    {0}  Dreamcatcher", Ability Icon String(Hero(Ramattra), Button(Ability 2))), Custom String("    {0}  No scope needed", Ability Icon String(Hero(Sojourn), Button(Ultimate))), Custom String("    {0}  Deadeye", Ability Icon String(Hero(Cassidy), Button(Ultimate))), Custom String("    {0}  Sleep sniper", Ability Icon String(Hero(Orisa), Button(Secondary Fire))), Custom String("    {0}{1}  Sandman", Ability Icon String(Hero(Ana), Button(Ability 1)), Ability Icon String(Hero(Echo), Button(Ultimate))), Custom String("    {0}{1}  Punch drunk", Ability Icon String(Hero(Ana), Button(Melee)), Icon String(Dizzy)), Custom String("    {0}  From the grave", Ability Icon String(Hero(Reaper), Button(Ultimate)))), Max(False, Index Of Array Value(Array(1, 2, 3, 4, 5, 40, 6, 7, 10, 11, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 23, 22, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39), (Event Player).DisplayMedal))));
            If(False);
            End;
            Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Color(White), Event Player, 200);
        Else If(False);
            Modify Player Variable(Event Player, SysMsgCount, Add, 1);
        End;
        Modify Player Variable(Event Player, MedalQueue, Remove From Array By Index, 0);
        Wait(0.5, Ignore Condition);
        If(Compare((Event Player).DisplayMedal, ==, 1));
            Modify Player Variable(Event Player, HonorQueue, Remove From Array By Index, 0);
        End;
        Loop If Condition Is True;
    }
}

rule ("Set up SleepUsedAndDied") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, SleepUsedAndDied, False);
    }
}

rule ("Sleeping an already sleeping player adds 1 to your SleepLock") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Has Status(Victim, Asleep) == True;
        (Victim).LastSleptBy == Attacker;
    }
    actions {
        Modify Player Variable(Event Player, SleepLock, Add, 1);
    }
}

rule ("If SleepLock = 2, execute attacker, wake victim, reset attacker SleepLock and KillStreak") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Has Status(Victim, Asleep) == True;
        (Victim).LastSleptBy == Attacker;
        (Event Player).SleepLock == 2;
        Event Was Environment == False;
    }
    actions {
        Kill(Event Player, Event Player);
        Set Player Score(Attacker, Subtract(Score Of(Attacker), 1));
        Set Player Variable(Victim, MedalQueue, Append To Array(Array(0), (Victim).MedalQueue));
        Small Message(Victim, Custom String("    {0}  Executed {1} for sleep-locking", Ability Icon String(Hero(Genji), Button(Ability 2)), Event Player));
        Set Player Variable(Attacker, MedalQueue, Append To Array(Array(0), (Attacker).MedalQueue));
        Small Message(Attacker, Custom String("    {0}  Executed for sleep-locking {1}", Ability Icon String(Hero(Genji), Button(Ability 2)), Victim));
    }
}

rule ("Sleep-lock resets after 5s without sleeping anyone") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        (Event Player).SleepLock > 0;
        Event Was Environment == False;
    }
    actions {
        Wait(5, Abort When False);
        Set Player Variable(Event Player, SleepLock, 0);
    }
}

rule ("Wake slept player if attacker dies after using sleep dart") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Score Of(Attacker) != Global.NANO_SCORE;
    }
    actions {
        "if the attacker is alive when sleep dart hits"
        If(Not((Attacker).SleepUsedAndDied));
            Wait Until(Or(Is Dead(Victim), Is Dead(Attacker)), 3.5);
            If(And(Is Dead(Victim), Is Alive(Attacker)));
                Set Player Variable(Attacker, SleepUsedAndDied, True);
                Abort;
            End;
            Wait(0.5, Abort When False);
            Damage(Victim, Null, 1);
            Communicate(Victim, Thanks);
        Else;
            Set Player Variable(Victim, MedalQueue, Append To Array(Array(0), (Victim).MedalQueue));
            Small Message(Victim, Custom String("    {0}  {1} died, awaking...", Ability Icon String(Hero(Mercy), Button(Ability 2)), Attacker));
            Wait(0.5, Abort When False);
            Damage(Victim, Null, 1);
            Wait(0.5, Ignore Condition);
            Communicate(Victim, Goodbye);
    }
}

rule ("Detect mutual sleeps") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Has Status(Attacker, Asleep) == True;
        Event Ability == Button(Ability 1);
        Victim == (Attacker).LastSleptBy;
    }
    actions {
        Modify Player Variable(Array(Event Player, Victim), MedalQueue, Append To Array, 31);
        Big Message(Array(Event Player, Victim), Custom String("Akward moment..."));
        Wait(1.5, Abort When False);
        If(And(Is Alive(Attacker), Is Alive(Victim)));
            Damage(Array(Event Player, Victim), Null, 1);
    }
}

rule ("While score < NANO_SCORE, allow all buttons") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Score Of(Event Player) < Global.NANO_SCORE;
        Is Alive(Event Player) == True;
    }
    actions {
        "?"
        Wait(0.2, Ignore Condition);
        Allow Button(Event Player, Button(Primary Fire));
        Allow Button(Event Player, Button(Secondary Fire));
        Allow Button(Event Player, Button(Melee));
        Allow Button(Event Player, Button(Reload));
        Stop Holding Button(Event Player, Button(Ultimate));
    }
}

rule ("When reaching NANO_SCORE, nanoboost self") {
    event {
        Player Earned Elimination;
        All;
        Ana;
    }
    conditions {
        Score Of(Event Player) == Global.NANO_SCORE;
    }
    actions {
        If(Is Meleeing(Event Player));
            Modify Player Variable(Attacker, MedalQueue, Append To Array, 13);
        End;
        "for people using toggle scope"
        If(Is Firing Secondary(Event Player));
            Press Button(Event Player, Button(Secondary Fire));
        End;
        Set Ultimate Charge(Event Player, 100);
        Set Ability Cooldown(Event Player, Button(Ability 1), 1);
        Press Button(Event Player, Button(Ultimate));
        "for people using \"confirm nano target\""
        Wait(0.016, Ignore Condition);
        Press Button(Event Player, Button(Ultimate));
    }
}

rule ("When score = NANO_SCORE, disable all except sleep dart, warn other players, display  objective") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Score Of(Event Player) == Global.NANO_SCORE;
    }
    actions {
        Disallow Button(Event Player, Button(Primary Fire));
        Disallow Button(Event Player, Button(Secondary Fire));
        Disallow Button(Event Player, Button(Melee));
        Disallow Button(Event Player, Button(Reload));
        Big Message(Remove From Array(All Players(All Teams), Event Player), Custom String("{0}  {1} wins in 1 kill  {0}", Icon String(Warning), Event Player));
        Big Message(Event Player, Custom String("{0}  use sleep dart to win  {0}", Ability Icon String(Hero(Ana), Button(Ability 1))));
    }
}

rule ("While score = NANO_SCORE, sleep dart cooldown is 1.5") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Score Of(Event Player) == Global.NANO_SCORE;
        Is Using Ability 1(Event Player) == True;
    }
    actions {
        Wait Until(Compare(Ability Cooldown(Event Player, Button(Ability 1)), >, 0), 1);
        Set Ability Cooldown(Event Player, Button(Ability 1), 1.5);
    }
}

rule ("If NANO_SCORE and died, nanoboost again") {
    event {
        Player Died;
        All;
        Ana;
    }
    conditions {
        Score Of(Event Player) == Global.NANO_SCORE;
    }
    actions {
        Disallow Button(Event Player, Button(Ability 1));
        Wait Until(Is Alive(Event Player), 69);
        While(Not(Is Using Ultimate(Event Player)));
            Set Ultimate Charge(Event Player, 100);
            Press Button(Event Player, Button(Ultimate));
            Wait(0.016, Ignore Condition);
        End;
        Allow Button(Event Player, Button(Ability 1));
    }
}

rule ("Nuclear victory") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        (Event Player).IsNuclear != False;
        Global.MatchEnded == False;
        Or(Is Button Held(Event Player, Button(Ultimate)), Is Dead(Event Player)) == True;
    }
    actions {
        Set Global Variable(MatchEnded, True);
        Set Global Variable(Winner, Event Player);
        "in case winner is asleep"
        Damage(Global.Winner, Null, 1);
        Set Global Variable(NukeCamHorizontalDist, Horizontal Angle From Direction(Direction Towards(Global.NukeImpactPos, Global.NukeCamPos)));
        Set Global Variable(Camdist, Magnitude Of(Multiply(Subtract(Global.NukeCamPos, Global.NukeImpactPos), Vector(1, 0, 1))));
        Set Global Variable(NukePos, Add(Add(Global.NukeImpactPos, Multiply(Direction From Angles(Add(Global.NukeCamHorizontalDist, 90), 0), Global.Camdist)), Vector(0, Subtract(Y Component Of(Global.NukeCamPos), 10), 0)));
        Destroy All In-World Text;
        Destroy All HUD Text;
        Create In-World Text(Global.Winner, Custom String("{0} Nano-nuke requested! {0}", Icon String(Warning)), Update Every Frame(Add(Eye Position(Local Player), Multiply(100, Add(Multiply(0.49, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90))), Multiply(3, Facing Direction Of(Local Player)))))), 3, Do Not Clip, Visible To Position String and Color, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 500), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Default Visibility);
        Disable Game Mode HUD(All Players(All Teams));
        Disable Hero HUD(All Players(All Teams));
        Set Status(All Players(All Teams), Null, Phased Out, 69);
        Teleport(Global.NanoNukeBot, Global.Winner);
        Wait(0.5, Ignore Condition);
        Press Button(Global.NanoNukeBot, Button(Ultimate));
        Wait(0.016, Ignore Condition);
        Cancel Primary Action(Global.NanoNukeBot);
        Wait(0.016, Ignore Condition);
        Destroy Dummy Bot(All Teams, 10);
        Wait(0.016, Ignore Condition);
        "Create bot for 2nd siren"
        Create Dummy Bot(Hero(Bastion), All Teams, 10, Vector(0, 999, 0), Up);
        Set Global Variable(NanoNukeBot, Last Created Entity);
        Start Forcing Dummy Bot Name(Global.NanoNukeBot, Custom String("NANO-NUKE"));
        Set Invisible(Global.NanoNukeBot, All);
        Set Status(Global.NanoNukeBot, Null, Phased Out, 9999);
        Set Gravity(Global.NanoNukeBot, 0);
        Start Modifying Hero Voice Lines(Global.NanoNukeBot, 0.5, False);
        Start Forcing Player Outlines(Global.NanoNukeBot, Array(All Players(All Teams), Not((Local Player).IsPlayer)), False, Null, Default);
        Wait(2, Ignore Condition);
        "Winner cam"
        Destroy All In-World Text;
        Start Camera(All Players(All Teams), Ray Cast Hit Position(Update Every Frame(Eye Position(Global.Winner)), Add(Update Every Frame(Facing Direction Of(Global.Winner)), Update Every Frame(Eye Position(Global.Winner))), Null, Null, True), Update Every Frame(Eye Position(Global.Winner)), 0);
        Set Status(All Players(All Teams), Null, Rooted, 999);
        Set Aim Speed(All Players(All Teams), 10);
        Set Move Speed(All Players(All Teams), 10);
        Disallow Button(Event Player, Button(Ability 1));
        Disallow Button(Event Player, Button(Ability 2));
        Disallow Button(Event Player, Button(Crouch));
        Disallow Button(Event Player, Button(Primary Fire));
        Disallow Button(Event Player, Button(Secondary Fire));
        Disallow Button(Event Player, Button(Reload));
        Disallow Button(Event Player, Button(Melee));
        Call Subroutine(RandomEmote);
        Communicate(Global.Winner, Goodbye);
        Wait(2, Ignore Condition);
        Destroy All In-World Text;
        "Swap to nuke cam"
        Start Facing(Event Player, Facing Direction Of(Event Player), 1000, To Player, None);
        Start Camera(All Players(All Teams), World Vector Of(Vector(0, 2, 2), Global.Winner, Rotation And Translation), Position Of(Global.Winner), 0);
        Start Camera(All Players(All Teams), Global.NukeCamPos, Global.NukeImpactPos, 1);
        "2nd siren"
        Teleport(Global.NanoNukeBot, World Vector Of(Vector(0, 30, 0), Global.Winner, Rotation And Translation));
        Wait(0.5, Ignore Condition);
        Destroy All In-World Text;
        Press Button(Global.NanoNukeBot, Button(Ultimate));
        Wait(0.016, Ignore Condition);
        Destroy Dummy Bot(All Teams, 10);
        Wait(2, Ignore Condition);
        "Create nuke effect"
        Create Projectile Effect(All Players(All Teams), Baptiste Biotic Launcher, Null, Global.NukePos, Direction Towards(Global.NukePos, Global.NukeImpactPos), 0.4, Visible To Position Direction and Size);
        Set Player Variable At Index(Global.Winner, NukeEffects, 0, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Pharah Rocket, Null, Global.NukePos, Direction Towards(Global.NukePos, Global.NukeImpactPos), 1, Visible To Position Direction and Size);
        Set Player Variable At Index(Global.Winner, NukeEffects, 1, Last Created Entity);
        Wait(2, Ignore Condition);
        Chase Global Variable Over Time(NukePos, Global.NukeImpactPos, 5, Destination and Duration);
        Wait(4.8, Ignore Condition);
        Declare Player Victory(Global.Winner);
        Destroy Effect(First Of((Global.Winner).NukeEffects));
        Destroy Effect(Value In Array((Global.Winner).NukeEffects, 1));
        Kill(Remove From Array(All Players(All Teams), Array(Global.OutOfBoundBot, Global.NanoNukeBot)), Null);
        "to compensate for bomb \"suicide\" caused by \"null\" killer"
        Modify Player Score(Remove From Array(All Players(All Teams), Array(Global.OutOfBoundBot, Global.NanoNukeBot)), 1);
        Modify Player Score(Global.Winner, Count Of(Remove From Array(All Players(All Teams), Array(Global.OutOfBoundBot, Global.NanoNukeBot, Global.Winner))));
        Disable Built-In Game Mode Respawning(All Players(All Teams));
        "Explosion effects at NukeImpactPos"
        Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(Team 1), Global.NukeImpactPos, 200);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Global.NukeImpactPos, 200);
        "Explosion frames in front of NukeCamPos"
        Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(White), Add(Global.NukeCamPos, Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), 50);
        Play Effect(All Players(All Teams), Zarya Particle Cannon Explosion Effect, Color(White), Add(Global.NukeCamPos, Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), 200);
        Play Effect(All Players(All Teams), Bad Explosion, Color(White), Add(Global.NukeCamPos, Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), 200);
        Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Add(Global.NukeCamPos, Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), 200);
        "Explosion radius effect + smoke"
        Create Effect(All Players(All Teams), Sphere, Color(Red), Global.NukeImpactPos, Global.NukeExplodeFxPos, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Cloud, Color(Red), Global.NukeImpactPos, Global.NukeExplodeFxPos, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Sphere, Color(Orange), Global.NukeImpactPos, Subtract(Global.NukeExplodeFxPos, 5), Visible To Position and Radius);
        Create Effect(All Players(All Teams), Sphere, Color(White), Global.NukeImpactPos, Subtract(Global.NukeExplodeFxPos, 10), Visible To Position and Radius);
        Create Effect(All Players(All Teams), Cloud, Color(Orange), Global.NukeImpactPos, Global.NukeExplodeFxPos, Visible To Position and Radius);
        Chase Global Variable At Rate(NukeExplodeFxPos, 220, 20, Destination and Rate);
        Create In-World Text(All Players(All Teams), Custom String("Nuclear victory!"), Update Every Frame(Add(Global.NukeCamPos, Multiply(100, Add(Multiply(0.6, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), Subtract(Vertical Angle From Direction(Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), 90))), Multiply(3, Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)))))), 10, Do Not Clip, Visible To Position String and Color, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 500), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Visible Never);
        Create In-World Text(All Players(All Teams), Custom String("join the discord server!\n        jinko.dev/discord"), Update Every Frame(Add(Global.NukeCamPos, Multiply(100, Add(Multiply(-1.2, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), Subtract(Vertical Angle From Direction(Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), 90))), Multiply(3, Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)))))), 10, Do Not Clip, Visible To Position String and Color, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 500), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Visible Never);
        "camera shake"
        Wait(0.3, Ignore Condition);
        For Global Variable(i, 0, 30, 1);
            Set Global Variable(NukeCamShakeX, Random Real(-10, 10));
            Set Global Variable(NukeCamShakeY, Random Real(-5, 5));
            Set Global Variable(NukeCamShakeZ, Random Real(-5, 5));
            Start Camera(All Players(All Teams), Vector(Add(Global.NukeCamShakeX, X Component Of(Global.NukeCamPos)), Add(Global.NukeCamShakeY, Y Component Of(Global.NukeCamPos)), Add(Global.NukeCamShakeZ, Z Component Of(Global.NukeCamPos))), Vector(Add(Global.NukeCamShakeX, X Component Of(Global.NukeImpactPos)), Add(Global.NukeCamShakeY, Y Component Of(Global.NukeImpactPos)), Add(Global.NukeCamShakeZ, Z Component Of(Global.NukeImpactPos))), 10);
            Wait(0.05, Ignore Condition);
        End;
        For Global Variable(i, 0, 30, 1);
            Set Global Variable(NukeCamShakeX, Random Real(-10, 10));
            Set Global Variable(NukeCamShakeY, Random Real(-5, 5));
            Set Global Variable(NukeCamShakeZ, Random Real(-5, 5));
            Start Camera(All Players(All Teams), Vector(Add(Global.NukeCamShakeX, X Component Of(Global.NukeCamPos)), Add(Global.NukeCamShakeY, Y Component Of(Global.NukeCamPos)), Add(Global.NukeCamShakeZ, Z Component Of(Global.NukeCamPos))), Vector(Add(Global.NukeCamShakeX, X Component Of(Global.NukeImpactPos)), Add(Global.NukeCamShakeY, Y Component Of(Global.NukeImpactPos)), Add(Global.NukeCamShakeZ, Z Component Of(Global.NukeImpactPos))), 10);
            Wait(0.05, Ignore Condition);
        End;
    }
}

disabled rule ("rainbow outline for nuclear winner") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Global.MatchEnded != False;
        Global.Winner != False;
        (Global.Winner).IsNuclear != False;
    }
    actions {
        Start Forcing Player Outlines(Global.Winner, All Players(All Teams), True, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 250), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 250), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 250), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Always);
        Wait(0.016, Ignore Condition);
        Loop;
    }
}

rule ("Sleep Dart victory") {
    event {
        Player Dealt Damage;
        All;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Score Of(Attacker) == Global.NANO_SCORE;
        Global.MatchEnded == False;
    }
    actions {
        Set Global Variable(MatchEnded, True);
        Set Global Variable(FinalVictim, Victim);
        Set Global Variable(Winner, Attacker);
        Disable Game Mode HUD(All Players(All Teams));
        Disable Hero HUD(All Players(All Teams));
        Declare Player Victory(Event Player);
        Set Player Score(Global.Winner, Add(Global.NANO_SCORE, 1));
        Set Player Variable(Victim, OofDistance, Distance Between(Attacker, Victim));
        If(Compare((Victim).OofDistance, >=, Global.LONGSHOT_DISTANCE));
            Set Global Variable(LongshotWin, Not(Global.LongshotWin));
        End;
        Start Forcing Player Outlines(Remove From Array(All Players(All Teams), Global.Winner), All Players(All Teams), False, Null, Occluded);
        Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(White), Victim, 1, Position and Radius);
        Set Status(All Players(All Teams), Null, Invincible, 999);
        Set Status(All Players(All Teams), Null, Rooted, 999);
        Set Aim Speed(All Players(All Teams), 10);
        Set Move Speed(All Players(All Teams), 10);
        Set Slow Motion(5);
        Start Camera(All Players(All Teams), Ray Cast Hit Position(Position Of(Attacker), Add(Add(Position Of(Attacker), Multiply(Direction Towards(Victim, Position Of(Attacker)), 3)), Vector(0, 1.5, 0)), Null, Null, True), Position Of(Victim), 0);
        Wait(0.35, Ignore Condition);
        Start Camera(All Players(All Teams), Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Add(Eye Position(Victim), Down), 25);
        Wait(0.5, Ignore Condition);
        "Amazing in-world text code by josbird https://workshop.codes/wiki/articles/rendering-an-inworld-text-at-a-specific-onscreen-position"
        Create In-World Text(All Players(All Teams), If-Then-Else(Compare((Victim).OofDistance, >=, Global.LONGSHOT_DISTANCE), Custom String("longshot victory! {0}m hit!", String Slice(Custom String("{0}", Add((Victim).OofDistance, 0.001)), 0, Subtract(String Length(Custom String("{0}", Add((Victim).OofDistance, 0.001))), 1))), Custom String("{0}m sleep dart hit!", String Slice(Custom String("{0}", Add((Victim).OofDistance, 0.001)), 0, Subtract(String Length(Custom String("{0}", Add((Victim).OofDistance, 0.001))), 1)))), Update Every Frame(Add(Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Multiply(100, Add(Multiply(0.6, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Add(Eye Position(Victim), Down))), Subtract(Vertical Angle From Direction(Direction Towards(Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Add(Eye Position(Victim), Down))), 90))), Multiply(3, Direction Towards(Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Add(Eye Position(Victim), Down))))))), 10, Do Not Clip, Visible To Position String and Color, If-Then-Else(Compare((Victim).OofDistance, >=, Global.LONGSHOT_DISTANCE), Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 500), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Custom Color(63, 191, 116, 255)), Visible Never);
        Create In-World Text(All Players(All Teams), Custom String("join the discord server!\n        jinko.dev/discord"), Update Every Frame(Add(Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Multiply(100, Add(Multiply(-1, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Add(Eye Position(Victim), Down))), Subtract(Vertical Angle From Direction(Direction Towards(Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Add(Eye Position(Victim), Down))), 90))), Multiply(3, Direction Towards(Ray Cast Hit Position(Eye Position(Victim), Add(Add(Eye Position(Victim), Multiply(Direction Towards(Attacker, Victim), -2)), Vector(0, 0.5, 0)), Null, Null, True), Add(Eye Position(Victim), Down))))))), 10, Do Not Clip, Visible To Position String and Color, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 500), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Visible Never);
        Wait(0.95, Ignore Condition);
        Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(Rose), Position Of(Victim), 999);
        Wait(18.5, Ignore Condition);
        Restart Match;
    }
}

rule ("Fix camera if last victim leaves the game") {
    event {
        Player Left Match;
        All;
        All;
    }
    conditions {
        Global.MatchEnded != False;
    }
    actions {
        If(Compare(Global.FinalVictim, ==, Event Player));
            Destroy All In-World Text;
            Start Camera(All Players(All Teams), Global.NukeCamPos, Global.NukeImpactPos, 0);
            Create In-World Text(All Players(All Teams), Custom String("The last victim left the game lol"), Update Every Frame(Add(Global.NukeCamPos, Multiply(100, Add(Multiply(0.6, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), Subtract(Vertical Angle From Direction(Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), 90))), Multiply(3, Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)))))), 10, Do Not Clip, Visible To Position String and Color, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 500), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Visible Never);
            Create In-World Text(All Players(All Teams), Custom String("join the discord server!\n        jinko.dev/discord"), Update Every Frame(Add(Global.NukeCamPos, Multiply(100, Add(Multiply(-1.2, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), Subtract(Vertical Angle From Direction(Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)), 90))), Multiply(3, Direction Towards(Global.NukeCamPos, Global.NukeImpactPos)))))), 10, Do Not Clip, Visible To Position String and Color, Custom Color(Min(Max(Subtract(Absolute Value(Subtract(Modulo(Multiply(Total Time Elapsed, 500), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 280.5), 841.5), 420.75)), 25.5), 114.75), 255), Min(Max(Subtract(Absolute Value(Subtract(Modulo(Add(Multiply(Total Time Elapsed, 500), 561), 841.5), 420.75)), 25.5), 114.75), 255), 255), Visible Never);
    }
}

rule ("CREATE all jump pads") {
    event {
        Ongoing - Global;
    }
    actions {
        If(True);
            Skip(Value In Array(Array(44, 0, 0, 4, 8, 8, 12, 12, 16, 20, 20, 24, 24, 28, 32, 32, 36, 36, 40), Add(1, Index Of Array Value(Array(Map(Eichenwalde), Map(Eichenwalde Halloween), Map(Petra), Map(Château Guillard), Map(Château Guillard Halloween), Map(Ecopoint: Antarctica Winter), Map(Ecopoint: Antarctica), Map(Malevento), Map(Black Forest Winter), Map(Black Forest), Map(Blizzard World Winter), Map(Blizzard World), Map(Dorado), Map(Hollywood Halloween), Map(Hollywood), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Control Center), Map(Kanezaka)), Current Map))));
            Set Global Variable(JumpPadPos, Array(Vector(47.05, 2.91, -75.46), Vector(60.91, 8.9, -58.98), Vector(67.98, 11.05, -104.86)));
            Set Global Variable(JumpPadPower, Array(23.5, 15, 17));
            Set Global Variable(JumpPadSize, Array(3.9, 3.1, 1.8));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(1.91, -16.7, 46.1), Vector(-2.54, -11.77, 16.85), Vector(-15.33, -10.7, 30.07), Vector(-38.52, -15.72, 18.04), Vector(1.96, -5.8, -19), Vector(16.05, -11.4, 8.72)));
            Set Global Variable(JumpPadPower, Array(22.2, 19, 19, 18.5, 13, 12));
            Set Global Variable(JumpPadSize, Array(3.9, 2.4, 2, 3.5, 2.2, 2.7));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(229.49, 0.38, 83.1), Vector(187.32, -0.6, 69.5), Vector(218.55, 10.44, 47.06), Vector(172, -1.25, 53.8)));
            Set Global Variable(JumpPadPower, Array(17.5, 17.5, 17.5, 17.5));
            Set Global Variable(JumpPadSize, Array(2.3, 2, 2, 1.8));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(-6.1, 4.7, 17), Vector(-6.1, 4.7, -17), Vector(10.35, 2.18, 0), Vector(-15, 4.85, 0)));
            Set Global Variable(JumpPadPower, Array(16, 16, 15.5, 15));
            Set Global Variable(JumpPadSize, Array(2.6, 2.6, 2.3, 2.9));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(-29.65, -4.57, -8), Vector(0, -2.62, -7.23), Vector(11.72, 0, 9.65), Vector(0, -1.78, 34.06)));
            Set Global Variable(JumpPadPower, Array(17, 20.9, 15, 26));
            Set Global Variable(JumpPadSize, Array(2, 2, 3.7, 4.1));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(4.6, 10, 5), Vector(0, 10.82, 24.24), Vector(0, 10.82, -14.87), Vector(-20.55, 11.4, 22), Vector(-20.55, 11.4, -11), Vector(21.4, 9.6, 19.16), Vector(21.4, 9.5, -8.7)));
            Set Global Variable(JumpPadPower, Array(15, 15, 15, 15, 15, 15, 15));
            Set Global Variable(JumpPadSize, Array(2.8, 2, 2, 2, 2, 2, 2));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(-75.5, -1.45, 75), Vector(-41.3, -3.3, 84.3), Vector(-20, -1.16, 92.15), Vector(-63.5, -4.1, 92.14), Vector(-41, -4.8, 145.45), Vector(-70, -1.9, 116.5)));
            Set Global Variable(JumpPadPower, Array(16.5, 16, 15, 17, 14, 16.5));
            Set Global Variable(JumpPadSize, Array(2, 3.3, 3.4, 4, 3, 3));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(129.71, 7.77, 16.9), Vector(92.5, 9.67, 31.88), Vector(102.9, 7.7, 8.9), Vector(110.9, 7.66, 17.8)));
            Set Global Variable(JumpPadPower, Array(17.5, 18.5, 17.5, 16.3));
            Set Global Variable(JumpPadSize, Array(3.5, 3.5, 3.5, 3.6));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(-6.15, -3.65, -34.4), Vector(18.25, -3.65, -70.56), Vector(2.73, -1.04, -15.85)));
            Set Global Variable(JumpPadPower, Array(20, 22.5, 17));
            Set Global Variable(JumpPadSize, Array(5.5, 5.6, 3.2));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(0, 263.85, 285.88), Vector(25.15, 263.75, 291.55), Vector(-25.15, 263.75, 291.55), Vector(5.63, 267.79, 313.71), Vector(-5.63, 267.79, 313.71), Vector(7.22, 264, 271.4), Vector(-7.22, 264, 271.4)));
            Set Global Variable(JumpPadPower, Array(20.5, 13, 13, 18.5, 18.5, 13, 13));
            Set Global Variable(JumpPadSize, Array(4, 3.4, 3.4, 2.5, 2.5, 3.35, 3.35));
        Else;
            Set Global Variable(JumpPadPos, Array(Vector(-38, 3.7, -40.58), Vector(-38.13, 2.6, 3.2), Vector(-26.42, 2.65, 27)));
            Set Global Variable(JumpPadPower, Array(15, 17, 14));
            Set Global Variable(JumpPadSize, Array(3.5, 3.5, 3.5));
        Else;
        End;
        For Global Variable(JumpPadFx, 0, Count Of(Global.JumpPadPos), 1);
            Create Effect(All Players(All Teams), Sphere, Global.JUMP_PAD_COLOR, Value In Array(Global.JumpPadPos, Global.JumpPadFx), Value In Array(Global.JumpPadSize, Global.JumpPadFx), Visible To and Color);
        End;
    }
}

rule ("TRI­GGER any jump pad") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Count Of(Global.JumpPadPos) > 0;
        Is True For Any(Global.JumpPadPos, Compare(Distance Between(Event Player, Current Array Element), <=, Value In Array(Global.JumpPadSize, Current Array Index))) == True;
    }
    actions {
        Set Player Variable(Event Player, ClosestPadIndex, Index Of Array Value(Global.JumpPadPos, Sorted Array(Global.JumpPadPos, Distance Between(Event Player, Current Array Element))));
        Apply Impulse(Event Player, Up, Value In Array(Global.JumpPadPower, (Event Player).ClosestPadIndex), To World, Cancel Contrary Motion XYZ);
        Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 30);
    }
}

rule ("Subroutine FromTheGrave") {
    event {
        Subroutine;
        FromTheGrave;
    }
    actions {
        Wait Until(Is Alive(Attacker), 69);
        Modify Player Variable(Attacker, MedalQueue, Append To Array, 39);
    }
}

rule ("Subroutine SayVoiceline") {
    event {
        Subroutine;
        SayVoiceline;
    }
    actions {
        Wait(0.4, Ignore Condition);
        If(Is Alive(Attacker));
            If(True);
                Skip(Value In Array(Array(4, 0, 1, 2, 3), Add(1, Index Of Array Value(Array(1, 2, 3, 4), Random Integer(1, 4)))));
                Communicate(Event Player, Voice Line Up);
                Communicate(Event Player, Voice Line Right);
                Communicate(Event Player, Voice Line Down);
                Communicate(Event Player, Voice Line Left);
            End;
        End;
    }
}

rule ("Subroutine SayUltStatus") {
    event {
        Subroutine;
        SayUltStatus;
    }
    actions {
        Wait(0.4, Ignore Condition);
        Communicate(Attacker, Ultimate Status);
    }
}

rule ("Subroutine SayThanks") {
    event {
        Subroutine;
        SayThanks;
    }
    actions {
        Wait(0.4, Ignore Condition);
        Communicate(Attacker, Thanks);
    }
}

rule ("Subroutine SaySorry") {
    event {
        Subroutine;
        SaySorry;
    }
    actions {
        Wait(0.4, Ignore Condition);
        Communicate(Attacker, Sorry);
    }
}

rule ("Subroutine RandomEmote") {
    event {
        Subroutine;
        RandomEmote;
    }
    actions {
        If(True);
            Skip(Value In Array(Array(4, 0, 1, 2, 3), Add(1, Index Of Array Value(Array(1, 2, 3, 4), Random Integer(1, 4)))));
            Communicate(Event Player, Emote Up);
            Communicate(Event Player, Emote Right);
            Communicate(Event Player, Emote Down);
            Communicate(Event Player, Emote Left);
        End;
        Wait(1, Ignore Condition);
        If(Not(Is Communicating Any(Attacker)));
            Communicate(Attacker, Goodbye);
        End;
    }
}

