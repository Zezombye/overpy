settings
{
	main
	{
		Description: "1v1 Arena v3.1 by Seita, 14 Hero rotation, Bot will spawn if you are alone. Winner stays(or moves up), First to 50 points, Points per Elimination varies depending on the arena, To win you need to get the final elimination on Arena 1."
		Mode Name: "1v1 Arena"
	}
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max FFA Players: 8
		Max Spectators: 12
		Return To Lobby: Never
	}
	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Lijiang Control Center
			}
		}
		General
		{
			Game Mode Start: Immediately
			Kill Cam: Off
			Score To Win: 50
			Self Initiated Respawn: Off
			Spawn Health Packs: Disabled
		}
	}
	heroes
	{
		General
		{
			Ultimate Generation - Combat: 200%
			Ultimate Generation - Passive: 0%
			Ashe
			{
				Ultimate Duration: 50%
			}
			Baptiste
			{
				Immortality Field: Off
			}
			Brigitte
			{
				Healing Dealt: 50%
				Jump Vertical Speed: 175%
				Movement Speed: 130%
			}
			D.Va
			{
				Health: 64%
			}
			Doomfist
			{
				Health: 80%
			}
			Genji
			{
				Ultimate Duration: 75%
			}
			Illari
			{
				Healing Pylon: Off
			}
			Junker Queen
			{
				Commanding Shout Cooldown Time: 200%
				Healing Received: 50%
				Health: 80%
			}
			Lifeweaver
			{
				Tree of Life Health: 50%
			}
			Lúcio
			{
				Crossfade: Off
				Damage Dealt: 130%
				Health: 120%
			}
			Mauga
			{
				Healing Received: 10%
				Health: 64%
			}
			Mei
			{
				Healing Dealt: 40%
				Health: 85%
			}
			Mercy
			{
				Damage Dealt: 120%
				Jump Vertical Speed: 250%
				Movement Speed: 150%
			}
			Moira
			{
				Biotic Orb Max Healing Scalar: 50%
				Healing Received: 50%
			}
			Orisa
			{
				Fortify Cooldown Time: 200%
				Health: 64%
			}
			Pharah
			{
				Concussive Blast Cooldown Time: 200%
			}
			Ramattra
			{
				Health: 92%
				Nemesis Form Cooldown Time: 200%
				Void Barrier Omnic Form: Off
			}
			Reaper
			{
				Healing Dealt: 25%
				Health: 85%
				Movement Speed: 125%
			}
			Reinhardt
			{
				Damage Dealt: 80%
				Health: 74%
				Jump Vertical Speed: 175%
				Movement Speed: 140%
			}
			Roadhog
			{
				Healing Dealt: 50%
				Health: 59%
				Take a Breather Maximum Time: 50%
				Take a Breather Recharge Rate: 50%
			}
			Sigma
			{
				Health: 75%
			}
			Soldier: 76
			{
				Ultimate Duration: 75%
			}
			Symmetra
			{
				Sentry Turret: Off
			}
			Torbjörn
			{
				Deploy Turret: Off
			}
			Widowmaker
			{
				Grappling Hook Cooldown Time: 30%
				Health: 125%
			}
			Winston
			{
				Barrier Projector Cooldown Time: 200%
				Health: 74%
				Ultimate Duration: 50%
			}
			Wrecking Ball
			{
				Adaptive Shield Cooldown Time: 200%
				Health: 64%
			}
			Zarya
			{
				Health: 88%
				Particle Barrier Cooldown Time: 200%
				Projected Barrier Cooldown Time: 200%
			}
			enabled heroes
			{
				Ana
				Ashe
				Baptiste
				Cassidy
				Echo
				Genji
				Hanzo
				Illari
				Kiriko
				Sojourn
				Soldier: 76
				Tracer
				Widowmaker
				Zenyatta
			}
		}
	}
}
variables {
    global:
        0: MainCenter
        1: MainHigh
        2: MainTopDeck
        3: SideArenaCenter
        4: SideArenaSpawnsFacing
        5: MainFacing
        6: HeroList
        7: FirstMatch
        8: MainSpawnDetLoc
        9: MainTopSpawn
        10: BurnDamage
        11: MainOppositeSpawn
        12: IntroHud
        13: BotDifSelect
        14: MainDeckSpawn
        15: GameLoaded
        16: MainDefaultSpawn
        17: AllHeroesMode
        18: ScorePerWin
        20: SpecSpot2
        21: SpecSpot
        22: Arena1Q
        23: Arena2Q
        24: Arena3Q
        26: Arena1Match
        27: Arena2Match
        28: Arena3Match
        29: Roadhog
        30: Sigma
        31: Winston
        32: WreckingBall
        33: Zarya
        34: Ashe
        35: Bastion
        36: Doomfist
        37: Echo
        38: Genji
        39: Hanzo
        40: Junkrat
        41: Cassidy
        42: Mei
        43: Pharah
        44: Reaper
        45: Soldier
        46: Sombra
        48: Torb
        49: Tracer
        50: Widow
        51: Ana
        52: Baptiste
        53: Brigitte
        54: Lucio
        55: Mercy
        56: Moira
        57: Zenyatta
        59: Dva
        60: Orisa
        61: Reinhardt
        65: HostHasDifferentheroes
        66: BotDifHud
        70: Roadhog2
        71: Sigma2
        72: Winston2
        73: WreckingBall2
        74: Zarya2
        75: Ashe2
        76: Bastion2
        77: Doomfist2
        78: Echo2
        79: Genji2
        80: Hanzo2
        81: Junkrat2
        82: Cassidy2
        83: Mei2
        84: Pharah2
        85: Reaper2
        86: Soldier2
        87: Sombra2
        88: Torb2
        89: Tracer2
        90: Widow2
        91: Ana2
        92: Baptiste2
        93: Brigitte2
        94: Lucio2
        95: Mercy2
        96: Moira2
        97: Zenyatta2
        98: Dva2
        99: Orisa2
        100: Reinhardt2
        102: HeroList2
        103: AlwaysRefreshHero
        104: JunkerQueen
        105: Kiriko
        106: Ramattra
        107: Sojourn
        108: JunkerQueen2
        109: Kiriko2
        110: Ramattra2
        111: Sojourn2
        112: Lifeweaver
        113: Lifeweaver2
        114: Control
        115: Illari
        116: Illari2
        117: Mauga
        118: Mauga2
        119: HeroSelect
        120: Venture
        121: Venture2
        122: HeroModifier
        123: NoFlyHeroes
        124: Juno
        125: Juno2
        126: Freja
        127: Freja2
    player:
        0: OneHeroPlayerVariable
        2: Randomizer
        3: Spectating
        4: DeadHelper
        7: Hud
        9: JoinSpecHelper
        11: HeroList
        13: HeroNumber
        18: Score
        20: UltCharge
        25: BotControl
        26: AntiHealDebuffed
        27: LockedHero
        28: TargetNumber
        29: PlayerHiding
        30: BotPathing
        31: BotHelpPositions
        32: BotMovePositions
        33: BotShoot
        34: BotLeft
        35: BotRight
        36: ShootRando
        37: ShootPos
        38: ZenAim
        39: ShootPosHelp
        40: BotStayTimer
        41: BotSoldRun
        42: BotSleepDartHit
        43: BotSojRail
        44: BotTracerRecall
        45: Control
        46: BotTracerFirstBlink
        47: BotZoom
        48: BotStrafe
        49: BotCassDif
        50: BotDifficulty
        51: BotKiriHeal
}
subroutines {
    0: SpawnLocationCheck
    5: ZenAim
    6: BotHeroList
}
rule ("Workshop Settings") {
    event {
        Ongoing - Global;
    }
    actions {
        Disable Inspector Recording;
        Set Global Variable(Dva, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Dva"), False, 3));
        Set Global Variable(Mauga, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Mauga"), False, 3));
        Set Global Variable(Orisa, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Orisa"), False, 3));
        Set Global Variable(Reinhardt, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Reinhardt"), False, 3));
        Set Global Variable(Roadhog, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Roadhog"), False, 3));
        Set Global Variable(Sigma, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Sigma"), False, 3));
        Set Global Variable(Winston, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Winston"), False, 3));
        Set Global Variable(WreckingBall, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Wrecking Ball"), False, 3));
        Set Global Variable(Zarya, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Zarya"), False, 3));
        Set Global Variable(Doomfist, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Doomfist"), False, 3));
        Set Global Variable(Ramattra, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("Ramattra"), False, 3));
        Set Global Variable(JunkerQueen, Workshop Setting Toggle(Custom String("6. Tank heroes"), Custom String("JunkerQueen"), False, 3));
        Set Global Variable(Ashe, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Ashe"), True, 1));
        Set Global Variable(Bastion, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Bastion"), False, 1));
        Set Global Variable(Sojourn, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Sojourn"), True, 1));
        Set Global Variable(Echo, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Echo"), True, 1));
        Set Global Variable(Genji, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Genji"), True, 1));
        Set Global Variable(Hanzo, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Hanzo"), True, 1));
        Set Global Variable(Junkrat, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Junkrat"), False, 1));
        Set Global Variable(Cassidy, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Cassidy"), True, 1));
        Set Global Variable(Mei, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Mei"), False, 1));
        Set Global Variable(Pharah, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Pharah"), False, 1));
        Set Global Variable(Reaper, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Reaper"), False, 1));
        Set Global Variable(Soldier, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Soldier 76"), True, 1));
        Set Global Variable(Sombra, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Sombra"), False, 1));
        Set Global Variable(Torb, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Torbjörn"), False, 1));
        Set Global Variable(Tracer, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Tracer"), True, 1));
        Set Global Variable(Widow, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Widowmaker"), True, 1));
        Set Global Variable(Venture, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Venture"), False, 1));
        Set Global Variable(Ana, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Ana"), True, 2));
        Set Global Variable(Kiriko, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Kiriko"), True, 2));
        Set Global Variable(Baptiste, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Baptiste"), True, 2));
        Set Global Variable(Brigitte, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Brigitte"), False, 2));
        Set Global Variable(Lucio, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Lúcio"), False, 2));
        Set Global Variable(Mercy, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Mercy"), False, 2));
        Set Global Variable(Moira, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Moira"), False, 2));
        Set Global Variable(Lifeweaver, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Lifeweaver"), False, 2));
        Set Global Variable(Zenyatta, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Zenyatta"), True, 2));
        Set Global Variable(Illari, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Illari"), True, 2));
        Set Global Variable(BurnDamage, Workshop Setting Integer(Custom String("5. Burn Damage"), Custom String("Damage per tick"), 25, 25, 200, 0));
        Set Global Variable(AlwaysRefreshHero, Workshop Setting Toggle(Custom String("3. Always refresh hero (cooldowns, shield, etc) after winning on arena 1"), Custom String("Refresh hero after winning on arena 1"), False, 0));
        Set Global Variable(HostHasDifferentheroes, Workshop Setting Toggle(Custom String("4. Special settings for mode where players have different list of heroes"), Custom String("Host player has different list of heroes"), False, 0));
        Set Global Variable(Mauga2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Mauga."), False, 7));
        Set Global Variable(Dva2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Dva."), False, 7));
        Set Global Variable(Orisa2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Orisa."), False, 7));
        Set Global Variable(Reinhardt2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Reinhardt."), False, 7));
        Set Global Variable(Roadhog2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Roadhog."), False, 7));
        Set Global Variable(Sigma2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Sigma."), False, 7));
        Set Global Variable(Winston2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Winston."), False, 7));
        Set Global Variable(WreckingBall2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Wrecking Ball."), False, 7));
        Set Global Variable(Zarya2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Zarya."), False, 7));
        Set Global Variable(Doomfist2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Doomfist."), False, 7));
        Set Global Variable(Ramattra2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("Ramattra."), False, 7));
        Set Global Variable(JunkerQueen2, Workshop Setting Toggle(Custom String("7. Host only Tank heroes"), Custom String("JunkerQueen."), False, 7));
        Set Global Variable(Ashe2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Ashe."), True, 5));
        Set Global Variable(Bastion2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Bastion."), False, 5));
        Set Global Variable(Sojourn2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Sojourn."), True, 5));
        Set Global Variable(Echo2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Echo."), True, 5));
        Set Global Variable(Genji2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Genji."), True, 5));
        Set Global Variable(Hanzo2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Hanzo."), True, 5));
        Set Global Variable(Junkrat2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Junkrat."), False, 5));
        Set Global Variable(Cassidy2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Cassidy."), True, 5));
        Set Global Variable(Mei2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Mei."), False, 5));
        Set Global Variable(Pharah2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Pharah."), False, 5));
        Set Global Variable(Reaper2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Reaper."), False, 5));
        Set Global Variable(Soldier2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Soldier 76."), True, 5));
        Set Global Variable(Sombra2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Sombra."), False, 5));
        Set Global Variable(Torb2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Torbjörn."), False, 5));
        Set Global Variable(Tracer2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Tracer."), True, 5));
        Set Global Variable(Widow2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Widowmaker."), True, 5));
        Set Global Variable(Venture2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Venture."), False, 5));
        Set Global Variable(Ana2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Ana."), True, 6));
        Set Global Variable(Kiriko2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Kiriko."), True, 6));
        Set Global Variable(Baptiste2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Baptiste."), True, 6));
        Set Global Variable(Brigitte2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Brigitte."), False, 6));
        Set Global Variable(Lucio2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Lúcio."), False, 6));
        Set Global Variable(Mercy2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Mercy."), False, 6));
        Set Global Variable(Moira2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Moira."), False, 6));
        Set Global Variable(Lifeweaver2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Lifeweaver."), False, 6));
        Set Global Variable(Zenyatta2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Zenyatta."), True, 6));
        Set Global Variable(Illari2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Illari."), True, 6));
        Set Global Variable(HeroSelect, Workshop Setting Toggle(Custom String("2. Players can select and only play one hero"), Custom String("Enable option to select and lock hero for individual players by holding reload"), False, 0));
        Set Global Variable(BotDifSelect, Workshop Setting Combo(Custom String("1. Bot difficulty"), Custom String("Dynamic difficulty = Bot starts at diamond and changes depending on how you do"), 0, Array(Custom String("Dynamic difficulty"), Custom String("Gold"), Custom String("Platinum"), Custom String("Diamond"), Custom String("Master"), Custom String("Champion")), 0));
        Set Global Variable(AllHeroesMode, Workshop Setting Toggle(Custom String(" All heroes enabled"), Custom String("Enables all heroes with some modifiers and changes the scoring system"), False, 0));
        Set Global Variable(Freja, Workshop Setting Toggle(Custom String("6. Damage heroes"), Custom String("Freja"), False, 1));
        Set Global Variable(Juno, Workshop Setting Toggle(Custom String("6. Support heroes"), Custom String("Juno"), False, 2));
        Set Global Variable(Freja2, Workshop Setting Toggle(Custom String("7. Host only Damage heroes"), Custom String("Freja."), False, 5));
        Set Global Variable(Juno2, Workshop Setting Toggle(Custom String("7. Host only support heroes"), Custom String("Juno."), False, 6));
    }
}

rule ("Remove Assembling") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Assembling Heroes == True;
    }
    actions {
        Set Match Time(0);
        Create HUD Text(All Players(All Teams), Null, Custom String(" \n \n \n "), Null, Left, 0, Null, Color(White), Null, Visible To and String, Default Visibility);
    }
}

rule ("All heroes mode setup, hero text, no fly list, hero list, score per win") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.AllHeroesMode == True;
    }
    actions {
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Cassidy)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Ana)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Zenyatta)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Tracer)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Kiriko)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Sojourn)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Junkrat)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Hanzo)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Bastion)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Lifeweaver)), Custom String("default"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Pharah)), Custom String("longer conc cd, can't fly high vs some heroes"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Echo)), Custom String("ult dura 50%, can't fly high vs some heroes"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Ashe)), Custom String("ult dura 50%"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Soldier: 76)), Custom String("ult dura 75%"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Genji)), Custom String("ult dura 75%"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Baptiste)), Custom String("no drone"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Illari)), Custom String("no pylon"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Torbjörn)), Custom String("no turret"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Symmetra)), Custom String("no sentries"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Sombra)), Custom String("invis breaks after 5s"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Venture)), Custom String("no shields over 250hp"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Moira)), Custom String("healing 50%, heal orb 50%"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Brigitte)), Custom String("healing 50%, speed 130%, big jump"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Mercy)), Custom String("big jump, 150% speed, 120% dmg"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Reaper)), Custom String("255hp, 125% speed, 25% healing"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Widowmaker)), Custom String("250hp, low cd grapple"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Mei)), Custom String("255hp, 40% healing"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Lúcio)), Custom String("300hp, 130% dmg, no heal aura"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Doomfist)), Custom String("300hp, no health over 300"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Junker Queen)), Custom String("300hp, 50% healing, longer shout cd"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Reinhardt)), Custom String("407hp, 80% dmg, 140% speed, big jump, can only shield for 1s"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Ramattra)), Custom String("345hp, no shield, longer form cd"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(D.Va)), Custom String("368hp"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Mauga)), Custom String("368hp, 10% healing"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Orisa)), Custom String("304hp, longer fortify cd"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Roadhog)), Custom String("354hp, 50% healing"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Sigma)), Custom String("356hp, 1.2s shield dura, no hp over 356"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Winston)), Custom String("352hp, longer barrier cd, ult dura 50%"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Wrecking Ball)), Custom String("400hp, longer shield cd"));
        Set Global Variable At Index(HeroModifier, Index Of Array Value(All Heroes, Hero(Zarya)), Custom String("352hp, longer bubble cd"));
        Set Global Variable(NoFlyHeroes, Hero(Brigitte));
        Modify Global Variable(NoFlyHeroes, Append To Array, All Tank Heroes);
        Modify Global Variable(NoFlyHeroes, Remove From Array By Value, Hero(D.Va));
        Modify Global Variable(NoFlyHeroes, Append To Array, Hero(Reaper));
        Modify Global Variable(NoFlyHeroes, Append To Array, Hero(Symmetra));
        Modify Global Variable(NoFlyHeroes, Append To Array, Hero(Venture));
        Modify Global Variable(NoFlyHeroes, Append To Array, Hero(Lúcio));
        Modify Global Variable(NoFlyHeroes, Append To Array, Hero(Lifeweaver));
        Modify Global Variable(NoFlyHeroes, Append To Array, Hero(Moira));
        Modify Global Variable(NoFlyHeroes, Append To Array, Hero(Torbjörn));
        Modify Global Variable(NoFlyHeroes, Append To Array, Hero(Junkrat));
        Set Global Variable(HeroList, All Heroes);
        Set Global Variable At Index(ScorePerWin, 1, Divide(50, Count Of(All Heroes)));
        Set Global Variable At Index(ScorePerWin, 2, Divide(Divide(50, Count Of(All Heroes)), 1.5));
        Set Global Variable At Index(ScorePerWin, 3, Divide(Divide(50, Count Of(All Heroes)), 3));
    }
}

rule ("Creating Herolist and Herolist2 if different heroes enabled, score per win") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.AllHeroesMode == False;
    }
    actions {
        If(Compare(Global.Juno, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Juno));
        End;
        If(Compare(Global.Freja, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Freja));
        End;
        If(Compare(Global.Dva, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(D.Va));
        End;
        If(Compare(Global.Mauga, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Mauga));
        End;
        If(Compare(Global.Orisa, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Orisa));
        End;
        If(Compare(Global.Reinhardt, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Reinhardt));
        End;
        If(Compare(Global.Roadhog, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Roadhog));
        End;
        If(Compare(Global.Sigma, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Sigma));
        End;
        If(Compare(Global.Winston, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Winston));
        End;
        If(Compare(Global.WreckingBall, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Wrecking Ball));
        End;
        If(Compare(Global.Zarya, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Zarya));
        End;
        If(Compare(Global.Ashe, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Ashe));
        End;
        If(Compare(Global.Bastion, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Bastion));
        End;
        If(Compare(Global.Doomfist, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Doomfist));
        End;
        If(Compare(Global.Echo, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Echo));
        End;
        If(Compare(Global.Genji, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Genji));
        End;
        If(Compare(Global.Hanzo, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Hanzo));
        End;
        If(Compare(Global.Junkrat, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Junkrat));
        End;
        If(Compare(Global.Cassidy, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Cassidy));
        End;
        If(Compare(Global.Mei, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Mei));
        End;
        If(Compare(Global.Pharah, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Pharah));
        End;
        If(Compare(Global.Reaper, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Reaper));
        End;
        If(Compare(Global.Soldier, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Soldier: 76));
        End;
        If(Compare(Global.Sombra, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Sombra));
        End;
        If(Compare(Global.Torb, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Torbjörn));
        End;
        If(Compare(Global.Tracer, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Tracer));
        End;
        If(Compare(Global.Widow, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Widowmaker));
        End;
        If(Compare(Global.Ana, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Ana));
        End;
        If(Compare(Global.Baptiste, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Baptiste));
        End;
        If(Compare(Global.Brigitte, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Brigitte));
        End;
        If(Compare(Global.Lucio, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Lúcio));
        End;
        If(Compare(Global.Mercy, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Mercy));
        End;
        If(Compare(Global.Moira, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Moira));
        End;
        If(Compare(Global.JunkerQueen, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Junker Queen));
        End;
        If(Compare(Global.Ramattra, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Ramattra));
        End;
        If(Compare(Global.Kiriko, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Kiriko));
        End;
        If(Compare(Global.Sojourn, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Sojourn));
        End;
        If(Compare(Global.Zenyatta, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Zenyatta));
        End;
        If(Compare(Global.Lifeweaver, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Lifeweaver));
        End;
        If(Compare(Global.Illari, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Illari));
        End;
        If(Compare(Global.Venture, ==, True));
            Modify Global Variable(HeroList, Append To Array, Hero(Venture));
        End;
        Modify Global Variable(HeroList, Remove From Array By Index, 0);
        If(Compare(Global.HostHasDifferentheroes, ==, True));
            If(Compare(Global.Dva2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(D.Va));
            End;
            If(Compare(Global.Mauga2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Mauga));
            End;
            If(Compare(Global.Orisa2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Orisa));
            End;
            If(Compare(Global.Reinhardt2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Reinhardt));
            End;
            If(Compare(Global.Roadhog2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Roadhog));
            End;
            If(Compare(Global.Sigma2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Sigma));
            End;
            If(Compare(Global.Winston2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Winston));
            End;
            If(Compare(Global.WreckingBall2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Wrecking Ball));
            End;
            If(Compare(Global.Zarya2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Zarya));
            End;
            If(Compare(Global.Ashe2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Ashe));
            End;
            If(Compare(Global.Bastion2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Bastion));
            End;
            If(Compare(Global.Doomfist2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Doomfist));
            End;
            If(Compare(Global.Echo2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Echo));
            End;
            If(Compare(Global.Genji2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Genji));
            End;
            If(Compare(Global.Hanzo2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Hanzo));
            End;
            If(Compare(Global.Junkrat2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Junkrat));
            End;
            If(Compare(Global.Cassidy2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Cassidy));
            End;
            If(Compare(Global.Mei2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Mei));
            End;
            If(Compare(Global.Pharah2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Pharah));
            End;
            If(Compare(Global.Reaper2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Reaper));
            End;
            If(Compare(Global.Soldier2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Soldier: 76));
            End;
            If(Compare(Global.Sombra2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Sombra));
            End;
            If(Compare(Global.Torb2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Torbjörn));
            End;
            If(Compare(Global.Tracer2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Tracer));
            End;
            If(Compare(Global.Widow2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Widowmaker));
            End;
            If(Compare(Global.Ana2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Ana));
            End;
            If(Compare(Global.Baptiste2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Baptiste));
            End;
            If(Compare(Global.Brigitte2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Brigitte));
            End;
            If(Compare(Global.Lucio2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Lúcio));
            End;
            If(Compare(Global.Mercy2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Mercy));
            End;
            If(Compare(Global.Moira2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Moira));
            End;
            If(Compare(Global.JunkerQueen2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Junker Queen));
            End;
            If(Compare(Global.Kiriko2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Kiriko));
            End;
            If(Compare(Global.Ramattra2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Ramattra));
            End;
            If(Compare(Global.Sojourn2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Sojourn));
            End;
            If(Compare(Global.Zenyatta2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Zenyatta));
            End;
            If(Compare(Global.Illari2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Illari));
            End;
            If(Compare(Global.Venture2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Venture));
            End;
            If(Compare(Global.Juno2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Juno));
            End;
            If(Compare(Global.Freja2, ==, True));
                Modify Global Variable(HeroList2, Append To Array, Hero(Freja));
            End;
            Modify Global Variable(HeroList2, Remove From Array By Index, 0);
        End;
        Set Global Variable At Index(ScorePerWin, 1, 3);
        Set Global Variable At Index(ScorePerWin, 2, 2);
        Set Global Variable At Index(ScorePerWin, 3, 1);
    }
}

rule ("Disable Scoring, Intro hud, Arena Locations, Spawn Loc, Spawn detect") {
    event {
        Ongoing - Global;
    }
    actions {
        Disable Built-In Game Mode Scoring;
        Create HUD Text(All Players(All Teams), Custom String("Code: TXCXX"), Custom String("twitter.com/Seita_ow"), Custom String("Full details: workshop.codes/1v1arena"), Top, 22, Color(Orange), Color(Blue), Color(White), Visible To and String, Default Visibility);
        Set Global Variable(IntroHud, Last Text ID);
        "Arena locations"
        Set Global Variable(MainCenter, Vector(0, 267, 280));
        Set Global Variable(MainHigh, Vector(0, 280, 280));
        Set Global Variable(MainTopDeck, Vector(0, 279.5, 295.5));
        Set Global Variable(MainFacing, Vector(0, 268.5, 280));
        Create Effect(All Players(All Teams), Light Shaft, Color(Red), Global.MainCenter, 16.7, Visible To Position and Radius);
        Create Effect(All Players(All Teams), Sphere, Color(Red), Global.MainTopDeck, 2.61, Visible To Position and Radius);
        Set Global Variable(SpecSpot, Vector(13.366, 285, 279.711));
        Set Global Variable(SpecSpot2, Vector(-13.672, 285, 279.735));
        "Spawn Locations"
        Set Global Variable(MainDefaultSpawn, Vector(-0.087, 268, 267.986));
        Set Global Variable(MainOppositeSpawn, Vector(11, 268, 276.2));
        Modify Global Variable(MainOppositeSpawn, Append To Array, Vector(-11, 268, 276.2));
        Set Global Variable(MainTopSpawn, Vector(7.923, 268, 273.866));
        Modify Global Variable(MainTopSpawn, Append To Array, Vector(0.004, 268, 276.965));
        Modify Global Variable(MainTopSpawn, Append To Array, Vector(-7.771, 268, 273.383));
        Set Global Variable(MainDeckSpawn, Vector(9.486, 268, 280.02));
        Modify Global Variable(MainDeckSpawn, Append To Array, Vector(-0.005, 268, 283.035));
        Modify Global Variable(MainDeckSpawn, Append To Array, Vector(-9.486, 268, 280.02));
        "Spawn detection locations"
        Set Global Variable At Index(MainSpawnDetLoc, 0, Vector(0.198, 271.351, 302.477));
        Set Global Variable At Index(MainSpawnDetLoc, 1, Vector(0.147, 271.348, 266.101));
        Set Global Variable At Index(MainSpawnDetLoc, 2, Vector(20.349, 268.349, 281.046));
        Set Global Variable At Index(MainSpawnDetLoc, 3, Vector(-20.35, 268.349, 281.009));
        "Arena 2"
        Set Global Variable(SideArenaCenter, Vector(-41.832, 260, 344.857));
        Modify Global Variable(SideArenaCenter, Append To Array, Vector(-41.832, 270, 344.857));
        Set Global Variable(SideArenaSpawnsFacing, Vector(-50.464, 268.667, 351.671));
        Modify Global Variable(SideArenaSpawnsFacing, Append To Array, Vector(-31.82, 268.549, 332.737));
        Modify Global Variable(SideArenaSpawnsFacing, Append To Array, Vector(-38.715, 271.502, 343.17));
        Create Effect(All Players(All Teams), Light Shaft, Color(Red), First Of(Global.SideArenaCenter), 18, Visible To Position and Radius);
        "Arena 3"
        Modify Global Variable(SideArenaCenter, Append To Array, Vector(41.832, 260, 344.857));
        Modify Global Variable(SideArenaCenter, Append To Array, Vector(41.832, 270, 344.857));
        Modify Global Variable(SideArenaSpawnsFacing, Append To Array, Vector(50.464, 268.667, 351.671));
        Modify Global Variable(SideArenaSpawnsFacing, Append To Array, Vector(31.82, 268.549, 332.737));
        Modify Global Variable(SideArenaSpawnsFacing, Append To Array, Vector(38.715, 271.502, 343.17));
        Create Effect(All Players(All Teams), Light Shaft, Color(Blue), Value In Array(Global.SideArenaCenter, 2), 18, Visible To Position and Radius);
    }
}

rule ("Game is in Progress:   Pause Match Time, Sort Queue, Destroy IntroHud") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        "respawn as random heroes [off]"
        Wait(8, Ignore Condition);
        Pause Match Time;
        Set Match Time(1220);
        If(And(Compare(Number Of Players(All Teams), >=, 4), Compare(Number Of Players(All Teams), <=, 5)));
            For Global Variable(Control, Number Of Players(All Teams), 2, -1);
                Modify Global Variable(Arena2Q, Append To Array, Value In Array(Global.Arena1Q, Global.Control));
                Modify Global Variable(Arena1Q, Remove From Array By Index, Global.Control);
            End;
        Else If(Compare(Number Of Players(All Teams), >=, 6));
            For Global Variable(Control, Number Of Players(All Teams), 4, -1);
                Modify Global Variable(Arena3Q, Append To Array, Value In Array(Global.Arena1Q, Global.Control));
                Modify Global Variable(Arena1Q, Remove From Array By Index, Global.Control);
            End;
            For Global Variable(Control, 4, 2, -1);
                Modify Global Variable(Arena2Q, Append To Array, Value In Array(Global.Arena1Q, Global.Control));
                Modify Global Variable(Arena1Q, Remove From Array By Index, Global.Control);
            End;
        End;
        If(Compare(Global.HeroSelect, ==, True));
            Create HUD Text(All Players(All Teams), Null, Custom String("Host enabled hero locking\nHold '{0}' to change hero", Input Binding String(Button(Reload))), Null, Left, 0, Null, Color(Gray), Null, Visible To and String, Default Visibility);
        End;
        Destroy HUD Text(Global.IntroHud);
        Wait(0.5, Ignore Condition);
        Set Global Variable(GameLoaded, True);
    }
}

rule ("Playing last hero:    Restart Hero List") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).HeroNumber == Count Of((Event Player).HeroList);
    }
    actions {
        Set Player Variable(Event Player, HeroNumber, 0);
    }
}

rule ("Player Joins:   Create hero list (Host/List check), Sort Queue, Spectating") {
    event {
        Player Joined Match;
        All;
        All;
    }
    actions {
        Set Player Variable(Event Player, Hud, -1);
        If(Is Dummy Bot(Event Player));
            Call Subroutine(BotHeroList);
        Else;
            "Create hero list"
            If(And(Compare(Host Player, ==, Event Player), Compare(Global.HostHasDifferentheroes, ==, True)));
                Set Player Variable(Event Player, HeroList, Randomized Array(Global.HeroList2));
                Start Forcing Player To Be Hero(Event Player, Value In Array((Event Player).HeroList, (Event Player).HeroNumber));
                If(Compare(Count Of((Event Player).HeroList), ==, 1));
                    Set Player Variable(Event Player, OneHeroPlayerVariable, True);
                    Modify Player Variable(Event Player, HeroList, Append To Array, First Of((Event Player).HeroList));
                End;
            Else;
                Set Player Variable(Event Player, HeroList, Randomized Array(Global.HeroList));
                Start Forcing Player To Be Hero(Event Player, Value In Array((Event Player).HeroList, (Event Player).HeroNumber));
                If(Compare(Count Of((Event Player).HeroList), ==, 1));
                    Set Player Variable(Event Player, OneHeroPlayerVariable, True);
                    Modify Player Variable(Event Player, HeroList, Append To Array, First Of((Event Player).HeroList));
                End;
            End;
        End;
        "Put player to correct Queue"
        If(Compare(Global.GameLoaded, ==, True));
            If(And(Compare(Number Of Players(All Teams), >=, 0), Compare(Number Of Players(All Teams), <=, 3)));
                Modify Global Variable(Arena1Q, Append To Array, Event Player);
            Else If(And(Compare(Number Of Players(All Teams), >=, 4), Compare(Number Of Players(All Teams), <=, 5)));
                Modify Global Variable(Arena2Q, Append To Array, Event Player);
            Else;
                Modify Global Variable(Arena3Q, Append To Array, Event Player);
            End;
        Else;
            Modify Global Variable(Arena1Q, Append To Array, Event Player);
        End;
        "Set spectating"
        Set Player Variable(Event Player, Spectating, True);
        Wait(0.3, Ignore Condition);
        Skip If(Compare((Event Player).Spectating, ==, False), 1);
        Set Player Variable(Event Player, JoinSpecHelper, True);
        //lbl_0:
        If(Is Dummy Bot(Event Player));
            Start Forcing Player To Be Hero(Event Player, Value In Array((Event Player).HeroList, (Event Player).HeroNumber));
        End;
        If(Compare(Global.AllHeroesMode, ==, True));
            If(Array Contains(All Tank Heroes, Hero Of(Event Player)));
                Start Scaling Player(Event Player, 0.8, False);
            Else;
                Start Scaling Player(Event Player, 1, False);
            End;
            Create HUD Text(Event Player, Null, Custom String("{0}: {1}", Hero Icon String(Hero Of(Event Player)), Value In Array(Global.HeroModifier, Index Of Array Value(All Heroes, Hero Of(Event Player)))), Null, Left, 10, Null, Color(White), Null, Visible To and String, Default Visibility);
            Create HUD Text(Event Player, Null, Custom String("help balance: dsc.gg/seita-ow"), Null, Left, 11, Null, Color(Blue), Null, Visible To and String, Default Visibility);
    }
}

rule ("Match ends:    Auto restart") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Score Of(Event Player) >= 50;
    }
    actions {
        Wait(21, Ignore Condition);
        Restart Match;
    }
}

disabled rule ("###   Spectating   ###") {
    event {
        Ongoing - Global;
    }
}

rule ("Spectating before game is in progress") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).JoinSpecHelper == True;
    }
    actions {
        Teleport(Event Player, Global.SpecSpot);
        Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
        Set Gravity(Event Player, 0);
        Set Move Speed(Event Player, 0);
        Disallow Button(Event Player, Button(Primary Fire));
        Disallow Button(Event Player, Button(Secondary Fire));
        Disallow Button(Event Player, Button(Ability 1));
        Disallow Button(Event Player, Button(Ability 2));
        Disallow Button(Event Player, Button(Ultimate));
        Set Invisible(Event Player, All);
        Set Status(Event Player, Null, Phased Out, 9999);
        Set Status(Event Player, Null, Rooted, 9999);
        Set Damage Dealt(Event Player, 0);
        Wait(0.5, Ignore Condition);
        Skip If(Compare((Event Player).Spectating, ==, False), 1);
        Set Facing(Event Player, Local Vector Of(Global.MainFacing, Event Player, Rotation And Translation), To Player);
        //lbl_0:
    }
}

rule ("Spectating:   Queue Hud, Teleport, Disallow etc") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Spectating == True;
        Is Game In Progress == True;
    }
    actions {
        Destroy HUD Text((Event Player).Hud);
        If(Array Contains(Global.Arena1Q, Event Player));
            Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena1Q, Event Player), 2))), Custom String("Score per kill: {0}", Value In Array(Global.ScorePerWin, 1)), Custom String("Arena: 1"), Top, 2, Color(Green), Color(White), Color(Green), Visible To and String, Default Visibility);
        Else If(Array Contains(Global.Arena2Q, Event Player));
            If(Compare(Add((Event Player).Score, Value In Array(Global.ScorePerWin, 2)), >=, 50));
                Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena2Q, Event Player), 2))), Custom String("To win you need to get a kill in Arena 1"), Custom String("Arena: 2"), Top, 2, Color(Red), Color(White), Color(Red), Visible To and String, Default Visibility);
            Else;
                Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena2Q, Event Player), 2))), Custom String("Score per kill: {0}", Value In Array(Global.ScorePerWin, 2)), Custom String("Arena: 2"), Top, 2, Color(Red), Color(White), Color(Red), Visible To and String, Default Visibility);
            End;
        Else If(Array Contains(Global.Arena3Q, Event Player));
            If(Compare(Add((Event Player).Score, Value In Array(Global.ScorePerWin, 3)), >=, 50));
                Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena3Q, Event Player), 2))), Custom String("To win you need to get a kill in Arena 1"), Custom String("Arena: 3"), Top, 2, Color(Blue), Color(White), Color(Blue), Visible To and String, Default Visibility);
            Else;
                Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena3Q, Event Player), 2))), Custom String("Score per kill: {0}", Value In Array(Global.ScorePerWin, 3)), Custom String("Arena: 3"), Top, 2, Color(Blue), Color(White), Color(Blue), Visible To and String, Default Visibility);
            End;
        End;
        Set Player Variable(Event Player, Hud, Last Text ID);
        "Teleport, disallow etc"
        Teleport(Event Player, Global.SpecSpot);
        Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
        Set Gravity(Event Player, 0);
        Set Move Speed(Event Player, 0);
        Disallow Button(Event Player, Button(Primary Fire));
        Disallow Button(Event Player, Button(Secondary Fire));
        Disallow Button(Event Player, Button(Ability 1));
        Disallow Button(Event Player, Button(Ability 2));
        Disallow Button(Event Player, Button(Ultimate));
        Stop Holding Button(Event Player, Button(Primary Fire));
        Stop Holding Button(Event Player, Button(Secondary Fire));
        Stop Holding Button(Event Player, Button(Ability 1));
        Stop Holding Button(Event Player, Button(Ability 2));
        Set Invisible(Event Player, All);
        Set Status(Event Player, Null, Phased Out, 9999);
        Set Status(Event Player, Null, Rooted, 9999);
        Set Damage Dealt(Event Player, 0);
        If(Compare((Event Player).LockedHero, ==, True));
            Wait Until(Compare(Hero Of(Event Player), ==, True), 99999);
            Teleport(Event Player, Global.SpecSpot);
        End;
        Wait(0.5, Abort When False);
        Set Facing(Event Player, Local Vector Of(Global.MainFacing, Event Player, Rotation And Translation), To Player);
    }
}

rule ("Spectating:   You are next message & Sound") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Spectating == True;
        Or(Or(Compare(Value In Array(Global.Arena1Q, 3), ==, Event Player), Compare(Value In Array(Global.Arena2Q, 3), ==, Event Player)), Compare(Value In Array(Global.Arena3Q, 3), ==, Event Player)) == True;
    }
    actions {
        Big Message(Event Player, Custom String("you are next"));
        Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 200);
    }
}

rule ("Not Spectating:   Allow buttons, Destroy hud when game is in progress") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Spectating == False;
    }
    actions {
        Set Gravity(Event Player, 100);
        Set Move Speed(Event Player, 100);
        Set Status(Event Player, Null, Unkillable, 0);
        Set Invisible(Event Player, None);
        Set Status(Event Player, Null, Phased Out, 0);
        Set Status(Event Player, Null, Rooted, 0);
        Set Damage Dealt(Event Player, 100);
        Stop Forcing Throttle(Event Player);
        Allow Button(Event Player, Button(Primary Fire));
        Allow Button(Event Player, Button(Secondary Fire));
        Allow Button(Event Player, Button(Ability 1));
        Allow Button(Event Player, Button(Ability 2));
        Allow Button(Event Player, Button(Ultimate));
        If(Compare(Hero Of(Event Player), ==, Hero(Tracer)));
            Set Ability Cooldown(Event Player, Button(Ability 2), 3.5);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Wrecking Ball)));
            Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
        End;
        Wait Until(Is Game In Progress, 10);
        Destroy HUD Text((Event Player).Hud);
    }
}

rule ("Player Dies:   Set Spectating and Change Hero") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        If(Is Dummy Bot(Event Player));
            Set Player Variable(Event Player, BotKiriHeal, False);
            Set Player Variable(Event Player, ShootRando, First Of((Event Player).BotCassDif));
            Set Player Variable(Event Player, BotSojRail, 0);
            Stop Holding Button(Event Player, Button(Crouch));
            Stop Holding Button(Event Player, Button(Jump));
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Stop Holding Button(Event Player, Button(Primary Fire));
        End;
        Set Player Variable(Event Player, Spectating, True);
        If(Compare((Event Player).LockedHero, ==, False));
            Set Player Variable(Event Player, UltCharge, Ultimate Charge Percent(Event Player));
            Modify Player Variable(Event Player, HeroNumber, Add, 1);
            Wait(0.25, Ignore Condition);
            If(Compare((Event Player).OneHeroPlayerVariable, ==, True));
                Start Forcing Player To Be Hero(Event Player, Hero(Symmetra));
            End;
            Start Forcing Player To Be Hero(Event Player, Value In Array((Event Player).HeroList, (Event Player).HeroNumber));
            Wait(0.15, Ignore Condition);
            Set Ultimate Charge(Event Player, (Event Player).UltCharge);
        Else;
            If(Compare(Hero Of(Event Player), ==, Hero(Venture)));
                Set Ammo(Event Player, 0, 8);
            Else;
                Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
            End;
            Resurrect(Event Player);
            Set Ability Cooldown(Event Player, Button(Ability 1), 0);
            Set Ability Cooldown(Event Player, Button(Ability 2), 0);
            If(Compare(Hero Of(Event Player), ==, Hero(Tracer)));
                Set Ability Charge(Event Player, Button(Ability 1), 3);
            End;
        End;
        If(Compare(Global.AllHeroesMode, ==, True));
            If(Array Contains(All Tank Heroes, Hero Of(Event Player)));
                Start Scaling Player(Event Player, 0.8, False);
            Else;
                Start Scaling Player(Event Player, 1, False);
    }
}

disabled rule ("###   Match and Round Start   ###") {
    event {
        Ongoing - Global;
    }
}

rule ("Arena 1: Spawn Location subroutine") {
    event {
        Subroutine;
        SpawnLocationCheck;
    }
    actions {
        If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, 1)), Value In Array(Global.MainSpawnDetLoc, 2)), <=, 19));
            Set Global Variable(MainDefaultSpawn, Value In Array(Global.MainOppositeSpawn, 1));
        Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, 1)), Value In Array(Global.MainSpawnDetLoc, 3)), <=, 19));
            Set Global Variable(MainDefaultSpawn, First Of(Global.MainOppositeSpawn));
        Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, 1)), First Of(Global.MainSpawnDetLoc)), <=, 15));
            Set Global Variable(MainDefaultSpawn, Random Value In Array(Global.MainTopSpawn));
        Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, 1)), Value In Array(Global.MainSpawnDetLoc, 1)), <=, 10));
            "smallMessage(getAllPlayers(), \"Attacker is deck side\")"
            Set Global Variable(MainDefaultSpawn, Random Value In Array(Global.MainDeckSpawn));
        Else;
            Set Global Variable(MainDefaultSpawn, Random Value In Array(Global.MainOppositeSpawn));
        End;
    }
}

rule ("Arena 1: First Match Start") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.GameLoaded == True;
        Value In Array(Global.Arena1Q, 1) == True;
        Value In Array(Global.Arena1Q, 2) == True;
        Has Spawned(Value In Array(Global.Arena1Q, 1)) == True;
        Has Spawned(Value In Array(Global.Arena1Q, 2)) == True;
        Global.Arena1Match == False;
        Global.FirstMatch == False;
    }
    actions {
        Set Global Variable(Arena1Match, True);
        Wait(0.25, Ignore Condition);
        Teleport(Value In Array(Global.Arena1Q, 1), First Of(Global.MainOppositeSpawn));
        Teleport(Value In Array(Global.Arena1Q, 2), Value In Array(Global.MainOppositeSpawn, 1));
        Wait(0.05, Ignore Condition);
        Set Facing(Value In Array(Global.Arena1Q, 1), Local Vector Of(Global.MainFacing, Value In Array(Global.Arena1Q, 1), Rotation And Translation), To Player);
        Set Facing(Value In Array(Global.Arena1Q, 2), Local Vector Of(Global.MainFacing, Value In Array(Global.Arena1Q, 2), Rotation And Translation), To Player);
        Wait(0.05, Ignore Condition);
        Set Player Variable(Value In Array(Global.Arena1Q, 1), Spectating, 0);
        Set Player Variable(Value In Array(Global.Arena1Q, 2), Spectating, 0);
        Wait(0.3, Ignore Condition);
        Heal(Value In Array(Global.Arena1Q, 1), Null, 1000);
        Heal(Value In Array(Global.Arena1Q, 2), Null, 1000);
        Set Player Variable(Value In Array(Global.Arena1Q, 1), DeadHelper, False);
        Set Player Variable(Value In Array(Global.Arena1Q, 2), DeadHelper, False);
        Set Global Variable(FirstMatch, True);
        If(Is Dummy Bot(Players In Slot(11, All Teams)));
            Set Player Variable(Players In Slot(11, All Teams), BotTracerFirstBlink, True);
    }
}

rule ("Arena 1: Match Start") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.GameLoaded == True;
        Value In Array(Global.Arena1Q, 1) == True;
        Value In Array(Global.Arena1Q, 2) == True;
        Global.Arena1Match == False;
        Global.FirstMatch == True;
    }
    actions {
        Call Subroutine(SpawnLocationCheck);
        Wait(0.1, Ignore Condition);
        Teleport(Value In Array(Global.Arena1Q, 2), Global.MainDefaultSpawn);
        Wait(0.05, Ignore Condition);
        Set Facing(Value In Array(Global.Arena1Q, 2), Local Vector Of(Global.MainFacing, Value In Array(Global.Arena1Q, 2), Rotation And Translation), To Player);
        Wait(0.05, Ignore Condition);
        Set Player Variable(Value In Array(Global.Arena1Q, 1), Spectating, False);
        Set Player Variable(Value In Array(Global.Arena1Q, 2), Spectating, False);
        Wait(0.1, Ignore Condition);
        Heal(Value In Array(Global.Arena1Q, 1), Null, 1000);
        Heal(Value In Array(Global.Arena1Q, 2), Null, 1000);
        Set Player Variable(Value In Array(Global.Arena1Q, 1), DeadHelper, False);
        Set Player Variable(Value In Array(Global.Arena1Q, 2), DeadHelper, False);
        Set Global Variable(Arena1Match, True);
        If(Is Dummy Bot(Players In Slot(11, All Teams)));
            Set Player Variable(Players In Slot(11, All Teams), BotTracerFirstBlink, True);
        End;
        Loop If Condition Is True;
    }
}

rule ("Arena 2: Match Start") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.GameLoaded == True;
        Value In Array(Global.Arena2Q, 1) == True;
        Value In Array(Global.Arena2Q, 2) == True;
        Global.Arena2Match == False;
    }
    actions {
        Wait(0.016, Ignore Condition);
        Set Global Variable(Arena2Match, True);
        Wait(0.5, Ignore Condition);
        Teleport(Value In Array(Global.Arena2Q, 1), First Of(Global.SideArenaSpawnsFacing));
        Teleport(Value In Array(Global.Arena2Q, 2), Value In Array(Global.SideArenaSpawnsFacing, 1));
        Wait(0.05, Ignore Condition);
        Set Facing(Value In Array(Global.Arena2Q, 1), Local Vector Of(Value In Array(Global.SideArenaSpawnsFacing, 2), Value In Array(Global.Arena2Q, 1), Rotation And Translation), To Player);
        Set Facing(Value In Array(Global.Arena2Q, 2), Local Vector Of(Value In Array(Global.SideArenaSpawnsFacing, 2), Value In Array(Global.Arena2Q, 2), Rotation And Translation), To Player);
        Wait(0.05, Ignore Condition);
        Set Player Variable(Value In Array(Global.Arena2Q, 1), Spectating, False);
        Set Player Variable(Value In Array(Global.Arena2Q, 2), Spectating, False);
        Set Player Variable(Value In Array(Global.Arena2Q, 1), DeadHelper, False);
        Set Player Variable(Value In Array(Global.Arena2Q, 2), DeadHelper, False);
        Wait(0.3, Ignore Condition);
        Heal(Value In Array(Global.Arena2Q, 1), Null, 1000);
        Heal(Value In Array(Global.Arena2Q, 2), Null, 1000);
        Loop If Condition Is True;
    }
}

rule ("Arena 3: Match Start") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.GameLoaded == True;
        Value In Array(Global.Arena3Q, 1) == True;
        Value In Array(Global.Arena3Q, 2) == True;
        Global.Arena3Match == False;
    }
    actions {
        Wait(0.016, Ignore Condition);
        Set Global Variable(Arena3Match, True);
        Wait(0.5, Ignore Condition);
        Teleport(Value In Array(Global.Arena3Q, 1), Value In Array(Global.SideArenaSpawnsFacing, 3));
        Teleport(Value In Array(Global.Arena3Q, 2), Value In Array(Global.SideArenaSpawnsFacing, 4));
        Wait(0.05, Ignore Condition);
        Set Facing(Value In Array(Global.Arena3Q, 1), Local Vector Of(Value In Array(Global.SideArenaSpawnsFacing, 5), Value In Array(Global.Arena3Q, 1), Rotation And Translation), To Player);
        Set Facing(Value In Array(Global.Arena3Q, 2), Local Vector Of(Value In Array(Global.SideArenaSpawnsFacing, 5), Value In Array(Global.Arena3Q, 2), Rotation And Translation), To Player);
        Wait(0.05, Ignore Condition);
        Set Player Variable(Value In Array(Global.Arena3Q, 1), Spectating, False);
        Set Player Variable(Value In Array(Global.Arena3Q, 2), Spectating, False);
        Set Player Variable(Value In Array(Global.Arena3Q, 1), DeadHelper, False);
        Set Player Variable(Value In Array(Global.Arena3Q, 2), DeadHelper, False);
        Wait(0.3, Ignore Condition);
        Heal(Value In Array(Global.Arena3Q, 1), Null, 1000);
        Heal(Value In Array(Global.Arena3Q, 2), Null, 1000);
        Loop If Condition Is True;
    }
}

disabled rule ("###   Player dies   ###") {
    event {
        Ongoing - Global;
    }
}

rule ("Arena 1: Winner got ana naded") {
    event {
        Player Took Damage;
        All;
        All;
    }
    conditions {
        Array Contains(Global.Arena1Q, Event Player) == True;
        (Event Player).Spectating == False;
        Hero Of(Attacker) == Hero(Ana);
        Or(Compare(Event Damage, ==, 90), Compare(Event Damage, ==, 135)) == True;
    }
    actions {
        Set Player Variable(Event Player, AntiHealDebuffed, True);
        Wait(3, Ignore Condition);
        Set Player Variable(Event Player, AntiHealDebuffed, False);
    }
}

rule ("Arena 1: Player Dies") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Or(Compare(Event Player, ==, Value In Array(Global.Arena1Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena1Q, 2))) == True;
        (Event Player).DeadHelper == False;
    }
    actions {
        Set Player Variable(Event Player, DeadHelper, True);
        Modify Global Variable(Arena1Q, Remove From Array By Value, Event Player);
        If(Compare(Number Of Players(All Teams), <=, 3));
            Modify Global Variable(Arena1Q, Append To Array, Event Player);
        Else;
            Modify Global Variable(Arena2Q, Append To Array, Event Player);
        End;
        Clear Status(Event Player, Burning);
        "Arena1Q[1] = Winner"
        If(Compare(Hero Of(Value In Array(Global.Arena1Q, 1)), ==, Hero(Venture)));
            Set Ammo(Value In Array(Global.Arena1Q, 1), 0, 8);
        Else If(Compare(Hero Of(Value In Array(Global.Arena1Q, 1)), ==, Hero(Kiriko)));
            Set Ammo(Value In Array(Global.Arena1Q, 1), 1, 15);
        Else If(Compare(Hero Of(Value In Array(Global.Arena1Q, 1)), ==, Hero(Ramattra)));
            Press Button(Value In Array(Global.Arena1Q, 1), Button(Reload));
        Else If(Compare(Hero Of(Value In Array(Global.Arena1Q, 1)), ==, Hero(Orisa)));
        Else If(Compare(Hero Of(Value In Array(Global.Arena1Q, 1)), ==, Hero(Lifeweaver)));
            Set Ammo(Value In Array(Global.Arena1Q, 1), 1, 80);
        Else If(Compare(Hero Of(Value In Array(Global.Arena1Q, 1)), ==, Hero(Mauga)));
            Press Button(Value In Array(Global.Arena1Q, 1), Button(Reload));
        Else;
            Set Ammo(Value In Array(Global.Arena1Q, 1), 0, Max Ammo(Value In Array(Global.Arena1Q, 1), 0));
            Set Ammo(Value In Array(Global.Arena1Q, 1), 1, Max Ammo(Value In Array(Global.Arena1Q, 1), 1));
        End;
        Heal(Value In Array(Global.Arena1Q, 1), Null, 10000);
        Modify Player Variable(Value In Array(Global.Arena1Q, 1), Score, Add, Value In Array(Global.ScorePerWin, 1));
        Set Player Score(Value In Array(Global.Arena1Q, 1), (Value In Array(Global.Arena1Q, 1)).Score);
        Clear Status(Value In Array(Global.Arena1Q, 1), Burning);
        Set Global Variable(Arena1Match, False);
        "Hero refresh if needed and doomfist shield removal"
        If(Or(Compare(Global.AlwaysRefreshHero, ==, True), Compare((Value In Array(Global.Arena1Q, 1)).AntiHealDebuffed, ==, True)));
            Set Player Variable(Value In Array(Global.Arena1Q, 1), UltCharge, Ultimate Charge Percent(Value In Array(Global.Arena1Q, 1)));
            Wait(0.2, Ignore Condition);
            Start Forcing Player To Be Hero(Value In Array(Global.Arena1Q, 1), Hero(Symmetra));
            Wait(0.2, Ignore Condition);
            Start Forcing Player To Be Hero(Value In Array(Global.Arena1Q, 1), Value In Array((Value In Array(Global.Arena1Q, 1)).HeroList, (Value In Array(Global.Arena1Q, 1)).HeroNumber));
            Wait(0.05, Ignore Condition);
            Set Ultimate Charge(Value In Array(Global.Arena1Q, 1), (Value In Array(Global.Arena1Q, 1)).UltCharge);
    }
}

rule ("Arena 2: Player Dies") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Or(Compare(Event Player, ==, Value In Array(Global.Arena2Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena2Q, 2))) == True;
        (Event Player).DeadHelper == False;
    }
    actions {
        Set Player Variable(Event Player, DeadHelper, True);
        Modify Global Variable(Arena2Q, Remove From Array By Value, Event Player);
        If(Compare(Number Of Players(All Teams), <=, 3));
            Modify Global Variable(Arena1Q, Append To Array, Event Player);
        Else If(Compare(Number Of Players(All Teams), <=, 5));
            Modify Global Variable(Arena2Q, Append To Array, Event Player);
        Else;
            Modify Global Variable(Arena3Q, Append To Array, Event Player);
        End;
        "Arena2Q[1] = Winner"
        Heal(Value In Array(Global.Arena2Q, 1), Null, 1000);
        Set Player Variable(Value In Array(Global.Arena2Q, 1), UltCharge, Ultimate Charge Percent(Value In Array(Global.Arena2Q, 1)));
        Wait(0.1, Ignore Condition);
        If(Compare(Hero Of(Value In Array(Global.Arena2Q, 1)), ==, Hero(Symmetra)));
            Start Forcing Player To Be Hero(Value In Array(Global.Arena2Q, 1), Hero(Torbjörn));
        Else;
            Start Forcing Player To Be Hero(Value In Array(Global.Arena2Q, 1), Hero(Symmetra));
        End;
        Wait(0.2, Ignore Condition);
        Start Forcing Player To Be Hero(Value In Array(Global.Arena2Q, 1), Value In Array((Value In Array(Global.Arena2Q, 1)).HeroList, (Value In Array(Global.Arena2Q, 1)).HeroNumber));
        Wait(0.05, Ignore Condition);
        Set Ultimate Charge(Value In Array(Global.Arena2Q, 1), (Value In Array(Global.Arena2Q, 1)).UltCharge);
        Skip If(Compare(Value In Array(Global.Arena2Q, 1), ==, False), 1);
        Modify Global Variable(Arena1Q, Append To Array, Value In Array(Global.Arena2Q, 1));
        //lbl_0:
        Set Player Variable(Value In Array(Global.Arena2Q, 1), Spectating, True);
        Heal(Value In Array(Global.Arena2Q, 1), Null, 1000);
        Skip If(Compare(Add((Value In Array(Global.Arena2Q, 1)).Score, Value In Array(Global.ScorePerWin, 2)), >=, 49.5), 1);
        Modify Player Variable(Value In Array(Global.Arena2Q, 1), Score, Add, Value In Array(Global.ScorePerWin, 2));
        //lbl_1:
        Set Player Score(Value In Array(Global.Arena2Q, 1), (Value In Array(Global.Arena2Q, 1)).Score);
        Clear Status(Value In Array(Global.Arena2Q, 1), Burning);
        Skip If(Compare(Value In Array(Global.Arena2Q, 1), ==, False), 1);
        Modify Global Variable(Arena2Q, Remove From Array By Index, 1);
        //lbl_2:
        Clear Status(Event Player, Burning);
        Wait(0.016, Ignore Condition);
        Set Global Variable(Arena2Match, False);
    }
}

rule ("Arena 3: Player Dies") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Or(Compare(Event Player, ==, Value In Array(Global.Arena3Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena3Q, 2))) == True;
        (Event Player).DeadHelper == False;
    }
    actions {
        Set Player Variable(Event Player, DeadHelper, True);
        Modify Global Variable(Arena3Q, Remove From Array By Value, Event Player);
        If(Compare(Number Of Players(All Teams), <=, 3));
            Modify Global Variable(Arena1Q, Append To Array, Event Player);
        Else If(Compare(Number Of Players(All Teams), <=, 5));
            Modify Global Variable(Arena2Q, Append To Array, Event Player);
        Else;
            Modify Global Variable(Arena3Q, Append To Array, Event Player);
        End;
        "Arena3Q[1] = Winner"
        Heal(Value In Array(Global.Arena3Q, 1), Null, 300);
        Set Player Variable(Value In Array(Global.Arena3Q, 1), UltCharge, Ultimate Charge Percent(Value In Array(Global.Arena3Q, 1)));
        Wait(0.1, Ignore Condition);
        If(Compare(Hero Of(Value In Array(Global.Arena3Q, 1)), ==, Hero(Symmetra)));
            Start Forcing Player To Be Hero(Value In Array(Global.Arena3Q, 1), Hero(Torbjörn));
        Else;
            Start Forcing Player To Be Hero(Value In Array(Global.Arena3Q, 1), Hero(Symmetra));
        End;
        Wait(0.2, Ignore Condition);
        Start Forcing Player To Be Hero(Value In Array(Global.Arena3Q, 1), Value In Array((Value In Array(Global.Arena3Q, 1)).HeroList, (Value In Array(Global.Arena3Q, 1)).HeroNumber));
        Wait(0.05, Ignore Condition);
        Set Ultimate Charge(Value In Array(Global.Arena3Q, 1), (Value In Array(Global.Arena3Q, 1)).UltCharge);
        Skip If(Compare(Value In Array(Global.Arena3Q, 1), ==, False), 5);
        If(Compare(Number Of Players(All Teams), <=, 3));
            Modify Global Variable(Arena1Q, Append To Array, Value In Array(Global.Arena3Q, 1));
        Else;
            Modify Global Variable(Arena2Q, Append To Array, Value In Array(Global.Arena3Q, 1));
        End;
        //lbl_0:
        Set Player Variable(Value In Array(Global.Arena3Q, 1), Spectating, True);
        Skip If(Compare(Add((Value In Array(Global.Arena3Q, 1)).Score, Value In Array(Global.ScorePerWin, 3)), >=, 49.5), 1);
        Modify Player Variable(Value In Array(Global.Arena3Q, 1), Score, Add, Value In Array(Global.ScorePerWin, 3));
        //lbl_1:
        Set Player Score(Value In Array(Global.Arena3Q, 1), (Value In Array(Global.Arena3Q, 1)).Score);
        Heal(Value In Array(Global.Arena3Q, 1), Null, 300);
        Clear Status(Value In Array(Global.Arena3Q, 1), Burning);
        Skip If(Compare(Value In Array(Global.Arena3Q, 1), ==, False), 1);
        Modify Global Variable(Arena3Q, Remove From Array By Index, 1);
        //lbl_2:
        Clear Status(Event Player, Burning);
        Wait(0.016, Ignore Condition);
        Set Global Variable(Arena3Match, False);
    }
}

disabled rule ("###   Player leaves   ###") {
    event {
        Ongoing - Global;
    }
}

rule ("Player Leaves: Remove from All Queues") {
    event {
        Player Left Match;
        All;
        All;
    }
    actions {
        If(And(Compare(Global.Arena1Match, ==, True), Or(Compare(Event Player, ==, Value In Array(Global.Arena1Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena1Q, 2)))));
            Modify Global Variable(Arena1Q, Remove From Array By Value, Event Player);
            Heal(Value In Array(Global.Arena1Q, 1), Null, 1000);
            Set Global Variable(Arena1Match, False);
        Else If(And(Compare(Global.Arena2Match, ==, True), Or(Compare(Event Player, ==, Value In Array(Global.Arena2Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena2Q, 2)))));
            Modify Global Variable(Arena2Q, Remove From Array By Value, Event Player);
            Heal(Value In Array(Global.Arena2Q, 1), Null, 1000);
            Set Player Variable(Value In Array(Global.Arena2Q, 1), Spectating, True);
            Set Global Variable(Arena2Match, False);
        Else If(And(Compare(Global.Arena3Match, ==, True), Or(Compare(Event Player, ==, Value In Array(Global.Arena3Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena3Q, 2)))));
            Modify Global Variable(Arena3Q, Remove From Array By Value, Event Player);
            Heal(Value In Array(Global.Arena3Q, 1), Null, 1000);
            Set Player Variable(Value In Array(Global.Arena3Q, 1), Spectating, True);
            Set Global Variable(Arena3Match, False);
        Else;
            Modify Global Variable(Arena1Q, Remove From Array By Value, Event Player);
            Modify Global Variable(Arena2Q, Remove From Array By Value, Event Player);
            Modify Global Variable(Arena3Q, Remove From Array By Value, Event Player);
        End;
        If(Compare(Number Of Players(All Teams), <=, 3));
            Modify Global Variable(Arena2Q, Remove From Array By Index, 0);
            Skip If(Compare(Global.Arena2Q, ==, False), 1);
            Modify Global Variable(Arena1Q, Append To Array, Global.Arena2Q);
            //lbl_0:
            Set Global Variable(Arena2Q, 0);
            Set Global Variable(Arena2Match, False);
            Modify Global Variable(Arena3Q, Remove From Array By Index, 0);
            Skip If(Compare(Global.Arena3Q, ==, False), 1);
            Modify Global Variable(Arena1Q, Append To Array, Global.Arena3Q);
            //lbl_1:
            Set Global Variable(Arena3Q, 0);
            Set Global Variable(Arena3Match, False);
            Set Player Variable(Value In Array(Global.Arena1Q, 3), Spectating, True);
        Else If(Compare(Number Of Players(All Teams), <=, 5));
            Modify Global Variable(Arena3Q, Remove From Array By Index, 0);
            Skip If(Compare(Global.Arena3Q, ==, False), 1);
            Modify Global Variable(Arena2Q, Append To Array, Global.Arena3Q);
            //lbl_2:
            Set Global Variable(Arena3Q, 0);
            Set Global Variable(Arena3Match, False);
            Set Player Variable(Value In Array(Global.Arena2Q, 3), Spectating, True);
            Set Player Variable(Value In Array(Global.Arena2Q, 4), Spectating, True);
            Set Player Variable(Value In Array(Global.Arena2Q, 5), Spectating, True);
    }
}

disabled rule ("###   Bug fix   ###") {
    event {
        Ongoing - Global;
    }
}

rule ("Arena 1: Bug fix") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Has Spawned(Event Player) == True;
        Global.FirstMatch == True;
        Or(Compare(Event Player, ==, Value In Array(Global.Arena1Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena1Q, 2))) == True;
        (Event Player).Spectating == True;
    }
    actions {
        Wait(1.5, Abort When False);
        Set Player Variable(Event Player, Spectating, False);
    }
}

rule ("Arena 2: Afk player") {
    event {
        Ongoing - Global;
    }
    conditions {
        Value In Array(Global.Arena2Q, 1) == True;
        Value In Array(Global.Arena2Q, 2) == True;
        Global.Arena2Match == True;
    }
    actions {
        Wait(30, Abort When False);
        Small Message(All Players(All Teams), Custom String("   Duel taking over 30s in Arena2 or bugged, killing 1 player to keep the queue rolling"));
        Kill(Value In Array(Global.Arena2Q, 2), Value In Array(Global.Arena2Q, 1));
        Wait(3, Abort When False);
        Kill(Value In Array(Global.Arena2Q, 1), Value In Array(Global.Arena2Q, 2));
    }
}

rule ("Arena 2: Stuck") {
    event {
        Ongoing - Global;
    }
    conditions {
        Value In Array(Global.Arena2Q, 1) == False;
        Value In Array(Global.Arena2Q, 2) == False;
        Global.Arena2Match == True;
    }
    actions {
        Wait(5, Abort When False);
        Set Global Variable(Arena2Match, False);
        Small Message(All Players(All Teams), Custom String("   Arena 2 left active when no players, trying to fix"));
    }
}

rule ("Arena 3: Afk player") {
    event {
        Ongoing - Global;
    }
    conditions {
        Value In Array(Global.Arena3Q, 1) == True;
        Value In Array(Global.Arena3Q, 2) == True;
        Global.Arena3Match == True;
    }
    actions {
        Wait(30, Abort When False);
        Small Message(All Players(All Teams), Custom String("   Duel taking over 30s in Arena3 or bugged, killing 1 player to keep the queue rolling"));
        Kill(Value In Array(Global.Arena3Q, 2), Value In Array(Global.Arena3Q, 1));
        Wait(3, Abort When False);
        Kill(Value In Array(Global.Arena3Q, 1), Value In Array(Global.Arena3Q, 2));
    }
}

rule ("Arena 3: Stuck") {
    event {
        Ongoing - Global;
    }
    conditions {
        Value In Array(Global.Arena3Q, 1) == False;
        Value In Array(Global.Arena3Q, 2) == False;
        Global.Arena3Match == True;
    }
    actions {
        Wait(5, Abort When False);
        Set Global Variable(Arena3Match, False);
        Small Message(All Players(All Teams), Custom String("   Arena 3 left active when no players, trying to fix"));
    }
}

disabled rule ("###   Zone check   ###") {
    event {
        Ongoing - Global;
    }
}

rule ("Zone Check Arena 1 Center") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        "@Condition eventPlayer.isDummy() == false"
        Or(Compare(Value In Array(Global.Arena1Q, 1), ==, Event Player), Compare(Value In Array(Global.Arena1Q, 2), ==, Event Player)) == True;
        (Event Player).Spectating == False;
        Or(Compare(Altitude Of(Event Player), >=, 30), Compare(Altitude Of(Event Player), <=, 6)) == True;
        Distance Between(Event Player, Global.MainHigh) >= 16.4;
        Distance Between(Event Player, Global.MainCenter) >= 15.1;
    }
    actions {
        Set Status(Event Player, Null, Burning, 0.5);
        If(Is Dummy Bot(Event Player));
            If(Compare(Hero Of(Event Player), ==, Hero(Sojourn)));
                Cancel Primary Action(Event Player);
            End;
            Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), First Of((Event Player).BotHelpPositions)), 1, To World, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotPathing, False);
            Wait(Random Real(0.75, 1), Ignore Condition);
            Set Player Variable(Event Player, BotPathing, True);
        End;
        Wait(0.5, Abort When False);
        Damage(Event Player, Null, Global.BurnDamage);
        Loop If Condition Is True;
    }
}

rule ("Zone Check Arena 1 Top") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        "@Condition eventPlayer.isDummy() == false"
        Or(Compare(Value In Array(Global.Arena1Q, 1), ==, Event Player), Compare(Value In Array(Global.Arena1Q, 2), ==, Event Player)) == True;
        (Event Player).Spectating == False;
        Or(Compare(Altitude Of(Event Player), >=, 30), Compare(Altitude Of(Event Player), <=, 6)) == True;
        Distance Between(Event Player, Global.MainTopDeck) <= 3.75;
    }
    actions {
        Set Status(Event Player, Null, Burning, 0.5);
        Wait(0.5, Abort When False);
        Damage(Event Player, Null, Global.BurnDamage);
        Loop If Condition Is True;
    }
}

rule ("Zone Check Arena 2") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.Arena2Match == True;
        Or(Compare(Value In Array(Global.Arena2Q, 1), ==, Event Player), Compare(Value In Array(Global.Arena2Q, 2), ==, Event Player)) == True;
        (Event Player).Spectating == False;
        Or(Compare(Altitude Of(Event Player), >=, 30), Compare(Altitude Of(Event Player), <=, 6)) == True;
        Distance Between(Event Player, Value In Array(Global.SideArenaCenter, 1)) >= 17.4;
    }
    actions {
        Set Status(Event Player, Null, Burning, 0.5);
        Damage(Event Player, Null, Global.BurnDamage);
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Zone Check Arena 3") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.Arena3Match == True;
        Or(Compare(Value In Array(Global.Arena3Q, 1), ==, Event Player), Compare(Value In Array(Global.Arena3Q, 2), ==, Event Player)) == True;
        (Event Player).Spectating == False;
        Or(Compare(Altitude Of(Event Player), >=, 30), Compare(Altitude Of(Event Player), <=, 6)) == True;
        Distance Between(Event Player, Value In Array(Global.SideArenaCenter, 3)) >= 17.4;
    }
    actions {
        Set Status(Event Player, Null, Burning, 0.5);
        Damage(Event Player, Null, Global.BurnDamage);
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("###   Hero changes   ###") {
    event {
        Ongoing - Global;
    }
    actions {
        Wait(3, Ignore Condition);
        Create Dummy Bot(Hero(Moira), All Teams, 11, Vector(0, 0, 0), Vector(0, 0, 0));
    }
}

rule ("Hero locking") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.HeroSelect == True;
        Global.GameLoaded == True;
        Global.FirstMatch == True;
        Is Dummy Bot(Event Player) == False;
        Count Of((Event Player).HeroList) >= 2;
        Is Button Held(Event Player, Button(Reload)) == True;
    }
    actions {
        Wait(0.3, Abort When False);
        Small Message(Event Player, Custom String("   Keep holding reload to change hero"));
        Wait(0.4, Abort When False);
        Small Message(All Players(All Teams), Custom String("   {0} is changing hero", Event Player));
        Set Status(Event Player, Null, Phased Out, 9999);
        Set Player Variable(Event Player, LockedHero, True);
        Set Player Variable(Event Player, UltCharge, Ultimate Charge Percent(Event Player));
        Stop Forcing Player To Be Hero(Event Player);
        Modify Player Variable(Event Player, HeroList, Remove From Array By Value, Hero Of(Event Player));
        Set Player Allowed Heroes(Event Player, (Event Player).HeroList);
        Wait(0.1, Ignore Condition);
        "Create hero list"
        If(And(Compare(Host Player, ==, Event Player), Compare(Global.HostHasDifferentheroes, ==, True)));
            Set Player Variable(Event Player, HeroList, Randomized Array(Global.HeroList2));
        Else;
            Set Player Variable(Event Player, HeroList, Randomized Array(Global.HeroList));
        End;
        Set Player Allowed Heroes(Event Player, (Event Player).HeroList);
        "In Arena Q 1"
        If(Array Contains(Global.Arena1Q, Event Player));
            "If playing"
            If(Or(Compare(Event Player, ==, Value In Array(Global.Arena1Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena1Q, 2))));
                "If in an active Match"
                If(Compare(Global.Arena1Match, ==, True));
                    Modify Global Variable(Arena1Q, Remove From Array By Value, Event Player);
                    "Arena1Q[1] = Winner"
                    Set Ammo(Value In Array(Global.Arena1Q, 1), 0, Max Ammo(Value In Array(Global.Arena1Q, 1), 0));
                    Heal(Value In Array(Global.Arena1Q, 1), Null, 1000);
                    Modify Player Variable(Value In Array(Global.Arena1Q, 1), Score, Add, Value In Array(Global.ScorePerWin, 1));
                    Set Player Score(Value In Array(Global.Arena1Q, 1), (Value In Array(Global.Arena1Q, 1)).Score);
                    Clear Status(Value In Array(Global.Arena1Q, 1), Burning);
                    Set Global Variable(Arena1Match, False);
                    "Hero refresh if needed and doomfist shield removal"
                    If(Or(Compare(Global.AlwaysRefreshHero, ==, True), Compare((Value In Array(Global.Arena1Q, 1)).AntiHealDebuffed, ==, True)));
                        Set Player Variable(Value In Array(Global.Arena1Q, 1), UltCharge, Ultimate Charge Percent(Value In Array(Global.Arena1Q, 1)));
                        Wait(0.2, Ignore Condition);
                        Start Forcing Player To Be Hero(Value In Array(Global.Arena1Q, 1), Hero(Symmetra));
                        Wait(0.2, Ignore Condition);
                        Start Forcing Player To Be Hero(Value In Array(Global.Arena1Q, 1), Value In Array((Value In Array(Global.Arena1Q, 1)).HeroList, (Value In Array(Global.Arena1Q, 1)).HeroNumber));
                        Wait(0.05, Ignore Condition);
                        Set Ultimate Charge(Value In Array(Global.Arena1Q, 1), (Value In Array(Global.Arena1Q, 1)).UltCharge);
                    End;
                Else;
                    Modify Global Variable(Arena1Q, Remove From Array By Value, Event Player);
                End;
            Else;
                Modify Global Variable(Arena1Q, Remove From Array By Value, Event Player);
            End;
        Else If(Array Contains(Global.Arena2Q, Event Player));
            "If playing"
            If(Or(Compare(Event Player, ==, Value In Array(Global.Arena2Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena2Q, 2))));
                "If in an active Match"
                If(Compare(Global.Arena2Match, ==, True));
                    Modify Global Variable(Arena2Q, Remove From Array By Value, Event Player);
                    "Arena2Q[1] = Winner"
                    Heal(Value In Array(Global.Arena2Q, 1), Null, 1000);
                    Set Player Variable(Value In Array(Global.Arena2Q, 1), UltCharge, Ultimate Charge Percent(Value In Array(Global.Arena2Q, 1)));
                    Wait(0.1, Ignore Condition);
                    Start Forcing Player To Be Hero(Value In Array(Global.Arena2Q, 1), Hero(Symmetra));
                    Wait(0.2, Ignore Condition);
                    Start Forcing Player To Be Hero(Value In Array(Global.Arena2Q, 1), Value In Array((Value In Array(Global.Arena2Q, 1)).HeroList, (Value In Array(Global.Arena2Q, 1)).HeroNumber));
                    Wait(0.05, Ignore Condition);
                    Set Ultimate Charge(Value In Array(Global.Arena2Q, 1), (Value In Array(Global.Arena2Q, 1)).UltCharge);
                    Skip If(Compare(Value In Array(Global.Arena2Q, 1), ==, False), 1);
                    Modify Global Variable(Arena1Q, Append To Array, Value In Array(Global.Arena2Q, 1));
                    //lbl_0:
                    Set Player Variable(Value In Array(Global.Arena2Q, 1), Spectating, True);
                    Heal(Value In Array(Global.Arena2Q, 1), Null, 1000);
                    Skip If(Compare(Add((Value In Array(Global.Arena2Q, 1)).Score, Value In Array(Global.ScorePerWin, 2)), >=, 49.5), 1);
                    Modify Player Variable(Value In Array(Global.Arena2Q, 1), Score, Add, Value In Array(Global.ScorePerWin, 2));
                    //lbl_1:
                    Set Player Score(Value In Array(Global.Arena2Q, 1), (Value In Array(Global.Arena2Q, 1)).Score);
                    Clear Status(Value In Array(Global.Arena2Q, 1), Burning);
                    Skip If(Compare(Value In Array(Global.Arena2Q, 1), ==, False), 1);
                    Modify Global Variable(Arena2Q, Remove From Array By Index, 1);
                    //lbl_2:
                    Set Global Variable(Arena2Match, False);
                Else;
                    Modify Global Variable(Arena2Q, Remove From Array By Value, Event Player);
                End;
            Else;
                Modify Global Variable(Arena2Q, Remove From Array By Value, Event Player);
            End;
        Else If(Array Contains(Global.Arena3Q, Event Player));
            "If playing"
            If(Or(Compare(Event Player, ==, Value In Array(Global.Arena3Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena3Q, 2))));
                "If in an active Match"
                If(Compare(Global.Arena3Match, ==, True));
                    Modify Global Variable(Arena3Q, Remove From Array By Value, Event Player);
                    "Arena3Q[1] = Winner"
                    Heal(Value In Array(Global.Arena3Q, 1), Null, 300);
                    Set Player Variable(Value In Array(Global.Arena3Q, 1), UltCharge, Ultimate Charge Percent(Value In Array(Global.Arena3Q, 1)));
                    Wait(0.1, Ignore Condition);
                    Start Forcing Player To Be Hero(Value In Array(Global.Arena3Q, 1), Hero(Symmetra));
                    Wait(0.2, Ignore Condition);
                    Start Forcing Player To Be Hero(Value In Array(Global.Arena3Q, 1), Value In Array((Value In Array(Global.Arena3Q, 1)).HeroList, (Value In Array(Global.Arena3Q, 1)).HeroNumber));
                    Wait(0.05, Ignore Condition);
                    Set Ultimate Charge(Value In Array(Global.Arena3Q, 1), (Value In Array(Global.Arena3Q, 1)).UltCharge);
                    Skip If(Compare(Value In Array(Global.Arena3Q, 1), ==, False), 5);
                    If(Compare(Number Of Players(All Teams), <=, 3));
                        Modify Global Variable(Arena1Q, Append To Array, Value In Array(Global.Arena3Q, 1));
                    Else;
                        Modify Global Variable(Arena2Q, Append To Array, Value In Array(Global.Arena3Q, 1));
                    End;
                    //lbl_3:
                    Set Player Variable(Value In Array(Global.Arena3Q, 1), Spectating, True);
                    Skip If(Compare(Add((Value In Array(Global.Arena3Q, 1)).Score, Value In Array(Global.ScorePerWin, 3)), >=, 49.5), 1);
                    Modify Player Variable(Value In Array(Global.Arena3Q, 1), Score, Add, Value In Array(Global.ScorePerWin, 3));
                    //lbl_4:
                    Set Player Score(Value In Array(Global.Arena3Q, 1), (Value In Array(Global.Arena3Q, 1)).Score);
                    Heal(Value In Array(Global.Arena3Q, 1), Null, 300);
                    Clear Status(Value In Array(Global.Arena3Q, 1), Burning);
                    Skip If(Compare(Value In Array(Global.Arena3Q, 1), ==, False), 1);
                    Modify Global Variable(Arena3Q, Remove From Array By Index, 1);
                    //lbl_5:
                    Set Global Variable(Arena3Match, False);
                Else;
                    Modify Global Variable(Arena3Q, Remove From Array By Value, Event Player);
                End;
            Else;
                Modify Global Variable(Arena3Q, Remove From Array By Value, Event Player);
            End;
        End;
        Set Player Variable(Event Player, Spectating, True);
        Wait Until(Compare(Hero Of(Event Player), ==, True), 99999);
        Teleport(Event Player, Global.SpecSpot);
        Set Ultimate Charge(Event Player, (Event Player).UltCharge);
        "Add player back to Queue"
        If(And(Compare(Number Of Players(All Teams), >=, 0), Compare(Number Of Players(All Teams), <=, 3)));
            Modify Global Variable(Arena1Q, Append To Array, Event Player);
        Else If(And(Compare(Number Of Players(All Teams), >=, 4), Compare(Number Of Players(All Teams), <=, 5)));
            Modify Global Variable(Arena2Q, Append To Array, Event Player);
        Else;
            Modify Global Variable(Arena3Q, Append To Array, Event Player);
        End;
        Destroy HUD Text((Event Player).Hud);
        If(Array Contains(Global.Arena1Q, Event Player));
            Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena1Q, Event Player), 2))), Custom String("Score per kill: 3"), Custom String("Arena: 1"), Top, 2, Color(Green), Color(White), Color(Green), Visible To and String, Default Visibility);
        Else If(Array Contains(Global.Arena2Q, Event Player));
            If(Compare((Event Player).Score, >=, 48));
                Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena2Q, Event Player), 2))), Custom String("To win you need to get a kill in Arena 1"), Custom String("Arena: 2"), Top, 2, Color(Red), Color(White), Color(Red), Visible To and String, Default Visibility);
            Else;
                Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena2Q, Event Player), 2))), Custom String("Score per kill: 2"), Custom String("Arena: 2"), Top, 2, Color(Red), Color(White), Color(Red), Visible To and String, Default Visibility);
            End;
        Else If(Array Contains(Global.Arena3Q, Event Player));
            If(Compare((Event Player).Score, >=, 49));
                Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena3Q, Event Player), 2))), Custom String("To win you need to get a kill in Arena 1"), Custom String("Arena: 3"), Top, 2, Color(Blue), Color(White), Color(Blue), Visible To and String, Default Visibility);
            Else;
                Create HUD Text(Event Player, String("{0}: {1}", Custom String("Position in Queue"), Absolute Value(Subtract(Index Of Array Value(Global.Arena3Q, Event Player), 2))), Custom String("Score per kill: 1"), Custom String("Arena: 3"), Top, 2, Color(Blue), Color(White), Color(Blue), Visible To and String, Default Visibility);
            End;
        End;
        Set Player Variable(Event Player, Hud, Last Text ID);
        Set Player Variable(Event Player, HeroNumber, Index Of Array Value((Event Player).HeroList, Hero Of(Event Player)));
        If(Compare(Global.AllHeroesMode, ==, True));
            If(Array Contains(All Tank Heroes, Hero Of(Event Player)));
                Start Scaling Player(Event Player, 0.8, False);
            Else;
                Start Scaling Player(Event Player, 1, False);
    }
}

rule ("Echo duplicate nerf") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Duplicating(Event Player) == True;
        Is Alive(Event Player) == True;
    }
    actions {
        Wait(7, Abort When False);
        Damage(Event Player, Null, 1000);
    }
}

rule ("Support passive healing disabled") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Array Contains(All Support Heroes, Hero Of(Event Player)) == True;
        Normalized Health(Event Player) != 1;
        Has Status(Event Player, Asleep) == False;
    }
    actions {
        Wait(2.45, Abort When False);
        Damage(Event Player, Null, 0.001);
        Heal(Event Player, Null, 0.001);
        Loop If Condition Is True;
    }
}

rule ("Dps & Tank passive healing disabled") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Array Contains(All Support Heroes, Hero Of(Event Player)) == False;
        Normalized Health(Event Player) != 1;
        Has Status(Event Player, Asleep) == False;
    }
    actions {
        Wait(4.95, Abort When False);
        Skip If(Compare(Hero Of(Event Player), ==, Hero(Sombra)), 2);
        Damage(Event Player, Null, 0.001);
        Heal(Event Player, Null, 0.001);
        //lbl_0:
        Loop If Condition Is True;
    }
}

disabled rule ("###   Bot Game   ###") {
    event {
        Ongoing - Global;
    }
}

rule ("Create bot") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Number Of Players(All Teams) == 1;
    }
    actions {
        Wait(2, Abort When False);
        Small Message(All Players(All Teams), Custom String("   Player alone: Spawning a bot in 5 seconds"));
        Wait(5, Abort When False);
        Create Dummy Bot(Hero(Symmetra), All Teams, 11, Vector(-9.438, 268.417, 278.042), Vector(0.012599455404001, -0.433106279512539, -0.901254794367457));
        Set Player Variable(All Players(All Teams), Score, 0);
        Set Player Score(All Players(All Teams), 0);
        Create HUD Text(All Players(All Teams), First Of(Global.BotDifHud), Null, Null, Left, 2, Value In Array(Global.BotDifHud, 1), Null, Null, Visible To and String, Default Visibility);
        Set Global Variable At Index(BotDifHud, 2, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Custom String("Bot difficulty {0}/5", Add((Players In Slot(11, All Teams)).BotDifficulty, 1)), Null, Left, 3, Null, Color(White), Null, Visible To and String, Default Visibility);
        Set Global Variable At Index(BotDifHud, 3, Last Text ID);
    }
}

rule ("Bot herolist and difficulty selector") {
    event {
        Subroutine;
        BotHeroList;
    }
    actions {
        If(Array Contains(Global.HeroList, Hero(Soldier: 76)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Soldier: 76));
        End;
        If(Array Contains(Global.HeroList, Hero(Ashe)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Ashe));
        End;
        If(Array Contains(Global.HeroList, Hero(Baptiste)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Baptiste));
        End;
        If(Array Contains(Global.HeroList, Hero(Zenyatta)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Zenyatta));
        End;
        If(Array Contains(Global.HeroList, Hero(Cassidy)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Cassidy));
        End;
        If(Array Contains(Global.HeroList, Hero(Illari)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Illari));
        End;
        If(Array Contains(Global.HeroList, Hero(Ana)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Ana));
        End;
        If(Array Contains(Global.HeroList, Hero(Sojourn)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Sojourn));
        End;
        If(Array Contains(Global.HeroList, Hero(Tracer)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Tracer));
        End;
        If(Array Contains(Global.HeroList, Hero(Echo)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Echo));
        End;
        If(Array Contains(Global.HeroList, Hero(Genji)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Genji));
        End;
        If(Array Contains(Global.HeroList, Hero(Kiriko)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Kiriko));
        End;
        If(Array Contains(Global.HeroList, Hero(Hanzo)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Hanzo));
        End;
        If(Array Contains(Global.HeroList, Hero(Widowmaker)));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Widowmaker));
        End;
        Modify Player Variable(Event Player, HeroList, Remove From Array By Index, 0);
        If(Compare(Count Of((Event Player).HeroList), ==, 0));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Ashe));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Soldier: 76));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Baptiste));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Zenyatta));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Cassidy));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Illari));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Ana));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Sojourn));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Tracer));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Echo));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Genji));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Kiriko));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Hanzo));
            Modify Player Variable(Event Player, HeroList, Append To Array, Hero(Widowmaker));
        Else If(Compare(Count Of((Event Player).HeroList), ==, 1));
            Set Player Variable(Event Player, OneHeroPlayerVariable, True);
            Modify Player Variable(Event Player, HeroList, Append To Array, First Of((Event Player).HeroList));
        End;
        Set Player Variable(Event Player, HeroList, Randomized Array((Event Player).HeroList));
        Start Forcing Player To Be Hero(Event Player, Value In Array((Event Player).HeroList, (Event Player).HeroNumber));
        If(Compare(Global.BotDifSelect, ==, 1));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Gold"));
            Set Global Variable At Index(BotDifHud, 1, Color(Yellow));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 7);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 1);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.5);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 1);
            Set Player Variable(Event Player, BotDifficulty, 0);
        Else If(Compare(Global.BotDifSelect, ==, 2));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Platinum"));
            Set Global Variable At Index(BotDifHud, 1, Color(Gray));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 6);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 0.85);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.35);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 0.9);
            Set Player Variable(Event Player, BotDifficulty, 1);
        Else If(Compare(Global.BotDifSelect, ==, 5));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Champion"));
            Set Global Variable At Index(BotDifHud, 1, Color(Rose));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 2);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 0.5);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.2);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 0.5);
            Set Player Variable(Event Player, BotDifficulty, 4);
        Else If(Compare(Global.BotDifSelect, ==, 4));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Master"));
            Set Global Variable At Index(BotDifHud, 1, Color(Lime Green));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 3);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 0.6);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.2);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 0.6);
            Set Player Variable(Event Player, BotDifficulty, 3);
        Else;
            Set Global Variable At Index(BotDifHud, 0, Custom String("Diamond"));
            Set Global Variable At Index(BotDifHud, 1, Color(Sky Blue));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 4);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 0.7);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.2);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 0.8);
            Set Player Variable(Event Player, BotDifficulty, 2);
        End;
    }
}

rule ("Remove bot") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Number Of Players(All Teams) >= 3;
        Is Dummy Bot(Players In Slot(11, All Teams)) == True;
    }
    actions {
        Small Message(All Players(All Teams), Custom String("   Player joined: reseting score and removing the bot"));
        Wait(1, Abort When False);
        Destroy All Dummy Bots;
        Set Player Variable(All Players(All Teams), Score, 0);
        Set Player Score(All Players(All Teams), 0);
        Destroy HUD Text(Value In Array(Global.BotDifHud, 2));
        Destroy HUD Text(Value In Array(Global.BotDifHud, 3));
    }
}

rule ("Bot Dynamic Difficulty") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Global.Arena1Match == True;
        Global.BotDifSelect == 0;
    }
    actions {
        If(Compare(Subtract(Score Of(Event Player), 12), >=, Score Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Gold"));
            Set Global Variable At Index(BotDifHud, 1, Color(Yellow));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 7);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 1);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.5);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 1);
            Set Player Variable(Event Player, BotDifficulty, 0);
        Else If(Compare(Subtract(Score Of(Event Player), 6), >=, Score Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Platinum"));
            Set Global Variable At Index(BotDifHud, 1, Color(Gray));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 6);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 0.85);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.35);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 0.9);
            Set Player Variable(Event Player, BotDifficulty, 1);
        Else If(Compare(Score Of(Event Player), ==, Score Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Diamond"));
            Set Global Variable At Index(BotDifHud, 1, Color(Sky Blue));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 4);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 0.7);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.2);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 0.8);
            Set Player Variable(Event Player, BotDifficulty, 2);
        Else If(Compare(Subtract(Score Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), 12), >=, Score Of(Event Player)));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Champion"));
            Set Global Variable At Index(BotDifHud, 1, Color(Rose));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 2);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 0.5);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.2);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 0.5);
            Set Player Variable(Event Player, BotDifficulty, 4);
        Else If(Compare(Subtract(Score Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), 6), >=, Score Of(Event Player)));
            Set Global Variable At Index(BotDifHud, 0, Custom String("Master"));
            Set Global Variable At Index(BotDifHud, 1, Color(Lime Green));
            Set Player Variable At Index(Event Player, BotCassDif, 0, 3);
            Set Player Variable At Index(Event Player, BotCassDif, 1, 0.6);
            Set Player Variable At Index(Event Player, BotStrafe, 0, 0.2);
            Set Player Variable At Index(Event Player, BotStrafe, 1, 0.6);
            Set Player Variable(Event Player, BotDifficulty, 3);
    }
}

rule ("Bot Help Positions") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
    }
    actions {
        Set Player Variable At Index(Event Player, BotStrafe, 0, 0.2);
        Set Player Variable At Index(Event Player, BotStrafe, 1, 0.8);
        Set Player Variable At Index(Event Player, BotHelpPositions, 0, Vector(-0.068, 267.788, 286.871));
        Set Player Variable At Index(Event Player, BotHelpPositions, 1, Vector(0.112, 267.788, 273.207));
        Set Player Variable At Index(Event Player, BotHelpPositions, 2, Vector(-14.184, 267.455, 274.127));
        Set Player Variable At Index(Event Player, BotHelpPositions, 3, Vector(14.313, 267.455, 274.327));
        Set Player Variable At Index(Event Player, BotHelpPositions, 4, Vector(-5.021, 267.606, 292.391));
        Set Player Variable At Index(Event Player, BotHelpPositions, 5, Vector(4.822, 267.622, 291.85));
        Set Player Variable At Index(Event Player, BotHelpPositions, 6, Vector(6.967, 267.88, 280.567));
        Set Player Variable At Index(Event Player, BotHelpPositions, 7, Vector(-7.25, 267.788, 279.939));
        Set Player Variable At Index(Event Player, BotHelpPositions, 8, Vector(0.165, 279.697, 291.86));
        Set Player Variable At Index(Event Player, BotHelpPositions, 9, Vector(17.4, 267.455, 284.455));
        Set Player Variable At Index(Event Player, BotHelpPositions, 10, Vector(-17.684, 267.455, 284.561));
        "createInWorldText(getAllPlayers(), \"H 10 (5)\", eventPlayer.BotHelpPositions[10], 1, Clip.SURFACES, WorldTextReeval.VISIBILITY_POSITION_AND_STRING)"
        Set Player Variable At Index(Event Player, BotHelpPositions, 11, Vector(0.094, 273.65, 263.418));
    }
}

rule ("Bot Move Positions") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
    }
    actions {
        Set Player Variable At Index(Event Player, BotMovePositions, 0, Vector(-8.165, 268.367, 284.724));
        Set Player Variable At Index(Event Player, BotMovePositions, 1, Vector(-4.747, 268.367, 271.626));
        Set Player Variable At Index(Event Player, BotMovePositions, 2, Vector(3.481, 268.367, 272.082));
        Set Player Variable At Index(Event Player, BotMovePositions, 3, Vector(7.678, 268.367, 284.767));
        "stairs"
        Set Player Variable At Index(Event Player, BotMovePositions, 4, Vector(-0.365, 270.432, 291.779));
        "createInWorldText(getAllPlayers(), \"M 4\", eventPlayer.BotMovePositions[4], 1, Clip.SURFACES, WorldTextReeval.VISIBILITY_POSITION_AND_STRING)"
        Set Player Variable At Index(Event Player, BotMovePositions, 5, Vector(-11.137, 268.367, 284.457));
        "createInWorldText(getAllPlayers(), \"M 5\", eventPlayer.BotMovePositions[5], 1, Clip.SURFACES, WorldTextReeval.VISIBILITY_POSITION_AND_STRING)"
        Set Player Variable At Index(Event Player, BotMovePositions, 6, Vector(-7.651, 268.367, 270.763));
        "createInWorldText(getAllPlayers(), \"M 6\", eventPlayer.BotMovePositions[6], 1, Clip.SURFACES, WorldTextReeval.VISIBILITY_POSITION_AND_STRING)"
        Set Player Variable At Index(Event Player, BotMovePositions, 7, Vector(8.637, 268.367, 271.038));
        "createInWorldText(getAllPlayers(), \"M 7\", eventPlayer.BotMovePositions[7], 1, Clip.SURFACES, WorldTextReeval.VISIBILITY_POSITION_AND_STRING)"
        Set Player Variable At Index(Event Player, BotMovePositions, 8, Vector(11.449, 268.367, 283.233));
    }
}

rule ("Bot Target Number") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Value In Array(Global.Arena1Q, 1) == Event Player;
    }
    actions {
        Set Player Variable(Event Player, TargetNumber, 2);
    }
}

rule ("Bot Target Number") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Value In Array(Global.Arena1Q, 2) == Event Player;
    }
    actions {
        Set Player Variable(Event Player, TargetNumber, 1);
    }
}

rule ("Bot Facing") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
    }
    actions {
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
    }
}

rule ("Bot Melee") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 3;
        (Event Player).BotShoot == True;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) <= 40;
    }
    actions {
        Wait(Subtract(Absolute Value(Subtract((Event Player).BotDifficulty, 6)), 10), Abort When False);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 720, To World, Direction and Turn Rate);
        Set Damage Dealt(Event Player, 100);
        Press Button(Event Player, Button(Melee));
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("Bot Movement") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot player Hiding") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Global.Arena1Match == True;
        Is In Line of Sight(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Barriers Do Not Block LOS) == False;
    }
    actions {
        If(Compare((Event Player).BotSoldRun, ==, 1));
            Wait Until(Compare(Normalized Health(Event Player), ==, 1), 2);
            Set Player Variable(Event Player, BotSoldRun, 0);
        Else;
            Set Player Variable(Event Player, BotShoot, False);
            Wait(1, Abort When False);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot player not Hiding") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is In Line of Sight(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Barriers Do Not Block LOS) == True;
    }
    actions {
        Set Player Variable(Event Player, PlayerHiding, False);
        Set Player Variable(Event Player, BotPathing, True);
        Set Player Variable(Event Player, BotShoot, True);
        Wait(1, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Strafing") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Hero Of(Event Player) != Hero(Illari);
        Hero Of(Event Player) != Hero(Echo);
        Hero Of(Event Player) != Hero(Genji);
        (Event Player).BotPathing == True;
        Is On Ground(Event Player) == True;
    }
    actions {
        If(Compare((Event Player).BotLeft, ==, False));
            Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotLeft, True);
            Set Player Variable(Event Player, BotRight, False);
            Wait(Random Real(First Of((Event Player).BotStrafe), Value In Array((Event Player).BotStrafe, 1)), Abort When False);
        Else;
            Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotRight, True);
            Set Player Variable(Event Player, BotLeft, False);
            Wait(Random Real(First Of((Event Player).BotStrafe), Value In Array((Event Player).BotStrafe, 1)), Abort When False);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Strafing Genji Illari Echo") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Or(Or(Compare(Hero Of(Event Player), ==, Hero(Echo)), Compare(Hero Of(Event Player), ==, Hero(Genji))), Compare(Hero Of(Event Player), ==, Hero(Illari))) == True;
        (Event Player).BotPathing == True;
    }
    actions {
        If(Compare((Event Player).BotLeft, ==, False));
            Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotLeft, True);
            Set Player Variable(Event Player, BotRight, False);
            Wait(Random Real(0.2, 0.8), Abort When False);
        Else;
            Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotRight, True);
            Set Player Variable(Event Player, BotLeft, False);
            Wait(Random Real(0.2, 0.8), Abort When False);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Pathing True - Push low hp") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Hero Of(Event Player) != Hero(Hanzo);
        Hero Of(Event Player) != Hero(Widowmaker);
        Hero Of(Event Player) != Hero(Ashe);
        Hero Of(Event Player) != Hero(Ana);
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        (Event Player).BotStayTimer == 0;
        Is Using Ultimate(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == False;
        Is Reloading(Event Player) == False;
        (Event Player).BotPathing == True;
        Health(Event Player) >= Add(75, Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
    }
    actions {
        Wait(0.1, Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 2));
        If(Compare((Event Player).Randomizer, >=, 1));
            If(Compare(Hero Of(Event Player), ==, Hero(Soldier: 76)));
                Start Forcing Throttle(Event Player, Random Real(0, 1), 1, 0, 0, 0, 1);
                Wait Until(Or(Is Dead(Event Player), Is Dead(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 10);
                Stop Forcing Throttle(Event Player);
            Else;
                Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
                "__end__()\nsmallMessage(getAllPlayers(), \"push hp\")"
                If(Compare(Hero Of(Event Player), ==, Hero(Illari)));
                    Wait(0.25, Abort When False);
                    Start Holding Button(Event Player, Button(Ability 1));
                    Wait(0.25, Ignore Condition);
                    Stop Holding Button(Event Player, Button(Ability 1));
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Sojourn)));
                    Press Button(Event Player, Button(Ability 1));
                    Wait(Random Real(0.3, 0.7), Ignore Condition);
                    Press Button(Event Player, Button(Jump));
                End;
                Wait Until(Or(Is Dead(Event Player), Is Dead(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 10);
                Stop Forcing Throttle(Event Player);
            End;
            Wait(5, Ignore Condition);
            Loop If Condition Is True;
    }
}

rule ("Bot Pathing True - Push random") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Hero Of(Event Player) != Hero(Hanzo);
        Hero Of(Event Player) != Hero(Widowmaker);
        Hero Of(Event Player) != Hero(Ashe);
        Hero Of(Event Player) != Hero(Ana);
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        (Event Player).BotStayTimer == 0;
        Is Using Ultimate(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == False;
        Is Reloading(Event Player) == False;
        (Event Player).BotPathing == True;
        Health(Event Player) >= Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber));
    }
    actions {
        Wait(0.1, Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 4));
        "if eventPlayer.getHero() == Hero.SOLDIER:\neventPlayer.Randomizer = random.randint(0, 0)\n__end__()"
        If(Compare((Event Player).Randomizer, ==, 0));
            If(Compare(Hero Of(Event Player), ==, Hero(Soldier: 76)));
                Start Forcing Throttle(Event Player, Random Real(0, 1), 1, 0, 0, 0, 1);
            Else;
                Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
            End;
            Wait Until(Or(Is Dead(Event Player), Is Dead(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 10);
            Stop Forcing Throttle(Event Player);
        End;
        Wait(4, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Pathing False - Stop Push") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        (Event Player).BotPathing == False;
    }
    actions {
        Stop Forcing Throttle(Event Player);
    }
}

rule ("Bot Pathing, No line of sight, Combined all") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotStayTimer == 0;
        Is Using Ultimate(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == False;
        (Event Player).BotShoot == False;
        Is Reloading(Event Player) == False;
    }
    actions {
        If(Compare(Distance Between(Position Of(Event Player), Value In Array((Event Player).BotHelpPositions, 2)), <=, 7));
            If(Compare(Hero Of(Event Player), ==, Hero(Tracer)));
            Else If(Compare(Hero Of(Event Player), ==, Hero(Ana)));
                Stop Holding Button(Event Player, Button(Secondary Fire));
            End;
            "smallMessage(getAllPlayers(), \"H2, no los\")"
            Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
            If(Compare((Event Player).Randomizer, ==, 0));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            End;
            Set Player Variable(Event Player, BotPathing, False);
            Wait(1.5, Ignore Condition);
        Else If(Compare(Distance Between(Position Of(Event Player), Value In Array((Event Player).BotHelpPositions, 3)), <=, 7));
            If(Compare(Hero Of(Event Player), ==, Hero(Tracer)));
            Else If(Compare(Hero Of(Event Player), ==, Hero(Ana)));
                Stop Holding Button(Event Player, Button(Secondary Fire));
            End;
            "smallMessage(getAllPlayers(), \"H3, no los\")"
            Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
            If(Compare((Event Player).Randomizer, ==, 0));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            End;
            Set Player Variable(Event Player, BotPathing, False);
            Wait(1.5, Ignore Condition);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 2)), <=, 9));
            Wait(Random Real(0.3, 1.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 6)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 5)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 3)), <=, 9));
            Wait(Random Real(0.3, 1.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 7)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 8)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 11)), <=, 7));
            Wait(0.1, Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3)), 1, To World, Replace existing throttle, Direction and Magnitude);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), 1, To World, Replace existing throttle, Direction and Magnitude);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), First Of((Event Player).BotHelpPositions)), <=, 5));
            Wait(Random Real(0.3, 1.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 1)), <=, 5));
            Wait(Random Real(0.3, 1.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 6)), <=, 7));
            Wait(Random Real(0.3, 1.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 7)), <=, 7));
            Wait(Random Real(0.3, 1.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 5)), <=, 4));
            Wait(Random Real(0.3, 1.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, False);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 4)), <=, 4));
            Wait(Random Real(0.3, 1.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1)), 1, To World, Replace existing throttle, Direction and Magnitude);
                Set Player Variable(Event Player, BotLeft, True);
            End;
            Set Player Variable(Event Player, BotPathing, False);
        Else If(Compare(Distance Between(Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 8)), <=, 4));
            Wait(0.1, Abort When False);
            If(Compare(Distance Between(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), >=, Distance Between(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3))));
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 2)), 1, To World, Replace existing throttle, Direction and Magnitude);
            Else;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 1)), 1, To World, Replace existing throttle, Direction and Magnitude);
            End;
            Set Player Variable(Event Player, BotPathing, False);
            If(Compare(Hero Of(Event Player), ==, Hero(Tracer)));
                Stop Forcing Throttle(Event Player);
            End;
        End;
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot H 9, out of bounds") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Distance Between(Position Of(Event Player), Value In Array((Event Player).BotHelpPositions, 9)) <= 5;
    }
    actions {
        "smallMessage(getAllPlayers(), \"h9 to m3\")"
        Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Value In Array((Event Player).BotMovePositions, 3)), 1, To World, Replace existing throttle, Direction and Magnitude);
        Set Player Variable(Event Player, BotPathing, False);
        Wait(Random Real(0.75, 1), Ignore Condition);
        Set Player Variable(Event Player, BotPathing, True);
        Loop If Condition Is True;
    }
}

rule ("Bot H 10, out of bounds") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Distance Between(Position Of(Event Player), Value In Array((Event Player).BotHelpPositions, 10)) <= 5;
    }
    actions {
        "smallMessage(getAllPlayers(), \"h10 to m0\")"
        Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), First Of((Event Player).BotMovePositions)), 1, To World, Replace existing throttle, Direction and Magnitude);
        Set Player Variable(Event Player, BotPathing, False);
        Wait(Random Real(0.75, 1), Ignore Condition);
        Set Player Variable(Event Player, BotPathing, True);
        Loop If Condition Is True;
    }
}

rule ("Strafing to a wall left side") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotPathing == True;
        (Event Player).BotLeft == True;
        Distance Between(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(3.5, Direction From Angles(Add(90, Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 0))), Null, Event Player, False)) <= 1;
    }
    actions {
        Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
    }
}

rule ("Strafing to a wall right side") {
    event {
        Ongoing - Each Player;
        All;
        Slot 11;
    }
    conditions {
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotPathing == True;
        (Event Player).BotRight == True;
        Distance Between(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(3.5, Direction From Angles(Add(-90, Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 0))), Null, Event Player, False)) <= 1;
    }
    actions {
        Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
    }
}

disabled rule ("Bot Cassidy") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Cass Primary") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.CASSIDY"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Using Ability 1(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
    }
    actions {
        Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
        Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
        Stop Facing(Event Player);
        If(Compare((Event Player).BotDifficulty, <=, 2));
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPos))), To World);
        Else;
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Random Real(0, 0.4)), Z Component Of((Event Player).ShootPos))), To World);
        End;
        Wait(0.016, Ignore Condition);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Press Button(Event Player, Button(Primary Fire));
        //lbl_0:
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Set Player Variable(Event Player, ShootRando, Random Real(0, First Of((Event Player).BotCassDif)));
        Wait(Subtract(Random Real(0.5, 0.65), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        While(Compare((Event Player).BotShoot, ==, True));
            Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
            Stop Facing(Event Player);
            If(Compare((Event Player).BotDifficulty, <=, 2));
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPos))), To World);
            Else;
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Random Real(0, 0.4)), Z Component Of((Event Player).ShootPos))), To World);
            End;
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Set Player Variable(Event Player, ShootRando, Random Real(0, First Of((Event Player).BotCassDif)));
            Wait(Subtract(Random Real(0.5, Value In Array((Event Player).BotCassDif, 1)), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Cass Secondary") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.CASSIDY"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 6;
        Ammo(Event Player, 0) >= 4;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
    }
    actions {
        "eventPlayer.setDamageDealt(75)"
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
        If(Compare((Event Player).Randomizer, ==, 0));
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Secondary Fire));
            //lbl_0:
        End;
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Cass Reload") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.CASSIDY"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == False;
        Ammo(Event Player, 0) <= 3;
        Is Reloading(Event Player) == False;
    }
    actions {
        Wait(0.2, Abort When False);
        Press Button(Event Player, Button(Reload));
    }
}

rule ("Bot Cass Roll") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.CASSIDY"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Ammo(Event Player, 0) <= 3;
    }
    actions {
        Wait(Random Real(0.1, 0.3), Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 3));
        If(Compare((Event Player).Randomizer, ==, 0));
            Press Button(Event Player, Button(Ability 1));
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Cass Roll low hp") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.CASSIDY"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Health(Event Player) <= 100;
    }
    actions {
        Wait(Random Real(0.3, 0.6), Abort When False);
        Press Button(Event Player, Button(Ability 1));
    }
}

rule ("Bot Cass Roll to reload") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.CASSIDY"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Ammo(Event Player, 0) == 0;
    }
    actions {
        Press Button(Event Player, Button(Ability 1));
    }
}

rule ("Bot Cass Grenade") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.CASSIDY"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        Is Using Ability 1(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 7;
    }
    actions {
        Wait(Random Real(0.1, 0.3), Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
        If(Compare((Event Player).Randomizer, ==, 0));
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1.3), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), To World);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1.3), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 5000, To World, Direction and Turn Rate);
            "eventPlayer.startFacing(directionTowards(eventPlayer.getEyePosition(), vect(Arena1Q[eventPlayer.TargetNumber].getEyePosition().x, Arena1Q[eventPlayer.TargetNumber].getEyePosition().y + distance(eventPlayer.getEyePosition(), Arena1Q[eventPlayer.TargetNumber].getEyePosition()) / 10, Arena1Q[eventPlayer.TargetNumber].getEyePosition().z)), 5000)"
            Wait(0.1, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Ability 2));
            //lbl_0:
            Wait(0.2, Ignore Condition);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        End;
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("Bot Illari") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Illari Primary") {
    event {
        Ongoing - Each Player;
        All;
        Illari;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
    }
    actions {
        Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
        Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
        Stop Facing(Event Player);
        If(Compare((Event Player).BotDifficulty, <=, 2));
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPos))), To World);
        Else;
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Random Real(0, 0.4)), Z Component Of((Event Player).ShootPos))), To World);
        End;
        Wait(0.016, Ignore Condition);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Press Button(Event Player, Button(Primary Fire));
        //lbl_0:
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Set Player Variable(Event Player, ShootRando, Random Real(0, First Of((Event Player).BotCassDif)));
        Wait(Subtract(Random Real(0.85, Add(Value In Array((Event Player).BotCassDif, 1), 0.35)), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        While(Compare((Event Player).BotShoot, ==, True));
            Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
            Stop Facing(Event Player);
            If(Compare((Event Player).BotDifficulty, <=, 2));
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPos))), To World);
            Else;
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Random Real(0, 0.4)), Z Component Of((Event Player).ShootPos))), To World);
            End;
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Set Player Variable(Event Player, ShootRando, Random Real(0, First Of((Event Player).BotCassDif)));
            Wait(Subtract(Random Real(0.85, Add(Value In Array((Event Player).BotCassDif, 1), 0.35)), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Illari Pathing - Stop push") {
    event {
        Ongoing - Each Player;
        All;
        Illari;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        (Event Player).BotPathing == True;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 12;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 4));
        If(Compare((Event Player).Randomizer, !=, 0));
            Stop Forcing Throttle(Event Player);
        End;
        Wait(4, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Illari Reload") {
    event {
        Ongoing - Each Player;
        All;
        Illari;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == False;
        Ammo(Event Player, 0) <= 3;
    }
    actions {
        Wait(0.2, Abort When False);
        Press Button(Event Player, Button(Reload));
    }
}

rule ("Bot Illari Outburst") {
    event {
        Ongoing - Each Player;
        All;
        Illari;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
    }
    actions {
        Wait(Random Real(0.1, 0.3), Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 3));
        If(Compare((Event Player).Randomizer, ==, 0));
            Start Holding Button(Event Player, Button(Ability 1));
            Wait(Random Real(0.1, 0.3), Ignore Condition);
            Stop Holding Button(Event Player, Button(Ability 1));
        End;
        Wait(5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Illari Outburst Close") {
    event {
        Ongoing - Each Player;
        All;
        Illari;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 7.5;
    }
    actions {
        Start Holding Button(Event Player, Button(Ability 1));
        Wait(Random Real(0.1, 0.3), Ignore Condition);
        Stop Holding Button(Event Player, Button(Ability 1));
        Wait(5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Illari Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Illari;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) != Hero(Echo);
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 175;
        Health(Event Player) >= 175;
    }
    actions {
        Wait(Random Real(0.1, 0.3), Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
        If(Compare((Event Player).Randomizer, ==, 0));
            Press Button(Event Player, Button(Ultimate));
            Start Holding Button(Event Player, Button(Jump));
            Wait(2, Ignore Condition);
            Stop Holding Button(Event Player, Button(Jump));
        End;
        Wait(5, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("Bot Baptiste") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Bap Heal") {
    event {
        Ongoing - Each Player;
        All;
        Baptiste;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.BAPTISTE"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Health(Event Player) < 125;
    }
    actions {
        Press Button(Event Player, Button(Ability 1));
    }
}

rule ("Bot Bap Crouch Jump") {
    event {
        Ongoing - Each Player;
        All;
        Baptiste;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == False;
        Is On Ground(Event Player) == True;
    }
    actions {
        Start Holding Button(Event Player, Button(Crouch));
        Wait(Random Real(0.3, 0.7), Ignore Condition);
        Stop Holding Button(Event Player, Button(Crouch));
        Wait(Random Real(0.2, 0.9), Ignore Condition);
        Abort If(Is Using Ultimate(Event Player));
        Press Button(Event Player, Button(Jump));
        Wait(5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Bap Crouch Jump vs Genji Echo") {
    event {
        Ongoing - Each Player;
        All;
        Baptiste;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.BAPTISTE"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Or(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Echo)), Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji))) == True;
        Is On Ground(Event Player) == True;
    }
    actions {
        Start Holding Button(Event Player, Button(Crouch));
        Wait(Random Real(0.3, 0.7), Ignore Condition);
        Stop Holding Button(Event Player, Button(Crouch));
        Wait(Random Real(0, 0.2), Ignore Condition);
        Press Button(Event Player, Button(Jump));
        Wait(3, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Bap Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Baptiste;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Ammo(Event Player, 0) >= 15;
        Ultimate Charge Percent(Event Player) == 100;
        Is On Ground(Event Player) == True;
        Health(Event Player) >= 150;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 150;
    }
    actions {
        Wait(0.1, Abort When False);
        Set Player Variable(Event Player, BotKiriHeal, True);
        Set Player Variable(Event Player, BotShoot, False);
        Stop Facing(Event Player);
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 268.517, Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), To World);
        Wait(0.05, Ignore Condition);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Subtract(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 7)), Vector(0, 2, 0))), To World);
        Wait(0.032, Ignore Condition);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 7);
        Press Button(Event Player, Button(Ultimate));
        Set Player Variable(Event Player, BotStayTimer, 10);
        Stop Forcing Throttle(Event Player);
        Chase Player Variable At Rate(Event Player, BotStayTimer, 0, 1, Destination and Rate);
        Wait(0.1, Ignore Condition);
        Press Button(Event Player, Button(Primary Fire));
        Wait(0.1, Ignore Condition);
        //lbl_0:
        Set Player Variable(Event Player, BotKiriHeal, False);
        If(Compare((Event Player).BotPathing, ==, True));
            Set Player Variable(Event Player, BotShoot, True);
        End;
        Wait Until(Is Dead(Event Player), 10);
        Set Player Variable(Event Player, BotStayTimer, 0);
    }
}

rule ("Bot Bap Primary") {
    event {
        Ongoing - Each Player;
        All;
        Baptiste;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
    }
    actions {
        "eventPlayer.ShootRando = random.randint(0, 5)"
        Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
        Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
        Stop Facing(Event Player);
        Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.6), Z Component Of((Event Player).ShootPos))), To World);
        //lbl_0:
        Wait(0.016, Ignore Condition);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Press Button(Event Player, Button(Primary Fire));
        //lbl_1:
        Wait(0.1, Ignore Condition);
        Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        //lbl_2:
        Set Player Variable(Event Player, ShootRando, Random Real(0, First Of((Event Player).BotCassDif)));
        Wait(Subtract(Random Real(0.4, Subtract(Value In Array((Event Player).BotCassDif, 1), 0.1)), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        "wait(random.randint(0.6, 0.85) - eventPlayer.ShootRando / 10)"
        While(Compare((Event Player).BotShoot, ==, True));
            "eventPlayer.ShootRando = random.randint(0, 8)"
            Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
            Stop Facing(Event Player);
            Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.6), Z Component Of((Event Player).ShootPos))), To World);
            //lbl_3:
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_4:
            Wait(0.1, Ignore Condition);
            Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            //lbl_5:
            "wait(random.randint(0.6, 0.95) - eventPlayer.ShootRando / 10)"
            Set Player Variable(Event Player, ShootRando, Random Real(0, First Of((Event Player).BotCassDif)));
            Wait(Subtract(Random Real(0.4, Subtract(Value In Array((Event Player).BotCassDif, 1), 0.1)), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Bap Reload") {
    event {
        Ongoing - Each Player;
        All;
        Baptiste;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.BAPTISTE"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == False;
        Ammo(Event Player, 0) <= 15;
    }
    actions {
        Wait(0.2, Abort When False);
        Press Button(Event Player, Button(Reload));
    }
}

disabled rule ("Bot Zen") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Zen Discord") {
    event {
        Ongoing - Each Player;
        All;
        Zenyatta;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Firing Secondary(Event Player) == False;
    }
    actions {
        Press Button(Event Player, Button(Ability 2));
        Wait(1, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Zen Aim") {
    event {
        Subroutine;
        ZenAim;
    }
    actions {
        Stop Facing(Event Player);
        Set Player Variable(Event Player, ZenAim, Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
        If(Compare(Hero Of(Event Player), ==, Hero(Echo)));
            Modify Player Variable(Event Player, ZenAim, Divide, 75);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Hanzo)));
            Modify Player Variable(Event Player, ZenAim, Divide, 110);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Genji)));
            Modify Player Variable(Event Player, ZenAim, Divide, 60);
        Else;
            Modify Player Variable(Event Player, ZenAim, Divide, 90);
        End;
        Modify Player Variable(Event Player, ZenAim, Multiply, Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
        Modify Player Variable(Event Player, ZenAim, Add, Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
        If(Compare(Hero Of(Event Player), ==, Hero(Kiriko)));
            Set Player Variable(Event Player, ZenAim, Vector(X Component Of((Event Player).ZenAim), Add(Y Component Of((Event Player).ZenAim), 0.2), Z Component Of((Event Player).ZenAim)));
        Else If(Compare(Hero Of(Event Player), ==, Hero(Hanzo)));
            Set Player Variable(Event Player, ZenAim, Vector(X Component Of((Event Player).ZenAim), Add(Y Component Of((Event Player).ZenAim), 0.2), Z Component Of((Event Player).ZenAim)));
        Else;
            If(Compare((Event Player).BotDifficulty, <=, 2));
                Set Player Variable(Event Player, ZenAim, Vector(X Component Of((Event Player).ZenAim), Subtract(Y Component Of((Event Player).ZenAim), 0.5), Z Component Of((Event Player).ZenAim)));
            Else;
                Set Player Variable(Event Player, ZenAim, Vector(X Component Of((Event Player).ZenAim), Subtract(Y Component Of((Event Player).ZenAim), Random Real(0, 0.2)), Z Component Of((Event Player).ZenAim)));
            End;
        End;
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).ZenAim), To World);
    }
}

rule ("Bot Zen Primary") {
    event {
        Ongoing - Each Player;
        All;
        Zenyatta;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Firing Secondary(Event Player) == False;
        Is Reloading(Event Player) == False;
    }
    actions {
        "wait(0.2, Wait.ABORT_WHEN_FALSE)"
        Wait(Subtract(Value In Array((Event Player).BotCassDif, 1), 0.5), Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, Add(First Of((Event Player).BotCassDif), 1)));
        If(Compare((Event Player).Randomizer, <=, 2));
            Call Subroutine(ZenAim);
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_0:
            Wait(0.1, Ignore Condition);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Else;
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Wait(0.1, Ignore Condition);
        End;
        "wait(random.uniform(0.1, eventPlayer.BotCassDif[1] - 0.4))"
        Wait(Random Real(0.3, Subtract(Value In Array((Event Player).BotCassDif, 1), 0.2)), Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Zen Right Click") {
    event {
        Ongoing - Each Player;
        All;
        Zenyatta;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        Is Firing Secondary(Event Player) == False;
        (Event Player).BotShoot == False;
        Ammo(Event Player, 0) >= 10;
    }
    actions {
        Wait(0.3, Abort When False);
        Start Holding Button(Event Player, Button(Secondary Fire));
        Wait(3, Ignore Condition);
        If(Is Firing Secondary(Event Player));
            Press Button(Event Player, Button(Melee));
        End;
        Wait(1.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Zen Release Right click") {
    event {
        Ongoing - Each Player;
        All;
        Zenyatta;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        Wait(0.2, Abort When False);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 7);
        Call Subroutine(ZenAim);
        Wait(0.05, Ignore Condition);
        Stop Holding Button(Event Player, Button(Secondary Fire));
        For Player Variable(Event Player, BotControl, 0, 6, 1);
            Wait(0.05, Ignore Condition);
            Call Subroutine(ZenAim);
        End;
        //lbl_0:
    }
}

rule ("Bot Zen Melee") {
    event {
        Ongoing - Each Player;
        All;
        Zenyatta;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ZENYATTA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 3;
        (Event Player).BotShoot == True;
        Is Firing Secondary(Event Player) == False;
    }
    actions {
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Wait(0.5, Abort When False);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Press Button(Event Player, Button(Melee));
        //lbl_0:
    }
}

rule ("Bot Zen Reload") {
    event {
        Ongoing - Each Player;
        All;
        Zenyatta;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ZENYATTA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        Ammo(Event Player, 0) < 10;
        Is Firing Secondary(Event Player) == False;
        (Event Player).BotShoot == False;
    }
    actions {
        Wait(0.2, Abort When False);
        Press Button(Event Player, Button(Reload));
    }
}

rule ("Bot Zen Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Zenyatta;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ZENYATTA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Health(Event Player) <= 50;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 50;
    }
    actions {
        Press Button(Event Player, Button(Ultimate));
        Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
    }
}

disabled rule ("Bot Soldier") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Soldier Primary") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSoldRun == 0;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
    }
    actions {
        Wait(0.2, Abort When False);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Start Holding Button(Event Player, Button(Primary Fire));
        //lbl_0:
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).ShootPos), Divide(500, Divide(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 5)), To World, Direction and Turn Rate);
    }
}

rule ("Bot Soldier Primary Tracking") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
    }
    actions {
        Set Player Variable(Event Player, ShootRando, Random Real(1, Absolute Value(Subtract((Event Player).BotDifficulty, 6))));
        Set Player Variable(Event Player, ShootPosHelp, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
        Set Player Variable(Event Player, ShootPos, Vector(X Component Of((Event Player).ShootPosHelp), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPosHelp)));
        Wait(Divide((Event Player).ShootRando, 10), Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Soldier Stop Primary") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == False;
    }
    actions {
        Stop Holding Button(Event Player, Button(Primary Fire));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Wait(0.25, Abort When False);
        Stop Holding Button(Event Player, Button(Primary Fire));
        Wait(0.5, Abort When False);
        Stop Holding Button(Event Player, Button(Primary Fire));
        Loop If Condition Is True;
    }
}

rule ("Bot Soldier Stop Primary vs Reflect") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == Hero(Genji);
        Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
    }
    actions {
        Wait(Random Real(0, 0.3), Abort When False);
        Press Button(Event Player, Button(Reload));
        Stop Holding Button(Event Player, Button(Primary Fire));
        Wait Until(Not(Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 2);
        If(Compare(Hero Of(Event Player), ==, Hero(Soldier: 76)));
            If(Compare((Event Player).BotShoot, ==, True));
                Start Holding Button(Event Player, Button(Primary Fire));
    }
}

rule ("Bot Soldier Reload") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == False;
        Ammo(Event Player, 0) <= 13;
    }
    actions {
        Wait(0.2, Abort When False);
        Press Button(Event Player, Button(Reload));
    }
}

rule ("Bot Soldier Heal Field") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Health(Event Player) <= 150;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 100;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
    }
    actions {
        Set Player Variable(Event Player, BotStayTimer, 5);
        Press Button(Event Player, Button(Ability 2));
        Stop Forcing Throttle(Event Player);
        Chase Player Variable At Rate(Event Player, BotStayTimer, 0, 1, Destination and Rate);
        Wait Until(Compare(Normalized Health(Event Player), ==, 1), 5);
        Set Player Variable(Event Player, BotStayTimer, 0);
    }
}

rule ("Bot Soldier Heal Field run") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Using Ultimate(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Using Ability 2(Event Player) == True;
        (Event Player).BotStayTimer >= 4;
        Health(Event Player) <= 75;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 100;
    }
    actions {
        Set Player Variable(Event Player, BotSoldRun, 1);
        Press Button(Event Player, Button(Reload));
        Stop Holding Button(Event Player, Button(Primary Fire));
        Start Holding Button(Event Player, Button(Ability 1));
        Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
        "while eventPlayer.BotStayTimer >= 3:"
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(Eye Position(Event Player), Left)), Random Real(500, 500), To Player, Direction and Turn Rate);
        Wait(Random Real(0.5, 1), Ignore Condition);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(Eye Position(Event Player), Right)), Random Real(500, 500), To Player, Direction and Turn Rate);
        Wait(Random Real(0.5, 1), Ignore Condition);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(Eye Position(Event Player), Left)), Random Real(500, 500), To Player, Direction and Turn Rate);
        Wait(Random Real(0.5, 1), Ignore Condition);
        "__end__()\nwaitUntil(eventPlayer.BotStayTimer == 0 or eventPlayer.getNormalizedHealth() == 1, 5)"
        Set Player Variable(Event Player, BotSoldRun, 0);
        Stop Holding Button(Event Player, Button(Ability 1));
        Stop Forcing Throttle(Event Player);
        If(Compare((Event Player).BotShoot, ==, True));
            If(Compare(Hero Of(Event Player), ==, Hero(Soldier: 76)));
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).ShootPos), Divide(500, Divide(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 5)), To World, Direction and Turn Rate);
                Start Holding Button(Event Player, Button(Primary Fire));
    }
}

rule ("Bot Soldier Rocket") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSoldRun == 0;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
        Is On Ground(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
        If(Compare((Event Player).Randomizer, ==, 0));
            Wait(Random Real(0, 0.3), Abort When False);
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1.3), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), To World);
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Secondary Fire));
            //lbl_0:
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Soldier Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSoldRun == 0;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Health(Event Player) >= 150;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 150;
    }
    actions {
        Wait(0.4, Abort When False);
        Press Button(Event Player, Button(Ultimate));
        Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
        Wait(1, Ignore Condition);
        While(Is Using Ultimate(Event Player));
            Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
            Wait(1, Ignore Condition);
        End;
    }
}

disabled rule ("Bot Ana") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Ana Pre Zoom") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSleepDartHit == 0;
        (Event Player).BotShoot == False;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) >= 9;
    }
    actions {
        If(Not(Is Firing Secondary(Event Player)));
            Start Holding Button(Event Player, Button(Secondary Fire));
        End;
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Ana Primary") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSleepDartHit == 0;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Using Ability 1(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
    }
    actions {
        If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), >=, 7.5));
            If(Not(Is Firing Secondary(Event Player)));
                Start Holding Button(Event Player, Button(Secondary Fire));
                Wait(0.15, Abort When False);
            End;
            Wait(0.1, Abort When False);
            Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
            Stop Facing(Event Player);
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPos))), To World);
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_0:
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Wait(0.16, Ignore Condition);
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Set Player Variable(Event Player, ShootRando, Random Real(0, Subtract(First Of((Event Player).BotCassDif), 1)));
            Wait(Subtract(Random Real(0.8, Add(Value In Array((Event Player).BotCassDif, 1), 0.3)), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        Else;
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Wait(0.2, Abort When False);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Wait(Random Real(0.6, Add(Value In Array((Event Player).BotCassDif, 1), 0.1)), Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Ana Reload") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == False;
        Ammo(Event Player, 0) <= 6;
        Is Using Ability 1(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
    }
    actions {
        Wait(0.5, Abort When False);
        Press Button(Event Player, Button(Reload));
    }
}

rule ("Bot Ana Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ANA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSleepDartHit == 0;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Health(Event Player) <= 100;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 100;
    }
    actions {
        Press Button(Event Player, Button(Ultimate));
        Stop Holding Button(Event Player, Button(Secondary Fire));
        Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Ana Offensive Nade") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ANA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSleepDartHit == 0;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Is Using Ability 1(Event Player) == False;
        Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 271;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 2));
        If(Compare((Event Player).Randomizer, ==, 0));
            Wait(Random Real(0.6, 0.6), Abort When False);
            If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 11)), <=, 7));
            Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 8)), <=, 4));
            Else;
                Set Player Variable(Event Player, ZenAim, Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
                Modify Player Variable(Event Player, ZenAim, Divide, 30);
                Modify Player Variable(Event Player, ZenAim, Multiply, Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
                Modify Player Variable(Event Player, ZenAim, Add, Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ZenAim), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Multiply(Subtract(17, Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)))), 0.12)), Z Component Of((Event Player).ZenAim))), To World);
                Wait(0.016, Ignore Condition);
                Press Button(Event Player, Button(Ability 2));
                Stop Holding Button(Event Player, Button(Secondary Fire));
            End;
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Ana Self Nade") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ANA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSleepDartHit == 0;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Is Using Ability 1(Event Player) == False;
        Health(Event Player) <= 150;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 130;
    }
    actions {
        Wait(0.2, Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 3));
        If(Compare((Event Player).Randomizer, ==, 0));
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player)), To World);
            Wait(0.016, Ignore Condition);
            Press Button(Event Player, Button(Ability 2));
            Stop Holding Button(Event Player, Button(Secondary Fire));
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Ana Self Nade low") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ANA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSleepDartHit == 0;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Is Using Ability 1(Event Player) == False;
        Health(Event Player) <= 100;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 60;
    }
    actions {
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player)), To World);
        Wait(0.016, Ignore Condition);
        Press Button(Event Player, Button(Ability 2));
        Stop Holding Button(Event Player, Button(Secondary Fire));
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Ana Sleep") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ANA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Is Using Ability 2(Event Player) == False;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
        If(Compare((Event Player).Randomizer, ==, 0));
            Wait(Random Real(0.4, 0.5), Abort When False);
            If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 11)), <=, 7));
            Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 8)), <=, 4));
            Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Vector(-0.804, 270.455, 297.628)), <=, 6));
            Else;
                Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
                Press Button(Event Player, Button(Ability 1));
                //lbl_0:
                Stop Holding Button(Event Player, Button(Secondary Fire));
                Wait(0.25, Ignore Condition);
                Stop Facing(Event Player);
                Set Player Variable(Event Player, ZenAim, Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
                Modify Player Variable(Event Player, ZenAim, Divide, 60);
                Modify Player Variable(Event Player, ZenAim, Multiply, Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
                Modify Player Variable(Event Player, ZenAim, Add, Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
                Set Player Variable(Event Player, ZenAim, Vector(X Component Of((Event Player).ZenAim), Subtract(Y Component Of((Event Player).ZenAim), 0.5), Z Component Of((Event Player).ZenAim)));
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).ZenAim), To World);
                Wait(0.1, Ignore Condition);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 150, To World, Direction and Turn Rate);
            End;
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Ana Sleep Hit") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Has Status(Value In Array(Global.Arena1Q, (Event Player).TargetNumber), Asleep) == True;
        (Event Player).BotSleepDartHit == 0;
    }
    actions {
        Wait(0.05, Abort When False);
        Press Button(Event Player, Button(Reload));
        If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 11)), <=, 7));
            Set Player Variable(Event Player, BotSleepDartHit, 0);
        Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Value In Array((Event Player).BotHelpPositions, 8)), <=, 4));
            Set Player Variable(Event Player, BotSleepDartHit, 0);
        Else If(Compare(Distance Between(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Vector(-0.804, 270.455, 297.628)), <=, 6));
            Set Player Variable(Event Player, BotSleepDartHit, 0);
        Else;
            Set Player Variable(Event Player, BotSleepDartHit, 5);
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Chase Player Variable At Rate(Event Player, BotSleepDartHit, 0, 1, Destination and Rate);
            Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
            Wait Until(Compare(Distance Between(Position Of(Event Player), Position Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), <=, 1.5), 5);
            Abort If(Compare((Event Player).BotSleepDartHit, ==, 0));
            Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
            Wait Until(Not(Is Reloading(Event Player)), 1.5);
            If(Compare(Ability Cooldown(Event Player, Button(Ability 2)), <=, (Event Player).BotSleepDartHit));
                Wait Until(Compare(Ability Cooldown(Event Player, Button(Ability 2)), ==, 0), 5);
                Press Button(Event Player, Button(Primary Fire));
                Skip If(Compare(Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), <=, 70), 3);
                Wait(0.05, Ignore Condition);
                Press Button(Event Player, Button(Ability 2));
                Wait(0.05, Ignore Condition);
                //lbl_0:
                Start Forcing Throttle(Event Player, Random Real(0.3, 0.5), Random Real(0.5, 1), 0, 0, 0, 1);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
                Set Player Variable(Event Player, BotSleepDartHit, 0);
            Else;
                Wait Until(Compare((Event Player).BotSleepDartHit, <=, 1), 5);
                Press Button(Event Player, Button(Primary Fire));
                Start Forcing Throttle(Event Player, Random Real(0.3, 0.5), Random Real(0.5, 1), 0, 0, 0, 1);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
                Set Player Variable(Event Player, BotSleepDartHit, 0);
            End;
        End;
        Wait(7, Ignore Condition);
    }
}

rule ("Bot Ana Sleep Broke") {
    event {
        Ongoing - Each Player;
        All;
        Ana;
    }
    conditions {
        "@Condition eventPlayer.getHero() == Hero.ANA"
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSleepDartHit != 0;
        Has Status(Value In Array(Global.Arena1Q, (Event Player).TargetNumber), Asleep) == False;
    }
    actions {
        Set Player Variable(Event Player, BotSleepDartHit, 0);
        Stop Forcing Throttle(Event Player);
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("Bot Sojourn") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Sojourn Primary") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotSoldRun == 0;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
    }
    actions {
        Wait(Subtract(Value In Array((Event Player).BotCassDif, 1), 0.5), Abort When False);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Start Holding Button(Event Player, Button(Primary Fire));
        //lbl_0:
        Set Player Variable(Event Player, ZenAim, Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).ZenAim), Divide(500, Divide(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 5)), To World, Direction and Turn Rate);
        While(Compare((Event Player).BotShoot, ==, True));
            Set Player Variable(Event Player, ZenAim, Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Modify Player Variable(Event Player, ZenAim, Divide, 160);
            Modify Player Variable(Event Player, ZenAim, Multiply, Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
            Modify Player Variable(Event Player, ZenAim, Add, Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)));
            Set Player Variable(Event Player, ZenAim, Vector(X Component Of((Event Player).ZenAim), Subtract(Y Component Of((Event Player).ZenAim), 0.5), Z Component Of((Event Player).ZenAim)));
            Wait(Subtract(Value In Array((Event Player).BotCassDif, 1), 0.4), Abort When False);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Sojourn Stop Primary") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == False;
    }
    actions {
        Stop Holding Button(Event Player, Button(Primary Fire));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Wait(0.25, Abort When False);
        Stop Holding Button(Event Player, Button(Primary Fire));
        Wait(0.25, Abort When False);
        Stop Holding Button(Event Player, Button(Primary Fire));
    }
}

rule ("Bot Sojourn Stop Primary vs Reflect") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == Hero(Genji);
        Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
    }
    actions {
        Wait(Random Real(0, 0.3), Abort When False);
        Press Button(Event Player, Button(Reload));
        Stop Holding Button(Event Player, Button(Primary Fire));
        Wait Until(Not(Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 2);
        If(Compare(Hero Of(Event Player), ==, Hero(Sojourn)));
            If(Compare((Event Player).BotShoot, ==, True));
                Start Holding Button(Event Player, Button(Primary Fire));
    }
}

rule ("Bot Sojourn Secondary resource count") {
    event {
        Player Dealt Damage;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Event Ability == Button(Primary Fire);
    }
    actions {
        Modify Player Variable(Event Player, BotSojRail, Add, 5);
        If(Compare((Event Player).BotSojRail, >=, 100));
            Set Player Variable(Event Player, BotSojRail, 100);
    }
}

rule ("Bot Sojourn Secondary") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Using Ultimate(Event Player) == False;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Add((Event Player).BotSojRail, 30) >= Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber));
        (Event Player).BotSojRail >= 5;
    }
    actions {
        Wait(Random Real(0.2, 0.4), Abort When False);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 2);
        Press Button(Event Player, Button(Secondary Fire));
        Set Player Variable(Event Player, BotSojRail, 0);
        //lbl_0:
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Sojourn Reload") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == False;
        Ammo(Event Player, 0) <= 18;
    }
    actions {
        Wait(0.2, Abort When False);
        Press Button(Event Player, Button(Reload));
    }
}

rule ("Bot Sojourn Disruptor") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        Is Firing Secondary(Event Player) == False;
        Is Using Ultimate(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Is On Ground(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
        If(Compare((Event Player).Randomizer, ==, 0));
            Wait(Random Real(0, 0.3), Abort When False);
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1.3), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), To World);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1.3), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 5000, To World, Direction and Turn Rate);
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Ability 2));
            //lbl_0:
            Wait(0.2, Ignore Condition);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).ZenAim), Divide(500, Divide(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 5)), To World, Direction and Turn Rate);
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Sojourn Slide") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
    }
    actions {
        Wait(Random Real(2, 5), Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 2));
        If(Compare((Event Player).Randomizer, ==, 0));
            Press Button(Event Player, Button(Ability 1));
            Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
            If(Compare((Event Player).Randomizer, ==, 0));
                Wait(Random Real(0.3, 0.9), Ignore Condition);
                Press Button(Event Player, Button(Jump));
            End;
        End;
        Wait(Random Real(1, 2), Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Sojourn Slide low") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Health(Event Player) <= 75;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 60;
    }
    actions {
        Wait(Random Real(0.3, 0.5), Abort When False);
        Press Button(Event Player, Button(Ability 1));
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
        If(Compare((Event Player).Randomizer, ==, 0));
            Wait(Random Real(0.3, 0.9), Ignore Condition);
            Press Button(Event Player, Button(Jump));
        End;
        Wait(Random Real(1, 2), Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Sojourn Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Sojourn;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Health(Event Player) >= 150;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 150;
    }
    actions {
        Wait(0.2, Abort When False);
        Press Button(Event Player, Button(Ultimate));
        Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
        Wait(1, Ignore Condition);
        While(Is Using Ultimate(Event Player));
            If(Compare((Event Player).BotShoot, ==, True));
                Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 3);
                Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
                Press Button(Event Player, Button(Secondary Fire));
                Set Player Variable(Event Player, BotSojRail, 0);
                //lbl_0:
            End;
            Wait(1.5, Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

disabled rule ("Bot Tracer") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Tracer Move towards player") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        "@Condition eventPlayer.BotShoot == true"
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) >= 10;
        Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 275;
    }
    actions {
        Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
        Wait(2, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Tracer Stop moving towards") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        "@Condition eventPlayer.BotShoot == true"
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 7;
    }
    actions {
        Stop Forcing Throttle(Event Player);
        Wait(2, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Tracer First Blink") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotTracerFirstBlink == True;
        (Event Player).BotShoot == True;
        Distance Between(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Add(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Multiply(Facing Direction Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), All Players(All Teams), Value In Array(Global.Arena1Q, (Event Player).TargetNumber), True)) <= 2;
    }
    actions {
        "wait(1)\nwaitUntil(Arena1Q[eventPlayer.TargetNumber].isInViewAngle(eventPlayer.getEyePosition(), 25), 20)"
        Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.Arena1Q)), (Event Player).TargetNumber, To World, Replace existing throttle, Direction and Magnitude);
        Set Player Variable(Event Player, BotPathing, False);
        Wait(0.05, Ignore Condition);
        "smallMessage(getAllPlayers(), \"first blink\")"
        Press Button(Event Player, Button(Ability 1));
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 2));
        If(Compare((Event Player).Randomizer, ==, 0));
            Wait(0.1, Ignore Condition);
            Press Button(Event Player, Button(Ability 1));
        End;
        Set Player Variable(Event Player, BotPathing, True);
        Wait(0.25, Ignore Condition);
        Set Player Variable(Event Player, BotTracerFirstBlink, False);
    }
}

rule ("Bot Tracer Blink 2 charges") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Using Ultimate(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Reloading(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == False;
        Is Using Ability 2(Event Player) == False;
        Ability Charge(Event Player, Button(Ability 1)) >= 2;
        (Event Player).BotTracerFirstBlink == False;
        Is In View Angle(Value In Array(Global.Arena1Q, (Event Player).TargetNumber), Eye Position(Event Player), 45) == True;
    }
    actions {
        Wait(Random Real(0.4, 1), Abort When False);
        If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), >=, 15));
            Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.Arena1Q)), (Event Player).TargetNumber, To World, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotPathing, False);
            Wait(0.05, Ignore Condition);
            Press Button(Event Player, Button(Ability 1));
            "smallMessage(getAllPlayers(), \"2 blink far\")"
            Set Player Variable(Event Player, BotPathing, True);
        Else If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), <=, 6.5));
            Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.Arena1Q)), (Event Player).TargetNumber, To World, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotPathing, False);
            Wait(0.05, Ignore Condition);
            Press Button(Event Player, Button(Ability 1));
            "smallMessage(getAllPlayers(), \"2 blink close\")"
            Set Player Variable(Event Player, BotPathing, True);
        Else;
            Press Button(Event Player, Button(Ability 1));
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Tracer Blink Reload") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Using Ultimate(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Using Ability 2(Event Player) == False;
        Ability Charge(Event Player, Button(Ability 1)) >= 1;
        (Event Player).BotTracerFirstBlink == False;
        Is Reloading(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == False;
        Is Reloading(Event Player) == True;
        Is In View Angle(Value In Array(Global.Arena1Q, (Event Player).TargetNumber), Eye Position(Event Player), 45) == True;
    }
    actions {
        Wait(Random Real(0.5, 0.5), Abort When False);
        If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), >=, 15));
            Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.Arena1Q)), (Event Player).TargetNumber, To World, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotPathing, False);
            Wait(0.05, Ignore Condition);
            Press Button(Event Player, Button(Ability 1));
            "smallMessage(getAllPlayers(), \"blink reload\")"
            Set Player Variable(Event Player, BotPathing, True);
        Else If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), <=, 6));
            Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.Arena1Q)), (Event Player).TargetNumber, To World, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotPathing, False);
            Wait(0.05, Ignore Condition);
            Press Button(Event Player, Button(Ability 1));
            "smallMessage(getAllPlayers(), \"blink reload\")"
            Set Player Variable(Event Player, BotPathing, True);
        Else;
            Press Button(Event Player, Button(Ability 1));
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Tracer Blink Close < 6") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Using Ultimate(Event Player) == False;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Reloading(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == False;
        Is Using Ability 2(Event Player) == False;
        Ability Charge(Event Player, Button(Ability 1)) >= 1;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 6;
        Is In View Angle(Value In Array(Global.Arena1Q, (Event Player).TargetNumber), Eye Position(Event Player), 30) == True;
    }
    actions {
        Wait(Random Real(0.1, 0.3), Abort When False);
        Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.Arena1Q)), (Event Player).TargetNumber, To World, Replace existing throttle, Direction and Magnitude);
        Set Player Variable(Event Player, BotPathing, False);
        Wait(0.05, Ignore Condition);
        Press Button(Event Player, Button(Ability 1));
        Set Player Variable(Event Player, BotPathing, True);
        Wait(Random Real(0.1, 0.7), Ignore Condition);
    }
}

rule ("Bot Tracer Blink Low HP") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Reloading(Event Player) == False;
        Is Reloading(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == False;
        Is Using Ability 2(Event Player) == False;
        Ability Charge(Event Player, Button(Ability 1)) >= 1;
        Health(Event Player) <= 75;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Is In View Angle(Value In Array(Global.Arena1Q, (Event Player).TargetNumber), Eye Position(Event Player), 30) == True;
    }
    actions {
        If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), <=, 6.5));
            Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.Arena1Q)), (Event Player).TargetNumber, To World, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotPathing, False);
            Wait(0.05, Ignore Condition);
            Press Button(Event Player, Button(Ability 1));
            Set Player Variable(Event Player, BotPathing, True);
        Else;
            Press Button(Event Player, Button(Ability 1));
        End;
        Wait(Random Real(0.1, 0.7), Ignore Condition);
        "eventPlayer.Randomizer = random.randint(0, 0)\nif eventPlayer.Randomizer == 0:\nwait(0.1)\neventPlayer.forceButtonPress(Button.ABILITY_1)\n__end__()"
        Loop If Condition Is True;
    }
}

rule ("Bot Tracer Recall HP log") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
    }
    actions {
        For Player Variable(Event Player, Control, 0, 29, 1);
            Set Player Variable At Index(Event Player, BotTracerRecall, (Event Player).Control, Health(Event Player));
            Wait(0.1, Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Tracer Recall") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Add(Health(Event Player), 85) < Last Of(Sorted Array((Event Player).BotTracerRecall, Current Array Element));
    }
    actions {
        Wait(Random Real(0.1, 0.3), Abort When False);
        Press Button(Event Player, Button(Ability 2));
    }
}

rule ("Bot Tracer Recall low hp") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Health(Event Player) <= 60;
    }
    actions {
        Wait(Random Real(0.1, 0.3), Abort When False);
        Press Button(Event Player, Button(Ability 2));
    }
}

rule ("Bot Tracer Primary") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Using Ultimate(Event Player) == False;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 15;
    }
    actions {
        Wait(0.2, Abort When False);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Start Holding Button(Event Player, Button(Primary Fire));
        //lbl_0:
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).ShootPos), Divide(500, Divide(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 5)), To World, Direction and Turn Rate);
    }
}

rule ("Bot Tracer Primary Tracking") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
    }
    actions {
        Set Player Variable(Event Player, ShootRando, Random Real(1, Absolute Value(Subtract((Event Player).BotDifficulty, 6))));
        "eventPlayer.ShootRando = random.randint(1, 3)"
        Set Player Variable(Event Player, ShootPosHelp, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
        Set Player Variable(Event Player, ShootPos, Vector(X Component Of((Event Player).ShootPosHelp), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPosHelp)));
        Wait(Divide((Event Player).ShootRando, 10), Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Tracer Stop Primary") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Using Ultimate(Event Player) == False;
        Or(Compare((Event Player).BotShoot, ==, False), Compare(Distance Between(Eye Position(Event Player), Eye Position(Event Player)), >, 15.5)) == True;
    }
    actions {
        Stop Holding Button(Event Player, Button(Primary Fire));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
        Wait(0.25, Abort When False);
        Stop Holding Button(Event Player, Button(Primary Fire));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
        Wait(0.25, Abort When False);
        Stop Holding Button(Event Player, Button(Primary Fire));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
        Wait(0.5, Abort When False);
        Stop Holding Button(Event Player, Button(Primary Fire));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
        Loop If Condition Is True;
    }
}

rule ("Bot Tracer Stop Primary vs Reflect") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == Hero(Genji);
        Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Using Ultimate(Event Player) == False;
    }
    actions {
        Wait(Random Real(0, 0.3), Abort When False);
        Press Button(Event Player, Button(Reload));
        Stop Holding Button(Event Player, Button(Primary Fire));
        Wait Until(Not(Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 2);
        If(Compare(Hero Of(Event Player), ==, Hero(Tracer)));
            If(Compare((Event Player).BotShoot, ==, True));
                Start Holding Button(Event Player, Button(Primary Fire));
    }
}

rule ("Bot Tracer Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Is Using Ability 2(Event Player) == False;
        Health(Event Player) >= 50;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 100;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 10;
        Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 271;
    }
    actions {
        If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), <=, 6));
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 720, To World, Direction and Turn Rate);
            Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
            Press Button(Event Player, Button(Ultimate));
            "smallMessage(getAllPlayers(), \"close ult\")"
            Wait(0.2, Ignore Condition);
            If(Is Using Ultimate(Event Player));
                Wait(0.9, Ignore Condition);
                Start Damage Modification(Event Player, Event Player, 1, None);
                Wait(0.7, Ignore Condition);
                Stop Damage Modification(Last Damage Modification ID);
            End;
        Else If(And(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), <=, 10), Compare(Ability Charge(Event Player, Button(Ability 1)), >=, 1)));
            "smallMessage(getAllPlayers(), \"blink ult\")"
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 720, To World, Direction and Turn Rate);
            Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Global.Arena1Q)), (Event Player).TargetNumber, To World, Replace existing throttle, Direction and Magnitude);
            Set Player Variable(Event Player, BotPathing, False);
            Wait(0.05, Ignore Condition);
            Press Button(Event Player, Button(Ability 1));
            Set Player Variable(Event Player, BotPathing, True);
            Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
            Wait(0.1, Ignore Condition);
            Press Button(Event Player, Button(Ultimate));
            Wait(0.2, Ignore Condition);
            If(Is Using Ultimate(Event Player));
                Wait(0.9, Ignore Condition);
                Start Damage Modification(Event Player, Event Player, 1, None);
                Wait(0.7, Ignore Condition);
                Stop Damage Modification(Last Damage Modification ID);
            End;
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("Bot Echo") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Echo Fly") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is On Ground(Event Player) == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
    }
    actions {
        Skip If(Compare((Event Player).BotDifficulty, <=, 1), 1);
        Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
        //lbl_0:
        Start Holding Button(Event Player, Button(Jump));
        Press Button(Event Player, Button(Ability 1));
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Echo Primary") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Firing Secondary(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
        Is Reloading(Event Player) == False;
    }
    actions {
        Wait(0.2, Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, Add(First Of((Event Player).BotCassDif), 1)));
        If(Compare((Event Player).Randomizer, <=, 2));
            Call Subroutine(ZenAim);
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_0:
            Wait(0.1, Ignore Condition);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Else;
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Wait(0.1, Ignore Condition);
        End;
        Wait(Random Real(0.03, Subtract(Value In Array((Event Player).BotCassDif, 1), 0.4)), Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Echo Moving Forward") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotDifficulty >= 2;
        Is On Ground(Event Player) == False;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) >= 10;
    }
    actions {
        Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Echo stop Moving Forward") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Using Ability 2(Event Player) == False;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 10;
    }
    actions {
        Stop Forcing Throttle(Event Player);
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Echo Secondary") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Using Ability 2(Event Player) == False;
        Is Reloading(Event Player) == False;
        Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, Add(First Of((Event Player).BotCassDif), 1)));
        "eventPlayer.Randomizer = random.randint(0, 3)"
        If(Compare((Event Player).Randomizer, <=, 2));
            Wait(0.2, Abort When False);
            Call Subroutine(ZenAim);
            Press Button(Event Player, Button(Secondary Fire));
            Wait(0.05, Ignore Condition);
            Call Subroutine(ZenAim);
            Wait(0.05, Ignore Condition);
            Call Subroutine(ZenAim);
            Wait(0.05, Ignore Condition);
            Call Subroutine(ZenAim);
            Wait(0.05, Ignore Condition);
            Call Subroutine(ZenAim);
            Wait(0.05, Ignore Condition);
            Call Subroutine(ZenAim);
            Wait(0.05, Ignore Condition);
            Call Subroutine(ZenAim);
        End;
        Wait(3, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Echo Beam") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Is Firing Secondary(Event Player) == False;
        Normalized Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) <= 0.6;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 35;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, Add(First Of((Event Player).BotCassDif), 1)));
        "eventPlayer.Randomizer = random.randint(0, 1)"
        If(Compare((Event Player).Randomizer, <=, 2));
            Stop Holding Button(Event Player, Button(Jump));
            Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
            Wait Until(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), <=, 16), 10);
            Abort If Condition Is False;
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 360, To World, Direction and Turn Rate);
            Press Button(Event Player, Button(Ability 2));
        End;
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("Bot Genji") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Genji Jump") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is On Ground(Event Player) == True;
    }
    actions {
        If(Is Using Ultimate(Event Player));
            Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
        Else If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), >=, 5));
            Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
        Else;
            Stop Forcing Throttle(Event Player);
        End;
        Wait(Random Real(0.1, 0.3), Abort When False);
        Wait Until(Not(Is On Wall(Event Player)), 1);
        Press Button(Event Player, Button(Jump));
        Wait(Random Real(0.2, 0.5), Ignore Condition);
        Press Button(Event Player, Button(Jump));
        Loop If Condition Is True;
    }
}

rule ("Bot Genji Climb") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is On Wall(Event Player) == True;
    }
    actions {
        Start Holding Button(Event Player, Button(Jump));
        Wait(1, Ignore Condition);
        Stop Holding Button(Event Player, Button(Jump));
    }
}

rule ("Bot Genji Dash") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is On Wall(Event Player) == False;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 14;
    }
    actions {
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 5000, To World, Direction and Turn Rate);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), To World);
        Wait(0.1, Abort When False);
        Press Button(Event Player, Button(Ability 1));
        "smallMessage(getAllPlayers(), \"dash\")"
        Wait(0.3, Ignore Condition);
        If(Not(Is On Ground(Event Player)));
            Press Button(Event Player, Button(Jump));
        End;
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.5), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 400, To World, Direction and Turn Rate);
        Wait(2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Genji Reflect far") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) >= 16;
        Normalized Health(Event Player) != 1;
    }
    actions {
        Wait(0.2, Abort When False);
        Press Button(Event Player, Button(Ability 2));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.5), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 400, To World, Direction and Turn Rate);
    }
}

rule ("Bot Genji Reflect low") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Health(Event Player) <= 75;
    }
    actions {
        Press Button(Event Player, Button(Ability 2));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.5), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 400, To World, Direction and Turn Rate);
        Wait(Random Real(0.7, 2), Ignore Condition);
        Abort If(Compare(Normalized Health(Event Player), ==, 1));
        Press Button(Event Player, Button(Ability 2));
    }
}

rule ("Bot Genji Reflect random") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Health(Event Player) <= 175;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 3));
        If(Compare((Event Player).Randomizer, ==, 0));
            Press Button(Event Player, Button(Ability 2));
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.5), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 400, To World, Direction and Turn Rate);
            Wait(Random Real(0.7, 2), Ignore Condition);
            Abort If(Compare(Normalized Health(Event Player), ==, 1));
            Press Button(Event Player, Button(Ability 2));
        End;
        Wait(4, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Genji Primary") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Using Ability 2(Event Player) == False;
        Is Using Ability 1(Event Player) == False;
        Is Using Ultimate(Event Player) == False;
        Is Firing Secondary(Event Player) == False;
        Is Reloading(Event Player) == False;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) >= 12;
    }
    actions {
        "smallMessage(getAllPlayers(), \"prim\")"
        Wait(Divide(First Of((Event Player).BotCassDif), 10), Abort When False);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Press Button(Event Player, Button(Primary Fire));
        //lbl_0:
        "wait(0.05)"
        Call Subroutine(ZenAim);
        Wait(0.09, Ignore Condition);
        Call Subroutine(ZenAim);
        Wait(0.09, Ignore Condition);
        Call Subroutine(ZenAim);
        Wait(0.09, Ignore Condition);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.5), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 400, To World, Direction and Turn Rate);
        Wait(0.41, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Genji Secondary") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Using Ability 2(Event Player) == False;
        Is Using Ability 1(Event Player) == False;
        Is Using Ultimate(Event Player) == False;
        Is Firing Primary(Event Player) == False;
        Is Reloading(Event Player) == False;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) < 12;
    }
    actions {
        "smallMessage(getAllPlayers(), \"sec\")"
        Wait(Divide(First Of((Event Player).BotCassDif), 10), Abort When False);
        Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
        Press Button(Event Player, Button(Secondary Fire));
        //lbl_0:
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.5), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 400, To World, Direction and Turn Rate);
        Wait(0.48, Ignore Condition);
        If(Compare((Event Player).BotDifficulty, ==, 0));
            Wait(0.4, Ignore Condition);
        Else If(Compare((Event Player).BotDifficulty, ==, 1));
            Wait(0.2, Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Genji Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Genji;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) != Hero(Echo);
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Health(Event Player) >= 150;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 150;
    }
    actions {
        Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
        If(Compare(Ability Cooldown(Event Player, Button(Ability 1)), ==, 0));
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 5000, To World, Direction and Turn Rate);
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), To World);
            Wait(0.016, Ignore Condition);
            Press Button(Event Player, Button(Ability 1));
            Wait(0.3, Ignore Condition);
        End;
        Press Button(Event Player, Button(Ultimate));
        Start Holding Button(Event Player, Button(Primary Fire));
        Wait(0.5, Ignore Condition);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.5), Z Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))))), 400, To World, Direction and Turn Rate);
        Wait Until(Not(Is Using Ultimate(Event Player)), 8);
        Stop Holding Button(Event Player, Button(Primary Fire));
    }
}

disabled rule ("Bot Kiriko") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Kiriko Aggro & Climb") {
    event {
        Ongoing - Each Player;
        All;
        Kiriko;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
    }
    actions {
        Start Holding Button(Event Player, Button(Jump));
        If(Compare((Event Player).BotDifficulty, <=, 1));
            If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), >=, 12));
                Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
            Else;
                Stop Forcing Throttle(Event Player);
            End;
        Else;
            If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), >=, 8));
                Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
            Else;
                Stop Forcing Throttle(Event Player);
            End;
        End;
        Wait(1.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Kiriko Shoot") {
    event {
        Ongoing - Each Player;
        All;
        Kiriko;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Reloading(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
    }
    actions {
        "if eventPlayer.BotDifficulty == 0:\nwait(0.4, Wait.ABORT_WHEN_FALSE)\nelif eventPlayer.BotDifficulty == 1:\nwait(0.2, Wait.ABORT_WHEN_FALSE)\n__end__()"
        Skip If(Is Using Ultimate(Event Player), 1);
        Wait(Subtract(Value In Array((Event Player).BotCassDif, 1), 0.5), Abort When False);
        //lbl_0:
        "wait(0.2, Wait.ABORT_WHEN_FALSE)"
        Set Player Variable(Event Player, Randomizer, Random Integer(0, Add(First Of((Event Player).BotCassDif), 1)));
        If(Compare((Event Player).Randomizer, <=, 2));
            Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
            Call Subroutine(ZenAim);
            //lbl_1:
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Secondary Fire));
            //lbl_2:
            Wait(0.1, Ignore Condition);
            Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            //lbl_3:
        Else;
            Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            //lbl_4:
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Secondary Fire));
            //lbl_5:
            Wait(0.1, Ignore Condition);
        End;
        Wait(Random Real(0.4, Subtract(Value In Array((Event Player).BotCassDif, 1), 0.1)), Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Kiriko Self Suzu random") {
    event {
        Ongoing - Each Player;
        All;
        Kiriko;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Health(Event Player) <= 170;
    }
    actions {
        Wait(0.2, Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 2));
        If(Compare((Event Player).Randomizer, ==, 0));
            Set Player Variable(Event Player, BotKiriHeal, True);
            Stop Facing(Event Player);
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player)), To World);
            Wait(0.016, Ignore Condition);
            Press Button(Event Player, Button(Ability 2));
            Wait(0.1, Ignore Condition);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Set Player Variable(Event Player, BotKiriHeal, False);
        End;
        Wait(3, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Kiriko Self Suzu low") {
    event {
        Ongoing - Each Player;
        All;
        Kiriko;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
        Health(Event Player) <= 100;
    }
    actions {
        Wait(0.2, Abort When False);
        Set Player Variable(Event Player, BotKiriHeal, True);
        Stop Facing(Event Player);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player)), To World);
        Wait(0.016, Ignore Condition);
        Press Button(Event Player, Button(Ability 2));
        Wait(0.1, Ignore Condition);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Set Player Variable(Event Player, BotKiriHeal, False);
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Kiriko Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Kiriko;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Health(Event Player) >= 150;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 150;
    }
    actions {
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Wait(0.1, Ignore Condition);
        Press Button(Event Player, Button(Ultimate));
    }
}

disabled rule ("Bot Hanzo") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Hanzo Lunge") {
    event {
        Ongoing - Each Player;
        All;
        Hanzo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is On Ground(Event Player) == True;
        Ability Cooldown(Event Player, Button(Jump)) == 0;
    }
    actions {
        Press Button(Event Player, Button(Jump));
        Wait(Random Real(0.2, 0.5), Ignore Condition);
        Press Button(Event Player, Button(Jump));
        Loop If Condition Is True;
    }
}

rule ("Bot Hanzo Primary") {
    event {
        Ongoing - Each Player;
        All;
        Hanzo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Using Ability 2(Event Player) == False;
        (Event Player).BotZoom >= 0.7;
    }
    actions {
        Wait(Subtract(Value In Array((Event Player).BotCassDif, 1), 0.5), Abort When False);
        "wait(0.2, Wait.ABORT_WHEN_FALSE)"
        Set Player Variable(Event Player, Randomizer, Random Integer(0, Add(First Of((Event Player).BotCassDif), 1)));
        If(Compare((Event Player).Randomizer, <=, 2));
            Call Subroutine(ZenAim);
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Stop Holding Button(Event Player, Button(Primary Fire));
            //lbl_0:
            Wait(0.1, Ignore Condition);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Else;
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Stop Holding Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Wait(0.1, Ignore Condition);
        End;
        Wait(0.4, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Hanzo Storm Arrows") {
    event {
        Ongoing - Each Player;
        All;
        Hanzo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 2)) == 0;
    }
    actions {
        Wait(0.3, Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 2));
        If(Compare((Event Player).Randomizer, ==, 0));
            Stop Holding Button(Event Player, Button(Primary Fire));
            Press Button(Event Player, Button(Ability 2));
        End;
        Wait(3, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Hanzo Storm Arrows Shoot") {
    event {
        Ongoing - Each Player;
        All;
        Hanzo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Is Using Ability 2(Event Player) == True;
    }
    actions {
        Stop Holding Button(Event Player, Button(Primary Fire));
        Wait(Subtract(Value In Array((Event Player).BotCassDif, 1), 0.5), Abort When False);
        "wait(0.24, Wait.ABORT_WHEN_FALSE)"
        Set Player Variable(Event Player, Randomizer, Random Integer(0, Add(First Of((Event Player).BotCassDif), 1)));
        If(Compare((Event Player).Randomizer, <=, 2));
            Call Subroutine(ZenAim);
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_0:
            Wait(0.224, Ignore Condition);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Else;
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Wait(0.24, Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Hanzo Loading") {
    event {
        Ongoing - Each Player;
        All;
        Hanzo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Firing Primary(Event Player) == True;
        Is Using Ability 2(Event Player) == False;
    }
    actions {
        Set Player Variable(Event Player, BotZoom, 0);
        Chase Player Variable At Rate(Event Player, BotZoom, 0.7, 1, Destination and Rate);
    }
}

rule ("Bot Hanzo not Loading") {
    event {
        Ongoing - Each Player;
        All;
        Hanzo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Firing Primary(Event Player) == False;
        Is Using Ability 2(Event Player) == False;
    }
    actions {
        Stop Chasing Player Variable(Event Player, BotZoom);
        Set Player Variable(Event Player, BotZoom, 0);
        Start Holding Button(Event Player, Button(Primary Fire));
        "if eventPlayer.isUsingAbility2() == false:\n__end__()"
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("Bot Ashe") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Ashe Boop") {
    event {
        Ongoing - Each Player;
        All;
        Ashe;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))) <= 8;
    }
    actions {
        Wait(0.25, Abort When False);
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 2));
        If(Compare((Event Player).Randomizer, ==, 0));
            Press Button(Event Player, Button(Ability 1));
        End;
        Wait(1.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Ashe Primary") {
    event {
        Ongoing - Each Player;
        All;
        Ashe;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Using Ability 1(Event Player) == False;
    }
    actions {
        If(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), >=, 12));
            If(Not(Is Firing Secondary(Event Player)));
                Start Holding Button(Event Player, Button(Secondary Fire));
                Wait(0.1, Abort When False);
            End;
            Wait(0.1, Abort When False);
            Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
            Stop Facing(Event Player);
            Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPos))), To World);
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_0:
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Set Player Variable(Event Player, ShootRando, Random Real(0, Subtract(First Of((Event Player).BotCassDif), 1)));
            Wait(Subtract(Random Real(0.55, Add(Value In Array((Event Player).BotCassDif, 1), 0.05)), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        Else;
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
            Stop Facing(Event Player);
            If(Compare((Event Player).BotDifficulty, <=, 2));
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPos))), To World);
            Else;
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Random Real(0, 0.4)), Z Component Of((Event Player).ShootPos))), To World);
            End;
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            Set Player Variable(Event Player, ShootRando, Random Real(0, First Of((Event Player).BotCassDif)));
            Wait(Subtract(Random Real(0.26, Subtract(Value In Array((Event Player).BotCassDif, 1), 0.24)), Divide((Event Player).ShootRando, 10)), Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Ashe Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Ashe;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == True;
        Ultimate Charge Percent(Event Player) == 100;
        Health(Event Player) >= 150;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 150;
    }
    actions {
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        Wait(0.1, Ignore Condition);
        Press Button(Event Player, Button(Ultimate));
    }
}

disabled rule ("Bot Widow") {
    event {
        Ongoing - Global;
    }
}

rule ("Bot Widow Finish low hp") {
    event {
        Ongoing - Each Player;
        All;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Using Ability 1(Event Player) == False;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) < 75;
    }
    actions {
        Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
        //lbl_0:
        If(Compare((Event Player).BotZoom, >=, 0.5));
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
        Else;
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Start Holding Button(Event Player, Button(Primary Fire));
            //lbl_2:
        End;
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bot Widow Stop smg vs reflect") {
    event {
        Ongoing - Each Player;
        All;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == Hero(Genji);
        Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
    }
    actions {
        Wait(Random Real(0, 0.3), Abort When False);
        Press Button(Event Player, Button(Reload));
        Stop Holding Button(Event Player, Button(Primary Fire));
    }
}

rule ("Bot Widow Grapple") {
    event {
        Ongoing - Each Player;
        All;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Ability Cooldown(Event Player, Button(Ability 1)) == 0;
        (Event Player).BotZoom <= 0.5;
        "@Condition Arena1Q[eventPlayer.TargetNumber].getHealth() >= 75"
        Is Firing Primary(Event Player) == False;
    }
    actions {
        Set Player Variable(Event Player, Randomizer, Random Integer(0, 1));
        If(Compare((Event Player).Randomizer, ==, 0));
            If(Compare(Distance Between(Position Of(Event Player), First Of((Event Player).BotMovePositions)), <=, 6));
                Set Player Variable(Event Player, BotKiriHeal, True);
                Stop Facing(Event Player);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(-12.42, 283.78, 286.72)), 900, To World, Direction and Turn Rate);
                Wait(0.1, Ignore Condition);
                Press Button(Event Player, Button(Ability 1));
                Wait(0.3, Ignore Condition);
                Set Player Variable(Event Player, BotKiriHeal, False);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
                Wait(Random Real(0.5, 1.5), Ignore Condition);
                Press Button(Event Player, Button(Jump));
            Else If(Compare(Distance Between(Position Of(Event Player), Value In Array((Event Player).BotMovePositions, 1)), <=, 4));
                Set Player Variable(Event Player, BotKiriHeal, True);
                Stop Facing(Event Player);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(-5.02, 285.18, 266.75)), 900, To World, Direction and Turn Rate);
                Wait(0.1, Ignore Condition);
                Press Button(Event Player, Button(Ability 1));
                Wait(0.3, Ignore Condition);
                Set Player Variable(Event Player, BotKiriHeal, False);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
                Wait(Random Real(0.5, 1.5), Ignore Condition);
                Press Button(Event Player, Button(Jump));
            Else If(Compare(Distance Between(Position Of(Event Player), Value In Array((Event Player).BotMovePositions, 2)), <=, 4));
                Set Player Variable(Event Player, BotKiriHeal, True);
                Stop Facing(Event Player);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(5.02, 285.18, 266.75)), 900, To World, Direction and Turn Rate);
                Wait(0.1, Ignore Condition);
                Press Button(Event Player, Button(Ability 1));
                Wait(0.3, Ignore Condition);
                Set Player Variable(Event Player, BotKiriHeal, False);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
                Wait(Random Real(0.5, 1.5), Ignore Condition);
                Press Button(Event Player, Button(Jump));
            Else If(Compare(Distance Between(Position Of(Event Player), Value In Array((Event Player).BotMovePositions, 3)), <=, 6));
                Set Player Variable(Event Player, BotKiriHeal, True);
                Stop Facing(Event Player);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(12.42, 283.78, 286.72)), 900, To World, Direction and Turn Rate);
                Wait(0.1, Ignore Condition);
                Press Button(Event Player, Button(Ability 1));
                Wait(0.3, Ignore Condition);
                Set Player Variable(Event Player, BotKiriHeal, False);
                Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
                Wait(Random Real(0.5, 1.5), Ignore Condition);
                Press Button(Event Player, Button(Jump));
            End;
            Wait(5, Ignore Condition);
        Else;
            Wait(3, Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Widow Stop smg / Start zoom") {
    event {
        Ongoing - Each Player;
        All;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        (Event Player).BotShoot == False;
    }
    actions {
        Stop Holding Button(Event Player, Button(Primary Fire));
        If(Not(Is Firing Secondary(Event Player)));
            Wait(2, Abort When False);
            Start Holding Button(Event Player, Button(Secondary Fire));
        End;
        Wait(0.5, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("Bot Widow Zooming") {
    event {
        Ongoing - Each Player;
        All;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, BotZoom, 0);
        Chase Player Variable At Rate(Event Player, BotZoom, 1, 1, Destination and Rate);
    }
}

rule ("Bot Widow Not zooming") {
    event {
        Ongoing - Each Player;
        All;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Firing Secondary(Event Player) == False;
    }
    actions {
        Stop Chasing Player Variable(Event Player, BotZoom);
        Set Player Variable(Event Player, BotZoom, 0);
    }
}

rule ("Bot Widow Primary") {
    event {
        Ongoing - Each Player;
        All;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotShoot == True;
        Is Using Ability 1(Event Player) == False;
        Health(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) >= 75;
    }
    actions {
        If(Or(Compare(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), >=, 10), Compare((Event Player).BotZoom, >=, 0.5)));
            If(Not(Is Firing Secondary(Event Player)));
                Set Player Variable(Event Player, Randomizer, Random Integer(0, 2));
                If(Compare((Event Player).Randomizer, !=, 0));
                    Press Button(Event Player, Button(Jump));
                    Wait(0.05, Abort When False);
                End;
                Start Holding Button(Event Player, Button(Secondary Fire));
                Wait(0.32, Abort When False);
            End;
            Wait Until(Compare((Event Player).BotZoom, ==, 1), 20);
            Wait Until(Compare((Event Player).BotShoot, ==, True), 20);
            Wait(Subtract(Value In Array((Event Player).BotCassDif, 1), 0.3), Abort When False);
            Set Player Variable(Event Player, ShootRando, Random Real(0, Subtract(First Of((Event Player).BotCassDif), 1)));
            Set Player Variable(Event Player, ShootPos, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
            Wait(Subtract(Divide((Event Player).ShootRando, 10), 0.016), Abort When False);
            Skip If(Compare((Event Player).BotKiriHeal, ==, True), 2);
            Stop Facing(Event Player);
            If(Compare((Event Player).BotDifficulty, ==, 4));
                //lbl_0:
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Random Real(0, 0)), Z Component Of((Event Player).ShootPos))), To World);
            Else;
                Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of((Event Player).ShootPos), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Random Real(0, 0.5)), Z Component Of((Event Player).ShootPos))), To World);
            End;
            Wait(0.016, Ignore Condition);
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Press Button(Event Player, Button(Primary Fire));
            //lbl_1:
            Wait(0.1, Ignore Condition);
            Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 300, To World, Direction and Turn Rate);
            //lbl_2:
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Wait(0.2, Ignore Condition);
        Else;
            Stop Holding Button(Event Player, Button(Secondary Fire));
            "eventPlayer.startFacing(directionTowards(eventPlayer.getEyePosition(), Arena1Q[eventPlayer.TargetNumber].getEyePosition()), 300)"
            Wait(0.2, Abort When False);
            Skip If(Compare((Event Player).BotKiriHeal, ==, True), 1);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).ShootPos), Divide(500, Divide(Distance Between(Eye Position(Event Player), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 5)), To World, Direction and Turn Rate);
            //lbl_3:
            Skip If(And(Compare(Hero Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)), ==, Hero(Genji)), Is Using Ability 2(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 1);
            Start Holding Button(Event Player, Button(Primary Fire));
            //lbl_4:
            Wait(0.5, Ignore Condition);
        End;
        Loop If Condition Is True;
    }
}

rule ("Bot Widow Smg Tracking") {
    event {
        Ongoing - Each Player;
        All;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Alive(Value In Array(Global.Arena1Q, (Event Player).TargetNumber)) == True;
        Global.Arena1Match == True;
    }
    actions {
        Set Player Variable(Event Player, ShootRando, Random Real(1, Absolute Value(Subtract((Event Player).BotDifficulty, 6))));
        Set Player Variable(Event Player, ShootPosHelp, Add(Multiply(Divide((Event Player).ShootRando, 10), Velocity Of(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))));
        Set Player Variable(Event Player, ShootPos, Vector(X Component Of((Event Player).ShootPosHelp), Subtract(Y Component Of(Eye Position(Value In Array(Global.Arena1Q, (Event Player).TargetNumber))), 0.4), Z Component Of((Event Player).ShootPosHelp)));
        Wait(Divide((Event Player).ShootRando, 10), Abort When False);
        Loop If Condition Is True;
    }
}

disabled rule ("###   All heroes mode   ###") {
    event {
        Ongoing - Global;
    }
}

rule ("Sombra invis break") {
    event {
        Ongoing - Each Player;
        All;
        Sombra;
    }
    conditions {
        "@Condition AllHeroesMode == true"
        Horizontal Speed Of(Event Player) >= 6;
    }
    actions {
        Wait(4.95, Ignore Condition);
        Damage(Event Player, Null, 0.001);
        Heal(Event Player, Null, 0.001);
        Loop If Condition Is True;
    }
}

rule ("Sombra invis break") {
    event {
        Ongoing - Each Player;
        All;
        Sombra;
    }
    conditions {
        "@Condition AllHeroesMode == true"
        Horizontal Speed Of(Event Player) == 0;
    }
    actions {
        Wait(4.95, Abort When False);
        Damage(Event Player, Null, 0.001);
        Heal(Event Player, Null, 0.001);
        Loop If Condition Is True;
    }
}

rule ("Venture no health over 250") {
    event {
        Ongoing - Each Player;
        All;
        Venture;
    }
    conditions {
        Global.AllHeroesMode == True;
        Health(Event Player) > 250;
    }
    actions {
        Damage(Event Player, Null, Subtract(Health(Event Player), 250));
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Ramattra no health over 375") {
    event {
        Ongoing - Each Player;
        All;
        Ramattra;
    }
    conditions {
        Global.AllHeroesMode == True;
        Health(Event Player) > 345;
    }
    actions {
        Damage(Event Player, Null, Subtract(Health(Event Player), 340));
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Mauga no health over 368") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.AllHeroesMode == True;
        Health(Event Player) > 368;
    }
    actions {
        Damage(Event Player, Null, Subtract(Health(Event Player), 363));
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Rein Shield hack") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Global.AllHeroesMode == True;
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        Wait(1.2, Ignore Condition);
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 3);
        If(Is Firing Secondary(Event Player));
            Set Status(Event Player, Null, Hacked, 0.1);
    }
}

rule ("Sigma no health over 356") {
    event {
        Ongoing - Each Player;
        All;
        Sigma;
    }
    conditions {
        Global.AllHeroesMode == True;
        Health(Event Player) > 357;
    }
    actions {
        Damage(Event Player, Null, Subtract(Health(Event Player), 357));
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Sigma Shield cancel") {
    event {
        Ongoing - Each Player;
        All;
        Sigma;
    }
    conditions {
        Global.AllHeroesMode == True;
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        Wait(1.2, Ignore Condition);
        If(Compare(Hero Of(Event Player), ==, Hero(Sigma)));
            Press Button(Event Player, Button(Secondary Fire));
        End;
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 5);
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Pharah cannot fly high vs some heroes") {
    event {
        Ongoing - Each Player;
        All;
        Pharah;
    }
    conditions {
        Global.AllHeroesMode == True;
        Or(Compare(Event Player, ==, Value In Array(Global.Arena1Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena1Q, 2))) == True;
        Or(Array Contains(Global.NoFlyHeroes, Hero Of(Value In Array(Global.Arena1Q, 1))), Array Contains(Global.NoFlyHeroes, Hero Of(Value In Array(Global.Arena1Q, 2)))) == True;
        Y Component Of(Eye Position(Event Player)) >= 275;
    }
    actions {
        If(Compare(Distance Between(Event Player, Vector(-0.126, 279.35, 291.717)), <=, 4));
            Apply Impulse(Event Player, Direction Towards(Eye Position(Event Player), Vector(0.232, 275, 279.999)), 30, To World, Cancel Contrary Motion);
        Else;
            Apply Impulse(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Event Player)), 265, Z Component Of(Eye Position(Event Player)))), 10, To World, Cancel Contrary Motion);
        End;
        Small Message(All Players(All Teams), Custom String("   Pharah cannot fly high against this hero"));
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Echo cannot fly high vs some heroes") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Global.AllHeroesMode == True;
        Or(Compare(Event Player, ==, Value In Array(Global.Arena1Q, 1)), Compare(Event Player, ==, Value In Array(Global.Arena1Q, 2))) == True;
        Or(Array Contains(Global.NoFlyHeroes, Hero Of(Value In Array(Global.Arena1Q, 1))), Array Contains(Global.NoFlyHeroes, Hero Of(Value In Array(Global.Arena1Q, 2)))) == True;
        Y Component Of(Eye Position(Event Player)) >= 275;
    }
    actions {
        If(Compare(Distance Between(Event Player, Vector(-0.126, 279.35, 291.717)), <=, 4));
            Apply Impulse(Event Player, Direction Towards(Eye Position(Event Player), Vector(0.232, 275, 279.999)), 30, To World, Cancel Contrary Motion);
        Else;
            Apply Impulse(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Eye Position(Event Player)), 265, Z Component Of(Eye Position(Event Player)))), 10, To World, Cancel Contrary Motion);
        End;
        Small Message(All Players(All Teams), Custom String("   Echo cannot fly high against this hero"));
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Ball spawn Grapple") {
    event {
        Ongoing - Each Player;
        All;
        Wrecking Ball;
    }
    actions {
        Wait(0.5, Ignore Condition);
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
    }
}

rule ("D.va ultimate charge bug fix") {
    event {
        Ongoing - Each Player;
        All;
        D.Va;
    }
    conditions {
        Is In Alternate Form(Event Player) == True;
    }
    actions {
        Set Ultimate Charge(Event Player, 0);
    }
}

