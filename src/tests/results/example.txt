settings
{
	main
	{
		Mode Name: "Some awesome game mode"
		Description: "OverPy starter pack"
	}
	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Island
			}
		}
		General
		{
			Hero Limit: Off
			Respawn Time Scalar: 30%
		}
	}
}
variables {
    global:
        0: counter
        127: __holygrail__
}
rule ("Disable inspector") {
    event {
        Ongoing - Global;
    }
    actions {
        Disable Inspector Recording;
    }
}

rule ("<fg00FFFFFF>OverPy <­tx> / <­fg> setup code</fg>") {
    event {
        Ongoing - Global;
    }
    actions {
        "By Zezombye"
        Create Dummy Bot(All Heroes, If-Then-Else(Number Of Slots(Team 1), Team 1, If-Then-Else(Number Of Slots(Team 2), Team 2, True)), False, Null, Null);
        "More info: https://workshop.codes/wiki/articles/tx-reference-sheet"
        Start Forcing Dummy Bot Name(Last Created Entity, Custom String("______________________________________________________________________________________________________________________________〼"));
        Set Global Variable(__holygrail__, String Split(First Of(Last Created Entity), Empty Array));
        Start Forcing Dummy Bot Name(Last Created Entity, Custom String("______________________________________________________________________________________________________________________________ࡀ"));
        Set Global Variable(__holygrail__, String Slice(String Replace(Custom String("______________________________________________________________________________________________________________________________〼"), Global.__holygrail__, First Of(Last Created Entity)), 126, True));
        Destroy All Dummy Bots;
    }
}

rule ("Initialize global variables") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(counter, 0);
    }
}

rule ("Teleport player on pressing interact") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
    }
    actions {
        Modify Global Variable(counter, Add, 1);
        Teleport(Event Player, Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 5)));
        "Hold the player in place, to reset falling velocity"
        Start Forcing Player Position(Event Player, Position Of(Event Player), False);
        Wait(0.016, Ignore Condition);
        Stop Forcing Player Position(Event Player);
    }
}

rule ("Display position") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Create HUD Text(All Players(All Teams), Custom String("{0}txc00000000020af8>Position of {1}: {0}fg00FFFFFF>{2}{0}/fg>", Global.__holygrail__, Event Player, Position Of(Event Player)), Custom String("                                                                                                                             {0}", Custom String("                                             ")), Null, Left, -9999, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Custom String("{0}FGD0FF00FF>ƈουṇṭẹṛ {0}FG99F3FFFF>= {0}FGFFFF00FF>{1}                                                                      {2}", Global.__holygrail__, Mapped Array(Mapped Array(Array(Mapped Array(Global.counter, If-Then-Else(Or(Compare(Count Of(Current Array Element), ==, 1), And(Compare(Current Array Element, ==, Empty Array), Compare(Current Array Element, !=, Null))), Custom String("[{0}]", Current Array Element), If-Then-Else(Count Of(Current Array Element), Custom String("[{0}, …+{1}]", Current Array Element, Subtract(Count Of(Current Array Element), 1)), Current Array Element)))), Append To Array(Append To Array(Or(Count Of(Current Array Element), And(Compare(Current Array Element, ==, Empty Array), Compare(Current Array Element, !=, Null))), If-Then-Else(And(Not(Count Of(Current Array Element)), Compare(Current Array Element, !=, Empty Array)), 3, Multiply(Count Of(Current Array Element), 3))), Current Array Element)), If-Then-Else(First Of(Current Array Element), Custom String("[{0}{1}]", String Replace(Custom String("{0}, {1}, {2}", Value In Array(Current Array Element, 2), Value In Array(Current Array Element, 3), Custom String("{0}, {1}, {2}", Value In Array(Current Array Element, 4), Value In Array(Current Array Element, 5), Custom String("{0}, {1}, …", Value In Array(Current Array Element, 6), Value In Array(Current Array Element, 7)))), String Slice(Custom String("0, 0, 0, 0, 0, 0, …"), Add(-2, Value In Array(Current Array Element, 1)), Subtract(22, Value In Array(Current Array Element, 1))), Empty Array), If-Then-Else(Compare(Value In Array(Current Array Element, 1), >, 18), Custom String("+{0}", Subtract(Divide(Value In Array(Current Array Element, 1), 3), 6)), Empty Array)), String Split(Value In Array(Current Array Element, 2), Empty Array))), Custom String("                                                                                                    ")), Null, Left, -9999, Null, Color(White), Null, Visible To Sort Order String and Color, Default Visibility);
    }
}

