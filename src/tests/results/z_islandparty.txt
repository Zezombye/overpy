settings
{
	main
	{
		Description: "Island Party - Heroes Minigames    v3.1.1-23    Play rounds of 23 classic and new games as minigames and score points.    Widow HS only, McCree Hot Potato, Zen Sparta, Echo Rings...    Code: W468T    Join my discord.io/IslandParty to choose the next minigame or give feedback.    ~Created by Jokaes#2263 My codes in: jokaes.github.io"
		Mode Name: "Island Party - Heroes Minigames"
	}
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Spectators: 6
		Return To Lobby: Never
	}
	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Workshop Island
				Workshop Island Night
			}
		}
		General
		{
			Allow Hero Switching: Off
			Game Mode Start: Immediately
			Hero Limit: Off
			Kill Cam: Off
			Kill Feed: Off
			Respawn As Random Hero: On
			Self Initiated Respawn: Off
			Skins: Off
		}
	}
	heroes
	{
		General
		{
			Ana
			{
				Biotic Grenade: Off
				Damage Dealt: 500%
				Damage Received: 500%
				Health: 10%
				No Ammunition Requirement: On
				Quick Melee: Off
				Sleep Dart Cooldown Time: 25%
				Ultimate Ability Nano Boost: Off
			}
			Bastion
			{
				A-36 Tactical Grenade: Off
				Infinite Ultimate Duration: On
				No Ammunition Requirement: On
				Quick Melee: Off
				Reconfigure: Off
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
				Ultimate Generation - Combat Configuration: Artillery: 500%
				Ultimate Generation - Passive Configuration: Artillery: 500%
				Ultimate Generation Configuration: Artillery: 500%
			}
			Brigitte
			{
				Barrier Shield Cooldown Time: 200%
				Barrier Shield Recharge Rate: 150%
				Damage Dealt: 500%
				Jump Vertical Speed: 200%
				Primary Fire: Off
				Quick Melee: Off
				Repair Pack: Off
				Shield Bash Cooldown Time: 35%
				Ultimate Generation - Combat Rally: 200%
				Ultimate Generation - Passive Rally: 0%
				Whip Shot Cooldown Time: 30%
				Whip Shot Knockback Scalar: 200%
			}
			Cassidy
			{
				Combat Roll Cooldown Time: 80%
				Damage Dealt: 10%
				Damage Received: 10%
				Flashbang: Off
				Jump Vertical Speed: 300%
				No Ammunition Requirement: On
				Secondary Fire: Off
				Ultimate Ability Deadeye: Off
			}
			D.Va
			{
				Boosters Cooldown Time: 0%
				Damage Dealt: 10%
				Damage Received: 10%
				Defense Matrix: Off
				Micro Missiles: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Generation - Combat Self-Destruct: 0%
				Ultimate Generation - Passive Self-Destruct: 0%
			}
			Doomfist
			{
				Damage Dealt: 10%
				Damage Received: 10%
				Health: 500%
				No Ammunition Requirement: On
				Power Block: Off
				Quick Melee: Off
				Rocket Punch Cooldown Time: 50%
				Rocket Punch Knockback Scalar: 250%
				Ultimate Generation - Combat Meteor Strike: 50%
				Ultimate Generation - Passive Meteor Strike: 0%
			}
			Echo
			{
				Flight Cooldown Time: 50%
				Focusing Beam Cooldown Time: 50%
				Movement Speed: 200%
				No Ammunition Requirement: On
				Primary Fire: Off
				Sticky Bombs: Off
				Ultimate Ability Duplicate: Off
			}
			Genji
			{
				Damage Dealt: 500%
				Deflect: Off
				No Ammunition Requirement: On
				Primary Fire: Off
				Secondary Fire: Off
				Swift Strike Cooldown Time: 30%
				Ultimate Generation - Combat Dragonblade: 500%
				Ultimate Generation - Passive Dragonblade: 0%
				Ultimate Generation Dragonblade: 200%
			}
			Lúcio
			{
				Amp It Up: Off
				Crossfade: Off
				No Ammunition Requirement: On
				Primary Fire: Off
				Quick Melee: Off
				Soundwave: Off
				Ultimate Ability Sound Barrier: Off
			}
			Mei
			{
				Damage Dealt: 500%
				Damage Received: 500%
				Health: 10%
				No Ammunition Requirement: On
				Primary Fire: Off
				Projectile Gravity: 500%
				Projectile Speed: 38%
				Ultimate Generation - Combat Blizzard: 125%
			}
			Mercy
			{
				Damage Dealt: 500%
				Damage Received: 500%
				Guardian Angel: Off
				Movement Speed: 150%
				No Ammunition Requirement: On
				Primary Fire: Off
				Resurrect: Off
				Secondary Fire: Off
				Ultimate Generation - Combat Valkyrie: 500%
				Ultimate Generation Valkyrie: 500%
			}
			Reinhardt
			{
				Barrier Field: Off
				Charge Cooldown Time: 90%
				Fire Strike Cooldown Time: 50%
				Ultimate Generation - Combat Earthshatter: 0%
				Ultimate Generation - Passive Earthshatter: 0%
			}
			Roadhog
			{
				Chain Hook Cooldown Time: 38%
				Damage Dealt: 10%
				Damage Received: 10%
				Movement Speed: 150%
				No Ammunition Requirement: On
				Pig Pen: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Generation - Combat Whole Hog: 0%
				Ultimate Generation - Passive Whole Hog: 500%
				Ultimate Generation Whole Hog: 180%
			}
			Sigma
			{
				Accretion Cooldown Time: 25%
				Damage Dealt: 500%
				Experimental Barrier Cooldown Time: 200%
				Experimental Barrier Recharge Rate: 50%
				Health: 25%
				Jump Vertical Speed: 150%
				Movement Speed: 150%
				Primary Fire: Off
				Projectile Speed: 162%
				Quick Melee: Off
				Ultimate Generation - Combat Gravitic Flux: 260%
				Ultimate Generation - Passive Gravitic Flux: 0%
				Ultimate Generation Gravitic Flux: 260%
			}
			Soldier: 76
			{
				Biotic Field: Off
				Helix Rockets: Off
				No Ammunition Requirement: On
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Ability Tactical Visor: Off
			}
			Sombra
			{
				Hack Cooldown Time: 0%
				No Ammunition Requirement: On
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Generation - Combat EMP: 10%
				Ultimate Generation - Passive EMP: 500%
			}
			Symmetra
			{
				No Ammunition Requirement: On
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Sentry Turret: Off
				Teleporter Cooldown Time: 0%
				Ultimate Ability Photon Barrier: Off
			}
			Torbjörn
			{
				Deploy Turret: Off
				No Ammunition Requirement: On
				Overload Cooldown Time: 25%
				Secondary Fire: Off
				Ultimate Ability Molten Core: Off
				Weapons Enabled: Forge Hammer Only
			}
			Tracer
			{
				Damage Dealt: 10%
				Damage Received: 10%
				Movement Speed: 130%
				No Ammunition Requirement: On
				Primary Fire: Off
				Recall Cooldown Time: 1%
				Ultimate Ability Pulse Bomb: Off
			}
			Widowmaker
			{
				Grappling Hook Cooldown Time: 25%
				No Ammunition Requirement: On
				No Automatic Fire: On
				Quick Melee: Off
				Receive Headshots Only: On
				Ultimate Ability Infra-Sight: Off
				Venom Mine: Off
			}
			Winston
			{
				Barrier Projector: Off
				Damage Dealt: 10%
				Damage Received: 10%
				Health: 500%
				Infinite Ultimate Duration: On
				Jump Pack Knockback Scalar: 400%
				No Ammunition Requirement: On
				Primal Rage Melee Knockback Scalar: 300%
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
				Ultimate Generation - Combat Primal Rage: 500%
				Ultimate Generation - Passive Primal Rage: 500%
				Ultimate Generation Primal Rage: 500%
			}
			Zenyatta
			{
				Damage Dealt: 10%
				Damage Received: 10%
				No Ammunition Requirement: On
				Orb of Discord: Off
				Orb of Harmony: Off
				Primary Fire: Off
				Secondary Fire: Off
				Ultimate Ability Transcendence: Off
			}
			disabled heroes
			{
				Ashe
				Baptiste
				Hanzo
				Junkrat
				Moira
				Orisa
				Reaper
				Wrecking Ball
				Zarya
			}
		}
	}
}
variables {
    global:
        0: timeCounter
        1: roundTimer
        2: roundNumber
        3: playersStartOfTheRound
        4: heroList
        5: heroModeSelector
        7: heroOfTheRound
        8: heroesOfPreviousRounds
        9: minigameStringTitles
        10: minigameStringCodes
        11: minigameStringCredit
        12: minigameStringInstructions
        13: discordSubtringArray
        14: pointfeedHud
        15: pointfeedHudTimes
        16: pointfeedHudId
        17: pointfeedHudTimesIt
        18: hofPlayers
        19: hofPlayersCounter
        20: crownPos
        21: crownEffect
        22: tracerQueen
        23: soldierObjectivePos
        24: soldierObjectiveEffects
        25: soldierDestructorIt
        26: tracerQueenHud
        27: potatoPos
        28: potatoHolder
        29: potatoEffect
        30: potatoIcon
        31: commonRingsEffects
        32: rareRingsEffects
        33: epicRingsEffects
        34: legendaryRingsEffects
        35: commonRingsPos
        36: rareRingsPos
        37: epicRingsPos
        38: legendaryRingsPos
        39: ringsIt
        40: echoTeleportEffects
        41: echoTeleportPos
        42: echoRightHud
        43: dvaObjectivePos
        44: dvaObjectiveEffects
        45: dvaDestructorIt
        46: dvaObjectiveIcons
        47: roadhogHoleRadius
        48: roadhogHoleEffects
        49: roadhogHoleEffectsIt
        50: meiSnowEffects
        51: meiSnowPos
        52: meiSnowIt
        53: snotPos
        54: snotPosRandomXComp
        55: snotPosRandomYComp
        56: snotPosRandomZComp
        57: snotEffects
        58: destructorIt
        59: heroOfLastRound
        60: islandPartyCode
        61: islandPartySpecialEdition
        62: tracerQueenPositionIcon
        63: firstToX
        64: minigamesToggleArray
        65: workshopSettingsIt
        66: scoreToWin
        67: topScorerAfterAllMinigames
        68: symColorDeciding
        69: symPhase
        70: symColorSelected
        71: symColorsPositions
        72: symPlayersInTheSelectedColor
        73: symInnerRound
        74: symTimeToReachTheColor
        75: symSelectedColorHud
        76: symTimeToReachTheColorHud
        77: symColoredSpheresEffectsAndText
        78: symVictims
    player:
        0: queenPoints
        1: queenPointsHud
        2: soldierSprint
        3: soldierPoints
        4: soldierPointsHud
        5: mccreeInvincibleTime
        6: mccreeInvincibleText
        7: mccreeInvincibleHud
        8: mccreeHealthHud
        9: pharahHealEffect
        10: pharahDamageBoostEffect
        11: pharahHeal
        12: pharahDamageBoost
        13: pharahHealHud
        14: pharahDamageBoostHud
        15: echoPoints
        16: echoPointsHud
        17: echoClosestRing
        18: sigmaUsingGrasp
        19: sigmaCatch
        20: dvaPoints
        21: dvaPointsHud
        23: roadhogYanked
        24: dvaDistanceText
        25: roadhogFalling
        26: meiMeeleCatchCooldown
        27: meiAmmo
        28: meiClosestSnow
        29: meiIsPickingSnow
        30: meiPickingSnowTimer
        31: meiIsCatching
        32: meiCatchCooldownHud
        33: meiAmmoHud
        34: meiHasAmmoIcon
        35: thirdCameraDirection
        36: thirdCameraZoom
        37: isOnThirdCamera
        38: meiCrouchOnMeText
        39: meiHasPickedUpAnyAmmo
        40: lucioClosestSnotIcon
        41: meiCatchActiveCooldownHud
        42: meiCatchSphereEffect
        43: lucioSpeed
        44: lucioPoints
        45: lucioPointsHud
        46: lucioClosestSnot
        47: lucioHasBeenOnWall
        48: playerSpeedHud
        49: discordLinkForHofPlayersHud
        50: playerClosestObjectiveIcon
        51: reinLastAttacker
        52: reinAttackerCreditTimer
        53: reinTempUltCharge
        54: reinUltTimer
        55: reinIsAlive
        56: reinChargeCancelTimer
        57: reinChargeTimer
        58: reinCanCancelCharge
        59: reinAuraEffect
        60: reinUltHud
        61: reinExplosionCenter
        62: symFirstPlayerInColorText
        63: symOrdinalString
        64: symOrdinalPosHud
        65: symIn
        66: sombraHackedPostion
}
subroutines {
    0: gameModeDescriptionMessages
    1: startNewRound
    2: restartStats
    3: symTheColorIsSelectedTrigger
    4: symScoring
}
rule ("Is in setup {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is In Setup == True;
    }
    actions {
        Set Global Variable(roundTimer, 60);
        Enable Death Spectate All Players(All Players(All Teams));
        Disable Built-In Game Mode Respawning(All Players(All Teams));
        Set Respawn Max Time(All Players(All Teams), 60);
        Set Global Variable(islandPartyCode, Custom String("W468T"));
        Set Global Variable(islandPartySpecialEdition, Custom String(""));
        Set Global Variable(roundNumber, 0);
        Set Global Variable(heroList, Empty Array);
        Set Global Variable(heroesOfPreviousRounds, Empty Array);
        Set Global Variable(discordSubtringArray, Array(Custom String("vote for the next minigame"), Custom String("give feedback"), Custom String("report bugs")));
        Modify Global Variable(heroList, Append To Array, Hero(Ana));
        Modify Global Variable(heroList, Append To Array, Hero(Bastion));
        Modify Global Variable(heroList, Append To Array, Hero(Brigitte));
        Modify Global Variable(heroList, Append To Array, Hero(Doomfist));
        Modify Global Variable(heroList, Append To Array, Hero(D.Va));
        Modify Global Variable(heroList, Append To Array, Hero(Echo));
        Modify Global Variable(heroList, Append To Array, Hero(Genji));
        Modify Global Variable(heroList, Append To Array, Hero(Lúcio));
        Modify Global Variable(heroList, Append To Array, Hero(Cassidy));
        Modify Global Variable(heroList, Append To Array, Hero(Mei));
        Modify Global Variable(heroList, Append To Array, Hero(Mercy));
        Modify Global Variable(heroList, Append To Array, Hero(Pharah));
        Modify Global Variable(heroList, Append To Array, Hero(Reinhardt));
        Modify Global Variable(heroList, Append To Array, Hero(Roadhog));
        Modify Global Variable(heroList, Append To Array, Hero(Sigma));
        Modify Global Variable(heroList, Append To Array, Hero(Soldier: 76));
        Modify Global Variable(heroList, Append To Array, Hero(Sombra));
        Modify Global Variable(heroList, Append To Array, Hero(Symmetra));
        Modify Global Variable(heroList, Append To Array, Hero(Torbjörn));
        Modify Global Variable(heroList, Append To Array, Hero(Tracer));
        Modify Global Variable(heroList, Append To Array, Hero(Widowmaker));
        Modify Global Variable(heroList, Append To Array, Hero(Winston));
        Modify Global Variable(heroList, Append To Array, Hero(Zenyatta));
        Create HUD Text(All Players(All Teams), Custom String("CODE: {0}", Global.islandPartyCode), If-Then-Else(Compare(Global.islandPartyCode, ==, Custom String("W468T")), Custom String(""), Custom String("SPECIAL EDITION")), Global.islandPartySpecialEdition, Left, -998.5, Color(White), Color(Sky Blue), Color(White), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String("Island Party - Heroes Minigames v3.1.1-23"), Left, -998, Null, Color(White), Color(Orange), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Play rounds of {0}/23 classic and new games as minigames", Count Of(Global.heroList)), Left, -997, Null, Null, Color(White), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Join discord.io/IslandParty and {0}", Value In Array(Global.discordSubtringArray, Modulo(Global.roundNumber, 3))), Left, -996, Null, Null, Color(White), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Find all my codes in: jokaes.github.io"), Left, -995.5, Null, Null, Color(White), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Custom String("Created by Jokaes#2263"), Null, Left, -995, Null, Color(White), Null, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Custom String("  \n "), Null, Left, -994, Null, Color(White), Null, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Custom String("{0}", String("Round {0}", Global.roundNumber)), Null, Top, 2, Null, Color(White), Null, Visible To and String, Default Visibility);
        Wait(1.5, Ignore Condition);
        Set Global Variable(potatoPos, Vector(500, 500, 500));
        Create HUD Text(All Players(All Teams), Null, Null, Custom String(" \r\n		\r\n		\r\n		\r\n		\r\n		\r\n		"), Left, -999, Null, Null, Color(White), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Compare(Count Of(Global.hofPlayers), >, 0), All Players(All Teams), Empty Array), Null, Null, Custom String("Hall of fame"), Right, -600, Null, Null, Color(Orange), Visible To and Sort Order, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("CODE: {0}", Global.islandPartyCode), Vector(0, 200, 0), 4, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
        Wait(3.5, Ignore Condition);
        Communicate(All Players(All Teams), Countdown);
    }
}

rule ("Disable bulit-in game mode & start timer variables {Game in progress GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Disable Built-In Game Mode Completion;
        Disable Built-In Game Mode Music;
        Disable Built-In Game Mode Announcer;
        Disable Built-In Game Mode Scoring;
        Enable Death Spectate All Players(All Players(All Teams));
        Disable Built-In Game Mode Respawning(All Players(All Teams));
        Set Respawn Max Time(All Players(All Teams), 60);
        Pause Match Time;
        Set Global Variable(timeCounter, 0.001);
        Set Global Variable(roundTimer, 60);
        "Timer of the round HUD {Standard}"
        Create HUD Text(If-Then-Else(Compare(Global.roundTimer, >, 10), All Players(All Teams), Empty Array), Custom String(":{0}", Round To Integer(Global.roundTimer, To Nearest)), Null, Null, Right, -999, Color(White), Null, Null, Visible To and String, Default Visibility);
        "Timer of the round HUD {Last moments}"
        Create HUD Text(If-Then-Else(Compare(Global.roundTimer, <=, 10), All Players(All Teams), Empty Array), Custom String(":{0}", Round To Integer(Global.roundTimer, To Nearest)), Null, Null, Right, -999, Color(Red), Null, Null, Visible To and String, Default Visibility);
        "Timer of the round HUD separator"
        Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Right, -998, Null, Color(White), Null, Visible To and String, Default Visibility);
        "Creates a HUD in the top with [svr load: {0} | svr avg: {1} | svr peak: {2}] LOW LOAD(GREEN)"
        Create HUD Text(If-Then-Else(And(Compare(Divide(Add(Add(Server Load, Server Load Average), Server Load Peak), 3), <, 128), Compare(Custom String("#Jokaes"), ==, Custom String("#{0}", Host Player))), Host Player, Empty Array), Null, Custom String("svr load: {0} | svr avg: {1} | svr peak: {2}", Server Load, Server Load Average, Server Load Peak), Null, Top, -100, Null, Color(Lime Green), Null, Visible To and String, Default Visibility);
        "Creates a HUD in the top with [svr load: {0} | svr avg: {1} | svr peak: {2}] MID LOAD(ORANGE)"
        Create HUD Text(If-Then-Else(And(And(Compare(Divide(Add(Add(Server Load, Server Load Average), Server Load Peak), 3), >=, 128), Compare(Divide(Add(Add(Server Load, Server Load Average), Server Load Peak), 3), <=, 192)), Compare(Custom String("#Jokaes"), ==, Custom String("#{0}", Host Player))), Host Player, Empty Array), Null, Custom String("svr load: {0} | svr avg: {1} | svr peak: {2}", Server Load, Server Load Average, Server Load Peak), Null, Top, -100, Null, Color(Orange), Null, Visible To and String, Default Visibility);
        "Creates a HUD in the top with [svr load: {0} | svr avg: {1} | svr peak: {2}] HIGH LOAD(RED)"
        Create HUD Text(If-Then-Else(And(Compare(Divide(Add(Add(Server Load, Server Load Average), Server Load Peak), 3), >, 192), Compare(Custom String("#Jokaes"), ==, Custom String("#{0}", Host Player))), Host Player, Empty Array), Null, Custom String("svr load: {0} | svr avg: {1} | svr peak: {2}", Server Load, Server Load Average, Server Load Peak), Null, Top, -100, Null, Color(Red), Null, Visible To and String, Default Visibility);
        Set Global Variable(hofPlayers, Empty Array);
        Set Global Variable(pointfeedHud, Empty Array);
        Set Global Variable(pointfeedHudTimes, Array(True, True, True, True, True, True));
        Set Global Variable(pointfeedHudId, 0);
        Create HUD Text(All Players(All Teams), Value In Array(Global.minigameStringTitles, Global.heroModeSelector), Value In Array(Global.minigameStringCodes, Global.heroModeSelector), Value In Array(Global.minigameStringCredit, Global.heroModeSelector), Top, 0.001, Color(Orange), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Set Global Variable(playersStartOfTheRound, All Players(All Teams));
    }
}

rule ("Is game in progress {PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Start Rule(gameModeDescriptionMessages, Do Nothing);
        Enable Death Spectate All Players(Event Player);
        Disable Built-In Game Mode Respawning(Event Player);
        Set Respawn Max Time(Event Player, 60);
        Set Global Variable(playersStartOfTheRound, All Players(All Teams));
    }
}

rule ("Player join in setup") {
    event {
        Player Joined Match;
        All;
        All;
    }
    conditions {
        Is In Setup == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
    }
    actions {
        Wait(0.512, Ignore Condition);
        Start Forcing Player To Be Hero(Event Player, Global.heroOfTheRound);
        Set Respawn Max Time(Event Player, 9999);
    }
}

rule ("Player join with game in progress") {
    event {
        Player Joined Match;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
    }
    actions {
        Start Rule(gameModeDescriptionMessages, Do Nothing);
        Disable Built-In Game Mode Respawning(Event Player);
        Set Respawn Max Time(Event Player, 60);
        Wait(0.512, Ignore Condition);
        Start Forcing Player To Be Hero(Event Player, Global.heroOfTheRound);
        Teleport(Event Player, Vector(500, 500, 500));
        Clear Status(Event Player, Unkillable);
        Wait(0.512, Ignore Condition);
        Kill(Event Player, Null);
        Set Respawn Max Time(Event Player, 9999);
    }
}

rule ("String Arrays (Title, credit, code and instructions)") {
    event {
        Ongoing - Global;
    }
    actions {
        Create HUD Text(All Players(All Teams), Null, Null, Value In Array(Global.minigameStringInstructions, Global.heroModeSelector), Top, 1, Null, Null, Color(White), Visible To and String, Default Visibility);
        Set Global Variable(minigameStringTitles, Empty Array);
        "Ana"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} PAINTBALL {0}", Hero Icon String(Hero(Ana))));
        "Bastion"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} WORLD OF TANKS {0}", Hero Icon String(Hero(Bastion))));
        "Brigitte"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} BOOP {0}", Hero Icon String(Hero(Brigitte))));
        "Doomfist"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} DOOM SUMO {0}", Hero Icon String(Hero(Doomfist))));
        "D.Va"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} AIR RACE {0}", Hero Icon String(Hero(D.Va))));
        "Echo"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} RINGS {0}", Hero Icon String(Hero(Echo))));
        "Genji"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} DASH {0}", Hero Icon String(Hero(Genji))));
        "Lúcio"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} SNOT COLLECTOR {0}", Hero Icon String(Hero(Lúcio))));
        "McCree"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} HOT POTATO {0}", Hero Icon String(Hero(Cassidy))));
        "Mei"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} SNOWBALL {0}", Hero Icon String(Hero(Mei))));
        "Mercy"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} 1 PUNCH {0}", Hero Icon String(Hero(Mercy))));
        "Pharah"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} PHARMERCY SIMULATED {0}", Hero Icon String(Hero(Pharah))));
        "Reinhardt"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} LAST MAN BOUNCING {0}", Hero Icon String(Hero(Reinhardt))));
        "Roadhog"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} {1} HOOKS 1 HOLE {0}", Hero Icon String(Hero(Roadhog)), Number Of Living Players(All Teams)));
        "Sigma"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} DODGEBALL {0}", Hero Icon String(Hero(Sigma))));
        "Soldier: 76"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} SPRINT RACING {0}", Hero Icon String(Hero(Soldier: 76))));
        "Sombra"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} HACK TO KILL {0}", Hero Icon String(Hero(Sombra))));
        "Symmetra"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} TELEPORT TO THE COLOR {0}", Hero Icon String(Hero(Symmetra))));
        "Torbjörn"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} HAMMER ONLY {0}", Hero Icon String(Hero(Torbjörn))));
        "Tracer"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} STEAL THE CROWN {0}", Hero Icon String(Hero(Tracer))));
        "Widowmaker"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} HS ONLY {0}", Hero Icon String(Hero(Widowmaker))));
        "Winston"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} MONKEY SUMO {0}", Hero Icon String(Hero(Winston))));
        "Zenyatta"
        Modify Global Variable(minigameStringTitles, Append To Array, Custom String("{0} SPARTA {0}", Hero Icon String(Hero(Zenyatta))));
        Set Global Variable(minigameStringCodes, Empty Array);
        "Ana"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on 1950N"));
        "Bastion"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on 33NKS"));
        "Brigitte"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on 55MMT / ZYDQM"));
        "Doomfist"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on ZWE5E / 2A2YA"));
        "D.Va"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on DV5CA"));
        "Echo"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on XECF0"));
        "Genji"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on BBQ9Z"));
        "Lúcio"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on KAJAB"));
        "McCree"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on 9jane"));
        "Mei"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on MQCCY"));
        "Mercy"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on YWKSZ & AB7DJ"));
        "Pharah"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on DKKKD"));
        "Reinhardt"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on KXQZ1"));
        "Roadhog"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on DK0DP"));
        "Sigma"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on 8P769 / AN5P7"));
        "Soldier: 76"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on STJTC"));
        "Sombra"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on YJK0D6"));
        "Symmetra"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on BANWB"));
        "Torbjörn"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on PHGM1"));
        "Tracer"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on 0X8N0"));
        "Widowmaker"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on EA5XD"));
        "Winston"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on RA906"));
        "Zenyatta"
        Modify Global Variable(minigameStringCodes, Append To Array, Custom String("Play it more on ZENPM"));
        Set Global Variable(minigameStringCredit, Empty Array);
        "Ana"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY TOOTHPASTE"));
        "Bastion"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY JOKAES"));
        "Brigitte"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY FARRON / BLOCK"));
        "Doomfist"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY CREBOS & CLAMINIUM / KIKUGIE"));
        "D.Va"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY JOKAES"));
        "Echo"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY JOKAES"));
        "Genji"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY GANTZ"));
        "Lúcio"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY JOKAES"));
        "McCree"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY KEVLAR"));
        "Mei"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY MITSIEE"));
        "Mercy"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY PARACHOR"));
        "Pharah"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY SEITA"));
        "Reinhardt"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY KEVLAR & JINKO"));
        "Roadhog"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY BLOCK"));
        "Sigma"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY PUG / VOXCAE"));
        "Soldier: 76"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY DARWIN"));
        "Sombra"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY TEHFOOT"));
        "Symmetra"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY TEHFOOT"));
        "Torbjörn"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY JOKAES"));
        "Tracer"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY KEVLAR"));
        "Widowmaker"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY TOOTHPASTE"));
        "Winston"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY JOKAES"));
        "Zenyatta"
        Modify Global Variable(minigameStringCredit, Append To Array, Custom String("BY JOKAES. ORIGINAL CREATION BY DARWIN"));
        Set Global Variable(minigameStringInstructions, Empty Array);
        "Ana"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("One shoot to kill!"));
        "Bastion"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("BOO BEE BEE BEE BOO BEEEE!"));
        "Brigitte"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Protect yourself and boop the others!"));
        "Doomfist"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Use your punches to get them out!"));
        "D.Va"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Boost and race!"));
        "Echo"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Collect those rings!"));
        "Genji"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Dash!"));
        "Lúcio"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Collect snot from the walls to gain speed!"));
        "McCree"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Shoot to pass the hot potato!"));
        "Mei"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Pick up snow and shoot!"));
        "Mercy"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Punch to kill and get ultimate!"));
        "Pharah"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Kill'em all with your Mercy pocket simulated!"));
        "Reinhardt"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Survive, don't fall and knock them away!"));
        "Roadhog"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Yank'em into the hole!"));
        "Sigma"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Knock them out with your big rock!"));
        "Soldier: 76"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Gotta go fast!"));
        "Sombra"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Hack your opponents to kill'em!"));
        "Symmetra"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Teleport to the right color!"));
        "Torbjörn"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Overload and hammer down!"));
        "Tracer"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Meele to steal the crown!"));
        "Widowmaker"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Aim for the head!"));
        "Winston"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Ape kill ape!"));
        "Zenyatta"
        Modify Global Variable(minigameStringInstructions, Append To Array, Custom String("Kick them for Spartaaa!"));
    }
}

rule ("WORKSHOP SETTINGS") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is In Setup == True;
    }
    actions {
        Set Global Variable(firstToX, Workshop Setting Toggle(Custom String("WIN CONDITIONS"), Custom String("FIRST TO [X] POINTS - WIN STATE"), False, 0));
        Set Global Variable(scoreToWin, Workshop Setting Integer(Custom String("WIN CONDITIONS"), Custom String("SCORE TO WIN (30)"), 30, 15, 200, 0));
        Set Global Variable(topScorerAfterAllMinigames, Workshop Setting Toggle(Custom String("WIN CONDITIONS"), Custom String("TOP SCORER AFTER PLAYING ALL THE MINIGAMES"), False, 0));
        Set Global Variable(minigamesToggleArray, Null);
        For Global Variable(workshopSettingsIt, 0, Count Of(Global.heroList), 1);
            Modify Global Variable(minigamesToggleArray, Append To Array, False);
        End;
        Set Global Variable At Index(minigamesToggleArray, 0, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("ANA - PAINTBALL"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 1, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("BASTION - WORLD OF TANKS"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 2, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("BRIGITTE - BOOP"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 3, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("DOOMFIST - DOOM SUMO"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 4, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("DVA - AIR RACE"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 5, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("ECHO - RINGS"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 6, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("GENJI - DASH"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 7, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("LÚCIO - SNOT COLLECTOR"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 8, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("MCCREE - HOT POTATO"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 9, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("MEI - SNOWBALL"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 10, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("MERCY - 1 PUNCH"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 11, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("PHARA - PHARMERCY SIMULATED"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 12, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("REINHARDT - LAST MAN BOUNCING"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 13, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("ROADHOG - 12 HOOKS 1 HOLE"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 14, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("SIGMA - DODGEBALL"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 15, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("SOLDIER 76 - SPRINT RACING"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 16, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("SOMBRA - HACK TO KILL"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 17, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("SYMMETRA - TELEPORT TO THE COLOR"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 18, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("TORBJÖRN - HAMMER ONLY"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 19, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("TRACER - STEAL THE CROWN"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 20, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("WIDOWMAKER - HS ONLY"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 21, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("WINSTON - MONKEY SUMO"), True, 0));
        Set Global Variable At Index(minigamesToggleArray, 22, Workshop Setting Toggle(Custom String("HEROES MINIGAMES (2 MINIMUM)"), Custom String("ZENYATTA - SPARTA"), True, 0));
        For Global Variable(workshopSettingsIt, 0, Count Of(Global.heroList), 1);
            If(Compare(Value In Array(Global.minigamesToggleArray, Global.workshopSettingsIt), ==, False));
                Modify Global Variable(minigamesToggleArray, Remove From Array By Index, Global.workshopSettingsIt);
                Modify Global Variable(heroList, Remove From Array By Index, Global.workshopSettingsIt);
                Modify Global Variable(minigameStringTitles, Remove From Array By Index, Global.workshopSettingsIt);
                Modify Global Variable(minigameStringCodes, Remove From Array By Index, Global.workshopSettingsIt);
                Modify Global Variable(minigameStringCredit, Remove From Array By Index, Global.workshopSettingsIt);
                Modify Global Variable(minigameStringInstructions, Remove From Array By Index, Global.workshopSettingsIt);
                Modify Global Variable(workshopSettingsIt, Subtract, 1);
            End;
        End;
        Wait(0.25, Ignore Condition);
        If(Compare(Global.firstToX, ==, True));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("FIRST TO {0} POINTS EDITION", Global.scoreToWin), Top, 0.5, Null, Null, Color(Sky Blue), Visible To and String, Default Visibility);
        End;
        If(Compare(Global.topScorerAfterAllMinigames, ==, True));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("TOP SCORER AFTER ALL MINIGAMES EDITION"), Top, 0.5, Null, Null, Color(Sky Blue), Visible To and String, Default Visibility);
    }
}

rule ("Game Winner (First to X)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Score Of(Event Player) >= Global.scoreToWin;
        Global.firstToX == True;
    }
    actions {
        Declare Player Victory(Event Player);
    }
}

rule ("Game Winner (Top Scorer after all minigames)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.topScorerAfterAllMinigames == True;
        Global.roundNumber == Add(Count Of(Global.heroList), 1);
    }
    actions {
        Declare Player Victory(Last Of(Sorted Array(All Players(All Teams), Score Of(Current Array Element))));
    }
}

rule ("Time Counter - Add minute") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Set Match Time(Global.timeCounter);
        Wait(60, Ignore Condition);
        Modify Global Variable(timeCounter, Add, 1);
        Loop;
    }
}

rule ("Force players to be the hero of the round") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
    }
    actions {
        Start Forcing Player To Be Hero(Event Player, Global.heroOfTheRound);
    }
}

rule ("Create new round {SETUP}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is In Setup == True;
    }
    actions {
        Wait(0.048, Ignore Condition);
        Set Global Variable(heroOfTheRound, Random Value In Array(Global.heroList));
        Preload Hero(All Players(All Teams), Global.heroOfTheRound);
        Set Global Variable(heroModeSelector, Index Of Array Value(Global.heroList, Global.heroOfTheRound));
        Wait(0.272, Ignore Condition);
        Start Forcing Player To Be Hero(All Players(All Teams), Global.heroOfTheRound);
        Modify Global Variable(roundNumber, Add, 1);
        Small Message(All Players(All Teams), Custom String("ROUND {0}", Global.roundNumber));
        Set Global Variable(playersStartOfTheRound, All Players(All Teams));
        Set Global Variable(roundTimer, 60);
        Chase Global Variable At Rate(roundTimer, 0, 1, None);
    }
}

rule ("Create new round {OUT OF TIME}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.roundTimer <= 0;
        Is Game In Progress == True;
    }
    actions {
        Start Rule(startNewRound, Do Nothing);
    }
}

rule ("Create new round {LAST PLAYER ALIVE}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Number Of Living Players(All Teams) <= 1;
        Is Game In Progress == True;
    }
    actions {
        Start Rule(startNewRound, Do Nothing);
    }
}

rule ("startNewRound()") {
    event {
        Subroutine;
        startNewRound;
    }
    actions {
        Set Global Variable(roundTimer, 60);
        Start Rule(restartStats, Do Nothing);
        If(Compare(Count Of(Global.heroesOfPreviousRounds), ==, Subtract(Count Of(Global.heroList), 1)));
            Set Global Variable(heroesOfPreviousRounds, Empty Array);
        End;
        Set Global Variable(heroOfLastRound, Global.heroOfTheRound);
        Modify Global Variable(heroesOfPreviousRounds, Append To Array, Global.heroOfTheRound);
        Set Global Variable(heroOfTheRound, Null);
        Wait(0.048, Ignore Condition);
        Set Global Variable(heroOfTheRound, Random Value In Array(Remove From Array(Global.heroList, Global.heroesOfPreviousRounds)));
        Preload Hero(All Players(All Teams), Global.heroOfTheRound);
        Set Global Variable(heroModeSelector, Index Of Array Value(Global.heroList, Global.heroOfTheRound));
        Respawn(All Players(All Teams));
        Resurrect(All Players(All Teams));
        Wait(0.272, Ignore Condition);
        Wait(0.272, Ignore Condition);
        Start Forcing Player To Be Hero(All Players(All Teams), Global.heroOfTheRound);
        Modify Global Variable(roundNumber, Add, 1);
        Small Message(All Players(All Teams), Custom String("ROUND {0}", Global.roundNumber));
        Set Global Variable(playersStartOfTheRound, All Players(All Teams));
        Start Forcing Throttle(All Players(All Teams), 0, 0, 0, 0, 0, 0);
        Set Aim Speed(All Players(All Teams), 0);
        Wait(0.75, Ignore Condition);
        Stop Forcing Throttle(All Players(All Teams));
        Set Aim Speed(All Players(All Teams), 100);
        Chase Global Variable At Rate(roundTimer, 0, 1, None);
    }
}

rule ("restartStats()") {
    event {
        Subroutine;
        restartStats;
    }
    actions {
        Set Move Speed(All Players(All Teams), 100);
        Set Gravity(All Players(All Teams), 100);
    }
}

rule ("Description and credit (Small Messages)") {
    event {
        Subroutine;
        gameModeDescriptionMessages;
    }
    actions {
        Wait(3.5, Ignore Condition);
        Small Message(Event Player, Custom String("Island Party - Heroes Minigames v3.1.1-23"));
        Wait(3.5, Ignore Condition);
        Small Message(Event Player, Custom String("Play rounds of {0}/23 minigames", Count Of(Global.heroList)));
        Wait(3.5, Ignore Condition);
        Small Message(Event Player, Custom String("Created by Jokaes#2263"));
    }
}

rule ("On kill: full heal") {
    event {
        Player Dealt Final Blow;
        All;
        All;
    }
    conditions {
        Victim != Event Player;
        Hero Of(Event Player) != Hero(Ana);
        Hero Of(Event Player) != Hero(Brigitte);
        Hero Of(Event Player) != Hero(Doomfist);
        Hero Of(Event Player) != Hero(D.Va);
        Hero Of(Event Player) != Hero(Echo);
        Hero Of(Event Player) != Hero(Cassidy);
        Hero Of(Event Player) != Hero(Mei);
        Hero Of(Event Player) != Hero(Mercy);
        Hero Of(Event Player) != Hero(Pharah);
        Hero Of(Event Player) != Hero(Reinhardt);
        Hero Of(Event Player) != Hero(Roadhog);
        Hero Of(Event Player) != Hero(Sigma);
        Hero Of(Event Player) != Hero(Soldier: 76);
        Hero Of(Event Player) != Hero(Sombra);
        Hero Of(Event Player) != Hero(Symmetra);
        Hero Of(Event Player) != Hero(Tracer);
        Hero Of(Event Player) != Hero(Winston);
        Hero Of(Event Player) != Hero(Zenyatta);
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player, 1);
        Heal(Event Player, Null, Max Health(Event Player));
    }
}

rule ("On kill: cooldown reset") {
    event {
        Player Dealt Final Blow;
        All;
        All;
    }
    conditions {
        Victim != Event Player;
        Hero Of(Event Player) != Hero(Ana);
        Hero Of(Event Player) != Hero(Echo);
        Hero Of(Event Player) != Hero(Cassidy);
        Hero Of(Event Player) != Hero(Sigma);
        Hero Of(Event Player) != Hero(Symmetra);
        Hero Of(Event Player) != Hero(Tracer);
        Hero Of(Event Player) != Hero(Winston);
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
        Set Ability Cooldown(Event Player, Button(Ability 1), 0);
        Set Ability Cooldown(Event Player, Button(Ability 2), 0);
    }
}

rule ("On kill: score") {
    event {
        Player Dealt Final Blow;
        All;
        All;
    }
    conditions {
        Victim != Event Player;
        Hero Of(Event Player) != Hero(D.Va);
        Hero Of(Event Player) != Hero(Echo);
        Hero Of(Event Player) != Hero(Cassidy);
        Hero Of(Event Player) != Hero(Reinhardt);
        Hero Of(Event Player) != Hero(Sigma);
        Hero Of(Event Player) != Hero(Symmetra);
        Hero Of(Event Player) != Hero(Tracer);
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
        Modify Player Score(Event Player, 1);
        Small Message(Event Player, Custom String("+1 point with {0} {1}", Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
        Wait(0.032, Ignore Condition);
        Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+1 point"), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
        Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
        Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
        Modify Global Variable(pointfeedHudId, Subtract, 0.01);
    }
}

rule ("Last seconds sound") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.roundTimer <= 5;
    }
    actions {
        Play Effect(Event Player, Explosion Sound, Color(White), Event Player, 200);
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("HUD Pointfeed reduce times") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is True For Any(Global.pointfeedHudTimes, Compare(Current Array Element, ==, 3.744)) == True;
    }
    actions {
        While(True);
            For Global Variable(pointfeedHudTimesIt, 0, Count Of(Global.pointfeedHudTimes), 1);
                If(Compare(Value In Array(Global.pointfeedHudTimes, Global.pointfeedHudTimesIt), >, 0));
                    Modify Global Variable At Index(pointfeedHudTimes, Global.pointfeedHudTimesIt, Subtract, 0.016);
                End;
            End;
            Wait(0.016, Ignore Condition);
        End;
    }
}

rule ("Destroy HUD Pointfeed {more than 6}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Count Of(Global.pointfeedHud) > 6;
    }
    actions {
        While(Compare(Count Of(Global.pointfeedHud), >, 6));
            Destroy HUD Text(First Of(Global.pointfeedHud));
            Modify Global Variable(pointfeedHud, Remove From Array By Index, 0);
            Wait(0.032, Ignore Condition);
        End;
    }
}

rule ("Destroy HUD Pointfeed {time}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is True For Any(Global.pointfeedHudTimes, Compare(Current Array Element, <=, 0)) == True;
    }
    actions {
        While(True);
            For Global Variable(pointfeedHudTimesIt, 0, Count Of(Global.pointfeedHudTimes), 1);
                If(Compare(Value In Array(Global.pointfeedHudTimes, Global.pointfeedHudTimesIt), <=, 0));
                    Destroy HUD Text(Value In Array(Global.pointfeedHud, Global.pointfeedHudTimesIt));
                    Modify Global Variable(pointfeedHud, Remove From Array By Index, Global.pointfeedHudTimesIt);
                    Modify Global Variable(pointfeedHudTimes, Remove From Array By Index, Global.pointfeedHudTimesIt);
                End;
            End;
            Wait(0.016, Ignore Condition);
        End;
    }
}

rule ("Reset HUD Pointfeed ID") {
    event {
        Ongoing - Global;
    }
    conditions {
        Count Of(Global.pointfeedHud) == 0;
    }
    actions {
        Set Global Variable(pointfeedHudId, 0);
    }
}

rule ("HoF player HUD") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.hofPlayersCounter != Count Of(Global.hofPlayers);
    }
    actions {
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}", Last Of(Global.hofPlayers)), Right, -500, Null, Null, Color(Orange), Visible To and Sort Order, Default Visibility);
        Set Global Variable(hofPlayersCounter, Count Of(Global.hofPlayers));
    }
}

rule ("Hof append") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        If(Compare(Score Of(Event Player), >=, 120));
            If(Not(Array Contains(Global.hofPlayers, Custom String("{0}", Event Player))));
                Modify Global Variable(hofPlayers, Append To Array, Custom String("{0}", Event Player));
            End;
        End;
        Wait(10, Ignore Condition);
        Loop;
    }
}

rule ("HoF effect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Score Of(Event Player) >= 120;
    }
    actions {
        Create HUD Text(Event Player, Custom String("You seam to enjoy this mode. You should join discord.io/IslandParty {0}", Icon String(Happy)), Null, Null, Top, 1000, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, discordLinkForHofPlayersHud, Last Text ID);
        "createEffect([player for player in getAllPlayers() if eventPlayer.isAlive()], Effect.SPARKLES, Color.ORANGE, eventPlayer, 1, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)"
        Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 200);
        Wait(1, Ignore Condition);
        Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 200);
        Wait(1, Ignore Condition);
        Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
        Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 200);
        Wait(1, Ignore Condition);
        Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
        Wait(75, Ignore Condition);
        Destroy HUD Text((Event Player).discordLinkForHofPlayersHud);
    }
}

rule ("HoF outlines") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Score Of(Event Player) >= 120;
    }
    actions {
        Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Blue), Default);
        Wait(0.192, Ignore Condition);
        Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Green), Default);
        Wait(0.192, Ignore Condition);
        Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Orange), Default);
        Wait(0.192, Ignore Condition);
        Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Purple), Default);
        Wait(0.192, Ignore Condition);
        Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Red), Default);
        Wait(0.192, Ignore Condition);
        Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Turquoise), Default);
        Wait(0.192, Ignore Condition);
        Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(White), Default);
        Wait(0.192, Ignore Condition);
        Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Yellow), Default);
        Wait(0.192, Ignore Condition);
        Loop;
    }
}

rule ("----- HEROES -----") {
    event {
        Ongoing - Global;
    }
}

rule ("ANA on kill") {
    event {
        Player Dealt Final Blow;
        All;
        Ana;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Ana);
    }
    actions {
        While(Is Using Ability 1(Event Player));
            Wait(0.032, Ignore Condition);
        End;
        Set Ability Cooldown(Event Player, Button(Ability 1), 0);
    }
}

rule ("BASTION tank") {
    event {
        Ongoing - Each Player;
        All;
        Bastion;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Bastion);
        Is Using Ultimate(Event Player) == False;
    }
    actions {
        Press Button(Event Player, Button(Ultimate));
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("BRIG init") {
    event {
        Ongoing - Each Player;
        All;
        Brigitte;
    }
    conditions {
        Global.heroOfTheRound == Hero(Brigitte);
        Is Game In Progress == True;
    }
    actions {
        Wait(0.032, Ignore Condition);
        Set Status(Event Player, Null, Unkillable, Global.roundTimer);
    }
}

rule ("BRIG standard gravity") {
    event {
        Ongoing - Each Player;
        All;
        Brigitte;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Brigitte);
        Is Firing Secondary(Event Player) == False;
        Has Status(Event Player, Stunned) == False;
    }
    actions {
        Set Gravity(Event Player, 100);
    }
}

rule ("BRIG shield gravity") {
    event {
        Ongoing - Each Player;
        All;
        Brigitte;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Brigitte);
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        Set Gravity(Event Player, 200);
    }
}

rule ("BRIG stunned gravity & longer stun") {
    event {
        Ongoing - Each Player;
        All;
        Brigitte;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Brigitte);
        Has Status(Event Player, Stunned) == True;
    }
    actions {
        Set Gravity(Event Player, 25);
        Set Status(Event Player, Null, Stunned, 1.5);
    }
}

rule ("BRIG speed-boosted shield bash") {
    event {
        Ongoing - Each Player;
        All;
        Brigitte;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Brigitte);
        Is Firing Primary(Event Player) == True;
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        Set Move Speed(Event Player, 200);
        Wait(0.25, Ignore Condition);
        Set Move Speed(Event Player, 100);
    }
}

rule ("BRIG ult cooldown reset") {
    event {
        Ongoing - Each Player;
        All;
        Brigitte;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Brigitte);
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
        Set Ability Cooldown(Event Player, Button(Ability 1), 0);
    }
}

rule ("BRIG auto-healing") {
    event {
        Ongoing - Each Player;
        All;
        Brigitte;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Brigitte);
        Health(Event Player) < Max Health(Event Player);
    }
    actions {
        Heal(Event Player, Null, Max Health(Event Player));
        Wait(0.032, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("BRIG end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Brigitte);
        Global.heroOfLastRound == Hero(Brigitte);
    }
    actions {
        Clear Status(Event Player, Unkillable);
        Set Gravity(Event Player, 100);
        Set Move Speed(Event Player, 100);
    }
}

rule ("DOOM init player") {
    event {
        Ongoing - Each Player;
        All;
        Doomfist;
    }
    conditions {
        Global.heroOfTheRound == Hero(Doomfist);
        Is Game In Progress == True;
    }
    actions {
        Wait(0.064, Ignore Condition);
        Disallow Button(Event Player, Button(Primary Fire));
    }
}

rule ("DOOM ult stun") {
    event {
        Player Dealt Damage;
        All;
        Doomfist;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Doomfist);
        Is Using Ultimate(Attacker) == True;
    }
    actions {
        Set Status(Victim, Event Player, Stunned, 3);
    }
}

rule ("DOOM not using ult") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Doomfist);
        Is Using Ultimate(Event Player) == False;
    }
    actions {
        Set Move Speed(Event Player, 100);
        Disallow Button(Event Player, Button(Primary Fire));
    }
}

rule ("DOOM using ult") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Doomfist);
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        Set Move Speed(Event Player, 150);
        Allow Button(Event Player, Button(Primary Fire));
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
        Set Ability Cooldown(Event Player, Button(Ability 1), 0);
    }
}

rule ("DOOM end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Doomfist);
        Global.heroOfLastRound == Hero(Doomfist);
    }
    actions {
        Allow Button(Event Player, Button(Primary Fire));
    }
}

rule ("DVA init player") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.heroOfTheRound == Hero(D.Va);
        Is Alive(Event Player) == True;
        Is Game In Progress == True;
        Is In Alternate Form(Event Player) == False;
        (Event Player).dvaPointsHud == Null;
    }
    actions {
        Set Player Variable(Event Player, dvaPointsHud, Null);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), First Of(Global.dvaObjectivePos)), To World);
        Set Status(Event Player, Null, Phased Out, 60);
        Wait(0.256, Ignore Condition);
        Teleport(Event Player, Vector(0, 0, 0));
        Set Player Variable(Event Player, dvaPoints, 0);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), First Of(Global.dvaObjectivePos)), To World);
        Set Status(Event Player, Null, Phased Out, 60);
        Set Status(Event Player, Null, Unkillable, Global.roundTimer);
        If(Compare((Event Player).dvaPointsHud, ==, Null));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}: {1}/5", Event Player, (Event Player).dvaPoints), Left, Multiply(Add((Event Player).dvaPoints, 10), -1), Null, Null, Color(Purple), Visible To Sort Order and String, Default Visibility);
            Set Player Variable(Event Player, dvaPointsHud, Last Text ID);
        End;
        Create In-World Text(Event Player, Custom String("{0} M", Distance Between(Position Of(Event Player), Value In Array(Global.dvaObjectivePos, (Event Player).dvaPoints))), Value In Array(Global.dvaObjectivePos, (Event Player).dvaPoints), 2, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable(Event Player, dvaDistanceText, Last Text ID);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), First Of(Global.dvaObjectivePos)), To World);
        Create Icon(Event Player, Add(Value In Array(Global.dvaObjectivePos, (Event Player).dvaPoints), Vector(0, 1.5, 0)), Flag, Visible To and Position, Color(Purple), True);
        Set Player Variable(Event Player, playerClosestObjectiveIcon, Last Created Entity);
        Set Gravity(Event Player, 0);
    }
}

rule ("DVA init global") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.heroOfTheRound == Hero(D.Va);
    }
    actions {
        Set Global Variable(dvaObjectiveEffects, Empty Array);
        Set Global Variable(dvaObjectiveIcons, Empty Array);
        Set Global Variable(dvaObjectivePos, Array(Vector(Random Real(-100, 100), Random Real(45, 100), Random Real(-100, 100)), Vector(Random Real(-100, 100), Random Real(45, 100), Random Real(-100, 100)), Vector(Random Real(-100, 100), Random Real(45, 100), Random Real(-100, 100)), Vector(Random Real(-100, 100), Random Real(45, 100), Random Real(-100, 100)), Vector(Random Real(-100, 100), Random Real(45, 100), Random Real(-100, 100))));
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 0)), Good Aura, Color(Purple), First Of(Global.dvaObjectivePos), 3, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 0)), Good Aura, Color(Purple), First Of(Global.dvaObjectivePos), 2, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 0)), Good Aura, Color(Purple), First Of(Global.dvaObjectivePos), 1, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 1)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 1), 3, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 1)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 1), 2, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 1)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 1), 1, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 2)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 2), 3, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 2)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 2), 2, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 2)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 2), 1, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 3)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 3), 3, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 3)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 3), 2, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 3)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 3), 1, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 4)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 4), 3, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 4)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 4), 2, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).dvaPoints, ==, 4)), Good Aura, Color(Purple), Value In Array(Global.dvaObjectivePos, 4), 1, Visible To Position and Radius);
        Modify Global Variable(dvaObjectiveEffects, Append To Array, Last Created Entity);
    }
}

rule ("DVA point") {
    event {
        Ongoing - Each Player;
        All;
        D.Va;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(D.Va);
        (Event Player).dvaPoints < 5;
        Distance Between(Position Of(Event Player), Value In Array(Global.dvaObjectivePos, (Event Player).dvaPoints)) <= 7.5;
    }
    actions {
        Modify Player Score(Event Player, 1);
        Small Message(Event Player, Custom String("+1 point with {0} {1}", Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
        Modify Player Variable(Event Player, dvaPoints, Add, 1);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Purple), Event Player, 1);
        Play Effect(Event Player, Buff Explosion Sound, Color(Purple), Event Player, 100);
        Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+1 point"), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
        Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
        Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
        Modify Global Variable(pointfeedHudId, Subtract, 0.01);
    }
}

rule ("DVA boosting") {
    event {
        Ongoing - Each Player;
        All;
        D.Va;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(D.Va);
        Is Using Ability 1(Event Player) == True;
    }
    actions {
        Set Move Speed(Event Player, 500);
        Set Gravity(Event Player, 0);
    }
}

rule ("DVA not boosting in air") {
    event {
        Ongoing - Each Player;
        All;
        D.Va;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(D.Va);
        Is Using Ability 1(Event Player) == False;
        Is In Air(Event Player) == True;
    }
    actions {
        Set Move Speed(Event Player, 10);
        Set Gravity(Event Player, 0);
    }
}

rule ("DVA not boosting on ground") {
    event {
        Ongoing - Each Player;
        All;
        D.Va;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(D.Va);
        Is Using Ability 1(Event Player) == False;
        Is On Ground(Event Player) == True;
    }
    actions {
        Set Move Speed(Event Player, 100);
        Set Gravity(Event Player, 100);
    }
}

disabled rule ("DVA brake") {
    event {
        Ongoing - Each Player;
        All;
        D.Va;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(D.Va);
        Is Button Held(Event Player, Button(Crouch)) == True;
    }
    actions {
        Cancel Primary Action(Event Player);
        Wait(0.048, Ignore Condition);
        "eventPlayer.applyImpulse(Vector.RIGHT, 0.001, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)\neventPlayer.applyImpulse(Vector.LEFT, 0.001, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)"
        Start Accelerating(Event Player, Multiply(Facing Direction Of(Event Player), -1), 100, Speed Of(Event Player), To World, Direction Rate and Max Speed);
        "wait(1)"
        Wait(0.4, Ignore Condition);
        Stop Accelerating(Event Player);
    }
}

rule ("DVA baby call mecha") {
    event {
        Ongoing - Each Player;
        All;
        D.Va;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(D.Va);
        Is In Alternate Form(Event Player) == True;
    }
    actions {
        Set Ultimate Charge(Event Player, 100);
        Press Button(Event Player, Button(Ultimate));
        Wait(0.016, Ignore Condition);
        Set Status(Event Player, Null, Phased Out, 60);
        Set Status(Event Player, Null, Unkillable, Global.roundTimer);
        Loop If Condition Is True;
    }
}

rule ("DVA winner") {
    event {
        Ongoing - Each Player;
        All;
        D.Va;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(D.Va);
        (Event Player).dvaPoints >= 5;
    }
    actions {
        Set Global Variable(roundTimer, 0.032);
    }
}

rule ("DVA end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(D.Va);
        Global.heroOfLastRound == Hero(D.Va);
    }
    actions {
        Set Global Variable(dvaDestructorIt, 0);
        For Global Variable(dvaDestructorIt, 0, Count Of(Global.dvaObjectiveEffects), 1);
            Destroy Effect(Value In Array(Global.dvaObjectiveEffects, Global.dvaDestructorIt));
            Destroy Icon(Value In Array(Global.dvaObjectiveIcons, Global.dvaDestructorIt));
        End;
    }
}

rule ("DVA end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(D.Va);
        Global.heroOfLastRound == Hero(D.Va);
    }
    actions {
        Set Player Variable(Event Player, dvaPoints, 0);
        Wait(0.016, Ignore Condition);
        Clear Status(Event Player, Phased Out);
        Clear Status(Event Player, Unkillable);
        Set Gravity(Event Player, 100);
        Set Move Speed(Event Player, 100);
        Stop Accelerating(Event Player);
        Wait(0.512, Ignore Condition);
        Destroy HUD Text((Event Player).dvaPointsHud);
        Destroy In-World Text((Event Player).dvaDistanceText);
        Destroy Icon((Event Player).playerClosestObjectiveIcon);
        Wait(0.064, Ignore Condition);
        Set Player Variable(Event Player, dvaPointsHud, Null);
    }
}

rule ("ECHO init player") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Global.heroOfTheRound == Hero(Echo);
        Is Alive(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, echoPointsHud, Null);
        Set Player Variable(Event Player, echoPoints, 0);
        Wait(1, Ignore Condition);
        If(Compare((Event Player).echoPointsHud, ==, Null));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}: {1}/40 = {2}/4 points", Event Player, (Event Player).echoPoints, Round To Integer(Divide((Event Player).echoPoints, 10), Down)), Left, Multiply(Add((Event Player).echoPoints, 10), -1), Null, Null, Color(Aqua), Visible To Sort Order and String, Default Visibility);
            Set Player Variable(Event Player, echoPointsHud, Last Text ID);
        End;
        Set Status(Event Player, Null, Unkillable, Global.roundTimer);
    }
}

rule ("ECHO init global") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.heroOfTheRound == Hero(Echo);
    }
    actions {
        "Creates the array to store the effects of the common rings"
        Set Global Variable(commonRingsEffects, Empty Array);
        "Creates the array to store the positions of the common rings"
        Set Global Variable(commonRingsPos, Empty Array);
        "Append to the array commonRingsPos the not random common ring position"
        Modify Global Variable(commonRingsPos, Append To Array, Vector(0, 16, 0));
        "Append to the array commonRingsPos a new position"
        Modify Global Variable(commonRingsPos, Append To Array, Vector(Random Real(-32, 32), Random Real(2, 32), Random Real(-32, 32)));
        "Append to the array commonRingsPos a new position"
        Modify Global Variable(commonRingsPos, Append To Array, Vector(Random Real(-32, 32), Random Real(2, 32), Random Real(-32, 32)));
        "Append to the array commonRingsPos a new position"
        Modify Global Variable(commonRingsPos, Append To Array, Vector(Random Real(-32, 32), Random Real(2, 32), Random Real(-32, 32)));
        "Append to the array commonRingsPos a new position"
        Modify Global Variable(commonRingsPos, Append To Array, Vector(Random Real(-32, 32), Random Real(2, 32), Random Real(-32, 32)));
        "Append to the array commonRingsPos a new position"
        Modify Global Variable(commonRingsPos, Append To Array, Vector(Random Real(-32, 32), Random Real(2, 32), Random Real(-32, 32)));
        "Append to the array commonRingsPos a new position"
        Modify Global Variable(commonRingsPos, Append To Array, Vector(Random Real(-32, 32), Random Real(2, 32), Random Real(-32, 32)));
        "Append to the array commonRingsPos a new position"
        Modify Global Variable(commonRingsPos, Append To Array, Vector(Random Real(-32, 32), Random Real(2, 32), Random Real(-32, 32)));
        "Creates the not random common ring"
        Create Effect(All Players(All Teams), Good Aura, Color(White), First Of(Global.commonRingsPos), 1, Visible To Position and Radius);
        "Append the last created common ring to commonRingsEffects"
        Modify Global Variable(commonRingsEffects, Append To Array, Last Created Entity);
        "Create a common ring effect in the position in commonRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(White), Value In Array(Global.commonRingsPos, 1), 1, Visible To Position and Radius);
        "Append the last created common ring to commonRingsEffects"
        Modify Global Variable(commonRingsEffects, Append To Array, Last Created Entity);
        "Create a common ring effect in the position in commonRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(White), Value In Array(Global.commonRingsPos, 2), 1, Visible To Position and Radius);
        "Append the last created common ring to commonRingsEffects"
        Modify Global Variable(commonRingsEffects, Append To Array, Last Created Entity);
        "Create a common ring effect in the position in commonRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(White), Value In Array(Global.commonRingsPos, 3), 1, Visible To Position and Radius);
        "Append the last created common ring to commonRingsEffects"
        Modify Global Variable(commonRingsEffects, Append To Array, Last Created Entity);
        "Create a common ring effect in the position in commonRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(White), Value In Array(Global.commonRingsPos, 4), 1, Visible To Position and Radius);
        "Append the last created common ring to commonRingsEffects"
        Modify Global Variable(commonRingsEffects, Append To Array, Last Created Entity);
        "Create a common ring effect in the position in commonRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(White), Value In Array(Global.commonRingsPos, 5), 1, Visible To Position and Radius);
        "Append the last created common ring to commonRingsEffects"
        Modify Global Variable(commonRingsEffects, Append To Array, Last Created Entity);
        "Create a common ring effect in the position in commonRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(White), Value In Array(Global.commonRingsPos, 6), 1, Visible To Position and Radius);
        "Append the last created common ring to commonRingsEffects"
        Modify Global Variable(commonRingsEffects, Append To Array, Last Created Entity);
        "Create a common ring effect in the position in commonRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(White), Value In Array(Global.commonRingsPos, 7), 1, Visible To Position and Radius);
        "Append the last created common ring to commonRingsEffects"
        Modify Global Variable(commonRingsEffects, Append To Array, Last Created Entity);
        "Creates the array to store the effects of the rare rings"
        Set Global Variable(rareRingsEffects, Empty Array);
        "Creates the array to store the positions of the rare rings"
        Set Global Variable(rareRingsPos, Empty Array);
        "Append to the array rareRingsPos a new position"
        Modify Global Variable(rareRingsPos, Append To Array, Vector(Random Real(-36, 36), Random Real(2, 36), Random Real(-36, 36)));
        "Append to the array rareRingsPos a new position"
        Modify Global Variable(rareRingsPos, Append To Array, Vector(Random Real(-36, 36), Random Real(2, 36), Random Real(-36, 36)));
        "Append to the array rareRingsPos a new position"
        Modify Global Variable(rareRingsPos, Append To Array, Vector(Random Real(-36, 36), Random Real(2, 36), Random Real(-36, 36)));
        "Append to the array rareRingsPos a new position"
        Modify Global Variable(rareRingsPos, Append To Array, Vector(Random Real(-36, 36), Random Real(2, 36), Random Real(-36, 36)));
        "Append to the array rareRingsPos a new position"
        Modify Global Variable(rareRingsPos, Append To Array, Vector(Random Real(-36, 36), Random Real(2, 36), Random Real(-36, 36)));
        "Append to the array rareRingsPos a new position"
        Modify Global Variable(rareRingsPos, Append To Array, Vector(Random Real(-36, 36), Random Real(2, 36), Random Real(-36, 36)));
        "Create a rare ring effect in the position in rareRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Aqua), First Of(Global.rareRingsPos), 1, Visible To Position and Radius);
        "Append the last created rare ring to rareRingsEffects"
        Modify Global Variable(rareRingsEffects, Append To Array, Last Created Entity);
        "Create a rare ring effect in the position in rareRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Aqua), Value In Array(Global.rareRingsPos, 1), 1, Visible To Position and Radius);
        "Append the last created rare ring to rareRingsEffects"
        Modify Global Variable(rareRingsEffects, Append To Array, Last Created Entity);
        "Create a rare ring effect in the position in rareRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Aqua), Value In Array(Global.rareRingsPos, 2), 1, Visible To Position and Radius);
        "Append the last created rare ring to rareRingsEffects"
        Modify Global Variable(rareRingsEffects, Append To Array, Last Created Entity);
        "Create a rare ring effect in the position in rareRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Aqua), Value In Array(Global.rareRingsPos, 3), 1, Visible To Position and Radius);
        "Append the last created rare ring to rareRingsEffects"
        Modify Global Variable(rareRingsEffects, Append To Array, Last Created Entity);
        "Create a rare ring effect in the position in rareRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Aqua), Value In Array(Global.rareRingsPos, 4), 1, Visible To Position and Radius);
        "Append the last created rare ring to rareRingsEffects"
        Modify Global Variable(rareRingsEffects, Append To Array, Last Created Entity);
        "Create a rare ring effect in the position in rareRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Aqua), Value In Array(Global.rareRingsPos, 5), 1, Visible To Position and Radius);
        "Append the last created rare ring to rareRingsEffects"
        Modify Global Variable(rareRingsEffects, Append To Array, Last Created Entity);
        "Creates the array to store the effects of the epic rings"
        Set Global Variable(epicRingsEffects, Empty Array);
        "Creates the array to store the positions of the epic rings"
        Set Global Variable(epicRingsPos, Empty Array);
        "Append to the array epicRingsPos a new position"
        Modify Global Variable(epicRingsPos, Append To Array, Vector(Random Real(-44, 44), Random Real(2, 44), Random Real(-44, 44)));
        "Append to the array epicRingsPos a new position"
        Modify Global Variable(epicRingsPos, Append To Array, Vector(Random Real(-44, 44), Random Real(2, 44), Random Real(-44, 44)));
        "Create a epic ring effect in the position in epicRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Purple), First Of(Global.epicRingsPos), 1, Visible To Position and Radius);
        "Append the last created epic ring to epicRingsEffects"
        Modify Global Variable(epicRingsEffects, Append To Array, Last Created Entity);
        "Create a epic ring effect in the position in epicRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Purple), Value In Array(Global.epicRingsPos, 1), 1, Visible To Position and Radius);
        "Append the last created epic ring to epicRingsEffects"
        Modify Global Variable(epicRingsEffects, Append To Array, Last Created Entity);
        "Creates the array to store the effects of the legendary rings"
        Set Global Variable(legendaryRingsEffects, Empty Array);
        "Creates the array to store the positions of the legendary rings"
        Set Global Variable(legendaryRingsPos, Empty Array);
        "Append to the array legendaryRingsPos a new position"
        Modify Global Variable(legendaryRingsPos, Append To Array, Vector(Random Real(-48, 48), Random Real(2, 48), Random Real(-48, 48)));
        "Create a legendary ring effect in the position in legendaryRingsPos"
        Create Effect(All Players(All Teams), Good Aura, Color(Orange), First Of(Global.legendaryRingsPos), 1, Visible To Position and Radius);
        "Append the last created legendary ring to legendaryRingsEffects"
        Modify Global Variable(legendaryRingsEffects, Append To Array, Last Created Entity);
        "Creates the array to store the effects of the teleport orbs"
        Set Global Variable(echoTeleportEffects, Empty Array);
        "Creates the array to store the positions of the teleport orbs"
        Set Global Variable(echoTeleportPos, Empty Array);
        "Append to the array echoTeleportPos a new position"
        Modify Global Variable(echoTeleportPos, Append To Array, Vector(Random Real(-40, 40), Random Real(2, 40), Random Real(-40, 40)));
        "Create a teleport orb effect in the position in echoTeleportPos"
        Create Effect(All Players(All Teams), Orb, Color(Green), First Of(Global.echoTeleportPos), 1, Visible To Position and Radius);
        "Append the last created teleport orb to echoTeleportEffects"
        Modify Global Variable(echoTeleportEffects, Append To Array, Last Created Entity);
        "Append to the array echoTeleportPos a new position"
        Modify Global Variable(echoTeleportPos, Append To Array, Vector(Random Real(-40, 40), Random Real(2, 40), Random Real(-40, 40)));
        "Create a boost orb effect in the position in echoTeleportPos"
        Create Effect(All Players(All Teams), Orb, Color(Green), Value In Array(Global.echoTeleportPos, 1), 1, Visible To Position and Radius);
        "Append the last created teleport orb to echoTeleportEffects"
        Modify Global Variable(echoTeleportEffects, Append To Array, Last Created Entity);
        Set Global Variable(echoRightHud, Empty Array);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String(" \n"), Right, 995, Null, Null, Color(White), Visible To and String, Default Visibility);
        Modify Global Variable(echoRightHud, Append To Array, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("White rings: 1 point"), Right, 996, Null, Null, Color(White), Visible To and String, Default Visibility);
        Modify Global Variable(echoRightHud, Append To Array, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Blue rings: 2 points"), Right, 997, Null, Null, Color(Aqua), Visible To and String, Default Visibility);
        Modify Global Variable(echoRightHud, Append To Array, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Purple rings: 4 points"), Right, 998, Null, Null, Color(Purple), Visible To and String, Default Visibility);
        Modify Global Variable(echoRightHud, Append To Array, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Orange rings: 5 points"), Right, 999, Null, Null, Color(Orange), Visible To and String, Default Visibility);
        Modify Global Variable(echoRightHud, Append To Array, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String(" \nTeleport"), Right, 1000, Null, Null, Color(Green), Visible To and String, Default Visibility);
        Modify Global Variable(echoRightHud, Append To Array, Last Text ID);
    }
}

rule ("ECHO reduce speed when taking damage") {
    event {
        Player Took Damage;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Echo);
    }
    actions {
        Set Move Speed(Event Player, 50);
        Wait(0.5, Ignore Condition);
        Set Move Speed(Event Player, 100);
    }
}

rule ("ECHO meele stun") {
    event {
        Player Dealt Damage;
        All;
        Echo;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Echo);
        Is Button Held(Attacker, Button(Melee)) == True;
    }
    actions {
        If(Is Button Held(Attacker, Button(Melee)));
            Set Status(Victim, Event Player, Stunned, 0.75);
    }
}

rule ("ECHO healing like Mercy passive") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Echo);
        Health(Event Player) < 200;
    }
    actions {
        Wait(0.064, Ignore Condition);
        Start Heal Over Time(Event Player, Null, Global.roundTimer, 200);
    }
}

rule ("ECHO not healing") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Echo);
        Health(Event Player) == 200;
    }
    actions {
        Stop All Heal Over Time(Event Player);
        Wait(0.016, Ignore Condition);
    }
}

rule ("ECHO points common rings") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is True For Any(Global.commonRingsPos, Compare(Distance Between(Event Player, Current Array Element), <=, 2.15)) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Echo);
    }
    actions {
        Set Player Variable(Event Player, echoClosestRing, First Of(Sorted Array(Global.commonRingsPos, Distance Between(Event Player, Current Array Element))));
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, echoClosestRing, Index Of Array Value(Global.commonRingsPos, (Event Player).echoClosestRing));
        Modify Player Variable(Event Player, echoPoints, Add, 1);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
        Set Global Variable At Index(commonRingsPos, (Event Player).echoClosestRing, Vector(Random Real(-32, 32), Random Real(2, 32), Random Real(-32, 32)));
    }
}

rule ("ECHO points rare rings") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is True For Any(Global.rareRingsPos, Compare(Distance Between(Event Player, Current Array Element), <=, 2.15)) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Echo);
    }
    actions {
        Set Player Variable(Event Player, echoClosestRing, First Of(Sorted Array(Global.rareRingsPos, Distance Between(Event Player, Current Array Element))));
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, echoClosestRing, Index Of Array Value(Global.rareRingsPos, (Event Player).echoClosestRing));
        Modify Player Variable(Event Player, echoPoints, Add, 2);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Aqua), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Aqua), Event Player, 100);
        Set Global Variable At Index(rareRingsPos, (Event Player).echoClosestRing, Vector(Random Real(-36, 36), Random Real(2, 36), Random Real(-36, 36)));
    }
}

rule ("ECHO points epic rings") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is True For Any(Global.epicRingsPos, Compare(Distance Between(Event Player, Current Array Element), <=, 2.15)) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Echo);
    }
    actions {
        Set Player Variable(Event Player, echoClosestRing, First Of(Sorted Array(Global.epicRingsPos, Distance Between(Event Player, Current Array Element))));
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, echoClosestRing, Index Of Array Value(Global.epicRingsPos, (Event Player).echoClosestRing));
        Modify Player Variable(Event Player, echoPoints, Add, 4);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Purple), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Purple), Event Player, 100);
        Set Global Variable At Index(epicRingsPos, (Event Player).echoClosestRing, Vector(Random Real(-44, 44), Random Real(2, 44), Random Real(-44, 44)));
    }
}

rule ("ECHO points legendary rings") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is True For Any(Global.legendaryRingsPos, Compare(Distance Between(Event Player, Current Array Element), <=, 2.15)) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Echo);
    }
    actions {
        Set Player Variable(Event Player, echoClosestRing, First Of(Sorted Array(Global.legendaryRingsPos, Distance Between(Event Player, Current Array Element))));
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, echoClosestRing, Index Of Array Value(Global.legendaryRingsPos, (Event Player).echoClosestRing));
        Modify Player Variable(Event Player, echoPoints, Add, 5);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Orange), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Orange), Event Player, 100);
        Set Global Variable At Index(legendaryRingsPos, (Event Player).echoClosestRing, Vector(Random Real(-48, 48), Random Real(2, 48), Random Real(-48, 48)));
    }
}

rule ("ECHO teleports") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is True For Any(Global.echoTeleportPos, Compare(Distance Between(Event Player, Current Array Element), <=, 2.15)) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Echo);
    }
    actions {
        Teleport(Event Player, Value In Array(Sorted Array(Global.echoTeleportPos, Distance Between(Event Player, Current Array Element)), 1));
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Event Player, 1);
        Play Effect(All Players(All Teams), Explosion Sound, Color(Green), Event Player, 100);
        Set Global Variable At Index(echoTeleportPos, 0, Vector(Random Real(-40, 40), Random Real(2, 40), Random Real(-40, 40)));
        Set Global Variable At Index(echoTeleportPos, 1, Vector(Random Real(-40, 40), Random Real(2, 40), Random Real(-40, 40)));
        Wait(1.5, Ignore Condition);
    }
}

rule ("ECHO winner") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Echo);
        (Event Player).echoPoints >= 40;
    }
    actions {
        Set Global Variable(roundTimer, 0.032);
    }
}

rule ("ECHO end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Echo);
        Global.heroOfLastRound == Hero(Echo);
    }
    actions {
        Wait(0.064, Ignore Condition);
        For Global Variable(ringsIt, 0, 8, 1);
            Destroy Effect(Value In Array(Global.commonRingsEffects, Global.ringsIt));
            Destroy Effect(Value In Array(Global.rareRingsEffects, Global.ringsIt));
            Destroy Effect(Value In Array(Global.epicRingsEffects, Global.ringsIt));
            Destroy Effect(Value In Array(Global.legendaryRingsEffects, Global.ringsIt));
            Destroy Effect(Value In Array(Global.echoTeleportEffects, Global.ringsIt));
            Destroy HUD Text(Value In Array(Global.echoRightHud, Global.ringsIt));
        End;
        "Creates the array to store the effects of the common rings"
        Set Global Variable(commonRingsEffects, Empty Array);
        "Creates the array to store the positions of the common rings"
        Set Global Variable(commonRingsPos, Empty Array);
        "Creates the array to store the effects of the rare rings"
        Set Global Variable(rareRingsEffects, Empty Array);
        "Creates the array to store the positions of the rare rings"
        Set Global Variable(rareRingsPos, Empty Array);
        "Creates the array to store the effects of the epic rings"
        Set Global Variable(epicRingsEffects, Empty Array);
        "Creates the array to store the positions of the epic rings"
        Set Global Variable(epicRingsPos, Empty Array);
        "Creates the array to store the effects of the legendary rings"
        Set Global Variable(legendaryRingsEffects, Empty Array);
        "Creates the array to store the positions of the legendary rings"
        Set Global Variable(legendaryRingsPos, Empty Array);
        "Creates the array to store the effects of the teleports"
        Set Global Variable(echoTeleportEffects, Empty Array);
        "Creates the array to store the positions of the teleports"
        Set Global Variable(echoTeleportPos, Empty Array);
        For Global Variable(ringsIt, 0, 8, 1);
            Modify Global Variable(commonRingsPos, Append To Array, Vector(0, -16, 0));
            Modify Global Variable(rareRingsPos, Append To Array, Vector(0, -16, 0));
            Modify Global Variable(epicRingsPos, Append To Array, Vector(0, -16, 0));
            Modify Global Variable(legendaryRingsPos, Append To Array, Vector(0, -16, 0));
            Modify Global Variable(echoTeleportPos, Append To Array, Vector(0, -16, 0));
        End;
    }
}

rule ("ECHO end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Echo);
        Global.heroOfLastRound == Hero(Echo);
    }
    actions {
        Wait(Multiply((Event Player).echoPoints, 0.001), Ignore Condition);
        Modify Player Score(Event Player, Round To Integer(Divide((Event Player).echoPoints, 10), Down));
        If(Compare((Event Player).echoPoints, >=, 10));
            Small Message(Event Player, Custom String("+{0} with {1} {2}", Custom String("{0} {1}", Round To Integer(Divide((Event Player).echoPoints, 10), Down), If-Then-Else(Compare(Round To Integer(Divide((Event Player).echoPoints, 10), Down), >, 1), Custom String("points"), Custom String("point"))), Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
            Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
            Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+{0} {1}", Round To Integer(Divide((Event Player).echoPoints, 10), Down), If-Then-Else(Compare(Round To Integer(Divide((Event Player).echoPoints, 10), Down), >, 1), Custom String("points"), Custom String("point"))), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
            Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
            Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
            Modify Global Variable(pointfeedHudId, Subtract, 0.01);
        End;
        Clear Status(Event Player, Unkillable);
        Stop All Heal Over Time(Event Player);
        Wait(0.256, Ignore Condition);
        Destroy HUD Text((Event Player).echoPointsHud);
    }
}

rule ("LUCIO init player") {
    event {
        Ongoing - Each Player;
        All;
        Lúcio;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Lúcio);
    }
    actions {
        Set Player Variable(Event Player, lucioPointsHud, Null);
        Create Icon(Event Player, First Of(Sorted Array(Global.snotPos, Distance Between(Position Of(Event Player), Current Array Element))), Ring Thick, Visible To and Position, Color(Green), True);
        Set Player Variable(Event Player, lucioClosestSnotIcon, Last Created Entity);
        Set Player Variable(Event Player, lucioSpeed, 100);
        Set Player Variable(Event Player, lucioPoints, 0);
        Set Player Variable(Event Player, lucioHasBeenOnWall, False);
        Wait(0.256, Ignore Condition);
        Create HUD Text(Event Player, String("{0} m/s", Horizontal Speed Of(Event Player)), Null, Null, Left, 2, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, playerSpeedHud, Last Text ID);
        Wait(0.016, Ignore Condition);
        If(Compare((Event Player).lucioPointsHud, ==, Null));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}: {1}/8 = {2}/4 points", Event Player, (Event Player).lucioPoints, Round To Integer(Divide((Event Player).lucioPoints, 2), Down)), Left, Multiply(Add((Event Player).lucioPoints, 10), -1), Null, Null, Color(Green), Visible To Sort Order and String, Default Visibility);
            Set Player Variable(Event Player, lucioPointsHud, Last Text ID);
    }
}

rule ("LUCIO Snot") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Lúcio);
    }
    actions {
        Set Global Variable(snotPos, Empty Array);
        Set Global Variable(snotEffects, Empty Array);
        Set Global Variable(snotPosRandomXComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Modify Global Variable(snotPos, Append To Array, Ray Cast Hit Position(Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, 35), Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, -35), Null, All Players(All Teams), False));
        Create Effect(All Players(All Teams), Orb, Color(Green), Add(First Of(Global.snotPos), Forward), 1, Visible To Position and Radius);
        Modify Global Variable(snotEffects, Append To Array, Last Created Entity);
        Set Global Variable(snotPosRandomXComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Modify Global Variable(snotPos, Append To Array, Ray Cast Hit Position(Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, 35), Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, -35), Null, All Players(All Teams), False));
        Create Effect(All Players(All Teams), Orb, Color(Green), Add(Value In Array(Global.snotPos, 1), Forward), 1, Visible To Position and Radius);
        Modify Global Variable(snotEffects, Append To Array, Last Created Entity);
        Set Global Variable(snotPosRandomXComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Modify Global Variable(snotPos, Append To Array, Ray Cast Hit Position(Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, -35), Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, 35), Null, All Players(All Teams), False));
        Create Effect(All Players(All Teams), Orb, Color(Green), Add(Value In Array(Global.snotPos, 2), Backward), 1, Visible To Position and Radius);
        Modify Global Variable(snotEffects, Append To Array, Last Created Entity);
        Set Global Variable(snotPosRandomXComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Modify Global Variable(snotPos, Append To Array, Ray Cast Hit Position(Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, -35), Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, 35), Null, All Players(All Teams), False));
        Create Effect(All Players(All Teams), Orb, Color(Green), Add(Value In Array(Global.snotPos, 3), Backward), 1, Visible To Position and Radius);
        Modify Global Variable(snotEffects, Append To Array, Last Created Entity);
        Wait(1, Ignore Condition);
        Set Global Variable(snotPosRandomZComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Modify Global Variable(snotPos, Append To Array, Ray Cast Hit Position(Vector(35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Vector(-35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Null, All Players(All Teams), False));
        Create Effect(All Players(All Teams), Orb, Color(Green), Add(Value In Array(Global.snotPos, 4), Left), 1, Visible To Position and Radius);
        Modify Global Variable(snotEffects, Append To Array, Last Created Entity);
        Set Global Variable(snotPosRandomZComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Modify Global Variable(snotPos, Append To Array, Ray Cast Hit Position(Vector(35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Vector(-35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Null, All Players(All Teams), False));
        Create Effect(All Players(All Teams), Orb, Color(Green), Add(Value In Array(Global.snotPos, 5), Left), 1, Visible To Position and Radius);
        Modify Global Variable(snotEffects, Append To Array, Last Created Entity);
        Set Global Variable(snotPosRandomZComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Modify Global Variable(snotPos, Append To Array, Ray Cast Hit Position(Vector(-35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Vector(35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Null, All Players(All Teams), False));
        Create Effect(All Players(All Teams), Orb, Color(Green), Add(Value In Array(Global.snotPos, 6), Right), 1, Visible To Position and Radius);
        Modify Global Variable(snotEffects, Append To Array, Last Created Entity);
        Set Global Variable(snotPosRandomZComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Modify Global Variable(snotPos, Append To Array, Ray Cast Hit Position(Vector(-35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Vector(35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Null, All Players(All Teams), False));
        Create Effect(All Players(All Teams), Orb, Color(Green), Add(Value In Array(Global.snotPos, 7), Right), 1, Visible To Position and Radius);
        Modify Global Variable(snotEffects, Append To Array, Last Created Entity);
    }
}

rule ("LUCIO point") {
    event {
        Ongoing - Each Player;
        All;
        Lúcio;
    }
    conditions {
        Is True For Any(Global.snotPos, Compare(Distance Between(Event Player, Current Array Element), <=, 2)) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Lúcio);
    }
    actions {
        Set Player Variable(Event Player, lucioClosestSnot, First Of(Sorted Array(Global.snotPos, Distance Between(Event Player, Current Array Element))));
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, lucioClosestSnot, Index Of Array Value(Global.snotPos, (Event Player).lucioClosestSnot));
        Modify Player Variable(Event Player, lucioPoints, Add, 1);
        Modify Player Variable(Event Player, lucioSpeed, Add, 12.5);
        Set Move Speed(Event Player, (Event Player).lucioSpeed);
        Skip(Random Value In Array(Array(0, 7)));
        Set Global Variable(snotPosRandomXComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Skip(Random Value In Array(Array(0, 2)));
        Set Global Variable At Index(snotPos, (Event Player).lucioClosestSnot, Add(Ray Cast Hit Position(Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, 35), Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, -35), Null, All Players(All Teams), False), Forward));
        Skip(1);
        Set Global Variable At Index(snotPos, (Event Player).lucioClosestSnot, Add(Ray Cast Hit Position(Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, -35), Vector(Global.snotPosRandomXComp, Global.snotPosRandomYComp, 35), Null, All Players(All Teams), False), Backward));
        //lbl_0:
        Skip(6);
        Set Global Variable(snotPosRandomZComp, Random Real(-18, 18));
        Set Global Variable(snotPosRandomYComp, Random Real(-4, -14));
        Skip(Random Value In Array(Array(0, 2)));
        Set Global Variable At Index(snotPos, (Event Player).lucioClosestSnot, Add(Ray Cast Hit Position(Vector(35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Vector(-35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Null, All Players(All Teams), False), Left));
        Skip(1);
        Set Global Variable At Index(snotPos, (Event Player).lucioClosestSnot, Add(Ray Cast Hit Position(Vector(-35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Vector(35, Global.snotPosRandomYComp, Global.snotPosRandomZComp), Null, All Players(All Teams), False), Right));
        //lbl_1:
        //lbl_2:
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Green), Event Player, 100);
    }
}

rule ("LUCIO on ground = reset speed") {
    event {
        Ongoing - Each Player;
        All;
        Lúcio;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Lúcio);
        Is On Ground(Event Player) == True;
        (Event Player).lucioSpeed > 100;
    }
    actions {
        Set Player Variable(Event Player, lucioSpeed, 100);
        Set Move Speed(Event Player, (Event Player).lucioSpeed);
        Play Effect(Event Player, Debuff Impact Sound, Color(Green), Event Player, 100);
        Small Message(Event Player, Custom String("on ground = speed reset"));
    }
}

rule ("LUCIO winner") {
    event {
        Ongoing - Each Player;
        All;
        Lúcio;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Lúcio);
        (Event Player).lucioPoints >= 8;
    }
    actions {
        Set Global Variable(roundTimer, 0.032);
    }
}

rule ("LUCIO end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Lúcio);
        Global.heroOfLastRound == Hero(Lúcio);
    }
    actions {
        Wait(0.064, Ignore Condition);
        For Global Variable(destructorIt, 0, 8, 1);
            Destroy Effect(Value In Array(Global.snotEffects, Global.destructorIt));
        End;
        Set Global Variable(snotEffects, Empty Array);
        For Global Variable(ringsIt, 0, 8, 1);
            Modify Global Variable(snotPos, Append To Array, Vector(0, -16, 0));
        End;
    }
}

rule ("LUCIO end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Lúcio);
        Global.heroOfLastRound == Hero(Lúcio);
    }
    actions {
        Wait(Multiply((Event Player).lucioPoints, 0.016), Ignore Condition);
        Modify Player Score(Event Player, Round To Integer(Divide((Event Player).lucioPoints, 2), Down));
        If(Compare((Event Player).lucioPoints, >=, 2));
            Small Message(Event Player, Custom String("+{0} with {1} {2}", Custom String("{0} {1}", Round To Integer(Divide((Event Player).lucioPoints, 2), Down), If-Then-Else(Compare(Round To Integer(Divide((Event Player).lucioPoints, 2), Down), >, 1), Custom String("points"), Custom String("point"))), Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
            Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
            Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+{0} {1}", Round To Integer(Divide((Event Player).lucioPoints, 2), Down), If-Then-Else(Compare(Round To Integer(Divide((Event Player).lucioPoints, 2), Down), >, 1), Custom String("points"), Custom String("point"))), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
            Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
            Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
            Modify Global Variable(pointfeedHudId, Subtract, 0.01);
        End;
        Destroy HUD Text((Event Player).playerSpeedHud);
        Destroy Icon((Event Player).lucioClosestSnotIcon);
        Set Move Speed(Event Player, 100);
        Wait(0.256, Ignore Condition);
        Destroy HUD Text((Event Player).lucioPointsHud);
    }
}

rule ("MCCREE init player") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        Global.heroOfTheRound == Hero(Cassidy);
    }
    actions {
        Set Player Variable(Event Player, mccreeHealthHud, Null);
        Wait(0.256, Ignore Condition);
        If(Compare((Event Player).mccreeHealthHud, ==, Null));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} : {1} HP {2}", Event Player, Round To Integer(Health(Event Player), Up), If-Then-Else(Compare(Global.potatoHolder, ==, Event Player), Icon String(Fire), Custom String(" "))), Left, Multiply(Health(Event Player), -1), Null, Null, Color(Red), Visible To Sort Order and String, Default Visibility);
            Set Player Variable(Event Player, mccreeHealthHud, Last Text ID);
        End;
        Start Damage Modification(All Players(All Teams), All Players(All Teams), 50, Receivers Damagers and Damage Percent);
    }
}

rule ("MCCREE choose a potato holder") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Cassidy);
        Global.potatoHolder == Null;
    }
    actions {
        Set Global Variable(potatoHolder, Random Value In Array(All Living Players(All Teams)));
        Set Global Variable(potatoPos, Global.potatoHolder);
        Loop If Condition Is True;
        Add Health Pool To Player(Global.potatoHolder, Health, 25, False, True);
    }
}

rule ("MCCREE potato effect") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Cassidy);
    }
    actions {
        Create Effect(All Players(All Teams), Bad Aura, Color(Red), Global.potatoPos, 1, Visible To Position and Radius);
        Set Global Variable(potatoEffect, Last Created Entity);
        Create Icon(All Players(All Teams), Global.potatoPos, Fire, Visible To and Position, Color(Red), True);
        Set Global Variable(potatoIcon, Last Created Entity);
    }
}

rule ("MCCREE potato holder") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Cassidy);
        Event Player == Global.potatoHolder;
    }
    actions {
        Set Status(Event Player, Null, Burning, Global.roundTimer);
        Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 50);
        Start Damage Over Time(Event Player, Null, Global.roundTimer, 250);
        Set Move Speed(Event Player, 110);
        Allow Button(Event Player, Button(Primary Fire));
        Allow Button(Event Player, Button(Melee));
        Set Ability Cooldown(Event Player, Button(Ability 1), 0);
    }
}

rule ("MCCREE not potato holder") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Cassidy);
        Event Player != Global.potatoHolder;
    }
    actions {
        Clear Status(Event Player, Burning);
        Stop All Damage Over Time(Event Player);
        Set Move Speed(Event Player, 100);
        Disallow Button(Event Player, Button(Primary Fire));
        Disallow Button(Event Player, Button(Melee));
    }
}

rule ("MCCREE pass the potato") {
    event {
        Player Dealt Damage;
        All;
        Cassidy;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Cassidy);
        Event Player == Global.potatoHolder;
    }
    actions {
        Destroy In-World Text((Event Player).mccreeInvincibleText);
        Destroy HUD Text((Event Player).mccreeInvincibleHud);
        Set Global Variable(potatoHolder, Victim);
        Set Global Variable(potatoPos, Victim);
        Set Player Variable(Event Player, mccreeInvincibleTime, 1);
        Set Status(Event Player, Null, Invincible, (Event Player).mccreeInvincibleTime);
        Create In-World Text(If-Then-Else(Compare((Event Player).mccreeInvincibleTime, >, 0), All Players(All Teams), Empty Array), Custom String("INVINCIBLE: {0}", (Event Player).mccreeInvincibleTime), Attacker, 1, Clip Against Surfaces, Visible To Position and String, Color(Yellow), Default Visibility);
        Set Player Variable(Event Player, mccreeInvincibleText, Last Text ID);
        Wait(0.016, Ignore Condition);
        Create HUD Text(If-Then-Else(Compare((Event Player).mccreeInvincibleTime, >, 0), Event Player, Empty Array), Custom String("INVINCIBLE: {0}", (Event Player).mccreeInvincibleTime), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, mccreeInvincibleHud, Last Text ID);
        Wait(0.016, Ignore Condition);
        Chase Player Variable Over Time(Event Player, mccreeInvincibleTime, 0, (Event Player).mccreeInvincibleTime, Destination and Duration);
        Set Ability Cooldown(Attacker, Button(Ability 1), 0);
        Set Ability Cooldown(Victim, Button(Ability 1), 0);
        If(Compare(Event Ability, ==, Button(Melee)));
            Heal(Attacker, Null, 15);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 1);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 2);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 3);
    }
}

rule ("MCCREE potato holder dies") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Cassidy);
        Event Player == Global.potatoHolder;
    }
    actions {
        Set Global Variable(potatoHolder, Null);
    }
}

rule ("MCCREE potato holder leaves") {
    event {
        Player Left Match;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Cassidy);
        Event Player == Global.potatoHolder;
    }
    actions {
        Set Global Variable(potatoHolder, Null);
    }
}

rule ("MCCREE win {OUT OF TIME}") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Cassidy);
        Global.roundTimer <= 0.5;
        Number Of Players(All Teams) > 1;
        Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1) > 0;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
        Modify Player Score(Event Player, Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1));
        Small Message(Event Player, Custom String("+{0} with {1} {2}", Custom String("{0} {1}", Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1), If-Then-Else(Compare(Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1), >, 1), Custom String("points"), Custom String("point"))), Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
        Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+{0} {1}", Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1), If-Then-Else(Compare(Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1), >, 1), Custom String("points"), Custom String("point"))), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
        Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
        Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
        Modify Global Variable(pointfeedHudId, Subtract, 0.01);
    }
}

rule ("MCCREE win {LAST PLAYER ALIVE}") {
    event {
        Ongoing - Each Player;
        All;
        Cassidy;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Cassidy);
        Number Of Living Players(All Teams) <= 1;
        Number Of Players(All Teams) > 1;
        Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1) > 0;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
        Modify Player Score(Event Player, Subtract(Count Of(Global.playersStartOfTheRound), 1));
        Small Message(Event Player, Custom String("+{0} with {1} {2}", Custom String("{0} {1}", Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1), If-Then-Else(Compare(Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1), >, 1), Custom String("points"), Custom String("point"))), Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
        Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+{0} {1}", Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1), If-Then-Else(Compare(Subtract(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), Number Of Living Players(All Teams)), Up), 1), >, 1), Custom String("points"), Custom String("point"))), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
        Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
        Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
        Modify Global Variable(pointfeedHudId, Subtract, 0.01);
    }
}

rule ("MCCREE end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Cassidy);
        Global.heroOfLastRound == Hero(Cassidy);
    }
    actions {
        Destroy Effect(Global.potatoEffect);
        Destroy Icon(Global.potatoIcon);
        Set Global Variable(potatoHolder, Null);
    }
}

rule ("MCCREE end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Cassidy);
        Global.heroOfLastRound == Hero(Cassidy);
    }
    actions {
        Clear Status(Event Player, Burning);
        Stop Damage Over Time(Last Damage Over Time ID);
        Stop All Damage Modifications;
        Set Move Speed(Event Player, 100);
        Allow Button(Event Player, Button(Primary Fire));
        Allow Button(Event Player, Button(Melee));
        Wait(1, Ignore Condition);
        Remove All Health Pools From Player(Event Player);
        Destroy HUD Text((Event Player).mccreeHealthHud);
    }
}

rule ("MEI init player") {
    event {
        Ongoing - Each Player;
        All;
        Mei;
    }
    conditions {
        Global.heroOfTheRound == Hero(Mei);
        Is Alive(Event Player) == True;
        Is Game In Progress == True;
    }
    actions {
        Wait(0.016, Ignore Condition);
        Set Max Health(Event Player, 0.04);
        Set Player Health(Event Player, 1);
        Set Damage Dealt(Event Player, 1000);
        Set Player Variable(Event Player, meiAmmo, 0);
        Disallow Button(Event Player, Button(Secondary Fire));
        Disallow Button(Event Player, Button(Ultimate));
        Set Player Variable(Event Player, meiIsPickingSnow, False);
        Set Status(Event Player, Null, Unkillable, 60);
        Wait(1, Ignore Condition);
        Set Player Variable(Event Player, meiAmmo, 1);
        Set Player Variable(Event Player, meiPickingSnowTimer, 1);
        Set Max Health(Event Player, 0.04);
        Create HUD Text(Event Player, Custom String("{0} AMMO: {1}/3", Ability Icon String(Hero(Mei), Button(Secondary Fire)), (Event Player).meiAmmo), Null, Null, Left, 0, Color(Sky Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, meiAmmoHud, Last Text ID);
        Create HUD Text(If-Then-Else(Compare((Event Player).meiMeeleCatchCooldown, >=, 2), Event Player, Empty Array), Custom String("{0} CATCH COOLDOWN: {1}", Ability Icon String(Hero(Mei), Button(Melee)), (Event Player).meiMeeleCatchCooldown), Null, Null, Left, 0.1, Color(Sky Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, meiCatchActiveCooldownHud, Last Text ID);
        Create HUD Text(If-Then-Else(And(Compare((Event Player).meiMeeleCatchCooldown, >, 0), Compare((Event Player).meiMeeleCatchCooldown, <, 2)), Event Player, Empty Array), Custom String("{0} CATCH COOLDOWN: {1}", Ability Icon String(Hero(Mei), Button(Melee)), (Event Player).meiMeeleCatchCooldown), Null, Null, Left, 0.1, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, meiCatchCooldownHud, Last Text ID);
        Create In-World Text(If-Then-Else(And(Compare((Event Player).meiAmmo, >, 0), Is Alive(Event Player)), All Players(All Teams), Empty Array), Custom String("{0}", Ability Icon String(Hero(Mei), Button(Ultimate))), Event Player, 2, Clip Against Surfaces, Visible To Position and String, Color(Sky Blue), Default Visibility);
        Set Player Variable(Event Player, meiHasAmmoIcon, Last Text ID);
        Create In-World Text(If-Then-Else(Compare((Event Player).meiHasPickedUpAnyAmmo, ==, False), Event Player, Empty Array), Custom String("{0} crouch on me {1}", Icon String(Arrow: Down), If-Then-Else(Compare(Input Binding String(Button(Crouch)), !=, Custom String("")), Custom String("[{0}]", Input Binding String(Button(Crouch))), Custom String(""))), Add(First Of(Sorted Array(Global.meiSnowPos, Distance Between(Position Of(Event Player), Current Array Element))), Vector(0, 0.5, 0)), 1, Clip Against Surfaces, Visible To Position and String, Color(Sky Blue), Default Visibility);
        Set Player Variable(Event Player, meiCrouchOnMeText, Last Text ID);
        Create Effect(If-Then-Else(Compare((Event Player).meiMeeleCatchCooldown, >=, 2), All Players(All Teams), Empty Array), Sphere, Color(Sky Blue), Event Player, 1, Visible To Position and Radius);
        Set Player Variable(Event Player, meiCatchSphereEffect, Last Created Entity);
    }
}

rule ("MEI init global") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.heroOfTheRound == Hero(Mei);
        Is Game In Progress == True;
    }
    actions {
        "Creates the array to store the effects of the snow spots"
        Set Global Variable(meiSnowEffects, Empty Array);
        "Creates the array to store the positions of the snow spots"
        Set Global Variable(meiSnowPos, Empty Array);
        For Global Variable(meiSnowIt, 0, Add(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), 3), Up), 1), 1);
            Modify Global Variable(meiSnowPos, Append To Array, Vector(Random Real(-16, 16), -0.5, Random Real(-16, 16)));
            Wait(0.016, Ignore Condition);
        End;
        "Create a snow spot effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sphere, Color(White), First Of(Global.meiSnowPos), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        "Create a snow sparkle effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sparkles, Color(White), Add(First Of(Global.meiSnowPos), Vector(0, 0.5, 0)), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        Abort If(Compare(Add(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), 3), Up), 1), ==, 1));
        "Create a snow spot effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sphere, Color(White), Value In Array(Global.meiSnowPos, 1), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        "Create a snow sparkle effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sparkles, Color(White), Add(Value In Array(Global.meiSnowPos, 1), Vector(0, 0.5, 0)), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        Abort If(Compare(Add(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), 3), Up), 1), ==, 2));
        "Create a snow spot effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sphere, Color(White), Value In Array(Global.meiSnowPos, 2), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        "Create a snow sparkle effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sparkles, Color(White), Add(Value In Array(Global.meiSnowPos, 2), Vector(0, 0.5, 0)), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        Abort If(Compare(Add(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), 3), Up), 1), ==, 3));
        "Create a snow spot effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sphere, Color(White), Value In Array(Global.meiSnowPos, 3), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        "Create a snow sparkle effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sparkles, Color(White), Add(Value In Array(Global.meiSnowPos, 3), Vector(0, 0.5, 0)), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        Abort If(Compare(Add(Round To Integer(Divide(Count Of(Global.playersStartOfTheRound), 4), Up), 1), ==, 4));
        "Create a snow spot effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sphere, Color(White), Value In Array(Global.meiSnowPos, 4), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
        "Create a snow sparkle effect in the position in meiSnowPos"
        Create Effect(All Players(All Teams), Sparkles, Color(White), Add(Value In Array(Global.meiSnowPos, 4), Vector(0, 0.5, 0)), 1, Visible To Position and Radius);
        "Append the last created snow spot to meiSnowEffects"
        Modify Global Variable(meiSnowEffects, Append To Array, Last Created Entity);
    }
}

rule ("MEI Kill") {
    event {
        Player Took Damage;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mei);
        Event Ability != Button(Melee);
    }
    actions {
        If(Compare((Victim).meiIsCatching, ==, False));
            Clear Status(Event Player, Unkillable);
            Kill(Victim, Attacker);
            "10 ult % = 20 ult %"
            Set Ultimate Charge(Attacker, Add(Ultimate Charge Percent(Attacker), 10));
        End;
        If(Compare((Victim).meiIsCatching, ==, True));
            Small Message(Victim, Custom String("You catched {0} snowball", Attacker));
            Small Message(Attacker, Custom String("{0} catched your snowball", Victim));
    }
}

rule ("MEI Pick up Snow") {
    event {
        Ongoing - Each Player;
        All;
        Mei;
    }
    conditions {
        Is True For Any(Global.meiSnowPos, Compare(Distance Between(Event Player, Current Array Element), <=, 2)) == True;
        Is Crouching(Event Player) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mei);
    }
    actions {
        If(Compare((Event Player).meiAmmo, <, 3));
            Set Player Variable(Event Player, meiClosestSnow, First Of(Sorted Array(Global.meiSnowPos, Distance Between(Event Player, Current Array Element))));
            Wait(0.016, Ignore Condition);
            Set Player Variable(Event Player, meiClosestSnow, Index Of Array Value(Global.meiSnowPos, (Event Player).meiClosestSnow));
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
            Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 100);
            Set Global Variable At Index(meiSnowPos, (Event Player).meiClosestSnow, Vector(Random Real(-16, 16), -0.5, Random Real(-16, 16)));
            Modify Player Variable(Event Player, meiAmmo, Add, 1);
            Set Player Variable(Event Player, meiHasPickedUpAnyAmmo, True);
        Else;
            Small Message(Event Player, Custom String("MAX AMMO REACHED"));
    }
}

rule ("MEI Meele Catch Cooldown") {
    event {
        Ongoing - Each Player;
        All;
        Mei;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mei);
        Is Button Held(Event Player, Button(Melee)) == True;
        (Event Player).meiMeeleCatchCooldown == 0;
    }
    actions {
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, meiIsCatching, True);
        Set Player Variable(Event Player, meiMeeleCatchCooldown, 3);
        Set Ability Cooldown(Event Player, Button(Melee), (Event Player).meiMeeleCatchCooldown);
        Chase Player Variable At Rate(Event Player, meiMeeleCatchCooldown, 0, 1, None);
    }
}

rule ("MEI No Meele Catch") {
    event {
        Ongoing - Each Player;
        All;
        Mei;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mei);
        (Event Player).meiMeeleCatchCooldown < 2;
    }
    actions {
        Set Player Variable(Event Player, meiIsCatching, False);
    }
}

rule ("MEI Meele Catch Catch") {
    event {
        Player Took Damage;
        All;
        All;
    }
    conditions {
        (Victim).meiIsCatching == True;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Mei);
        (Event Player).meiMeeleCatchCooldown >= 2;
        Event Ability == Button(Secondary Fire);
    }
    actions {
        If(Compare((Event Player).meiAmmo, <, 3));
            Modify Player Variable(Victim, meiAmmo, Add, 1);
        Else;
            Small Message(Event Player, Custom String("MAX AMMO REACHED"));
    }
}

rule ("MEI Disallow Meele") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Mei);
        (Event Player).meiMeeleCatchCooldown > 0;
    }
    actions {
        Disallow Button(Event Player, Button(Melee));
    }
}

rule ("MEI Allow Meele") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Mei);
        (Event Player).meiMeeleCatchCooldown == 0;
    }
    actions {
        Allow Button(Event Player, Button(Melee));
    }
}

rule ("MEI Disallow Sec. Fire") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Mei);
        Or(Compare((Event Player).meiAmmo, <=, 0), Compare((Event Player).meiIsPickingSnow, ==, True)) == True;
    }
    actions {
        Disallow Button(Event Player, Button(Secondary Fire));
    }
}

rule ("MEI Allow Sec. Fire") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mei);
        (Event Player).meiAmmo > 0;
        (Event Player).meiIsPickingSnow == False;
    }
    actions {
        Allow Button(Event Player, Button(Secondary Fire));
    }
}

rule ("MEI Shoot") {
    event {
        Ongoing - Each Player;
        All;
        Mei;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mei);
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Is Firing Secondary(Event Player) == True;
        (Event Player).meiAmmo > 0;
        (Event Player).meiIsPickingSnow == False;
    }
    actions {
        Wait(0.016, Ignore Condition);
        Disallow Button(Event Player, Button(Melee));
        If(Not(Is Firing Secondary(Event Player)));
            Modify Player Variable(Event Player, meiAmmo, Subtract, 1);
            If(Compare((Event Player).meiMeeleCatchCooldown, ==, 0));
                Allow Button(Event Player, Button(Melee));
            End;
            Abort;
        End;
        Loop;
    }
}

rule ("MEI Stop Shoot") {
    event {
        Ongoing - Each Player;
        All;
        Mei;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mei);
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }
    actions {
        If(Compare((Event Player).meiAmmo, <=, 0));
            Disallow Button(Event Player, Button(Secondary Fire));
            Cancel Primary Action(Event Player);
        End;
        Wait(0.016, Ignore Condition);
        Disallow Button(Event Player, Button(Secondary Fire));
        Loop If Condition Is True;
        If(Compare((Event Player).meiAmmo, >, 0));
            Allow Button(Event Player, Button(Secondary Fire));
    }
}

rule ("MEI Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        Mei;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mei);
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Ultimate Charge Percent(Event Player) >= 100;
    }
    actions {
        Destroy HUD Text((Event Player).meiAmmoHud);
        Create HUD Text(Event Player, Custom String("AMMO: ∞/3"), Null, Null, Left, 0, Color(Sky Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, meiAmmoHud, Last Text ID);
        Set Player Variable(Event Player, meiAmmo, 9999);
        Set Status(Event Player, Null, Burning, Global.roundTimer);
    }
}

rule ("MEI end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Mei);
        Global.heroOfLastRound == Hero(Mei);
    }
    actions {
        Set Player Variable(Event Player, meiAmmo, 1);
        Allow Button(Event Player, Button(Melee));
        Allow Button(Event Player, Button(Secondary Fire));
        Allow Button(Event Player, Button(Ultimate));
        Set Player Variable(Event Player, meiIsPickingSnow, False);
        Set Damage Dealt(Event Player, 100);
        Clear Status(Event Player, Unkillable);
        Clear Status(Event Player, Burning);
        Set Max Health(Event Player, 100);
        Destroy HUD Text((Event Player).meiAmmoHud);
        Destroy HUD Text((Event Player).meiCatchActiveCooldownHud);
        Destroy HUD Text((Event Player).meiCatchCooldownHud);
        Destroy In-World Text((Event Player).meiHasAmmoIcon);
        Destroy In-World Text((Event Player).meiCrouchOnMeText);
        Destroy Effect((Event Player).meiCatchSphereEffect);
    }
}

rule ("MEI end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Mei);
        Global.heroOfLastRound == Hero(Mei);
    }
    actions {
        Wait(0.064, Ignore Condition);
        For Global Variable(meiSnowIt, 0, 10, 1);
            Destroy Effect(Value In Array(Global.meiSnowEffects, Global.meiSnowIt));
        End;
        Set Global Variable(meiSnowEffects, Empty Array);
        Set Global Variable(meiSnowPos, Empty Array);
    }
}

rule ("MERCY go back, told you") {
    event {
        Ongoing - Each Player;
        All;
        Mercy;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Mercy);
        Magnitude Of(Event Player) >= 60;
    }
    actions {
        Small Message(Event Player, Custom String("go back"));
        Set Status(Event Player, Null, Stunned, 1);
        Wait(4, Ignore Condition);
        Abort If Condition Is False;
        Small Message(Event Player, Custom String("told you"));
        Set Status(Event Player, Null, Stunned, 5);
    }
}

rule ("MERCY secondary buttons") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Mercy);
        Or(Is Button Held(Event Player, Button(Primary Fire)), Is Button Held(Event Player, Button(Secondary Fire))) == True;
    }
    actions {
        Press Button(Event Player, Button(Melee));
    }
}

rule ("PHARAH init effects") {
    event {
        Ongoing - Each Player;
        All;
        Pharah;
    }
    conditions {
        Global.heroOfTheRound == Hero(Pharah);
        Is Alive(Event Player) == True;
    }
    actions {
        Wait(2, Ignore Condition);
        Create Effect(If-Then-Else(Compare((Event Player).pharahHeal, ==, True), All Players(All Teams), Empty Array), Good Aura, Color(Yellow), Event Player, 1, Visible To Position and Radius);
        Set Player Variable(Event Player, pharahHealEffect, Last Created Entity);
        Create Effect(If-Then-Else(Compare(Health(Event Player), >, 199), All Players(All Teams), Empty Array), Good Aura, Color(Aqua), Event Player, 1, Visible To Position and Radius);
        Set Player Variable(Event Player, pharahDamageBoostEffect, Last Created Entity);
        Create HUD Text(If-Then-Else(Compare((Event Player).pharahHeal, ==, True), Event Player, Empty Array), Custom String("HEALING"), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, pharahHealHud, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Health(Event Player), >, 199), Event Player, Empty Array), Custom String("DAMAGE BOOST"), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, pharahDamageBoostHud, Last Text ID);
    }
}

rule ("PHARAH damage boost") {
    event {
        Ongoing - Each Player;
        All;
        Pharah;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Pharah);
        Health(Event Player) > 199;
        (Event Player).pharahHeal == True;
    }
    actions {
        Set Player Variable(Event Player, pharahHeal, False);
        Set Player Variable(Event Player, pharahDamageBoost, True);
        Set Damage Dealt(Event Player, 130);
        Stop All Heal Over Time(Event Player);
        Wait(0.016, Ignore Condition);
    }
}

rule ("PHARAH healing") {
    event {
        Ongoing - Each Player;
        All;
        Pharah;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Pharah);
        Health(Event Player) < Max Health(Event Player);
    }
    actions {
        Set Player Variable(Event Player, pharahDamageBoost, False);
        Wait(0.5, Ignore Condition);
        Set Player Variable(Event Player, pharahHeal, True);
        Set Damage Dealt(Event Player, 100);
        Start Heal Over Time(Event Player, Null, Global.roundTimer, 50);
    }
}

rule ("PHARAH dead") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Pharah);
    }
    actions {
        Wait(0.032, Ignore Condition);
        Set Player Variable(Event Player, pharahHeal, False);
        Set Player Variable(Event Player, pharahDamageBoost, False);
        Wait(0.032, Ignore Condition);
        Destroy Effect((Event Player).pharahHealEffect);
        Wait(0.032, Ignore Condition);
        Destroy Effect((Event Player).pharahDamageBoostEffect);
        Stop All Heal Over Time(Event Player);
        Set Damage Dealt(Event Player, 100);
        Destroy HUD Text((Event Player).pharahHealHud);
        Destroy HUD Text((Event Player).pharahDamageBoostHud);
    }
}

rule ("PHARAH end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Pharah);
        Global.heroOfLastRound == Hero(Pharah);
    }
    actions {
        Set Player Variable(Event Player, pharahHeal, False);
        Set Player Variable(Event Player, pharahDamageBoost, False);
        Destroy Effect((Event Player).pharahHealEffect);
        Destroy Effect((Event Player).pharahDamageBoostEffect);
        Destroy HUD Text((Event Player).pharahHealHud);
        Destroy HUD Text((Event Player).pharahDamageBoostHud);
        Stop All Heal Over Time(Event Player);
        Set Damage Dealt(Event Player, 100);
    }
}

rule ("REIN init player") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Wait(0.256, Ignore Condition);
        Disallow Button(Event Player, Button(Ultimate));
        Set Damage Dealt(Event Player, 50);
        Set Projectile Speed(Event Player, 150);
    }
}

rule ("REIN bounce") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Distance Between(Position Of(Event Player), Nearest Walkable Position(Position Of(Event Player))) <= 0.5;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Skip If(Not(Is Button Held(Event Player, Button(Crouch))), 1);
        Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
        //lbl_0:
        Skip If(Is Button Held(Event Player, Button(Crouch)), 1);
        Apply Impulse(Event Player, Up, 20, To World, Cancel Contrary Motion);
        //lbl_1:
        Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 25);
        "playEffect(getAllPlayers(), DynamicEffect.GOOD_EXPLOSION, Color.PURPLE, vect(eventPlayer.getPosition().x, eventPlayer.getPosition().y - 2.1, eventPlayer.getPosition().z), 0.1)"
        Wait(0.064, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("REIN knockback effect on all abilities") {
    event {
        Player Dealt Damage;
        All;
        Reinhardt;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Apply Impulse(Victim, Vector(X Component Of(Direction Towards(Attacker, Victim)), 0, Z Component Of(Direction Towards(Attacker, Victim))), Multiply(Event Damage, Add(Divide(Subtract(60, Global.roundTimer), 60), 1)), To World, Cancel Contrary Motion);
        "smallMessage(attacker, \"{0}\".format(eventDamage * ((60 - roundTimer) / 60 + 1)))"
        Heal(Victim, Null, Event Damage);
        Set Player Variable(Victim, reinLastAttacker, Attacker);
        Set Player Variable(Victim, reinAttackerCreditTimer, 10);
        Chase Player Variable At Rate(Victim, reinAttackerCreditTimer, 0, 1, Destination and Rate);
        Skip If(Compare((Attacker).reinUltTimer, >, 0), 2);
        Set Player Variable(Attacker, reinTempUltCharge, Add(Ultimate Charge Percent(Event Player), Subtract(13, Divide(Count Of(Filtered Array(All Players(All Teams), Compare((Current Array Element).reinIsAlive, ==, True))), 2))));
        Set Ultimate Charge(Attacker, (Attacker).reinTempUltCharge);
        //lbl_0:
    }
}

rule ("REIN died") {
    event {
        Player Died;
        All;
        Reinhardt;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Reinhardt);
        (Victim).reinAttackerCreditTimer > 0;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), (Victim).reinLastAttacker, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), (Victim).reinLastAttacker, 100);
        Modify Player Score((Victim).reinLastAttacker, 1);
        Small Message((Victim).reinLastAttacker, Custom String("+1 point with {0} {1}", Hero Icon String(Hero Of((Victim).reinLastAttacker)), Hero Of((Victim).reinLastAttacker)));
        Wait(0.032, Ignore Condition);
        Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of((Victim).reinLastAttacker)), (Victim).reinLastAttacker, Custom String("+1 point"), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
        Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
        Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
        Modify Global Variable(pointfeedHudId, Subtract, 0.01);
    }
}

rule ("REIN charge: make shorter") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Player Variable(Event Player, reinChargeTimer, 3);
        Chase Player Variable At Rate(Event Player, reinChargeTimer, 0, 1, Destination and Rate);
    }
}

rule ("REIN charge: stop after delay") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        (Event Player).reinChargeTimer <= 0;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Status(Event Player, Null, Stunned, 0.016);
        Set Player Variable(Event Player, reinCanCancelCharge, False);
        Stop Accelerating(Event Player);
    }
}

rule ("REIN charge: make the player glide") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Start Accelerating(Event Player, Vector(0, 0.8, 0), 30, 4, To Player, Direction Rate and Max Speed);
        Set Player Variable(Event Player, reinChargeCancelTimer, 0.8);
        Chase Player Variable At Rate(Event Player, reinChargeCancelTimer, 0, 1, Destination and Rate);
    }
}

rule ("REIN charge: allow cancel") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Is Button Held(Event Player, Button(Ability 1)) == False;
        (Event Player).reinChargeCancelTimer <= 0;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Player Variable(Event Player, reinCanCancelCharge, True);
    }
}

rule ("REIN charge: cancel (press charge again to cancel a charge)") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Is Button Held(Event Player, Button(Ability 1)) == True;
        (Event Player).reinCanCancelCharge == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Player Variable(Event Player, reinCanCancelCharge, False);
        Set Player Variable(Event Player, reinChargeTimer, 0);
    }
}

rule ("REIN charge: stop") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Is Using Ability 1(Event Player) == False;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Player Variable(Event Player, reinChargeTimer, 0);
    }
}

rule ("REIN charge: boom boom if two rein charge each other") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Has Status(Event Player, Knocked Down) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Player Variable(Event Player, reinExplosionCenter, Divide(Add(Position Of(Event Player), Position Of(Closest Player To(Event Player, All Teams))), 2));
        Wait(0.02, Ignore Condition);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Red), (Event Player).reinExplosionCenter, 15);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Red), (Event Player).reinExplosionCenter, 50);
        Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Red), (Event Player).reinExplosionCenter, 200);
        Wait(0.02, Ignore Condition);
        Set Player Variable(Event Player, reinExplosionCenter, Null);
    }
}

rule ("REIN ult: charge") {
    event {
        Player Dealt Final Blow;
        All;
        Reinhardt;
    }
    conditions {
        (Event Player).reinUltTimer <= 0;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Player Variable(Event Player, reinTempUltCharge, Add(Ultimate Charge Percent(Event Player), 30));
        Set Ultimate Charge(Attacker, (Event Player).reinTempUltCharge);
    }
}

rule ("REIN ult: use") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Ultimate Charge Percent(Event Player) >= 100;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Ultimate Charge(Event Player, 0);
        Set Status(Event Player, Null, Burning, Add(1, Number Of Living Players(All Teams)));
        Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
        Set Move Speed(Event Player, 140);
        Set Projectile Speed(Event Player, 300);
        Set Damage Dealt(Event Player, 80);
        Set Player Variable(Event Player, reinUltTimer, Add(1, Number Of Living Players(All Teams)));
        Wait(0.016, Ignore Condition);
        Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player, 1.5, Visible To Position and Radius);
        Set Player Variable(Event Player, reinAuraEffect, Last Created Entity);
        Wait(0.016, Ignore Condition);
        Create HUD Text(Event Player, Custom String("POWER-UP: {0}", (Event Player).reinUltTimer), Null, Null, Left, 2, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, reinUltHud, Last Text ID);
        Chase Player Variable At Rate(Event Player, reinUltTimer, -1, 1, Destination and Rate);
    }
}

rule ("REIN ult: stun effect") {
    event {
        Player Took Damage;
        All;
        Reinhardt;
    }
    conditions {
        Has Status(Attacker, Burning) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
    }
    actions {
        Set Status(Event Player, Null, Stunned, 1);
    }
}

rule ("REIN ult: end") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        (Event Player).reinUltTimer <= 0;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Reinhardt);
    }
    actions {
        Set Damage Dealt(Event Player, 50);
        Set Projectile Speed(Event Player, 150);
        Set Move Speed(Event Player, 100);
        Wait(0.064, Ignore Condition);
        Destroy Effect((Event Player).reinAuraEffect);
        Destroy HUD Text((Event Player).reinUltHud);
    }
}

rule ("REIN end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Reinhardt);
        Global.heroOfLastRound == Hero(Reinhardt);
    }
    actions {
        Stop Accelerating(Event Player);
        Allow Button(Event Player, Button(Ultimate));
        Set Damage Dealt(Event Player, 100);
        Set Projectile Speed(Event Player, 100);
        Set Move Speed(Event Player, 100);
        Set Player Variable(Event Player, reinUltTimer, 0);
        Wait(0.064, Ignore Condition);
        Destroy Effect((Event Player).reinAuraEffect);
        Destroy HUD Text((Event Player).reinUltHud);
    }
}

rule ("ROADHOG init global") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.heroOfTheRound == Hero(Roadhog);
    }
    actions {
        Set Global Variable(roadhogHoleRadius, 7);
        Set Global Variable(roadhogHoleEffects, Empty Array);
        Create Effect(All Players(All Teams), Light Shaft, Color(Red), Vector(0, 0, 0), Global.roadhogHoleRadius, Visible To Position and Radius);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Light Shaft, Color(Red), Vector(0, 0, 0), Global.roadhogHoleRadius, Visible To Position and Radius);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Light Shaft, Color(Red), Vector(0, 0, 0), Global.roadhogHoleRadius, Visible To Position and Radius);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Ring, Color(White), Vector(0, 0, 0), Global.roadhogHoleRadius, Visible To Position and Radius);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Ring, Color(White), Vector(0, 0, 0), Global.roadhogHoleRadius, Visible To Position and Radius);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Ring, Color(White), Vector(0, 0, 0), Global.roadhogHoleRadius, Visible To Position and Radius);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Light Shaft, Color(Red), Vector(0, 0, 0), Global.roadhogHoleRadius, Visible To Position and Radius);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Light Shaft, Color(Red), Vector(0, 0, 0), Global.roadhogHoleRadius, Visible To Position and Radius);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Created Entity);
        Chase Global Variable Over Time(roadhogHoleRadius, 9, 60, None);
        Create In-World Text(All Players(All Teams), Custom String("{0}", Icon String(Skull)), Vector(0, 5, 0), 4, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
        Modify Global Variable(roadhogHoleEffects, Append To Array, Last Text ID);
        Wait(0.5, Ignore Condition);
        Set Global Variable At Index(minigameStringTitles, Index Of Array Value(Global.heroList, Hero(Roadhog)), Custom String("{0} {1} HOOKS 1 HOLE {0}", Hero Icon String(Hero(Roadhog)), Number Of Living Players(All Teams)));
    }
}

rule ("ROADHOG init player") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.heroOfTheRound == Hero(Roadhog);
        Is Alive(Event Player) == True;
    }
    actions {
        "eventPlayer.teleport(10 * normalize(vect(random.uniform(-1, 1), 0, random.uniform(-1, 1))))\nwait(0.175)\n__end__()\neventPlayer.disallowButton(Button.ABILITY_1)"
        Set Player Variable(Event Player, roadhogYanked, True);
        "eventPlayer.applyImpulse(Vector.RIGHT, 0.001, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)\neventPlayer.applyImpulse(Vector.LEFT, 0.001, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)"
        Set Player Variable(Event Player, roadhogYanked, False);
    }
}

rule ("ROADHOG in the hole") {
    event {
        Ongoing - Each Player;
        All;
        Roadhog;
    }
    conditions {
        Magnitude Of(Position Of(Event Player)) <= Global.roadhogHoleRadius;
        (Event Player).roadhogYanked == False;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Roadhog);
        Global.roundTimer <= 58;
    }
    actions {
        Disable Movement Collision With Environment(Event Player, True);
    }
}

rule ("ROADHOG out of the hole") {
    event {
        Ongoing - Each Player;
        All;
        Roadhog;
    }
    conditions {
        Magnitude Of(Position Of(Event Player)) > Global.roadhogHoleRadius;
        (Event Player).roadhogYanked == False;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Roadhog);
        Global.roundTimer <= 58;
    }
    actions {
        Enable Movement Collision With Environment(Event Player);
    }
}

rule ("ROADHOG Yank") {
    event {
        Player Dealt Damage;
        All;
        Roadhog;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Roadhog);
    }
    actions {
        While(Is Using Ability 1(Attacker));
            Wait(0.016, Ignore Condition);
            Set Player Variable(Victim, roadhogYanked, True);
            Disallow Button(Event Player, Button(Ability 1));
        End;
        Wait(0.128, Ignore Condition);
        Set Player Variable(Victim, roadhogYanked, False);
        Allow Button(Event Player, Button(Ability 1));
    }
}

rule ("ROADHOG secondary buttons") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Roadhog);
        Or(Is Button Held(Event Player, Button(Primary Fire)), Is Button Held(Event Player, Button(Secondary Fire))) == True;
    }
    actions {
        Press Button(Event Player, Button(Ability 1));
    }
}

rule ("ROADHOG cd") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Roadhog);
        Is Using Ability 1(Event Player) == True;
    }
    actions {
        While(Is Using Ability 1(Event Player));
            Wait(0.032, Ignore Condition);
        End;
        "smallMessage(eventPlayer, \"{0}\".format(eventPlayer.getAbilityCooldown(Button.ABILITY_1)))"
        Set Ability Cooldown(Event Player, Button(Ability 1), 1.9);
    }
}

rule ("ROADHOG end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Roadhog);
        Global.heroOfLastRound == Hero(Roadhog);
    }
    actions {
        For Global Variable(roadhogHoleEffectsIt, 0, Count Of(Global.roadhogHoleEffects), 1);
            Destroy Effect(Value In Array(Global.roadhogHoleEffects, Global.roadhogHoleEffectsIt));
        End;
        Destroy In-World Text(Last Of(Global.roadhogHoleEffects));
    }
}

rule ("ROADHOG end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Roadhog);
        Global.heroOfLastRound == Hero(Roadhog);
    }
    actions {
        "eventPlayer.setGravity(100)"
        Set Player Variable(Event Player, roadhogYanked, True);
        Enable Movement Collision With Environment(Event Player);
    }
}

rule ("SIGMA init player") {
    event {
        Ongoing - Each Player;
        All;
        Sigma;
    }
    conditions {
        Global.heroOfTheRound == Hero(Sigma);
    }
    actions {
        Start Damage Modification(Event Player, Event Player, 0, Receivers Damagers and Damage Percent);
        Set Player Variable(Event Player, sigmaCatch, False);
    }
}

rule ("SIGMA Ult damage off") {
    event {
        Ongoing - Each Player;
        All;
        Sigma;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sigma);
    }
    actions {
        Set Damage Dealt(Event Player, 0);
    }
}

rule ("SIGMA no Ult damage on") {
    event {
        Ongoing - Each Player;
        All;
        Sigma;
    }
    conditions {
        Is Using Ultimate(Event Player) == False;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sigma);
    }
    actions {
        Set Damage Dealt(Event Player, 100);
    }
}

rule ("SIGMA Ult stunt") {
    event {
        Player Dealt Knockback;
        All;
        All;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sigma);
    }
    actions {
        Set Status(Victim, Null, Stunned, 5);
    }
}

rule ("SIGMA grasp cooldown") {
    event {
        Ongoing - Each Player;
        All;
        Sigma;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sigma);
    }
    actions {
        Set Player Variable(Event Player, sigmaUsingGrasp, True);
        Set Damage Received(Event Player, 1);
        Wait(0.125, Ignore Condition);
        Cancel Primary Action(Event Player);
        Set Damage Received(Event Player, 100);
        While(Is Using Ability 1(Event Player));
            Wait(0.032, Ignore Condition);
        End;
        If(Compare((Event Player).sigmaCatch, ==, True));
            Set Ability Cooldown(Event Player, Button(Ability 1), 2);
        Else;
            Set Ability Cooldown(Event Player, Button(Ability 1), 10);
        End;
        Set Player Variable(Event Player, sigmaUsingGrasp, False);
        Set Player Variable(Event Player, sigmaCatch, False);
    }
}

rule ("SIGMA catch") {
    event {
        Player Dealt Damage;
        All;
        Sigma;
    }
    conditions {
        Is In View Angle(Victim, Attacker, 45) == True;
        (Victim).sigmaUsingGrasp == True;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sigma);
    }
    actions {
        Set Player Variable(Victim, sigmaCatch, True);
        Kill(Attacker, Victim);
        Small Message(Array(Victim, Attacker), Custom String("rock catched {0} by {1}", Custom String("{0}{1}", Ability Icon String(Hero(Sigma), Button(Ability 2)), Ability Icon String(Hero(Sigma), Button(Ability 1))), Victim));
    }
}

rule ("SIGMA no catch") {
    event {
        Player Dealt Damage;
        All;
        Sigma;
    }
    conditions {
        Is In View Angle(Victim, Attacker, 45) == False;
        (Victim).sigmaUsingGrasp == False;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sigma);
    }
    actions {
        Set Player Variable(Event Player, sigmaCatch, False);
        Kill(Victim, Attacker);
    }
}

rule ("SIGMA kill") {
    event {
        Player Dealt Final Blow;
        All;
        Sigma;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sigma);
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
        Modify Player Score(Event Player, 1);
        Small Message(Event Player, Custom String("+1 point with {0} {1}", Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
        Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+1 point"), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
        Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
        Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
        Modify Global Variable(pointfeedHudId, Subtract, 0.01);
    }
}

rule ("SIGMA end of the round") {
    event {
        Ongoing - Each Player;
        All;
        Sigma;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Sigma);
        Global.heroOfLastRound == Hero(Sigma);
    }
    actions {
        Set Damage Dealt(Event Player, 100);
        Start Damage Modification(Event Player, Event Player, 100, Receivers Damagers and Damage Percent);
    }
}

rule ("SOLDIER init global") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.heroOfTheRound == Hero(Soldier: 76);
    }
    actions {
        Set Global Variable(soldierObjectiveEffects, Empty Array);
        Set Global Variable(soldierObjectivePos, Empty Array);
        Set Global Variable(soldierObjectivePos, Array(Vector(-18, 0, -18), Vector(-18, 0, 0), Vector(-18, 0, 18), Vector(0, 0, -18), Vector(0, 0, 18), Vector(18, 0, -18), Vector(18, 0, 0), Vector(18, 0, 18)));
        Set Global Variable(soldierObjectivePos, Randomized Array(Global.soldierObjectivePos));
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 0)), Light Shaft, Color(Blue), First Of(Global.soldierObjectivePos), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 0)), Light Shaft, Color(Blue), First Of(Global.soldierObjectivePos), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 0)), Light Shaft, Color(Blue), First Of(Global.soldierObjectivePos), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 1)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 1), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 1)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 1), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 1)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 1), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 2)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 2), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 2)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 2), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 2)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 2), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 3)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 3), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 3)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 3), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 3)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 3), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 4)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 4), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 4)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 4), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 4)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 4), 1.5, Visible To Position and Radius);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 5)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 5), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 5)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 5), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 5)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 5), 1.5, Visible To Position and Radius);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 6)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 6), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 6)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 6), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 6)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 6), 1.5, Visible To Position and Radius);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 7)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 7), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 7)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 7), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
        Create Effect(Filtered Array(All Players(All Teams), Compare((Current Array Element).soldierPoints, ==, 7)), Light Shaft, Color(Blue), Value In Array(Global.soldierObjectivePos, 7), 1.5, Visible To Position and Radius);
        Modify Global Variable(soldierObjectiveEffects, Append To Array, Last Created Entity);
    }
}

rule ("SOLDIER init & phased out") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Global.heroOfTheRound == Hero(Soldier: 76);
        Is Alive(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, soldierPointsHud, Null);
        Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
        Wait(0.512, Ignore Condition);
        Teleport(Event Player, Vector(0, 0, 0));
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), First Of(Global.soldierObjectivePos)), To World);
        Set Status(Event Player, Null, Phased Out, 60);
        Set Player Variable(Event Player, soldierPoints, 0);
        Stop Forcing Throttle(Event Player);
        Wait(0.256, Ignore Condition);
        If(Compare((Event Player).soldierPointsHud, ==, Null));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}: {1}/8 = {2}/4 points", Event Player, (Event Player).soldierPoints, Round To Integer(Divide((Event Player).soldierPoints, 2), Down)), Left, Multiply(Add((Event Player).soldierPoints, 10), -1), Null, Null, Color(Blue), Visible To Sort Order and String, Default Visibility);
            Set Player Variable(Event Player, soldierPointsHud, Last Text ID);
        End;
        Teleport(Event Player, Vector(0, 0, 0));
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), First Of(Global.soldierObjectivePos)), To World);
        Wait(0.256, Ignore Condition);
        Teleport(Event Player, Vector(0, 0, 0));
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), First Of(Global.soldierObjectivePos)), To World);
        Create HUD Text(Event Player, String("{0} m/s", Horizontal Speed Of(Event Player)), Null, Null, Left, 2, Color(Blue), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, playerSpeedHud, Last Text ID);
        Create Icon(Event Player, Add(Value In Array(Global.soldierObjectivePos, (Event Player).soldierPoints), Vector(0, 1.5, 0)), Flag, Visible To and Position, Color(Blue), True);
        Set Player Variable(Event Player, playerClosestObjectiveIcon, Last Created Entity);
    }
}

rule ("SOLDIER sprint") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Game In Progress == True;
        Is Using Ability 1(Event Player) == True;
        Horizontal Speed Of(Event Player) > 5;
        Global.heroOfTheRound == Hero(Soldier: 76);
    }
    actions {
        Set Status(Event Player, Null, Phased Out, 60);
        Modify Player Variable(Event Player, soldierSprint, Add, 1.5);
        Set Move Speed(Event Player, (Event Player).soldierSprint);
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
        Set Player Variable(Event Player, soldierSprint, 100);
        Set Move Speed(Event Player, 100);
        Play Effect(Event Player, Debuff Impact Sound, Color(Green), Event Player, 100);
    }
}

rule ("SOLDIER point") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Soldier: 76);
        (Event Player).soldierPoints < 8;
        Distance Between(Position Of(Event Player), Value In Array(Global.soldierObjectivePos, (Event Player).soldierPoints)) <= 1.55;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
        Play Effect(Event Player, Buff Explosion Sound, Color(Blue), Event Player, 100);
        Modify Player Variable(Event Player, soldierPoints, Add, 1);
        If(Compare(Modulo((Event Player).soldierPoints, 2), ==, 0));
            Modify Player Score(Event Player, 1);
            Small Message(Event Player, Custom String("+1 point with {0} {1}", Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
            Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+1 point"), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
            Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
            Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
            Modify Global Variable(pointfeedHudId, Subtract, 0.01);
    }
}

rule ("SOLDIER winner") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Soldier: 76);
        (Event Player).soldierPoints >= 8;
    }
    actions {
        Set Global Variable(roundTimer, 0.032);
    }
}

rule ("SOLDIER end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Soldier: 76);
        Global.heroOfLastRound == Hero(Soldier: 76);
    }
    actions {
        Set Global Variable(soldierDestructorIt, 0);
        For Global Variable(soldierDestructorIt, 0, Count Of(Global.soldierObjectiveEffects), 1);
            Destroy Effect(Value In Array(Global.soldierObjectiveEffects, Global.soldierDestructorIt));
        End;
    }
}

rule ("SOLDIER end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Soldier: 76);
        Global.heroOfLastRound == Hero(Soldier: 76);
    }
    actions {
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, soldierPoints, 0);
        Destroy HUD Text((Event Player).playerSpeedHud);
        Destroy Icon((Event Player).playerClosestObjectiveIcon);
        Clear Status(Event Player, Phased Out);
        Set Move Speed(Event Player, 100);
        Wait(0.256, Ignore Condition);
        Destroy HUD Text((Event Player).soldierPointsHud);
    }
}

rule ("SOMBRA hack to kill") {
    event {
        Ongoing - Each Player;
        All;
        Sombra;
    }
    conditions {
        Has Status(Event Player, Hacked) == True;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sombra);
    }
    actions {
        Set Player Variable(Event Player, sombraHackedPostion, Position Of(Event Player));
        Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), (Event Player).sombraHackedPostion, 1.5);
        Teleport(Event Player, Vector(0, -500, 0));
    }
}

rule ("SOMBRA limit stealth duration") {
    event {
        Ongoing - Each Player;
        All;
        Sombra;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Sombra);
    }
    actions {
        Wait(6, Abort When False);
        Press Button(Event Player, Button(Ability 1));
        Small Message(Event Player, Custom String("Maximum Stealth Duration Reached"));
    }
}

rule ("SYM init player") {
    event {
        Ongoing - Each Player;
        All;
        Symmetra;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
    }
    actions {
        "Brig flag text above the head for the player who reached the color first"
        Create In-World Text(If-Then-Else(Compare(First Of(Global.symPlayersInTheSelectedColor), ==, Event Player), All Players(All Teams), Empty Array), Custom String("{0}", Ability Icon String(Hero(Brigitte), Button(Ultimate))), Event Player, 2, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable(Event Player, symFirstPlayerInColorText, Last Text ID);
        Set Status(Event Player, Null, Rooted, 9999);
        Disable Movement Collision With Players(Event Player);
        Set Player Variable(Event Player, symIn, False);
        Wait(0.512, Ignore Condition);
        Teleport(Event Player, Vector(0, 0, 0));
        "Left HUD showing which position you finish the run to the color + brig flag icon if you finished 1st"
        Create HUD Text(If-Then-Else(And((Event Player).symIn, Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor"))), Event Player, Empty Array), Custom String("{0}{1}", Add(Index Of Array Value(Global.symPlayersInTheSelectedColor, Event Player), 1), (Event Player).symOrdinalString), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, symOrdinalPosHud, Last Text ID);
    }
}

rule ("SYM init global") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
    }
    actions {
        Set Global Variable(symColoredSpheresEffectsAndText, Empty Array);
        Set Global Variable(symPlayersInTheSelectedColor, Empty Array);
        Set Global Variable(symVictims, Empty Array);
        Set Global Variable(symInnerRound, 0);
        Set Global Variable(symColorDeciding, 0);
        Set Global Variable(symColorSelected, 0);
        Set Global Variable(symTimeToReachTheColor, 5);
        Wait(0.032, Ignore Condition);
        Set Global Variable(symColorsPositions, Array(Vector(0, 0, 0), Vector(0, 0, 15), Vector(-15, 0, 15), Vector(-15, 0, 0), Vector(-15, 0, -15), Vector(0, 0, -15), Vector(15, 0, -15), Vector(15, 0, 0), Vector(15, 0, 15)));
        Create Effect(All Players(All Teams), Sphere, Color(Blue), Value In Array(Global.symColorsPositions, 1), 5, Visible To Position and Radius);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Sphere, Color(Green), Value In Array(Global.symColorsPositions, 2), 5, Visible To Position and Radius);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Sphere, Color(Orange), Value In Array(Global.symColorsPositions, 3), 5, Visible To Position and Radius);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Sphere, Color(Purple), Value In Array(Global.symColorsPositions, 4), 5, Visible To Position and Radius);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Sphere, Color(Red), Value In Array(Global.symColorsPositions, 5), 5, Visible To Position and Radius);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Sphere, Color(Turquoise), Value In Array(Global.symColorsPositions, 6), 5, Visible To Position and Radius);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Sphere, Color(White), Value In Array(Global.symColorsPositions, 7), 5, Visible To Position and Radius);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Sphere, Color(Yellow), Value In Array(Global.symColorsPositions, 8), 5, Visible To Position and Radius);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Created Entity);
        Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Ray Cast Hit Position(Eye Position(Current Array Element), Add(Eye Position(Current Array Element), Multiply(Facing Direction Of(Current Array Element), 15)), Null, All Players(All Teams), False), Value In Array(Global.symColorsPositions, 1)), <=, 5)), Custom String("BLUE"), Add(Value In Array(Global.symColorsPositions, 1), Vector(0, 1.5, 0)), 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Ray Cast Hit Position(Eye Position(Current Array Element), Add(Eye Position(Current Array Element), Multiply(Facing Direction Of(Current Array Element), 21.21)), Null, All Players(All Teams), False), Value In Array(Global.symColorsPositions, 2)), <=, 5)), Custom String("GREEN"), Add(Value In Array(Global.symColorsPositions, 2), Vector(0, 1.5, 0)), 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Ray Cast Hit Position(Eye Position(Current Array Element), Add(Eye Position(Current Array Element), Multiply(Facing Direction Of(Current Array Element), 15)), Null, All Players(All Teams), False), Value In Array(Global.symColorsPositions, 3)), <=, 5)), Custom String("ORANGE"), Add(Value In Array(Global.symColorsPositions, 3), Vector(0, 1.5, 0)), 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Ray Cast Hit Position(Eye Position(Current Array Element), Add(Eye Position(Current Array Element), Multiply(Facing Direction Of(Current Array Element), 21.21)), Null, All Players(All Teams), False), Value In Array(Global.symColorsPositions, 4)), <=, 5)), Custom String("PURPLE"), Add(Value In Array(Global.symColorsPositions, 4), Vector(0, 1.5, 0)), 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Ray Cast Hit Position(Eye Position(Current Array Element), Add(Eye Position(Current Array Element), Multiply(Facing Direction Of(Current Array Element), 15)), Null, All Players(All Teams), False), Value In Array(Global.symColorsPositions, 5)), <=, 5)), Custom String("RED"), Add(Value In Array(Global.symColorsPositions, 5), Vector(0, 1.5, 0)), 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Ray Cast Hit Position(Eye Position(Current Array Element), Add(Eye Position(Current Array Element), Multiply(Facing Direction Of(Current Array Element), 21.21)), Null, All Players(All Teams), False), Value In Array(Global.symColorsPositions, 6)), <=, 5)), Custom String("TURQUOISE"), Add(Value In Array(Global.symColorsPositions, 6), Vector(0, 1.5, 0)), 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Ray Cast Hit Position(Eye Position(Current Array Element), Add(Eye Position(Current Array Element), Multiply(Facing Direction Of(Current Array Element), 15)), Null, All Players(All Teams), False), Value In Array(Global.symColorsPositions, 7)), <=, 5)), Custom String("WHITE"), Add(Value In Array(Global.symColorsPositions, 7), Vector(0, 1.5, 0)), 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Ray Cast Hit Position(Eye Position(Current Array Element), Add(Eye Position(Current Array Element), Multiply(Facing Direction Of(Current Array Element), 21.21)), Null, All Players(All Teams), False), Value In Array(Global.symColorsPositions, 8)), <=, 5)), Custom String("YELLOW"), Add(Value In Array(Global.symColorsPositions, 8), Vector(0, 1.5, 0)), 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Global.symColorDeciding, ==, 1), All Players(All Teams), Empty Array), Null, Null, Custom String("THE COLOR IS..."), Top, 3, Null, Null, Color(Blue), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Global.symColorDeciding, ==, 2), All Players(All Teams), Empty Array), Null, Null, Custom String("THE COLOR IS..."), Top, 3, Null, Null, Color(Green), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Global.symColorDeciding, ==, 3), All Players(All Teams), Empty Array), Null, Null, Custom String("THE COLOR IS..."), Top, 3, Null, Null, Color(Orange), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Global.symColorDeciding, ==, 4), All Players(All Teams), Empty Array), Null, Null, Custom String("THE COLOR IS..."), Top, 3, Null, Null, Color(Purple), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Global.symColorDeciding, ==, 5), All Players(All Teams), Empty Array), Null, Null, Custom String("THE COLOR IS..."), Top, 3, Null, Null, Color(Red), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Global.symColorDeciding, ==, 6), All Players(All Teams), Empty Array), Null, Null, Custom String("THE COLOR IS..."), Top, 3, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Global.symColorDeciding, ==, 7), All Players(All Teams), Empty Array), Null, Null, Custom String("THE COLOR IS..."), Top, 3, Null, Null, Color(White), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(If-Then-Else(Compare(Global.symColorDeciding, ==, 8), All Players(All Teams), Empty Array), Null, Null, Custom String("THE COLOR IS..."), Top, 3, Null, Null, Color(Purple), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Syms in: {0}", Count Of(Filtered Array(All Players(All Teams), (Current Array Element).symIn))), Left, 3, Null, Null, Color(White), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Syms out: {0}", Count Of(Filtered Array(All Players(All Teams), And(Compare((Current Array Element).symIn, ==, False), Is Alive(Current Array Element))))), Left, 4, Null, Null, Color(White), Visible To and String, Default Visibility);
        Modify Global Variable(symColoredSpheresEffectsAndText, Append To Array, Last Text ID);
        Call Subroutine(symTheColorIsSelectedTrigger);
    }
}

rule ("SYM invisibility ON") {
    event {
        Ongoing - Each Player;
        All;
        Symmetra;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Magnitude Of(Position Of(Event Player)) <= 2;
    }
    actions {
        "getAllPlayers().exclude(eventPlayer).setInvisibility(Invis.ALL)"
        Set Invisible(All Players(All Teams), All);
    }
}

rule ("SYM invisibility OFF") {
    event {
        Ongoing - Each Player;
        All;
        Symmetra;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Magnitude Of(Position Of(Event Player)) > 2;
    }
    actions {
        Wait(0.064, Ignore Condition);
        "getAllPlayers().exclude(eventPlayer).setInvisibility(Invis.NONE)"
        Set Invisible(Event Player, None);
    }
}

disabled rule ("SYM invisibility ON 2") {
    event {
        Ongoing - Each Player;
        All;
        Symmetra;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Distance Between(Position Of(Event Player), Closest Player To(Event Player, All Teams)) <= 2;
    }
    actions {
        Set Invisible(Filtered Array(All Players(All Teams), Compare(Distance Between(Position Of(Current Array Element), Position Of(Event Player)), <=, 2)), All);
    }
}

disabled rule ("SYM invisibility OFF 2") {
    event {
        Ongoing - Each Player;
        All;
        Symmetra;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Distance Between(Position Of(Event Player), Closest Player To(Event Player, All Teams)) > 2;
    }
    actions {
        Set Invisible(Filtered Array(All Players(All Teams), Compare(Distance Between(Position Of(Current Array Element), Position Of(Event Player)), >, 2)), None);
    }
}

rule ("SYM decidingOnAColor PHASE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Global.symPhase == Custom String("decidingOnAColor");
    }
    actions {
        Set Global Variable(symColorDeciding, Random Value In Array(Remove From Array(Array(1, 2, 3, 4, 5, 6, 7, 8), Global.symColorDeciding)));
        Wait(0.192, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("SYM theColorIsSelected TRIGGER") {
    event {
        Subroutine;
        symTheColorIsSelectedTrigger;
    }
    actions {
        Set Global Variable(symPlayersInTheSelectedColor, Empty Array);
        Set Global Variable(symPhase, Custom String("decidingOnAColor"));
        Wait(3, Ignore Condition);
        Set Global Variable(symColorDeciding, 0);
        Set Global Variable(symPhase, Custom String("theColorIsSelected"));
    }
}

rule ("SYM theColorIsSelected PHASE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Global.symPhase == Custom String("theColorIsSelected");
    }
    actions {
        "@Condition symColorSelected == 0\nsymColorSelected = random.choice([3, 7])"
        Set Global Variable(symColorSelected, Random Integer(1, 8));
        Wait(0.032, Ignore Condition);
        Set Global Variable(symPlayersInTheSelectedColor, Empty Array);
        If(Compare(Global.symColorSelected, ==, 1));
            Create HUD Text(If-Then-Else(And(Compare(Global.symColorSelected, ==, 1), Or(Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelected")), Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd"))), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor")))), All Players(All Teams), Empty Array), Custom String("THE COLOR IS BLUE"), Null, Null, Top, 3, Color(Blue), Null, Null, Visible To and String, Default Visibility);
            Set Global Variable(symSelectedColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 2));
            Create HUD Text(If-Then-Else(And(Compare(Global.symColorSelected, ==, 2), Or(Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelected")), Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd"))), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor")))), All Players(All Teams), Empty Array), Custom String("THE COLOR IS GREEN"), Null, Null, Top, 3, Color(Green), Null, Null, Visible To and String, Default Visibility);
            Set Global Variable(symSelectedColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 3));
            Create HUD Text(If-Then-Else(And(Compare(Global.symColorSelected, ==, 3), Or(Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelected")), Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd"))), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor")))), All Players(All Teams), Empty Array), Custom String("THE COLOR IS ORANGE"), Null, Null, Top, 3, Color(Orange), Null, Null, Visible To and String, Default Visibility);
            Set Global Variable(symSelectedColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 4));
            Create HUD Text(If-Then-Else(And(Compare(Global.symColorSelected, ==, 4), Or(Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelected")), Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd"))), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor")))), All Players(All Teams), Empty Array), Custom String("THE COLOR IS PURPLE"), Null, Null, Top, 3, Color(Purple), Null, Null, Visible To and String, Default Visibility);
            Set Global Variable(symSelectedColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 5));
            Create HUD Text(If-Then-Else(And(Compare(Global.symColorSelected, ==, 5), Or(Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelected")), Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd"))), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor")))), All Players(All Teams), Empty Array), Custom String("THE COLOR IS RED"), Null, Null, Top, 3, Color(Red), Null, Null, Visible To and String, Default Visibility);
            Set Global Variable(symSelectedColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 6));
            Create HUD Text(If-Then-Else(And(Compare(Global.symColorSelected, ==, 6), Or(Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelected")), Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd"))), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor")))), All Players(All Teams), Empty Array), Custom String("THE COLOR IS TURQUOISE"), Null, Null, Top, 3, Color(Turquoise), Null, Null, Visible To and String, Default Visibility);
            Set Global Variable(symSelectedColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 7));
            Create HUD Text(If-Then-Else(And(Compare(Global.symColorSelected, ==, 7), Or(Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelected")), Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd"))), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor")))), All Players(All Teams), Empty Array), Custom String("THE COLOR IS WHITE"), Null, Null, Top, 3, Color(White), Null, Null, Visible To and String, Default Visibility);
            Set Global Variable(symSelectedColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 8));
            Create HUD Text(If-Then-Else(And(Compare(Global.symColorSelected, ==, 8), Or(Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelected")), Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd"))), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor")))), All Players(All Teams), Empty Array), Custom String("THE COLOR IS YELLOW"), Null, Null, Top, 3, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
            Set Global Variable(symSelectedColorHud, Last Text ID);
        End;
        Set Global Variable(symPhase, Custom String("theColorIsSelectedEnd"));
    }
}

rule ("SYM someoneReachedTheSelectedColor TRIGGER") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Global.symPhase == Custom String("theColorIsSelectedEnd");
        "@Condition len(symPlayersInTheSelectedColor) >= 1"
        Is True For Any(Global.playersStartOfTheRound, (Current Array Element).symIn) == True;
    }
    actions {
        Set Global Variable(symPhase, Custom String("someoneReachedTheSelectedColor"));
    }
}

rule ("SYM someoneReachedTheSelectedColor PHASE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Global.symPhase == Custom String("someoneReachedTheSelectedColor");
    }
    actions {
        Chase Global Variable At Rate(symTimeToReachTheColor, 0, 1, None);
        If(Compare(Global.symColorSelected, ==, 1));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("Time to reach the color: {0}", Global.symTimeToReachTheColor), Top, 4, Null, Null, Color(Blue), Visible To and String, Default Visibility);
            Set Global Variable(symTimeToReachTheColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 2));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("Time to reach the color: {0}", Global.symTimeToReachTheColor), Top, 4, Null, Null, Color(Green), Visible To and String, Default Visibility);
            Set Global Variable(symTimeToReachTheColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 3));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("Time to reach the color: {0}", Global.symTimeToReachTheColor), Top, 4, Null, Null, Color(Orange), Visible To and String, Default Visibility);
            Set Global Variable(symTimeToReachTheColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 4));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("Time to reach the color: {0}", Global.symTimeToReachTheColor), Top, 4, Null, Null, Color(Purple), Visible To and String, Default Visibility);
            Set Global Variable(symTimeToReachTheColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 5));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("Time to reach the color: {0}", Global.symTimeToReachTheColor), Top, 4, Null, Null, Color(Red), Visible To and String, Default Visibility);
            Set Global Variable(symTimeToReachTheColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 6));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("Time to reach the color: {0}", Global.symTimeToReachTheColor), Top, 4, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
            Set Global Variable(symTimeToReachTheColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 7));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("Time to reach the color: {0}", Global.symTimeToReachTheColor), Top, 4, Null, Null, Color(White), Visible To and String, Default Visibility);
            Set Global Variable(symTimeToReachTheColorHud, Last Text ID);
        Else If(Compare(Global.symColorSelected, ==, 8));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("Time to reach the color: {0}", Global.symTimeToReachTheColor), Top, 4, Null, Null, Color(Yellow), Visible To and String, Default Visibility);
            Set Global Variable(symTimeToReachTheColorHud, Last Text ID);
    }
}

rule ("SYM innerRoundTimerIsOver TRIGGER") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Global.symTimeToReachTheColor == 0;
        Global.symPhase == Custom String("someoneReachedTheSelectedColor");
    }
    actions {
        Set Global Variable(symPhase, Custom String("innerTimeRoundIsOver"));
    }
}

rule ("SYM innerRoundTimerIsOver PHASE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Global.symPhase == Custom String("innerTimeRoundIsOver");
    }
    actions {
        Stop Chasing Global Variable(symTimeToReachTheColor);
        Destroy HUD Text(Global.symSelectedColorHud);
        "smallMessage(getAllPlayers(), \"destroyed symSelectedColorHud\")"
        Destroy HUD Text(Global.symTimeToReachTheColorHud);
        Modify Global Variable(symInnerRound, Add, 1);
        Teleport(All Players(All Teams), Vector(0, 0, 0));
        Set Global Variable(symPhase, Custom String("decidingOnAColor"));
        Set Global Variable(symColorSelected, 0);
        Set Global Variable(symTimeToReachTheColor, If-Then-Else(Compare(Global.symInnerRound, ==, 1), 3, If-Then-Else(Compare(Global.symInnerRound, ==, 2), 2, 1)));
        Call Subroutine(symScoring);
        Call Subroutine(symTheColorIsSelectedTrigger);
    }
}

rule ("SYM scoring") {
    event {
        Subroutine;
        symScoring;
    }
    actions {
        "symVictims = [player for player in playersStartOfTheRound if player.isAlive()].exclude(symPlayersInTheSelectedColor)"
        Set Global Variable(symVictims, Remove From Array(All Living Players(All Teams), Global.symPlayersInTheSelectedColor));
        Press Button(Global.symVictims, Button(Ability 2));
        Wait(0.032, Ignore Condition);
        If(Compare(Count Of(Global.symVictims), >, 0));
            Kill(Global.symVictims, First Of(Global.symPlayersInTheSelectedColor));
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), First Of(Global.symPlayersInTheSelectedColor), 1);
            Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), First Of(Global.symPlayersInTheSelectedColor), 100);
            Modify Player Score(First Of(Global.symPlayersInTheSelectedColor), Count Of(Global.symVictims));
            Small Message(First Of(Global.symPlayersInTheSelectedColor), Custom String("+{0} with {1} {2}", Custom String("{0} {1}", Count Of(Global.symVictims), If-Then-Else(Compare(Count Of(Global.symVictims), >, 1), Custom String("points"), Custom String("point"))), Hero Icon String(Hero(Symmetra)), Hero(Symmetra)));
            Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Symmetra)), First Of(Global.symPlayersInTheSelectedColor), Custom String("+{0}", Custom String("{0} {1}", Count Of(Global.symVictims), If-Then-Else(Compare(Count Of(Global.symVictims), >, 1), Custom String("points"), Custom String("point")))), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
            Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
            Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
            Modify Global Variable(pointfeedHudId, Subtract, 0.01);
        End;
    }
}

rule ("SYM in") {
    event {
        Ongoing - Each Player;
        All;
        Symmetra;
    }
    conditions {
        Distance Between(Position Of(Event Player), Value In Array(Global.symColorsPositions, Global.symColorSelected)) <= 5;
        Magnitude Of(Position Of(Event Player)) > 5;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Array Contains(Global.playersStartOfTheRound, Event Player) == True;
        (Event Player).symIn == False;
        Global.symTimeToReachTheColor > 0;
        Or(Compare(Global.symPhase, ==, Custom String("theColorIsSelectedEnd")), Compare(Global.symPhase, ==, Custom String("someoneReachedTheSelectedColor"))) == True;
    }
    actions {
        Teleport(Event Player, Value In Array(Global.symColorsPositions, Global.symColorSelected));
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
        If(Compare(Global.symColorSelected, ==, 1));
            Play Effect(Event Player, Buff Explosion Sound, Color(Blue), Event Player, 100);
        Else If(Compare(Global.symColorSelected, ==, 2));
            Play Effect(Event Player, Buff Explosion Sound, Color(Green), Event Player, 100);
        Else If(Compare(Global.symColorSelected, ==, 3));
            Play Effect(Event Player, Buff Explosion Sound, Color(Orange), Event Player, 100);
        Else If(Compare(Global.symColorSelected, ==, 4));
            Play Effect(Event Player, Buff Explosion Sound, Color(Purple), Event Player, 100);
        Else If(Compare(Global.symColorSelected, ==, 5));
            Play Effect(Event Player, Buff Explosion Sound, Color(Red), Event Player, 100);
        Else If(Compare(Global.symColorSelected, ==, 6));
            Play Effect(Event Player, Buff Explosion Sound, Color(Turquoise), Event Player, 100);
        Else If(Compare(Global.symColorSelected, ==, 7));
            Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 100);
        Else If(Compare(Global.symColorSelected, ==, 8));
            Play Effect(Event Player, Buff Explosion Sound, Color(Yellow), Event Player, 100);
        End;
        Set Player Variable(Event Player, symIn, True);
        Modify Global Variable(symPlayersInTheSelectedColor, Append To Array, Event Player);
        If(Compare(Count Of(Global.symPlayersInTheSelectedColor), ==, 1));
            Set Player Variable(Event Player, symOrdinalString, Custom String("st {0}", Ability Icon String(Hero(Brigitte), Button(Ultimate))));
        Else If(Compare(Count Of(Global.symPlayersInTheSelectedColor), ==, 2));
            Set Player Variable(Event Player, symOrdinalString, Custom String("nd"));
        Else If(Compare(Count Of(Global.symPlayersInTheSelectedColor), ==, 3));
            Set Player Variable(Event Player, symOrdinalString, Custom String("rd"));
        Else;
            Set Player Variable(Event Player, symOrdinalString, Custom String("th"));
        End;
        Set Status(Event Player, Null, Burning, 9999);
        Disallow Button(Event Player, Button(Interact));
        Wait(0.466, Ignore Condition);
        Press Button(Event Player, Button(Ability 2));
        Wait(0.032, Ignore Condition);
        Disallow Button(Event Player, Button(Ability 2));
    }
}

rule ("SYM out") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Distance Between(Position Of(Event Player), Value In Array(Global.symColorsPositions, Global.symColorSelected)) > 5;
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Global.roundTimer <= 58;
    }
    actions {
        "@Condition eventPlayer.symIn == true"
        Clear Status(Event Player, Burning);
        Allow Button(Event Player, Button(Interact));
        Allow Button(Event Player, Button(Ability 2));
        Set Player Variable(Event Player, symIn, False);
        Wait(0.064, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("SYM position corrector") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Symmetra);
        Global.symPhase == Custom String("decidingOnAColor");
        Magnitude Of(Event Player) > 1;
    }
    actions {
        Teleport(Event Player, Vector(0, 0, 0));
        Wait(0.032, Ignore Condition);
        Loop If Condition Is True;
    }
}

disabled rule ("SYM player debug") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Create HUD Text(All Players(All Teams), Custom String("{0}: {1}", Event Player, (Event Player).symIn), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        "Left HUD showing which position you finish the run to the color + brig flag icon if you finished 1st"
        Create HUD Text(Event Player, Custom String("{0}{1}", Add(Index Of Array Value(Global.symPlayersInTheSelectedColor, Event Player), 1), (Event Player).symOrdinalString), Null, Null, Left, 2, Color(White), Null, Null, Visible To and String, Default Visibility);
    }
}

disabled rule ("SYM global debug") {
    event {
        Ongoing - Global;
    }
    actions {
        Create HUD Text(All Players(All Teams), Custom String("Phase: {0}", Global.symPhase), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Custom String("Color Selected: {0}, {1}", Value In Array(Array(Custom String("NULL"), Custom String("BLUE"), Custom String("GREEN"), Custom String("ORANGE"), Custom String("PURPLE"), Custom String("RED"), Custom String("TURQUOISE"), Custom String("WHITE"), Custom String("YELLOW")), Global.symColorSelected), Global.symColorSelected), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Custom String("innerTime: {0}", Global.symTimeToReachTheColor), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Custom String("innerRound: {0}", Global.symInnerRound), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
    }
}

rule ("SYM phase corrector") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Symmetra);
        Global.symPhase != Null;
    }
    actions {
        Set Global Variable(symPhase, Null);
    }
}

rule ("SYM end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Symmetra);
        Global.heroOfLastRound == Hero(Symmetra);
    }
    actions {
        Wait(0.016, Ignore Condition);
        Clear Status(Event Player, Burning);
        Clear Status(Event Player, Rooted);
        Enable Movement Collision With Players(Event Player);
        Allow Button(Event Player, Button(Interact));
        Allow Button(Event Player, Button(Ability 2));
        Set Invisible(All Players(All Teams), None);
        Destroy In-World Text((Event Player).symFirstPlayerInColorText);
        Destroy HUD Text((Event Player).symOrdinalPosHud);
    }
}

rule ("SYM end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Symmetra);
        Global.heroOfLastRound == Hero(Symmetra);
    }
    actions {
        Destroy HUD Text(Global.symSelectedColorHud);
        Destroy HUD Text(Global.symTimeToReachTheColorHud);
        Wait(0.016, Ignore Condition);
        For Global Variable(destructorIt, 0, Count Of(Global.symColoredSpheresEffectsAndText), 1);
            Destroy Effect(Value In Array(Global.symColoredSpheresEffectsAndText, Global.destructorIt));
            Destroy In-World Text(Value In Array(Global.symColoredSpheresEffectsAndText, Global.destructorIt));
            Destroy HUD Text(Value In Array(Global.symColoredSpheresEffectsAndText, Global.destructorIt));
        End;
        Set Global Variable(symColoredSpheresEffectsAndText, Empty Array);
        Set Global Variable(symPlayersInTheSelectedColor, Empty Array);
        Set Global Variable(symVictims, Empty Array);
        Set Global Variable(symColorsPositions, Empty Array);
        Set Global Variable(symPhase, Null);
        Set Global Variable(symInnerRound, 0);
        Set Global Variable(symColorDeciding, 0);
        Set Global Variable(symColorSelected, 0);
        Set Global Variable(symTimeToReachTheColor, 5);
        Stop Chasing Global Variable(symTimeToReachTheColor);
    }
}

rule ("TRACER create crown") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Tracer);
    }
    actions {
        Set Global Variable(crownPos, Vector(0, 1.5, 0));
        Create Effect(All Players(All Teams), Good Aura, Color(Orange), Global.crownPos, 1, Visible To Position and Radius);
        Set Global Variable(crownEffect, Last Created Entity);
        Create HUD Text(Global.tracerQueen, Custom String("QUEEN"), Null, Null, Left, 2, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Set Global Variable(tracerQueenHud, Last Text ID);
        Create Icon(All Players(All Teams), Global.crownPos, Arrow: Down, Visible To and Position, Color(Orange), True);
        Set Global Variable(tracerQueenPositionIcon, Last Created Entity);
    }
}

rule ("TRACER stun & steal") {
    event {
        Player Dealt Damage;
        All;
        Tracer;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Tracer);
    }
    actions {
        If(Compare(Global.tracerQueen, ==, Attacker));
            Set Status(Victim, Event Player, Stunned, 1);
        End;
        If(Compare(Global.tracerQueen, ==, Victim));
            Set Status(Victim, Event Player, Stunned, 0.75);
            Play Effect(All Players(All Teams), Buff Impact Sound, Color(Orange), Event Player, 50);
            Set Global Variable(tracerQueen, Attacker);
            Set Global Variable(crownPos, Attacker);
    }
}

rule ("TRACER init queen") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Tracer);
    }
    actions {
        Set Player Variable(Event Player, queenPointsHud, Null);
        Set Player Variable(Event Player, queenPoints, 0);
        Wait(0.256, Ignore Condition);
        If(Compare((Event Player).queenPointsHud, ==, Null));
            Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}: {1}/10 {2}", Event Player, (Event Player).queenPoints, If-Then-Else(Compare(Event Player, ==, Global.tracerQueen), Custom String("queen"), Custom String(""))), Left, Multiply(Add((Event Player).queenPoints, 10), -1), Null, Null, Color(Orange), Visible To Sort Order and String, Default Visibility);
            Set Player Variable(Event Player, queenPointsHud, Last Text ID);
        End;
        Set Gravity(Event Player, 100);
    }
}

rule ("TRACER first queen") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Distance Between(Event Player, Position Of(Global.crownEffect)) <= 1.5;
        Global.heroOfTheRound == Hero(Tracer);
        Global.tracerQueen == Null;
        Global.roundTimer <= 58.5;
    }
    actions {
        Wait(0.064, Abort When False);
        Play Effect(Event Player, Buff Impact Sound, Color(Orange), Event Player, 50);
        Set Global Variable(tracerQueen, Event Player);
        Set Global Variable(crownPos, Event Player);
    }
}

rule ("TRACER is queen = points, gravity") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Tracer);
        Global.tracerQueen == Event Player;
    }
    actions {
        Set Gravity(Event Player, 500);
        Wait(1, Abort When False);
        Modify Player Variable(Event Player, queenPoints, Add, 1);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Orange), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Orange), Event Player, 50);
        Loop If Condition Is True;
    }
}

rule ("TRACER is not queen = points, gravity") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Tracer);
        Global.tracerQueen != Event Player;
    }
    actions {
        Set Gravity(Event Player, 100);
    }
}

rule ("TRACER queen winner") {
    event {
        Ongoing - Each Player;
        All;
        Tracer;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Tracer);
        Global.tracerQueen == Event Player;
        (Event Player).queenPoints >= 10;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 1);
        Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
        Modify Player Score(Event Player, Subtract(Count Of(Global.playersStartOfTheRound), 1));
        Small Message(Event Player, Custom String("+{0} with {1} {2}", Custom String("{0} {1}", Subtract(Count Of(Global.playersStartOfTheRound), 1), If-Then-Else(Compare(Subtract(Count Of(Global.playersStartOfTheRound), 1), >, 1), Custom String("points"), Custom String("point"))), Hero Icon String(Hero Of(Event Player)), Hero Of(Event Player)));
        Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Event Player, Custom String("+{0}", Custom String("{0} {1}", Subtract(Count Of(Global.playersStartOfTheRound), 1), If-Then-Else(Compare(Subtract(Count Of(Global.playersStartOfTheRound), 1), >, 1), Custom String("points"), Custom String("point")))), Right, Add(-1, Global.pointfeedHudId), Color(Orange), Color(White), Color(Orange), Visible To, Default Visibility);
        Modify Global Variable(pointfeedHud, Append To Array, Last Text ID);
        Set Global Variable At Index(pointfeedHudTimes, Subtract(Count Of(Global.pointfeedHud), 1), 3.744);
        Modify Global Variable(pointfeedHudId, Subtract, 0.01);
        Set Global Variable(roundTimer, 0.032);
    }
}

rule ("TRACER dead queen") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Tracer);
        Global.tracerQueen == Event Player;
    }
    actions {
        Set Global Variable(tracerQueen, Null);
        Set Global Variable(crownPos, Vector(0, 1.5, 0));
    }
}

rule ("TRACER leaver queen") {
    event {
        Player Left Match;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound == Hero(Tracer);
        Global.tracerQueen == Event Player;
    }
    actions {
        Set Global Variable(tracerQueen, Null);
        Set Global Variable(crownPos, Vector(0, 1.5, 0));
    }
}

rule ("TRACER destroy crown") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Tracer);
    }
    actions {
        Destroy Effect(First Of(Global.crownEffect));
        Set Global Variable(tracerQueen, Null);
    }
}

rule ("TRACER secondary buttons") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Tracer);
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }
    actions {
        Press Button(Event Player, Button(Melee));
    }
}

rule ("TRACER end of the round {EACH PLAYER}") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Tracer);
        Global.heroOfLastRound == Hero(Tracer);
    }
    actions {
        Set Player Variable(Event Player, queenPoints, 0);
        Set Gravity(Event Player, 100);
        Wait(0.256, Ignore Condition);
        Destroy HUD Text((Event Player).queenPointsHud);
    }
}

rule ("TRACER end of the round {GLOBAL}") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.heroOfTheRound != Hero(Tracer);
        Global.heroOfLastRound == Hero(Tracer);
    }
    actions {
        Set Global Variable(tracerQueen, Null);
        Wait(0.256, Ignore Condition);
        Destroy Icon(Global.tracerQueenPositionIcon);
        Destroy HUD Text(Global.tracerQueenHud);
    }
}

rule ("WINSTON rage") {
    event {
        Ongoing - Each Player;
        All;
        Winston;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Winston);
        Is Using Ultimate(Event Player) == False;
    }
    actions {
        Press Button(Event Player, Button(Ultimate));
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("WINSTON jump cooldown") {
    event {
        Ongoing - Each Player;
        All;
        Winston;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Winston);
        Is Using Ability 1(Event Player) == True;
    }
    actions {
        Wait(0.032, Ignore Condition);
        Set Ability Cooldown(Event Player, Button(Ability 1), 12);
    }
}

rule ("ZEN mega-kick") {
    event {
        Player Dealt Damage;
        All;
        Zenyatta;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Zenyatta);
    }
    actions {
        Apply Impulse(Victim, Add(Facing Direction Of(Event Player), Vector(0, 0.1, 0)), 75, To World, Cancel Contrary Motion);
    }
}

rule ("ZEN secondary buttons") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
        Global.heroOfTheRound == Hero(Zenyatta);
        Or(Is Button Held(Event Player, Button(Primary Fire)), Is Button Held(Event Player, Button(Secondary Fire))) == True;
    }
    actions {
        Press Button(Event Player, Button(Melee));
    }
}

rule ("----- THIRD CAMERA PERSON ----- Made by Mitsiee. More at https://workshop.codes/third-person") {
    event {
        Ongoing - Global;
    }
}

rule ("Enable/disable third camera person") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Communicating(Event Player, Fall Back) == True;
    }
    actions {
        If(Compare((Event Player).isOnThirdCamera, ==, False));
            Set Player Variable(Event Player, isOnThirdCamera, True);
            Small Message(Event Player, Custom String("----- THIRD CAMERA PERSON ----- Made by Mitsiee. More at https://workshop.codes/third-person"));
        Else;
            Set Player Variable(Event Player, isOnThirdCamera, False);
            Stop Camera(Event Player);
    }
}

rule ("Initialise") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).isOnThirdCamera == True;
    }
    actions {
        Set Player Variable(Event Player, thirdCameraDirection, 1);
        Set Player Variable(Event Player, thirdCameraZoom, -2.5);
    }
}

rule ("Set Third Person") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Alive(Event Player) == True;
        And(Or(Or(Compare(Hero Of(Event Player), ==, Hero(Widowmaker)), Compare(Hero Of(Event Player), ==, Hero(Ashe))), Compare(Hero Of(Event Player), ==, Hero(Ana))), Is Button Held(Event Player, Button(Secondary Fire))) == False;
        (Event Player).isOnThirdCamera == True;
    }
    actions {
        Start Camera(Event Player, Ray Cast Hit Position(Eye Position(Event Player), Add(Add(Eye Position(Event Player), World Vector Of(Vector(Multiply((Event Player).thirdCameraDirection, Min(Divide((Event Player).thirdCameraZoom, 2.5), -0.75)), 0, 0), Event Player, Rotation)), Multiply(Facing Direction Of(Event Player), (Event Player).thirdCameraZoom)), All Players(All Teams), Event Player, False), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 200)), All Players(All Teams), Event Player, False), 60);
    }
}

rule ("Unset Third Person for specific conditions") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Or(Or(Compare(Hero Of(Event Player), ==, Hero(Widowmaker)), Compare(Hero Of(Event Player), ==, Hero(Ashe))), Compare(Hero Of(Event Player), ==, Hero(Ana))) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        (Event Player).isOnThirdCamera == True;
    }
    actions {
        Stop Camera(Event Player);
    }
}

rule ("Pressing Interact") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).isOnThirdCamera == True;
    }
    actions {
        If(Compare((Event Player).thirdCameraDirection, ==, -1));
            Set Player Variable(Event Player, thirdCameraDirection, 1);
        Else;
            Set Player Variable(Event Player, thirdCameraDirection, -1);
    }
}

rule ("----- TEST -----") {
    event {
        Ongoing - Global;
    }
}

rule ("Lobby with Dummies (TEST)") {
    event {
        Ongoing - Global;
    }
    conditions {
        "@Condition isInSetup() == true\n@Condition \"Jokaes\" == \"{0}\".format(hostPlayer) == true"
        Number Of Players(All Teams) < 2;
    }
    actions {
        Create Dummy Bot(Hero(Ashe), All Teams, -1, Vector(0, 0, 0), Vector(0, 0, 0));
        Loop If(Compare(Number Of Players(All Teams), <, 2));
    }
}

disabled rule ("Dummys Summon (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Communicating(Event Player, Hello) == True;
        Custom String("Jokaes") == Custom String("{0}", Host Player);
    }
    actions {
        Create Dummy Bot(Hero(Ashe), All Teams, -1, Position Of(Event Player), Vector(0, 0, 0));
    }
}

rule ("Dummy Aim Bot (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
    }
    actions {
        "@Condition \"Jokaes\" == \"{0}\".format(hostPlayer) == true"
        Start Facing(Event Player, Direction Towards(Event Player, Value In Array(Sorted Array(All Living Players(All Teams), Distance Between(Event Player, Current Array Element)), 1)), 10000, To World, Direction and Turn Rate);
        Start Holding Button(Event Player, Button(Ability 2));
        Start Holding Button(Event Player, Button(Ability 1));
        Start Holding Button(Event Player, Button(Secondary Fire));
        Start Holding Button(Event Player, Button(Primary Fire));
        Start Holding Button(Event Player, Button(Interact));
        Wait(Random Real(0.3, 1), Ignore Condition);
        Stop Holding Button(Event Player, Button(Interact));
        Stop Holding Button(Event Player, Button(Primary Fire));
        Stop Holding Button(Event Player, Button(Secondary Fire));
        Stop Holding Button(Event Player, Button(Ability 1));
        Stop Holding Button(Event Player, Button(Ability 2));
        Loop If Condition Is True;
    }
}

rule ("Dummy Ult (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Ultimate Charge Percent(Event Player) == 100;
    }
    actions {
        "@Condition \"Jokaes\" == \"{0}\".format(hostPlayer) == true"
        Press Button(Event Player, Button(Ultimate));
    }
}

rule ("Dummy Meele loop (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
    }
    actions {
        "@Condition \"Jokaes\" == \"{0}\".format(hostPlayer) == true"
        Start Facing(Event Player, Direction Towards(Event Player, Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player)))), 10000, To World, Direction and Turn Rate);
        Press Button(Event Player, Button(Melee));
        Wait(Random Real(0.25, 0.35), Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Dummy Moving (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
    }
    actions {
        "@Condition \"Jokaes\" == \"{0}\".format(hostPlayer) == true"
        Start Throttle In Direction(Event Player, Direction Towards(Event Player, Value In Array(Sorted Array(All Living Players(All Teams), Distance Between(Event Player, Current Array Element)), 1)), 1, To World, Replace existing throttle, Direction and Magnitude);
    }
}

disabled rule ("Skip round (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Custom String("Jokaes") == Custom String("{0}", Host Player);
        Custom String("Jokaes") == Custom String("{0}", Event Player);
    }
    actions {
        Set Global Variable(roundTimer, 1);
    }
}

rule ("Force dummy to be hero of the round (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Hero Of(Event Player) == Hero(Ashe);
    }
    actions {
        "@Condition \"Jokaes\" == \"{0}\".format(hostPlayer) == true"
        Start Forcing Player To Be Hero(Event Player, Global.heroOfTheRound);
    }
}

disabled rule ("Destroy the dummies (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Custom String("Jokaes") == Custom String("{0}", Host Player);
        Custom String("Jokaes") == Custom String("{0}", Event Player);
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
    }
    actions {
        Destroy All Dummy Bots;
    }
}

disabled rule ("Ray Cast Detector (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }
    actions {
        Create HUD Text(All Players(All Teams), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 200)), Null, All Players(All Teams), False), Null, Null, Left, 0, Color(White), Null, Null, Visible To, Default Visibility);
        Create Effect(Event Player, Orb, Color(Yellow), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 200)), Null, All Players(All Teams), False), 1, None);
        Create Beam Effect(All Players(All Teams), Good Beam, Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 200)), All Players(All Teams), All Players(All Teams), False), Color(Red), None);
    }
}

disabled rule ("Destroy all the HUD (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Is Button Held(Event Player, Button(Crouch)) == True;
    }
    actions {
        Destroy All HUD Text;
        Disable Game Mode HUD(Event Player);
        Disable Hero HUD(Event Player);
    }
}

disabled rule ("Debug HUDs (TEST)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Custom String("Jokaes") == Custom String("{0}", Host Player);
    }
    actions {
        Create HUD Text(Event Player, Custom String("{0} m/s", Horizontal Speed Of(Event Player)), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
    }
}

rule ("Created by Jokaes#2263") {
    event {
        Ongoing - Global;
    }
}

rule ("Code: W468T") {
    event {
        Ongoing - Global;
    }
}

