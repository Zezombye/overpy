{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "OverPy",
	"patterns": [
		{
			"include": "#numbers"
		},{
			"include": "#keywords"
		},{
			"include": "#labels"
		},{
			"include": "#strings"
		},{
			"include": "#comments"
		},{
			"include": "#string-comments-quotes"
		},{
			"include": "#string-comments-apos"
		},{
			"include": "#macros"
		},{
			"include": "#invalid"
		},{
			"include": "#enums"
		},{
			"include": "#classes"
		}
	],

	"//":"Note: two more colors are possible with 'unused function name' and 'unused variable name'.",

	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.overpy",
					"match": "\\b(if|else|elif|do|while|for|return|continue|false|true|null|goto|lambda|del|import)\\b"
				},{
					"name": "keyword.other.overpy",
					"match": "\\b(and|or|not|in)\\b|((\\+|\\-|\\*\\*|\\/|\\%|\\*|<|>)=?)|(\\=)|\\.|((min|max|\\!)\\=)"
				},{
					"name": "variable.other",
					"match": "\\b(eventPlayer|attacker|victim|eventDamage|eventHealing|eventWasCriticalHit|healee|healer|hostPlayer|loc|RULE_CONDITION|[A-Z])\\b"
				},{
					"name": "constant.numeric",
					"match": "\\@\\w+\\b"
				},{
					"name": "entity.name.function",
					"match": "(?<=\\@Event )\\w+\\b"
				},{
					"name": "entity.name.function",
					"match": "(?<=\\@Team )\\w+\\b"
				},{
					"name": "entity.name.function",
					"match": "(?<=\\@Slot )\\w+\\b"
				},{
					"name": "entity.name.function",
					"match": "(?<=\\@Hero )\\w+\\b"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "[+-]?(\\d*\\.)?\\d+"
				}
			]
		},
		"labels": {
			"patterns": [
				{
					"name": "support.class",
					"match": "^[ \\t]*(?!(do|else|elif))[A-Za-z\\d_]+(?=:)"
				},{
					"name": "support.class",
					"match": "(?<=goto )[A-Za-z\\d_]+"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.overpy",
			"begin": "\"(?!\"\")",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.overpy",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign",
					"match": "#[^!].*$"
				}
			]
		},
		"macros": {
			"name": "support.class",
			"begin": "#!",
			"end": "(?<!\\\\)\\n"
			
		},
		"string-comments-apos": {
			"begin": "'''",
			"end": "'''",
			"name": "comment.block"
		},
		"string-comments-quotes": {
			"begin": "\"\"\"",
			"end": "\"\"\"",
			"name": "comment.block"
		},
		"invalid": {
			"patterns": [
				{
					"name": "invalid.illegal",
					"match": "\\b(False|True|None|Null|class|finally|is|try|def|from|nonlocal|with|as|yield|assert|pass|break|except|raise)\\b"
				}
			]
		},
		"enums": {
			"patterns": [
				{
					"name": "entity.name.function",
					"match": "\\b[A-Z_\\d]+\\b"
				}
			]
		},
		"classes": {
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\b[A-Z][a-z_]\\w*\\b"
				}
			]
		}
	},
	"scopeName": "source.opy"
}